
Plexmat_4_VE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cb8  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  08018e88  08018e88  00011e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801956c  0801956c  000134c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801956c  0801956c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019574  08019574  000134c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019574  08019574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019578  08019578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004c0  20000000  0801957c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  200004c0  08019a3c  000134c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  08019a3c  00013a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000134c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019eff  00000000  00000000  000134f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040cc  00000000  00000000  0002d3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe6  00000000  00000000  00032960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027163  00000000  00000000  00033946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f748  00000000  00000000  0005aaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7f76  00000000  00000000  0007a1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152167  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba0  00000000  00000000  001521ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00158d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	200004c0 	.word	0x200004c0
 80081ec:	00000000 	.word	0x00000000
 80081f0:	08018e70 	.word	0x08018e70

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	200004c4 	.word	0x200004c4
 800820c:	08018e70 	.word	0x08018e70

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr
	...

08008230 <memchr>:
 8008230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008234:	2a10      	cmp	r2, #16
 8008236:	db2b      	blt.n	8008290 <memchr+0x60>
 8008238:	f010 0f07 	tst.w	r0, #7
 800823c:	d008      	beq.n	8008250 <memchr+0x20>
 800823e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008242:	3a01      	subs	r2, #1
 8008244:	428b      	cmp	r3, r1
 8008246:	d02d      	beq.n	80082a4 <memchr+0x74>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	b342      	cbz	r2, 80082a0 <memchr+0x70>
 800824e:	d1f6      	bne.n	800823e <memchr+0xe>
 8008250:	b4f0      	push	{r4, r5, r6, r7}
 8008252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800825a:	f022 0407 	bic.w	r4, r2, #7
 800825e:	f07f 0700 	mvns.w	r7, #0
 8008262:	2300      	movs	r3, #0
 8008264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008268:	3c08      	subs	r4, #8
 800826a:	ea85 0501 	eor.w	r5, r5, r1
 800826e:	ea86 0601 	eor.w	r6, r6, r1
 8008272:	fa85 f547 	uadd8	r5, r5, r7
 8008276:	faa3 f587 	sel	r5, r3, r7
 800827a:	fa86 f647 	uadd8	r6, r6, r7
 800827e:	faa5 f687 	sel	r6, r5, r7
 8008282:	b98e      	cbnz	r6, 80082a8 <memchr+0x78>
 8008284:	d1ee      	bne.n	8008264 <memchr+0x34>
 8008286:	bcf0      	pop	{r4, r5, r6, r7}
 8008288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800828c:	f002 0207 	and.w	r2, r2, #7
 8008290:	b132      	cbz	r2, 80082a0 <memchr+0x70>
 8008292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008296:	3a01      	subs	r2, #1
 8008298:	ea83 0301 	eor.w	r3, r3, r1
 800829c:	b113      	cbz	r3, 80082a4 <memchr+0x74>
 800829e:	d1f8      	bne.n	8008292 <memchr+0x62>
 80082a0:	2000      	movs	r0, #0
 80082a2:	4770      	bx	lr
 80082a4:	3801      	subs	r0, #1
 80082a6:	4770      	bx	lr
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	bf06      	itte	eq
 80082ac:	4635      	moveq	r5, r6
 80082ae:	3803      	subeq	r0, #3
 80082b0:	3807      	subne	r0, #7
 80082b2:	f015 0f01 	tst.w	r5, #1
 80082b6:	d107      	bne.n	80082c8 <memchr+0x98>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082be:	bf02      	ittt	eq
 80082c0:	3001      	addeq	r0, #1
 80082c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082c6:	3001      	addeq	r0, #1
 80082c8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ca:	3801      	subs	r0, #1
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <strlen>:
 80082d0:	4603      	mov	r3, r0
 80082d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1fb      	bne.n	80082d2 <strlen+0x2>
 80082da:	1a18      	subs	r0, r3, r0
 80082dc:	3801      	subs	r0, #1
 80082de:	4770      	bx	lr

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_d2f>:
 8008c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8008c50:	bf24      	itt	cs
 8008c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8008c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8008c5a:	d90d      	bls.n	8008c78 <__aeabi_d2f+0x30>
 8008c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8008c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008c70:	bf08      	it	eq
 8008c72:	f020 0001 	biceq.w	r0, r0, #1
 8008c76:	4770      	bx	lr
 8008c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008c7c:	d121      	bne.n	8008cc2 <__aeabi_d2f+0x7a>
 8008c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8008c82:	bfbc      	itt	lt
 8008c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008c88:	4770      	bxlt	lr
 8008c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008c92:	f1c2 0218 	rsb	r2, r2, #24
 8008c96:	f1c2 0c20 	rsb	ip, r2, #32
 8008c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8008ca2:	bf18      	it	ne
 8008ca4:	f040 0001 	orrne.w	r0, r0, #1
 8008ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008cb4:	ea40 000c 	orr.w	r0, r0, ip
 8008cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8008cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cc0:	e7cc      	b.n	8008c5c <__aeabi_d2f+0x14>
 8008cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008cc6:	d107      	bne.n	8008cd8 <__aeabi_d2f+0x90>
 8008cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008ccc:	bf1e      	ittt	ne
 8008cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8008cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8008cd6:	4770      	bxne	lr
 8008cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8008cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8008ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop

08008ce8 <__aeabi_uldivmod>:
 8008ce8:	b953      	cbnz	r3, 8008d00 <__aeabi_uldivmod+0x18>
 8008cea:	b94a      	cbnz	r2, 8008d00 <__aeabi_uldivmod+0x18>
 8008cec:	2900      	cmp	r1, #0
 8008cee:	bf08      	it	eq
 8008cf0:	2800      	cmpeq	r0, #0
 8008cf2:	bf1c      	itt	ne
 8008cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8008cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8008cfc:	f000 b9be 	b.w	800907c <__aeabi_idiv0>
 8008d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8008d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008d08:	f000 f83c 	bl	8008d84 <__udivmoddi4>
 8008d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d14:	b004      	add	sp, #16
 8008d16:	4770      	bx	lr

08008d18 <__aeabi_d2lz>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4604      	mov	r4, r0
 8008d20:	460d      	mov	r5, r1
 8008d22:	f7ff ff0b 	bl	8008b3c <__aeabi_dcmplt>
 8008d26:	b928      	cbnz	r0, 8008d34 <__aeabi_d2lz+0x1c>
 8008d28:	4620      	mov	r0, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d30:	f000 b80a 	b.w	8008d48 <__aeabi_d2ulz>
 8008d34:	4620      	mov	r0, r4
 8008d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008d3a:	f000 f805 	bl	8008d48 <__aeabi_d2ulz>
 8008d3e:	4240      	negs	r0, r0
 8008d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008d44:	bd38      	pop	{r3, r4, r5, pc}
 8008d46:	bf00      	nop

08008d48 <__aeabi_d2ulz>:
 8008d48:	b5d0      	push	{r4, r6, r7, lr}
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d7c <__aeabi_d2ulz+0x34>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4606      	mov	r6, r0
 8008d50:	460f      	mov	r7, r1
 8008d52:	f7ff fc81 	bl	8008658 <__aeabi_dmul>
 8008d56:	f7ff ff57 	bl	8008c08 <__aeabi_d2uiz>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	f7ff fc02 	bl	8008564 <__aeabi_ui2d>
 8008d60:	4b07      	ldr	r3, [pc, #28]	@ (8008d80 <__aeabi_d2ulz+0x38>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	f7ff fc78 	bl	8008658 <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7ff faba 	bl	80082e8 <__aeabi_dsub>
 8008d74:	f7ff ff48 	bl	8008c08 <__aeabi_d2uiz>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8008d7c:	3df00000 	.word	0x3df00000
 8008d80:	41f00000 	.word	0x41f00000

08008d84 <__udivmoddi4>:
 8008d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d88:	9d08      	ldr	r5, [sp, #32]
 8008d8a:	468e      	mov	lr, r1
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	4688      	mov	r8, r1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d14a      	bne.n	8008e2a <__udivmoddi4+0xa6>
 8008d94:	428a      	cmp	r2, r1
 8008d96:	4617      	mov	r7, r2
 8008d98:	d962      	bls.n	8008e60 <__udivmoddi4+0xdc>
 8008d9a:	fab2 f682 	clz	r6, r2
 8008d9e:	b14e      	cbz	r6, 8008db4 <__udivmoddi4+0x30>
 8008da0:	f1c6 0320 	rsb	r3, r6, #32
 8008da4:	fa01 f806 	lsl.w	r8, r1, r6
 8008da8:	fa20 f303 	lsr.w	r3, r0, r3
 8008dac:	40b7      	lsls	r7, r6
 8008dae:	ea43 0808 	orr.w	r8, r3, r8
 8008db2:	40b4      	lsls	r4, r6
 8008db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008db8:	fa1f fc87 	uxth.w	ip, r7
 8008dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8008dc0:	0c23      	lsrs	r3, r4, #16
 8008dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8008dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008dca:	fb01 f20c 	mul.w	r2, r1, ip
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d909      	bls.n	8008de6 <__udivmoddi4+0x62>
 8008dd2:	18fb      	adds	r3, r7, r3
 8008dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8008dd8:	f080 80ea 	bcs.w	8008fb0 <__udivmoddi4+0x22c>
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	f240 80e7 	bls.w	8008fb0 <__udivmoddi4+0x22c>
 8008de2:	3902      	subs	r1, #2
 8008de4:	443b      	add	r3, r7
 8008de6:	1a9a      	subs	r2, r3, r2
 8008de8:	b2a3      	uxth	r3, r4
 8008dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8008dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8008df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8008dfa:	459c      	cmp	ip, r3
 8008dfc:	d909      	bls.n	8008e12 <__udivmoddi4+0x8e>
 8008dfe:	18fb      	adds	r3, r7, r3
 8008e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8008e04:	f080 80d6 	bcs.w	8008fb4 <__udivmoddi4+0x230>
 8008e08:	459c      	cmp	ip, r3
 8008e0a:	f240 80d3 	bls.w	8008fb4 <__udivmoddi4+0x230>
 8008e0e:	443b      	add	r3, r7
 8008e10:	3802      	subs	r0, #2
 8008e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008e16:	eba3 030c 	sub.w	r3, r3, ip
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	b11d      	cbz	r5, 8008e26 <__udivmoddi4+0xa2>
 8008e1e:	40f3      	lsrs	r3, r6
 8008e20:	2200      	movs	r2, #0
 8008e22:	e9c5 3200 	strd	r3, r2, [r5]
 8008e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2a:	428b      	cmp	r3, r1
 8008e2c:	d905      	bls.n	8008e3a <__udivmoddi4+0xb6>
 8008e2e:	b10d      	cbz	r5, 8008e34 <__udivmoddi4+0xb0>
 8008e30:	e9c5 0100 	strd	r0, r1, [r5]
 8008e34:	2100      	movs	r1, #0
 8008e36:	4608      	mov	r0, r1
 8008e38:	e7f5      	b.n	8008e26 <__udivmoddi4+0xa2>
 8008e3a:	fab3 f183 	clz	r1, r3
 8008e3e:	2900      	cmp	r1, #0
 8008e40:	d146      	bne.n	8008ed0 <__udivmoddi4+0x14c>
 8008e42:	4573      	cmp	r3, lr
 8008e44:	d302      	bcc.n	8008e4c <__udivmoddi4+0xc8>
 8008e46:	4282      	cmp	r2, r0
 8008e48:	f200 8105 	bhi.w	8009056 <__udivmoddi4+0x2d2>
 8008e4c:	1a84      	subs	r4, r0, r2
 8008e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8008e52:	2001      	movs	r0, #1
 8008e54:	4690      	mov	r8, r2
 8008e56:	2d00      	cmp	r5, #0
 8008e58:	d0e5      	beq.n	8008e26 <__udivmoddi4+0xa2>
 8008e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8008e5e:	e7e2      	b.n	8008e26 <__udivmoddi4+0xa2>
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	f000 8090 	beq.w	8008f86 <__udivmoddi4+0x202>
 8008e66:	fab2 f682 	clz	r6, r2
 8008e6a:	2e00      	cmp	r6, #0
 8008e6c:	f040 80a4 	bne.w	8008fb8 <__udivmoddi4+0x234>
 8008e70:	1a8a      	subs	r2, r1, r2
 8008e72:	0c03      	lsrs	r3, r0, #16
 8008e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008e78:	b280      	uxth	r0, r0
 8008e7a:	b2bc      	uxth	r4, r7
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8008e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8008e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d907      	bls.n	8008ea2 <__udivmoddi4+0x11e>
 8008e92:	18fb      	adds	r3, r7, r3
 8008e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008e98:	d202      	bcs.n	8008ea0 <__udivmoddi4+0x11c>
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	f200 80e0 	bhi.w	8009060 <__udivmoddi4+0x2dc>
 8008ea0:	46c4      	mov	ip, r8
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8008ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8008eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008eb0:	fb02 f404 	mul.w	r4, r2, r4
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	d907      	bls.n	8008ec8 <__udivmoddi4+0x144>
 8008eb8:	18fb      	adds	r3, r7, r3
 8008eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8008ebe:	d202      	bcs.n	8008ec6 <__udivmoddi4+0x142>
 8008ec0:	429c      	cmp	r4, r3
 8008ec2:	f200 80ca 	bhi.w	800905a <__udivmoddi4+0x2d6>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	1b1b      	subs	r3, r3, r4
 8008eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008ece:	e7a5      	b.n	8008e1c <__udivmoddi4+0x98>
 8008ed0:	f1c1 0620 	rsb	r6, r1, #32
 8008ed4:	408b      	lsls	r3, r1
 8008ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8008eda:	431f      	orrs	r7, r3
 8008edc:	fa0e f401 	lsl.w	r4, lr, r1
 8008ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8008ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8008ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008eec:	4323      	orrs	r3, r4
 8008eee:	fa00 f801 	lsl.w	r8, r0, r1
 8008ef2:	fa1f fc87 	uxth.w	ip, r7
 8008ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8008efa:	0c1c      	lsrs	r4, r3, #16
 8008efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8008f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8008f08:	45a6      	cmp	lr, r4
 8008f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8008f0e:	d909      	bls.n	8008f24 <__udivmoddi4+0x1a0>
 8008f10:	193c      	adds	r4, r7, r4
 8008f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8008f16:	f080 809c 	bcs.w	8009052 <__udivmoddi4+0x2ce>
 8008f1a:	45a6      	cmp	lr, r4
 8008f1c:	f240 8099 	bls.w	8009052 <__udivmoddi4+0x2ce>
 8008f20:	3802      	subs	r0, #2
 8008f22:	443c      	add	r4, r7
 8008f24:	eba4 040e 	sub.w	r4, r4, lr
 8008f28:	fa1f fe83 	uxth.w	lr, r3
 8008f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008f30:	fb09 4413 	mls	r4, r9, r3, r4
 8008f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8008f3c:	45a4      	cmp	ip, r4
 8008f3e:	d908      	bls.n	8008f52 <__udivmoddi4+0x1ce>
 8008f40:	193c      	adds	r4, r7, r4
 8008f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8008f46:	f080 8082 	bcs.w	800904e <__udivmoddi4+0x2ca>
 8008f4a:	45a4      	cmp	ip, r4
 8008f4c:	d97f      	bls.n	800904e <__udivmoddi4+0x2ca>
 8008f4e:	3b02      	subs	r3, #2
 8008f50:	443c      	add	r4, r7
 8008f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008f56:	eba4 040c 	sub.w	r4, r4, ip
 8008f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8008f5e:	4564      	cmp	r4, ip
 8008f60:	4673      	mov	r3, lr
 8008f62:	46e1      	mov	r9, ip
 8008f64:	d362      	bcc.n	800902c <__udivmoddi4+0x2a8>
 8008f66:	d05f      	beq.n	8009028 <__udivmoddi4+0x2a4>
 8008f68:	b15d      	cbz	r5, 8008f82 <__udivmoddi4+0x1fe>
 8008f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8008f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8008f72:	fa04 f606 	lsl.w	r6, r4, r6
 8008f76:	fa22 f301 	lsr.w	r3, r2, r1
 8008f7a:	431e      	orrs	r6, r3
 8008f7c:	40cc      	lsrs	r4, r1
 8008f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8008f82:	2100      	movs	r1, #0
 8008f84:	e74f      	b.n	8008e26 <__udivmoddi4+0xa2>
 8008f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8008f8a:	0c01      	lsrs	r1, r0, #16
 8008f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008f90:	b280      	uxth	r0, r0
 8008f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008f96:	463b      	mov	r3, r7
 8008f98:	4638      	mov	r0, r7
 8008f9a:	463c      	mov	r4, r7
 8008f9c:	46b8      	mov	r8, r7
 8008f9e:	46be      	mov	lr, r7
 8008fa0:	2620      	movs	r6, #32
 8008fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8008fa6:	eba2 0208 	sub.w	r2, r2, r8
 8008faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008fae:	e766      	b.n	8008e7e <__udivmoddi4+0xfa>
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	e718      	b.n	8008de6 <__udivmoddi4+0x62>
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	e72c      	b.n	8008e12 <__udivmoddi4+0x8e>
 8008fb8:	f1c6 0220 	rsb	r2, r6, #32
 8008fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8008fc0:	40b7      	lsls	r7, r6
 8008fc2:	40b1      	lsls	r1, r6
 8008fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8008fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8008fd2:	b2bc      	uxth	r4, r7
 8008fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8008fd8:	0c11      	lsrs	r1, r2, #16
 8008fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008fde:	fb08 f904 	mul.w	r9, r8, r4
 8008fe2:	40b0      	lsls	r0, r6
 8008fe4:	4589      	cmp	r9, r1
 8008fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008fea:	b280      	uxth	r0, r0
 8008fec:	d93e      	bls.n	800906c <__udivmoddi4+0x2e8>
 8008fee:	1879      	adds	r1, r7, r1
 8008ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8008ff4:	d201      	bcs.n	8008ffa <__udivmoddi4+0x276>
 8008ff6:	4589      	cmp	r9, r1
 8008ff8:	d81f      	bhi.n	800903a <__udivmoddi4+0x2b6>
 8008ffa:	eba1 0109 	sub.w	r1, r1, r9
 8008ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8009002:	fb09 f804 	mul.w	r8, r9, r4
 8009006:	fb0e 1119 	mls	r1, lr, r9, r1
 800900a:	b292      	uxth	r2, r2
 800900c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009010:	4542      	cmp	r2, r8
 8009012:	d229      	bcs.n	8009068 <__udivmoddi4+0x2e4>
 8009014:	18ba      	adds	r2, r7, r2
 8009016:	f109 31ff 	add.w	r1, r9, #4294967295
 800901a:	d2c4      	bcs.n	8008fa6 <__udivmoddi4+0x222>
 800901c:	4542      	cmp	r2, r8
 800901e:	d2c2      	bcs.n	8008fa6 <__udivmoddi4+0x222>
 8009020:	f1a9 0102 	sub.w	r1, r9, #2
 8009024:	443a      	add	r2, r7
 8009026:	e7be      	b.n	8008fa6 <__udivmoddi4+0x222>
 8009028:	45f0      	cmp	r8, lr
 800902a:	d29d      	bcs.n	8008f68 <__udivmoddi4+0x1e4>
 800902c:	ebbe 0302 	subs.w	r3, lr, r2
 8009030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8009034:	3801      	subs	r0, #1
 8009036:	46e1      	mov	r9, ip
 8009038:	e796      	b.n	8008f68 <__udivmoddi4+0x1e4>
 800903a:	eba7 0909 	sub.w	r9, r7, r9
 800903e:	4449      	add	r1, r9
 8009040:	f1a8 0c02 	sub.w	ip, r8, #2
 8009044:	fbb1 f9fe 	udiv	r9, r1, lr
 8009048:	fb09 f804 	mul.w	r8, r9, r4
 800904c:	e7db      	b.n	8009006 <__udivmoddi4+0x282>
 800904e:	4673      	mov	r3, lr
 8009050:	e77f      	b.n	8008f52 <__udivmoddi4+0x1ce>
 8009052:	4650      	mov	r0, sl
 8009054:	e766      	b.n	8008f24 <__udivmoddi4+0x1a0>
 8009056:	4608      	mov	r0, r1
 8009058:	e6fd      	b.n	8008e56 <__udivmoddi4+0xd2>
 800905a:	443b      	add	r3, r7
 800905c:	3a02      	subs	r2, #2
 800905e:	e733      	b.n	8008ec8 <__udivmoddi4+0x144>
 8009060:	f1ac 0c02 	sub.w	ip, ip, #2
 8009064:	443b      	add	r3, r7
 8009066:	e71c      	b.n	8008ea2 <__udivmoddi4+0x11e>
 8009068:	4649      	mov	r1, r9
 800906a:	e79c      	b.n	8008fa6 <__udivmoddi4+0x222>
 800906c:	eba1 0109 	sub.w	r1, r1, r9
 8009070:	46c4      	mov	ip, r8
 8009072:	fbb1 f9fe 	udiv	r9, r1, lr
 8009076:	fb09 f804 	mul.w	r8, r9, r4
 800907a:	e7c4      	b.n	8009006 <__udivmoddi4+0x282>

0800907c <__aeabi_idiv0>:
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop

08009080 <Read_Average_Frequency>:
    	   return average; // Return the computed average frequency

    }
*/
uint32_t Read_Average_Frequency(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
    // For now just a single read, add averaging/filter as needed
    return read_frequency_tim3();
 8009084:	f000 f804 	bl	8009090 <read_frequency_tim3>
 8009088:	4603      	mov	r3, r0
}
 800908a:	4618      	mov	r0, r3
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <read_frequency_tim3>:
// --- Frequency reading function using TIM3 external clock ---
uint32_t read_frequency_tim3(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08a      	sub	sp, #40	@ 0x28
 8009094:	af00      	add	r7, sp, #0
    uint32_t start_cnt, end_cnt, start_ovf, end_ovf;
    uint32_t count_diff, ovf_diff, pulses_measured;
    uint32_t freq;
    uint32_t start_time = HAL_GetTick();
 8009096:	f005 ffdf 	bl	800f058 <HAL_GetTick>
 800909a:	61f8      	str	r0, [r7, #28]

    __HAL_TIM_SET_COUNTER(&htim3, 0);
 800909c:	4b27      	ldr	r3, [pc, #156]	@ (800913c <read_frequency_tim3+0xac>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2200      	movs	r2, #0
 80090a2:	625a      	str	r2, [r3, #36]	@ 0x24
    tim3_overflow = 0;
 80090a4:	4b26      	ldr	r3, [pc, #152]	@ (8009140 <read_frequency_tim3+0xb0>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	601a      	str	r2, [r3, #0]

    HAL_TIM_Base_Start_IT(&htim3);
 80090aa:	4824      	ldr	r0, [pc, #144]	@ (800913c <read_frequency_tim3+0xac>)
 80090ac:	f008 fbf8 	bl	80118a0 <HAL_TIM_Base_Start_IT>
    start_cnt = __HAL_TIM_GET_COUNTER(&htim3);
 80090b0:	4b22      	ldr	r3, [pc, #136]	@ (800913c <read_frequency_tim3+0xac>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b6:	61bb      	str	r3, [r7, #24]
    start_ovf = tim3_overflow;
 80090b8:	4b21      	ldr	r3, [pc, #132]	@ (8009140 <read_frequency_tim3+0xb0>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	617b      	str	r3, [r7, #20]

    // Non-blocking wait loop for gate time
    while ((HAL_GetTick() - start_time) < GATE_TIME_MS)
 80090be:	bf00      	nop
 80090c0:	f005 ffca 	bl	800f058 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	d9f8      	bls.n	80090c0 <read_frequency_tim3+0x30>
    {
        // MCU can do other tasks here
    }

    end_cnt = __HAL_TIM_GET_COUNTER(&htim3);
 80090ce:	4b1b      	ldr	r3, [pc, #108]	@ (800913c <read_frequency_tim3+0xac>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d4:	613b      	str	r3, [r7, #16]
    end_ovf = tim3_overflow;
 80090d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009140 <read_frequency_tim3+0xb0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]

    HAL_TIM_Base_Stop_IT(&htim3);
 80090dc:	4817      	ldr	r0, [pc, #92]	@ (800913c <read_frequency_tim3+0xac>)
 80090de:	f008 fc4f 	bl	8011980 <HAL_TIM_Base_Stop_IT>

    ovf_diff = end_ovf - start_ovf;
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	623b      	str	r3, [r7, #32]

    if (end_cnt >= start_cnt)
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d304      	bcc.n	80090fc <read_frequency_tim3+0x6c>
        count_diff = end_cnt - start_cnt;
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090fa:	e00b      	b.n	8009114 <read_frequency_tim3+0x84>
    else
    {
        count_diff = (65536 - start_cnt) + end_cnt;
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
        if (ovf_diff > 0) ovf_diff--;
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <read_frequency_tim3+0x84>
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	3b01      	subs	r3, #1
 8009112:	623b      	str	r3, [r7, #32]
    }

    pulses_measured = (ovf_diff * 65536U) + count_diff;
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	041b      	lsls	r3, r3, #16
 8009118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800911a:	4413      	add	r3, r2
 800911c:	60bb      	str	r3, [r7, #8]

    freq = (pulses_measured * 1000U) / GATE_TIME_MS;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009124:	fb02 f303 	mul.w	r3, r2, r3
 8009128:	4a06      	ldr	r2, [pc, #24]	@ (8009144 <read_frequency_tim3+0xb4>)
 800912a:	fba2 2303 	umull	r2, r3, r2, r3
 800912e:	08db      	lsrs	r3, r3, #3
 8009130:	607b      	str	r3, [r7, #4]
    return freq;
 8009132:	687b      	ldr	r3, [r7, #4]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3728      	adds	r7, #40	@ 0x28
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	200005d8 	.word	0x200005d8
 8009140:	200005d4 	.word	0x200005d4
 8009144:	cccccccd 	.word	0xcccccccd

08009148 <Move_And_Monitor_Frequency>:




void Move_And_Monitor_Frequency(uint32_t Maximum_Distance)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b0ae      	sub	sp, #184	@ 0xb8
 800914c:	af02      	add	r7, sp, #8
 800914e:	6078      	str	r0, [r7, #4]
    char msg[128];
    int32_t freq_diff = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    // Reset and start probe motor
    pulse_count = 0;
 8009156:	4b60      	ldr	r3, [pc, #384]	@ (80092d8 <Move_And_Monitor_Frequency+0x190>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
    Probe_Motor_Dir_Clk;
 800915c:	2201      	movs	r2, #1
 800915e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009162:	485e      	ldr	r0, [pc, #376]	@ (80092dc <Move_And_Monitor_Frequency+0x194>)
 8009164:	f006 fbec 	bl	800f940 <HAL_GPIO_WritePin>
    Probe_Motor_En;
 8009168:	2200      	movs	r2, #0
 800916a:	2102      	movs	r1, #2
 800916c:	485c      	ldr	r0, [pc, #368]	@ (80092e0 <Move_And_Monitor_Frequency+0x198>)
 800916e:	f006 fbe7 	bl	800f940 <HAL_GPIO_WritePin>
    Start_PWM(PROBE_TIMER, PROBE_TIMER_CHANNEL,
 8009172:	2300      	movs	r3, #0
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	2332      	movs	r3, #50	@ 0x32
 8009178:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800917c:	2100      	movs	r1, #0
 800917e:	4859      	ldr	r0, [pc, #356]	@ (80092e4 <Move_And_Monitor_Frequency+0x19c>)
 8009180:	f005 face 	bl	800e720 <Start_PWM>
              Z_Probe_motor_speed_Frq_Check, 50, 0);

    // Timing tracker
    uint32_t last_sample_time = HAL_GetTick();
 8009184:	f005 ff68 	bl	800f058 <HAL_GetTick>
 8009188:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

    // Frequency variables
    uint32_t avg_freq            = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    uint32_t prev_freq           = Read_Average_Frequency();
 8009192:	f7ff ff75 	bl	8009080 <Read_Average_Frequency>
 8009196:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    uint8_t  consecutive_breaches = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Buffers for storing frequencies and deltas at each sample
    uint32_t *freq_log = malloc(MAX_STORE_ENTRIES * sizeof(uint32_t));
 80091a0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80091a4:	f00a fe40 	bl	8013e28 <malloc>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int32_t  *diff_log = malloc(MAX_STORE_ENTRIES * sizeof(int32_t));
 80091ae:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80091b2:	f00a fe39 	bl	8013e28 <malloc>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint32_t store_index = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    while (pulse_count < Maximum_Distance)
 80091c2:	e06d      	b.n	80092a0 <Move_And_Monitor_Frequency+0x158>
    {
        // External error check
        if (strcmp(Error, "00") != 0)
 80091c4:	4b48      	ldr	r3, [pc, #288]	@ (80092e8 <Move_And_Monitor_Frequency+0x1a0>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4948      	ldr	r1, [pc, #288]	@ (80092ec <Move_And_Monitor_Frequency+0x1a4>)
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff f820 	bl	8008210 <strcmp>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <Move_And_Monitor_Frequency+0x94>
        {
            Stop_Z_Probe_Motor();
 80091d6:	f000 fa9b 	bl	8009710 <Stop_Z_Probe_Motor>
   //        Probe_Motor_Dis;
  //          DEBUG_PRINT("Error reported, stopping.\r\n");
            break;
 80091da:	e066      	b.n	80092aa <Move_And_Monitor_Frequency+0x162>
        }

        uint32_t now = HAL_GetTick();
 80091dc:	f005 ff3c 	bl	800f058 <HAL_GetTick>
 80091e0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

        // Perform sampling and logging every SAMPLE_INTERVAL_MS
        if ((now - last_sample_time) >= SAMPLE_INTERVAL_MS)
 80091e4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80091e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	2b07      	cmp	r3, #7
 80091f0:	d956      	bls.n	80092a0 <Move_And_Monitor_Frequency+0x158>
        {
            last_sample_time = now;
 80091f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

            // Read current frequency
            avg_freq = Read_Average_Frequency();
 80091fa:	f7ff ff41 	bl	8009080 <Read_Average_Frequency>
 80091fe:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
            freq_diff = (int32_t)avg_freq - (int32_t)prev_freq;
 8009202:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

            // Log frequency and diff
            if (store_index < MAX_STORE_ENTRIES)
 8009210:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009214:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009218:	d216      	bcs.n	8009248 <Move_And_Monitor_Frequency+0x100>
            {
                freq_log[store_index] = avg_freq;
 800921a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009224:	4413      	add	r3, r2
 8009226:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800922a:	601a      	str	r2, [r3, #0]
                diff_log[store_index] = freq_diff;
 800922c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8009236:	4413      	add	r3, r2
 8009238:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800923c:	601a      	str	r2, [r3, #0]
                store_index++;
 800923e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009242:	3301      	adds	r3, #1
 8009244:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }

            // Bubble detection: 3 consecutive breaches
            if (abs(freq_diff) > LIQUID_DETECTION_THRESHOLD)
 8009248:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfb8      	it	lt
 8009250:	425b      	neglt	r3, r3
 8009252:	4a27      	ldr	r2, [pc, #156]	@ (80092f0 <Move_And_Monitor_Frequency+0x1a8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	dd05      	ble.n	8009264 <Move_And_Monitor_Frequency+0x11c>
            {
                consecutive_breaches++;
 8009258:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800925c:	3301      	adds	r3, #1
 800925e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8009262:	e002      	b.n	800926a <Move_And_Monitor_Frequency+0x122>
            }
            else
            {
                consecutive_breaches = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
            }

            if (consecutive_breaches >= 3)
 800926a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800926e:	2b02      	cmp	r3, #2
 8009270:	d902      	bls.n	8009278 <Move_And_Monitor_Frequency+0x130>
            {
                Stop_Z_Probe_Motor();
 8009272:	f000 fa4d 	bl	8009710 <Stop_Z_Probe_Motor>
   //             Probe_Motor_Dis;
  //              snprintf(msg, sizeof(msg),
   //                      "fluid detected at pulse %lu\r\n", pulse_count);
  //              DEBUG_PRINT(msg);
                break;
 8009276:	e018      	b.n	80092aa <Move_And_Monitor_Frequency+0x162>
            }

            // Update prev_freq every 5 pulses
            if ((store_index % 5) == 0 && (consecutive_breaches == 0))
 8009278:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800927c:	4b1d      	ldr	r3, [pc, #116]	@ (80092f4 <Move_And_Monitor_Frequency+0x1ac>)
 800927e:	fba3 2301 	umull	r2, r3, r3, r1
 8009282:	089a      	lsrs	r2, r3, #2
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	1aca      	subs	r2, r1, r3
 800928c:	2a00      	cmp	r2, #0
 800928e:	d107      	bne.n	80092a0 <Move_And_Monitor_Frequency+0x158>
 8009290:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009294:	2b00      	cmp	r3, #0
 8009296:	d103      	bne.n	80092a0 <Move_And_Monitor_Frequency+0x158>
            {
                prev_freq = avg_freq;
 8009298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800929c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    while (pulse_count < Maximum_Distance)
 80092a0:	4b0d      	ldr	r3, [pc, #52]	@ (80092d8 <Move_And_Monitor_Frequency+0x190>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d88c      	bhi.n	80091c4 <Move_And_Monitor_Frequency+0x7c>
            }
        }
    }

    // Ensure motor is stopped
    Stop_Z_Probe_Motor();
 80092aa:	f000 fa31 	bl	8009710 <Stop_Z_Probe_Motor>
        snprintf(msg, sizeof(msg),
                 "Log[%lu]: Freq=%lu Hz, Δf=%ld Hz\r\n",
                 i, freq_log[i], diff_log[i]);
        DEBUG_PRINT(msg);
    }*/
    if(pulse_count>=Maximum_Distance)
 80092ae:	4b0a      	ldr	r3, [pc, #40]	@ (80092d8 <Move_And_Monitor_Frequency+0x190>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d802      	bhi.n	80092be <Move_And_Monitor_Frequency+0x176>
	{
//		snprintf(msg, sizeof(msg),
//				"Max distance reached: %lu pulses, no fluid detected\r\n", pulse_count);
//		DEBUG_PRINT(msg);
    	Error="Q";
 80092b8:	4b0b      	ldr	r3, [pc, #44]	@ (80092e8 <Move_And_Monitor_Frequency+0x1a0>)
 80092ba:	4a0f      	ldr	r2, [pc, #60]	@ (80092f8 <Move_And_Monitor_Frequency+0x1b0>)
 80092bc:	601a      	str	r2, [r3, #0]
	}

    free(freq_log);
 80092be:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80092c2:	f00a fdb9 	bl	8013e38 <free>
    free(diff_log);
 80092c6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80092ca:	f00a fdb5 	bl	8013e38 <free>
}
 80092ce:	bf00      	nop
 80092d0:	37b0      	adds	r7, #176	@ 0xb0
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	200005cc 	.word	0x200005cc
 80092dc:	40020400 	.word	0x40020400
 80092e0:	40021000 	.word	0x40021000
 80092e4:	20000740 	.word	0x20000740
 80092e8:	20000014 	.word	0x20000014
 80092ec:	08018e88 	.word	0x08018e88
 80092f0:	00011170 	.word	0x00011170
 80092f4:	cccccccd 	.word	0xcccccccd
 80092f8:	08018e8c 	.word	0x08018e8c

080092fc <Start_Z_Nozzle_Motor>:
 extern char *Error;
unsigned int  Z_Nozzle_motor_speed=1000;
unsigned int  Z_Nozzle_pulses=0;

void Start_Z_Nozzle_Motor()
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af02      	add	r7, sp, #8

	 Start_PWM(NOZZLE_TIMER, NOZZLE_TIMER_CHANNEL, Z_Nozzle_motor_speed, 50, Z_Nozzle_pulses);  // 1kHz, 50% duty, 500 pulses
 8009302:	4b06      	ldr	r3, [pc, #24]	@ (800931c <Start_Z_Nozzle_Motor+0x20>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	4b06      	ldr	r3, [pc, #24]	@ (8009320 <Start_Z_Nozzle_Motor+0x24>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	2332      	movs	r3, #50	@ 0x32
 800930e:	2100      	movs	r1, #0
 8009310:	4804      	ldr	r0, [pc, #16]	@ (8009324 <Start_Z_Nozzle_Motor+0x28>)
 8009312:	f005 fa05 	bl	800e720 <Start_PWM>

}
 8009316:	bf00      	nop
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000000 	.word	0x20000000
 8009320:	200004dc 	.word	0x200004dc
 8009324:	20000740 	.word	0x20000740

08009328 <Stop_Z_Nozzle_Motor>:
void Stop_Z_Nozzle_Motor()
{
 8009328:	b580      	push	{r7, lr}
 800932a:	af00      	add	r7, sp, #0
//	Stop_PWM(NOZZLE_TIMER, NOZZLE_TIMER_CHANNEL);

	 HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
 800932c:	2100      	movs	r1, #0
 800932e:	4804      	ldr	r0, [pc, #16]	@ (8009340 <Stop_Z_Nozzle_Motor+0x18>)
 8009330:	f008 fc76 	bl	8011c20 <HAL_TIM_PWM_Stop>
	    HAL_TIM_Base_Stop_IT(&htim11); // Stop interrupt
 8009334:	4802      	ldr	r0, [pc, #8]	@ (8009340 <Stop_Z_Nozzle_Motor+0x18>)
 8009336:	f008 fb23 	bl	8011980 <HAL_TIM_Base_Stop_IT>

}
 800933a:	bf00      	nop
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000740 	.word	0x20000740

08009344 <Home_Z_Nozzle_Motor>:
void Home_Z_Nozzle_Motor(uint32_t Maximum_Pulses)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	      pulse_count=0;
 800934c:	4b45      	ldr	r3, [pc, #276]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
		  int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
 8009352:	2300      	movs	r3, #0
 8009354:	60fb      	str	r3, [r7, #12]
		  Probe_Motor_Dir_Clk;
 8009356:	2201      	movs	r2, #1
 8009358:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800935c:	4842      	ldr	r0, [pc, #264]	@ (8009468 <Home_Z_Nozzle_Motor+0x124>)
 800935e:	f006 faef 	bl	800f940 <HAL_GPIO_WritePin>
		  Probe_Motor_En;
 8009362:	2200      	movs	r2, #0
 8009364:	2102      	movs	r1, #2
 8009366:	4841      	ldr	r0, [pc, #260]	@ (800946c <Home_Z_Nozzle_Motor+0x128>)
 8009368:	f006 faea 	bl	800f940 <HAL_GPIO_WritePin>
//		 if(Sensor_Read(Z_Home_Sensor))
	//	 {
		  if(!Sensor_Read(Z_Home_Sensor))	 // If already it is at Z home do not move
 800936c:	4b40      	ldr	r3, [pc, #256]	@ (8009470 <Home_Z_Nozzle_Motor+0x12c>)
 800936e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009372:	f004 fb73 	bl	800da5c <Sensor_Read>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d12c      	bne.n	80093d6 <Home_Z_Nozzle_Motor+0x92>
		   {
			  Start_Z_Nozzle_Motor()  ;// 1kHz, 50% duty, 500 pulses
 800937c:	f7ff ffbe 	bl	80092fc <Start_Z_Nozzle_Motor>
			   while(pulse_count<=Maximum_Pulses )
 8009380:	e022      	b.n	80093c8 <Home_Z_Nozzle_Motor+0x84>
			   {
					if(Sensor_Read(Z_Home_Sensor)) // After 3 pulses if it is reached Z home, do not give further pusles
 8009382:	4b3b      	ldr	r3, [pc, #236]	@ (8009470 <Home_Z_Nozzle_Motor+0x12c>)
 8009384:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009388:	f004 fb68 	bl	800da5c <Sensor_Read>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <Home_Z_Nozzle_Motor+0x54>
					{
						sensor_reached =1;
 8009392:	2301      	movs	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
						break;
 8009396:	e01e      	b.n	80093d6 <Home_Z_Nozzle_Motor+0x92>
					}
					else if(Sensor_Read(Z_EOT_Sensor))
 8009398:	4b36      	ldr	r3, [pc, #216]	@ (8009474 <Home_Z_Nozzle_Motor+0x130>)
 800939a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800939e:	f004 fb5d 	bl	800da5c <Sensor_Read>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d115      	bne.n	80093d4 <Home_Z_Nozzle_Motor+0x90>
					{
						break;
					}
					if((pulse_count==Maximum_Pulses) && (!Sensor_Read(Z_Home_Sensor)))
 80093a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d10a      	bne.n	80093c8 <Home_Z_Nozzle_Motor+0x84>
 80093b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009470 <Home_Z_Nozzle_Motor+0x12c>)
 80093b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093b8:	f004 fb50 	bl	800da5c <Sensor_Read>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <Home_Z_Nozzle_Motor+0x84>
		              {
		            	  Error="A";
 80093c2:	4b2d      	ldr	r3, [pc, #180]	@ (8009478 <Home_Z_Nozzle_Motor+0x134>)
 80093c4:	4a2d      	ldr	r2, [pc, #180]	@ (800947c <Home_Z_Nozzle_Motor+0x138>)
 80093c6:	601a      	str	r2, [r3, #0]
			   while(pulse_count<=Maximum_Pulses )
 80093c8:	4b26      	ldr	r3, [pc, #152]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d2d7      	bcs.n	8009382 <Home_Z_Nozzle_Motor+0x3e>
 80093d2:	e000      	b.n	80093d6 <Home_Z_Nozzle_Motor+0x92>
						break;
 80093d4:	bf00      	nop
		              }
			   }
		  }
		  if((sensor_reached==1))
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d13d      	bne.n	8009458 <Home_Z_Nozzle_Motor+0x114>
		  {
			  pulse_count=0;
 80093dc:	4b21      	ldr	r3, [pc, #132]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
			  while(pulse_count<10);
 80093e2:	bf00      	nop
 80093e4:	4b1f      	ldr	r3, [pc, #124]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	d9fb      	bls.n	80093e4 <Home_Z_Nozzle_Motor+0xa0>
			  while(pulse_count<100)
 80093ec:	e007      	b.n	80093fe <Home_Z_Nozzle_Motor+0xba>
				{
						  if(!Sensor_Read(Z_Home_Sensor))
 80093ee:	4b20      	ldr	r3, [pc, #128]	@ (8009470 <Home_Z_Nozzle_Motor+0x12c>)
 80093f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093f4:	f004 fb32 	bl	800da5c <Sensor_Read>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d004      	beq.n	8009408 <Home_Z_Nozzle_Motor+0xc4>
			  while(pulse_count<100)
 80093fe:	4b19      	ldr	r3, [pc, #100]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b63      	cmp	r3, #99	@ 0x63
 8009404:	d9f3      	bls.n	80093ee <Home_Z_Nozzle_Motor+0xaa>
 8009406:	e000      	b.n	800940a <Home_Z_Nozzle_Motor+0xc6>
						  {
						   break;
 8009408:	bf00      	nop
						  }
				}
			  pulse_count=0;
 800940a:	4b16      	ldr	r3, [pc, #88]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
			  Probe_Motor_Dir_AClk;
 8009410:	2200      	movs	r2, #0
 8009412:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009416:	4814      	ldr	r0, [pc, #80]	@ (8009468 <Home_Z_Nozzle_Motor+0x124>)
 8009418:	f006 fa92 	bl	800f940 <HAL_GPIO_WritePin>
			  while(pulse_count<100)
 800941c:	e007      	b.n	800942e <Home_Z_Nozzle_Motor+0xea>
			  {
				  if(Sensor_Read(Z_Home_Sensor))  break;// After 3 pulses if it is reached Z home, do not give further pusles
 800941e:	4b14      	ldr	r3, [pc, #80]	@ (8009470 <Home_Z_Nozzle_Motor+0x12c>)
 8009420:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009424:	f004 fb1a 	bl	800da5c <Sensor_Read>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d104      	bne.n	8009438 <Home_Z_Nozzle_Motor+0xf4>
			  while(pulse_count<100)
 800942e:	4b0d      	ldr	r3, [pc, #52]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b63      	cmp	r3, #99	@ 0x63
 8009434:	d9f3      	bls.n	800941e <Home_Z_Nozzle_Motor+0xda>
 8009436:	e000      	b.n	800943a <Home_Z_Nozzle_Motor+0xf6>
				  if(Sensor_Read(Z_Home_Sensor))  break;// After 3 pulses if it is reached Z home, do not give further pusles
 8009438:	bf00      	nop
			  }
			  if((pulse_count==100) && (!Sensor_Read(Z_Home_Sensor)))
 800943a:	4b0a      	ldr	r3, [pc, #40]	@ (8009464 <Home_Z_Nozzle_Motor+0x120>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b64      	cmp	r3, #100	@ 0x64
 8009440:	d10a      	bne.n	8009458 <Home_Z_Nozzle_Motor+0x114>
 8009442:	4b0b      	ldr	r3, [pc, #44]	@ (8009470 <Home_Z_Nozzle_Motor+0x12c>)
 8009444:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009448:	f004 fb08 	bl	800da5c <Sensor_Read>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <Home_Z_Nozzle_Motor+0x114>
			  {
				  Error="A";
 8009452:	4b09      	ldr	r3, [pc, #36]	@ (8009478 <Home_Z_Nozzle_Motor+0x134>)
 8009454:	4a09      	ldr	r2, [pc, #36]	@ (800947c <Home_Z_Nozzle_Motor+0x138>)
 8009456:	601a      	str	r2, [r3, #0]

			  }
		  }
		  Stop_Z_Nozzle_Motor();
 8009458:	f7ff ff66 	bl	8009328 <Stop_Z_Nozzle_Motor>
//	   }
}
 800945c:	bf00      	nop
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	200005cc 	.word	0x200005cc
 8009468:	40020400 	.word	0x40020400
 800946c:	40021000 	.word	0x40021000
 8009470:	20000280 	.word	0x20000280
 8009474:	20000288 	.word	0x20000288
 8009478:	20000014 	.word	0x20000014
 800947c:	08018e90 	.word	0x08018e90

08009480 <Home_Z_Nozzle_Motor_Distance>:

void Home_Z_Nozzle_Motor_Distance(uint32_t Maximum_Pulses)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	      pulse_count=0;
 8009488:	4b48      	ldr	r3, [pc, #288]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 800948a:	2200      	movs	r2, #0
 800948c:	601a      	str	r2, [r3, #0]
		  int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
		  Probe_Motor_Dir_Clk;
 8009492:	2201      	movs	r2, #1
 8009494:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009498:	4845      	ldr	r0, [pc, #276]	@ (80095b0 <Home_Z_Nozzle_Motor_Distance+0x130>)
 800949a:	f006 fa51 	bl	800f940 <HAL_GPIO_WritePin>
		  Probe_Motor_En;
 800949e:	2200      	movs	r2, #0
 80094a0:	2102      	movs	r1, #2
 80094a2:	4844      	ldr	r0, [pc, #272]	@ (80095b4 <Home_Z_Nozzle_Motor_Distance+0x134>)
 80094a4:	f006 fa4c 	bl	800f940 <HAL_GPIO_WritePin>
//		 if(Sensor_Read(Z_Home_Sensor))
	//	 {
		  if(!Sensor_Read(Z_Home_Sensor))	 // If already it is at Z home do not move
 80094a8:	4b43      	ldr	r3, [pc, #268]	@ (80095b8 <Home_Z_Nozzle_Motor_Distance+0x138>)
 80094aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094ae:	f004 fad5 	bl	800da5c <Sensor_Read>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d131      	bne.n	800951c <Home_Z_Nozzle_Motor_Distance+0x9c>
		   {
			  Start_Z_Nozzle_Motor()  ;// 1kHz, 50% duty, 500 pulses
 80094b8:	f7ff ff20 	bl	80092fc <Start_Z_Nozzle_Motor>
			   while(pulse_count<=Maximum_Pulses )
 80094bc:	e027      	b.n	800950e <Home_Z_Nozzle_Motor_Distance+0x8e>
			   {
					if(Sensor_Read(Z_Home_Sensor)) // After 3 pulses if it is reached Z home, do not give further pusles
 80094be:	4b3e      	ldr	r3, [pc, #248]	@ (80095b8 <Home_Z_Nozzle_Motor_Distance+0x138>)
 80094c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094c4:	f004 faca 	bl	800da5c <Sensor_Read>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d007      	beq.n	80094de <Home_Z_Nozzle_Motor_Distance+0x5e>
					{
						sensor_reached =1;
 80094ce:	2301      	movs	r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]
						Send_Count(pulse_count);
 80094d2:	4b36      	ldr	r3, [pc, #216]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f001 fa66 	bl	800a9a8 <Send_Count>
						break;
 80094dc:	e01e      	b.n	800951c <Home_Z_Nozzle_Motor_Distance+0x9c>
					}
					else if(Sensor_Read(Z_EOT_Sensor))
 80094de:	4b37      	ldr	r3, [pc, #220]	@ (80095bc <Home_Z_Nozzle_Motor_Distance+0x13c>)
 80094e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094e4:	f004 faba 	bl	800da5c <Sensor_Read>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d115      	bne.n	800951a <Home_Z_Nozzle_Motor_Distance+0x9a>
					{
						break;
					}
					if((pulse_count==Maximum_Pulses) && (!Sensor_Read(Z_Home_Sensor)))
 80094ee:	4b2f      	ldr	r3, [pc, #188]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d10a      	bne.n	800950e <Home_Z_Nozzle_Motor_Distance+0x8e>
 80094f8:	4b2f      	ldr	r3, [pc, #188]	@ (80095b8 <Home_Z_Nozzle_Motor_Distance+0x138>)
 80094fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80094fe:	f004 faad 	bl	800da5c <Sensor_Read>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <Home_Z_Nozzle_Motor_Distance+0x8e>
		              {
		            	  Error="A";
 8009508:	4b2d      	ldr	r3, [pc, #180]	@ (80095c0 <Home_Z_Nozzle_Motor_Distance+0x140>)
 800950a:	4a2e      	ldr	r2, [pc, #184]	@ (80095c4 <Home_Z_Nozzle_Motor_Distance+0x144>)
 800950c:	601a      	str	r2, [r3, #0]
			   while(pulse_count<=Maximum_Pulses )
 800950e:	4b27      	ldr	r3, [pc, #156]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d2d2      	bcs.n	80094be <Home_Z_Nozzle_Motor_Distance+0x3e>
 8009518:	e000      	b.n	800951c <Home_Z_Nozzle_Motor_Distance+0x9c>
						break;
 800951a:	bf00      	nop
		              }
			   }
		  }
		  if((sensor_reached==1))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d13d      	bne.n	800959e <Home_Z_Nozzle_Motor_Distance+0x11e>
		  {
			  pulse_count=0;
 8009522:	4b22      	ldr	r3, [pc, #136]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 8009524:	2200      	movs	r2, #0
 8009526:	601a      	str	r2, [r3, #0]
			  while(pulse_count<10);
 8009528:	bf00      	nop
 800952a:	4b20      	ldr	r3, [pc, #128]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b09      	cmp	r3, #9
 8009530:	d9fb      	bls.n	800952a <Home_Z_Nozzle_Motor_Distance+0xaa>
			  while(pulse_count<100)
 8009532:	e007      	b.n	8009544 <Home_Z_Nozzle_Motor_Distance+0xc4>
				{
						  if(!Sensor_Read(Z_Home_Sensor))
 8009534:	4b20      	ldr	r3, [pc, #128]	@ (80095b8 <Home_Z_Nozzle_Motor_Distance+0x138>)
 8009536:	e893 0003 	ldmia.w	r3, {r0, r1}
 800953a:	f004 fa8f 	bl	800da5c <Sensor_Read>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <Home_Z_Nozzle_Motor_Distance+0xce>
			  while(pulse_count<100)
 8009544:	4b19      	ldr	r3, [pc, #100]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b63      	cmp	r3, #99	@ 0x63
 800954a:	d9f3      	bls.n	8009534 <Home_Z_Nozzle_Motor_Distance+0xb4>
 800954c:	e000      	b.n	8009550 <Home_Z_Nozzle_Motor_Distance+0xd0>
						  {
						   break;
 800954e:	bf00      	nop
						  }
				}
			  pulse_count=0;
 8009550:	4b16      	ldr	r3, [pc, #88]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
			  Probe_Motor_Dir_AClk;
 8009556:	2200      	movs	r2, #0
 8009558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800955c:	4814      	ldr	r0, [pc, #80]	@ (80095b0 <Home_Z_Nozzle_Motor_Distance+0x130>)
 800955e:	f006 f9ef 	bl	800f940 <HAL_GPIO_WritePin>
			  while(pulse_count<100)
 8009562:	e007      	b.n	8009574 <Home_Z_Nozzle_Motor_Distance+0xf4>
			  {
				  if(Sensor_Read(Z_Home_Sensor))  break;// After 3 pulses if it is reached Z home, do not give further pusles
 8009564:	4b14      	ldr	r3, [pc, #80]	@ (80095b8 <Home_Z_Nozzle_Motor_Distance+0x138>)
 8009566:	e893 0003 	ldmia.w	r3, {r0, r1}
 800956a:	f004 fa77 	bl	800da5c <Sensor_Read>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d104      	bne.n	800957e <Home_Z_Nozzle_Motor_Distance+0xfe>
			  while(pulse_count<100)
 8009574:	4b0d      	ldr	r3, [pc, #52]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b63      	cmp	r3, #99	@ 0x63
 800957a:	d9f3      	bls.n	8009564 <Home_Z_Nozzle_Motor_Distance+0xe4>
 800957c:	e000      	b.n	8009580 <Home_Z_Nozzle_Motor_Distance+0x100>
				  if(Sensor_Read(Z_Home_Sensor))  break;// After 3 pulses if it is reached Z home, do not give further pusles
 800957e:	bf00      	nop
			  }
			  if((pulse_count==100) && (!Sensor_Read(Z_Home_Sensor)))
 8009580:	4b0a      	ldr	r3, [pc, #40]	@ (80095ac <Home_Z_Nozzle_Motor_Distance+0x12c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b64      	cmp	r3, #100	@ 0x64
 8009586:	d10a      	bne.n	800959e <Home_Z_Nozzle_Motor_Distance+0x11e>
 8009588:	4b0b      	ldr	r3, [pc, #44]	@ (80095b8 <Home_Z_Nozzle_Motor_Distance+0x138>)
 800958a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800958e:	f004 fa65 	bl	800da5c <Sensor_Read>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <Home_Z_Nozzle_Motor_Distance+0x11e>
			  {
				  Error="A";
 8009598:	4b09      	ldr	r3, [pc, #36]	@ (80095c0 <Home_Z_Nozzle_Motor_Distance+0x140>)
 800959a:	4a0a      	ldr	r2, [pc, #40]	@ (80095c4 <Home_Z_Nozzle_Motor_Distance+0x144>)
 800959c:	601a      	str	r2, [r3, #0]

			  }
		  }
		  Stop_Z_Nozzle_Motor();
 800959e:	f7ff fec3 	bl	8009328 <Stop_Z_Nozzle_Motor>
//	   }
}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	200005cc 	.word	0x200005cc
 80095b0:	40020400 	.word	0x40020400
 80095b4:	40021000 	.word	0x40021000
 80095b8:	20000280 	.word	0x20000280
 80095bc:	20000288 	.word	0x20000288
 80095c0:	20000014 	.word	0x20000014
 80095c4:	08018e90 	.word	0x08018e90

080095c8 <Move_Z_Nozzle_Motor>:
void Move_Z_Nozzle_Motor(int Direction, int Distance )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
		   pulse_count=0;
 80095d2:	4b3c      	ldr	r3, [pc, #240]	@ (80096c4 <Move_Z_Nozzle_Motor+0xfc>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]
	      int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]
	//      int Encoder=0;
	      if(Direction)Nozzle_Motor_Dir_Clk;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d006      	beq.n	80095f0 <Move_Z_Nozzle_Motor+0x28>
 80095e2:	2201      	movs	r2, #1
 80095e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80095e8:	4837      	ldr	r0, [pc, #220]	@ (80096c8 <Move_Z_Nozzle_Motor+0x100>)
 80095ea:	f006 f9a9 	bl	800f940 <HAL_GPIO_WritePin>
 80095ee:	e005      	b.n	80095fc <Move_Z_Nozzle_Motor+0x34>
	    	else Nozzle_Motor_Dir_AClk;
 80095f0:	2200      	movs	r2, #0
 80095f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80095f6:	4834      	ldr	r0, [pc, #208]	@ (80096c8 <Move_Z_Nozzle_Motor+0x100>)
 80095f8:	f006 f9a2 	bl	800f940 <HAL_GPIO_WritePin>
	    	Nozzle_Motor_En;
 80095fc:	2200      	movs	r2, #0
 80095fe:	2102      	movs	r1, #2
 8009600:	4832      	ldr	r0, [pc, #200]	@ (80096cc <Move_Z_Nozzle_Motor+0x104>)
 8009602:	f006 f99d 	bl	800f940 <HAL_GPIO_WritePin>
		   if(!Direction)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d134      	bne.n	8009676 <Move_Z_Nozzle_Motor+0xae>
		   {
			   Start_Z_Nozzle_Motor() ; // 1kHz, 50% duty, 500 pulses
 800960c:	f7ff fe76 	bl	80092fc <Start_Z_Nozzle_Motor>
			   while(pulse_count<Distance )
 8009610:	e027      	b.n	8009662 <Move_Z_Nozzle_Motor+0x9a>
			   {
				   if(Sensor_Read(Z_EOT_Sensor))
 8009612:	4b2f      	ldr	r3, [pc, #188]	@ (80096d0 <Move_Z_Nozzle_Motor+0x108>)
 8009614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009618:	f004 fa20 	bl	800da5c <Sensor_Read>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d125      	bne.n	800966e <Move_Z_Nozzle_Motor+0xa6>
					{
					   break;
					}
				   if((pulse_count==70) && (Sensor_Read(Z_Home_Sensor)))
 8009622:	4b28      	ldr	r3, [pc, #160]	@ (80096c4 <Move_Z_Nozzle_Motor+0xfc>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b46      	cmp	r3, #70	@ 0x46
 8009628:	d10b      	bne.n	8009642 <Move_Z_Nozzle_Motor+0x7a>
 800962a:	4b2a      	ldr	r3, [pc, #168]	@ (80096d4 <Move_Z_Nozzle_Motor+0x10c>)
 800962c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009630:	f004 fa14 	bl	800da5c <Sensor_Read>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <Move_Z_Nozzle_Motor+0x7a>
						{
						  Error="B";
 800963a:	4b27      	ldr	r3, [pc, #156]	@ (80096d8 <Move_Z_Nozzle_Motor+0x110>)
 800963c:	4a27      	ldr	r2, [pc, #156]	@ (80096dc <Move_Z_Nozzle_Motor+0x114>)
 800963e:	601a      	str	r2, [r3, #0]
						   break;
 8009640:	e016      	b.n	8009670 <Move_Z_Nozzle_Motor+0xa8>
						}
				   if((pulse_count>100) && (Sensor_Read(Z_Home_Sensor)))
 8009642:	4b20      	ldr	r3, [pc, #128]	@ (80096c4 <Move_Z_Nozzle_Motor+0xfc>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b64      	cmp	r3, #100	@ 0x64
 8009648:	d90b      	bls.n	8009662 <Move_Z_Nozzle_Motor+0x9a>
 800964a:	4b22      	ldr	r3, [pc, #136]	@ (80096d4 <Move_Z_Nozzle_Motor+0x10c>)
 800964c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009650:	f004 fa04 	bl	800da5c <Sensor_Read>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <Move_Z_Nozzle_Motor+0x9a>
						{
						  Error="C";
 800965a:	4b1f      	ldr	r3, [pc, #124]	@ (80096d8 <Move_Z_Nozzle_Motor+0x110>)
 800965c:	4a20      	ldr	r2, [pc, #128]	@ (80096e0 <Move_Z_Nozzle_Motor+0x118>)
 800965e:	601a      	str	r2, [r3, #0]
						   break;
 8009660:	e006      	b.n	8009670 <Move_Z_Nozzle_Motor+0xa8>
			   while(pulse_count<Distance )
 8009662:	4b18      	ldr	r3, [pc, #96]	@ (80096c4 <Move_Z_Nozzle_Motor+0xfc>)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	429a      	cmp	r2, r3
 800966a:	d3d2      	bcc.n	8009612 <Move_Z_Nozzle_Motor+0x4a>
 800966c:	e000      	b.n	8009670 <Move_Z_Nozzle_Motor+0xa8>
					   break;
 800966e:	bf00      	nop
						}

			   }
			   Stop_Z_Nozzle_Motor();
 8009670:	f7ff fe5a 	bl	8009328 <Stop_Z_Nozzle_Motor>
 8009674:	e01e      	b.n	80096b4 <Move_Z_Nozzle_Motor+0xec>
		   }
		   else if(Direction)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01b      	beq.n	80096b4 <Move_Z_Nozzle_Motor+0xec>
		   {
			   if(!Sensor_Read(Z_Home_Sensor))	 // If already it is at Z home do not move
 800967c:	4b15      	ldr	r3, [pc, #84]	@ (80096d4 <Move_Z_Nozzle_Motor+0x10c>)
 800967e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009682:	f004 f9eb 	bl	800da5c <Sensor_Read>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d113      	bne.n	80096b4 <Move_Z_Nozzle_Motor+0xec>
			   {
				   Start_Z_Nozzle_Motor()  ;// 1kHz, 50% duty, 500 pulses
 800968c:	f7ff fe36 	bl	80092fc <Start_Z_Nozzle_Motor>
				   while(pulse_count<=Distance )
 8009690:	e007      	b.n	80096a2 <Move_Z_Nozzle_Motor+0xda>
				   {
						if(Sensor_Read(Z_EOT_Sensor)) // After 3 pulses if it is reached Z home, do not give further pusles
 8009692:	4b0f      	ldr	r3, [pc, #60]	@ (80096d0 <Move_Z_Nozzle_Motor+0x108>)
 8009694:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009698:	f004 f9e0 	bl	800da5c <Sensor_Read>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d105      	bne.n	80096ae <Move_Z_Nozzle_Motor+0xe6>
				   while(pulse_count<=Distance )
 80096a2:	4b08      	ldr	r3, [pc, #32]	@ (80096c4 <Move_Z_Nozzle_Motor+0xfc>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d9f2      	bls.n	8009692 <Move_Z_Nozzle_Motor+0xca>
 80096ac:	e000      	b.n	80096b0 <Move_Z_Nozzle_Motor+0xe8>
						{
						    break;
 80096ae:	bf00      	nop
						}
				   }

				   Stop_Z_Nozzle_Motor();
 80096b0:	f7ff fe3a 	bl	8009328 <Stop_Z_Nozzle_Motor>
			  }
		   }


		   	sensor_reached=0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	60fb      	str	r3, [r7, #12]
		   	Stop_Z_Nozzle_Motor();
 80096b8:	f7ff fe36 	bl	8009328 <Stop_Z_Nozzle_Motor>

}
 80096bc:	bf00      	nop
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	200005cc 	.word	0x200005cc
 80096c8:	40020400 	.word	0x40020400
 80096cc:	40021000 	.word	0x40021000
 80096d0:	20000288 	.word	0x20000288
 80096d4:	20000280 	.word	0x20000280
 80096d8:	20000014 	.word	0x20000014
 80096dc:	08018e94 	.word	0x08018e94
 80096e0:	08018e98 	.word	0x08018e98

080096e4 <Start_Z_Probe_Motor>:
#include "Probe_Motor_Z.h"
 extern char *Error;
unsigned int  Z_Probe_motor_speed=1000;
unsigned int  Z_Probe_pulses=0;
void Start_Z_Probe_Motor()
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af02      	add	r7, sp, #8
	 Start_PWM(PROBE_TIMER, PROBE_TIMER_CHANNEL, Z_Probe_motor_speed, 50, Z_Probe_pulses);  // 1kHz, 50% duty, 500 pulses
 80096ea:	4b06      	ldr	r3, [pc, #24]	@ (8009704 <Start_Z_Probe_Motor+0x20>)
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b06      	ldr	r3, [pc, #24]	@ (8009708 <Start_Z_Probe_Motor+0x24>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	2332      	movs	r3, #50	@ 0x32
 80096f6:	2100      	movs	r1, #0
 80096f8:	4804      	ldr	r0, [pc, #16]	@ (800970c <Start_Z_Probe_Motor+0x28>)
 80096fa:	f005 f811 	bl	800e720 <Start_PWM>

}
 80096fe:	bf00      	nop
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20000004 	.word	0x20000004
 8009708:	200004e0 	.word	0x200004e0
 800970c:	20000740 	.word	0x20000740

08009710 <Stop_Z_Probe_Motor>:
void Stop_Z_Probe_Motor()
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
	//Stop_PWM(PROBE_TIMER, PROBE_TIMER_CHANNEL);

	 HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
 8009714:	2100      	movs	r1, #0
 8009716:	4804      	ldr	r0, [pc, #16]	@ (8009728 <Stop_Z_Probe_Motor+0x18>)
 8009718:	f008 fa82 	bl	8011c20 <HAL_TIM_PWM_Stop>
	    HAL_TIM_Base_Stop_IT(&htim11); // Stop interrupt
 800971c:	4802      	ldr	r0, [pc, #8]	@ (8009728 <Stop_Z_Probe_Motor+0x18>)
 800971e:	f008 f92f 	bl	8011980 <HAL_TIM_Base_Stop_IT>
}
 8009722:	bf00      	nop
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000740 	.word	0x20000740

0800972c <Home_Z_Probe_Motor>:
void Home_Z_Probe_Motor(uint32_t Maximum_Pulses)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	 pulse_count=0;
 8009734:	4b49      	ldr	r3, [pc, #292]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 8009736:	2200      	movs	r2, #0
 8009738:	601a      	str	r2, [r3, #0]
	  int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
	  int direction_reset=0;
 800973e:	2300      	movs	r3, #0
 8009740:	60bb      	str	r3, [r7, #8]
	  Probe_Motor_Dir_AClk;
 8009742:	2200      	movs	r2, #0
 8009744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009748:	4845      	ldr	r0, [pc, #276]	@ (8009860 <Home_Z_Probe_Motor+0x134>)
 800974a:	f006 f8f9 	bl	800f940 <HAL_GPIO_WritePin>
	  Probe_Motor_En;
 800974e:	2200      	movs	r2, #0
 8009750:	2102      	movs	r1, #2
 8009752:	4844      	ldr	r0, [pc, #272]	@ (8009864 <Home_Z_Probe_Motor+0x138>)
 8009754:	f006 f8f4 	bl	800f940 <HAL_GPIO_WritePin>
	  if(!Sensor_Read(Z_Home_Sensor))	 // If already it is at Z home do not move
 8009758:	4b43      	ldr	r3, [pc, #268]	@ (8009868 <Home_Z_Probe_Motor+0x13c>)
 800975a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800975e:	f004 f97d 	bl	800da5c <Sensor_Read>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d12d      	bne.n	80097c4 <Home_Z_Probe_Motor+0x98>
	   {
		  Start_Z_Probe_Motor()  ;// 1kHz, 50% duty, 500 pulses
 8009768:	f7ff ffbc 	bl	80096e4 <Start_Z_Probe_Motor>
		   while(pulse_count<=Maximum_Pulses )
 800976c:	e025      	b.n	80097ba <Home_Z_Probe_Motor+0x8e>
		   {
				if(Sensor_Read(Z_Home_Sensor)) // After 3 pulses if it is reached Z home, do not give further pusles
 800976e:	4b3e      	ldr	r3, [pc, #248]	@ (8009868 <Home_Z_Probe_Motor+0x13c>)
 8009770:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009774:	f004 f972 	bl	800da5c <Sensor_Read>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <Home_Z_Probe_Motor+0x58>
				{
					sensor_reached =1;
 800977e:	2301      	movs	r3, #1
 8009780:	60fb      	str	r3, [r7, #12]
					break;
 8009782:	e01f      	b.n	80097c4 <Home_Z_Probe_Motor+0x98>
				}
				else if(Sensor_Read(Z_EOT_Sensor))
 8009784:	4b39      	ldr	r3, [pc, #228]	@ (800986c <Home_Z_Probe_Motor+0x140>)
 8009786:	e893 0003 	ldmia.w	r3, {r0, r1}
 800978a:	f004 f967 	bl	800da5c <Sensor_Read>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00a      	beq.n	80097aa <Home_Z_Probe_Motor+0x7e>
				{
					pulse_count=0;
 8009794:	4b31      	ldr	r3, [pc, #196]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
					direction_reset=1;
 800979a:	2301      	movs	r3, #1
 800979c:	60bb      	str	r3, [r7, #8]
					Probe_Motor_Dir_Clk;
 800979e:	2201      	movs	r2, #1
 80097a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80097a4:	482e      	ldr	r0, [pc, #184]	@ (8009860 <Home_Z_Probe_Motor+0x134>)
 80097a6:	f006 f8cb 	bl	800f940 <HAL_GPIO_WritePin>
				}
				if(pulse_count==Maximum_Pulses )
 80097aa:	4b2c      	ldr	r3, [pc, #176]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d102      	bne.n	80097ba <Home_Z_Probe_Motor+0x8e>
				{
					Error="X";
 80097b4:	4b2e      	ldr	r3, [pc, #184]	@ (8009870 <Home_Z_Probe_Motor+0x144>)
 80097b6:	4a2f      	ldr	r2, [pc, #188]	@ (8009874 <Home_Z_Probe_Motor+0x148>)
 80097b8:	601a      	str	r2, [r3, #0]
		   while(pulse_count<=Maximum_Pulses )
 80097ba:	4b28      	ldr	r3, [pc, #160]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d2d4      	bcs.n	800976e <Home_Z_Probe_Motor+0x42>
				}
		   }
	  }
	  if((sensor_reached==1) &&(direction_reset==1))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d140      	bne.n	800984c <Home_Z_Probe_Motor+0x120>
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d13d      	bne.n	800984c <Home_Z_Probe_Motor+0x120>
	  {
		  pulse_count=0;
 80097d0:	4b22      	ldr	r3, [pc, #136]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
		  while(pulse_count<10);
 80097d6:	bf00      	nop
 80097d8:	4b20      	ldr	r3, [pc, #128]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b09      	cmp	r3, #9
 80097de:	d9fb      	bls.n	80097d8 <Home_Z_Probe_Motor+0xac>
		  while(pulse_count<100)
 80097e0:	e007      	b.n	80097f2 <Home_Z_Probe_Motor+0xc6>
			{
					  if(!Sensor_Read(Z_Home_Sensor))
 80097e2:	4b21      	ldr	r3, [pc, #132]	@ (8009868 <Home_Z_Probe_Motor+0x13c>)
 80097e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097e8:	f004 f938 	bl	800da5c <Sensor_Read>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <Home_Z_Probe_Motor+0xd0>
		  while(pulse_count<100)
 80097f2:	4b1a      	ldr	r3, [pc, #104]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b63      	cmp	r3, #99	@ 0x63
 80097f8:	d9f3      	bls.n	80097e2 <Home_Z_Probe_Motor+0xb6>
 80097fa:	e000      	b.n	80097fe <Home_Z_Probe_Motor+0xd2>
					  {
					   break;
 80097fc:	bf00      	nop
					  }
			}
		  pulse_count=0;
 80097fe:	4b17      	ldr	r3, [pc, #92]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 8009800:	2200      	movs	r2, #0
 8009802:	601a      	str	r2, [r3, #0]
		  Probe_Motor_Dir_AClk;
 8009804:	2200      	movs	r2, #0
 8009806:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800980a:	4815      	ldr	r0, [pc, #84]	@ (8009860 <Home_Z_Probe_Motor+0x134>)
 800980c:	f006 f898 	bl	800f940 <HAL_GPIO_WritePin>
		  while(pulse_count<100)
 8009810:	e007      	b.n	8009822 <Home_Z_Probe_Motor+0xf6>
		  {
			  if(Sensor_Read(Z_Home_Sensor))  break;
 8009812:	4b15      	ldr	r3, [pc, #84]	@ (8009868 <Home_Z_Probe_Motor+0x13c>)
 8009814:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009818:	f004 f920 	bl	800da5c <Sensor_Read>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d104      	bne.n	800982c <Home_Z_Probe_Motor+0x100>
		  while(pulse_count<100)
 8009822:	4b0e      	ldr	r3, [pc, #56]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b63      	cmp	r3, #99	@ 0x63
 8009828:	d9f3      	bls.n	8009812 <Home_Z_Probe_Motor+0xe6>
 800982a:	e000      	b.n	800982e <Home_Z_Probe_Motor+0x102>
			  if(Sensor_Read(Z_Home_Sensor))  break;
 800982c:	bf00      	nop
		  }
		  if((pulse_count==100) && (!Sensor_Read(Z_Home_Sensor)))
 800982e:	4b0b      	ldr	r3, [pc, #44]	@ (800985c <Home_Z_Probe_Motor+0x130>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b64      	cmp	r3, #100	@ 0x64
 8009834:	d10a      	bne.n	800984c <Home_Z_Probe_Motor+0x120>
 8009836:	4b0c      	ldr	r3, [pc, #48]	@ (8009868 <Home_Z_Probe_Motor+0x13c>)
 8009838:	e893 0003 	ldmia.w	r3, {r0, r1}
 800983c:	f004 f90e 	bl	800da5c <Sensor_Read>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d102      	bne.n	800984c <Home_Z_Probe_Motor+0x120>
			  {
				  Error="X";
 8009846:	4b0a      	ldr	r3, [pc, #40]	@ (8009870 <Home_Z_Probe_Motor+0x144>)
 8009848:	4a0a      	ldr	r2, [pc, #40]	@ (8009874 <Home_Z_Probe_Motor+0x148>)
 800984a:	601a      	str	r2, [r3, #0]

			  }
	  }
	  direction_reset=0;
 800984c:	2300      	movs	r3, #0
 800984e:	60bb      	str	r3, [r7, #8]
	  Stop_Z_Probe_Motor();
 8009850:	f7ff ff5e 	bl	8009710 <Stop_Z_Probe_Motor>
}
 8009854:	bf00      	nop
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	200005cc 	.word	0x200005cc
 8009860:	40020400 	.word	0x40020400
 8009864:	40021000 	.word	0x40021000
 8009868:	20000280 	.word	0x20000280
 800986c:	20000288 	.word	0x20000288
 8009870:	20000014 	.word	0x20000014
 8009874:	08018e9c 	.word	0x08018e9c

08009878 <Home_Z_Probe_Motor_Distance>:

void Home_Z_Probe_Motor_Distance(uint32_t Maximum_Pulses)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	 pulse_count=0;
 8009880:	4b4c      	ldr	r3, [pc, #304]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
	  int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
	  int direction_reset=0;
 800988a:	2300      	movs	r3, #0
 800988c:	60bb      	str	r3, [r7, #8]
	  Probe_Motor_Dir_AClk;
 800988e:	2200      	movs	r2, #0
 8009890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009894:	4848      	ldr	r0, [pc, #288]	@ (80099b8 <Home_Z_Probe_Motor_Distance+0x140>)
 8009896:	f006 f853 	bl	800f940 <HAL_GPIO_WritePin>
	  Probe_Motor_En;
 800989a:	2200      	movs	r2, #0
 800989c:	2102      	movs	r1, #2
 800989e:	4847      	ldr	r0, [pc, #284]	@ (80099bc <Home_Z_Probe_Motor_Distance+0x144>)
 80098a0:	f006 f84e 	bl	800f940 <HAL_GPIO_WritePin>
	  if(!Sensor_Read(Z_Home_Sensor))	 // If already it is at Z home do not move
 80098a4:	4b46      	ldr	r3, [pc, #280]	@ (80099c0 <Home_Z_Probe_Motor_Distance+0x148>)
 80098a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098aa:	f004 f8d7 	bl	800da5c <Sensor_Read>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d132      	bne.n	800991a <Home_Z_Probe_Motor_Distance+0xa2>
	   {
		  Start_Z_Probe_Motor()  ;// 1kHz, 50% duty, 500 pulses
 80098b4:	f7ff ff16 	bl	80096e4 <Start_Z_Probe_Motor>
		   while(pulse_count<=Maximum_Pulses )
 80098b8:	e02a      	b.n	8009910 <Home_Z_Probe_Motor_Distance+0x98>
		   {
				if(Sensor_Read(Z_Home_Sensor)) // After 3 pulses if it is reached Z home, do not give further pusles
 80098ba:	4b41      	ldr	r3, [pc, #260]	@ (80099c0 <Home_Z_Probe_Motor_Distance+0x148>)
 80098bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098c0:	f004 f8cc 	bl	800da5c <Sensor_Read>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d007      	beq.n	80098da <Home_Z_Probe_Motor_Distance+0x62>
				{
					sensor_reached =1;
 80098ca:	2301      	movs	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]
					Send_Count(pulse_count);
 80098ce:	4b39      	ldr	r3, [pc, #228]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 f868 	bl	800a9a8 <Send_Count>
					break;
 80098d8:	e01f      	b.n	800991a <Home_Z_Probe_Motor_Distance+0xa2>
				}
				else if(Sensor_Read(Z_EOT_Sensor))
 80098da:	4b3a      	ldr	r3, [pc, #232]	@ (80099c4 <Home_Z_Probe_Motor_Distance+0x14c>)
 80098dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098e0:	f004 f8bc 	bl	800da5c <Sensor_Read>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <Home_Z_Probe_Motor_Distance+0x88>
				{
					pulse_count=0;
 80098ea:	4b32      	ldr	r3, [pc, #200]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
					direction_reset=1;
 80098f0:	2301      	movs	r3, #1
 80098f2:	60bb      	str	r3, [r7, #8]
					Probe_Motor_Dir_Clk;
 80098f4:	2201      	movs	r2, #1
 80098f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80098fa:	482f      	ldr	r0, [pc, #188]	@ (80099b8 <Home_Z_Probe_Motor_Distance+0x140>)
 80098fc:	f006 f820 	bl	800f940 <HAL_GPIO_WritePin>
				}
				if(pulse_count==Maximum_Pulses )
 8009900:	4b2c      	ldr	r3, [pc, #176]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d102      	bne.n	8009910 <Home_Z_Probe_Motor_Distance+0x98>
				{
					Error="X";
 800990a:	4b2f      	ldr	r3, [pc, #188]	@ (80099c8 <Home_Z_Probe_Motor_Distance+0x150>)
 800990c:	4a2f      	ldr	r2, [pc, #188]	@ (80099cc <Home_Z_Probe_Motor_Distance+0x154>)
 800990e:	601a      	str	r2, [r3, #0]
		   while(pulse_count<=Maximum_Pulses )
 8009910:	4b28      	ldr	r3, [pc, #160]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	429a      	cmp	r2, r3
 8009918:	d2cf      	bcs.n	80098ba <Home_Z_Probe_Motor_Distance+0x42>
				}
		   }
	  }
	  if((sensor_reached==1) &&(direction_reset==1))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d140      	bne.n	80099a2 <Home_Z_Probe_Motor_Distance+0x12a>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d13d      	bne.n	80099a2 <Home_Z_Probe_Motor_Distance+0x12a>
	  {
		  pulse_count=0;
 8009926:	4b23      	ldr	r3, [pc, #140]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 8009928:	2200      	movs	r2, #0
 800992a:	601a      	str	r2, [r3, #0]
		  while(pulse_count<10);
 800992c:	bf00      	nop
 800992e:	4b21      	ldr	r3, [pc, #132]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b09      	cmp	r3, #9
 8009934:	d9fb      	bls.n	800992e <Home_Z_Probe_Motor_Distance+0xb6>
		  while(pulse_count<100)
 8009936:	e007      	b.n	8009948 <Home_Z_Probe_Motor_Distance+0xd0>
			{
					  if(!Sensor_Read(Z_Home_Sensor))
 8009938:	4b21      	ldr	r3, [pc, #132]	@ (80099c0 <Home_Z_Probe_Motor_Distance+0x148>)
 800993a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800993e:	f004 f88d 	bl	800da5c <Sensor_Read>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d004      	beq.n	8009952 <Home_Z_Probe_Motor_Distance+0xda>
		  while(pulse_count<100)
 8009948:	4b1a      	ldr	r3, [pc, #104]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b63      	cmp	r3, #99	@ 0x63
 800994e:	d9f3      	bls.n	8009938 <Home_Z_Probe_Motor_Distance+0xc0>
 8009950:	e000      	b.n	8009954 <Home_Z_Probe_Motor_Distance+0xdc>
					  {
					   break;
 8009952:	bf00      	nop
					  }
			}
		  pulse_count=0;
 8009954:	4b17      	ldr	r3, [pc, #92]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
		  Probe_Motor_Dir_AClk;
 800995a:	2200      	movs	r2, #0
 800995c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009960:	4815      	ldr	r0, [pc, #84]	@ (80099b8 <Home_Z_Probe_Motor_Distance+0x140>)
 8009962:	f005 ffed 	bl	800f940 <HAL_GPIO_WritePin>
		  while(pulse_count<100)
 8009966:	e007      	b.n	8009978 <Home_Z_Probe_Motor_Distance+0x100>
		  {
			  if(Sensor_Read(Z_Home_Sensor))  break;
 8009968:	4b15      	ldr	r3, [pc, #84]	@ (80099c0 <Home_Z_Probe_Motor_Distance+0x148>)
 800996a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800996e:	f004 f875 	bl	800da5c <Sensor_Read>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d104      	bne.n	8009982 <Home_Z_Probe_Motor_Distance+0x10a>
		  while(pulse_count<100)
 8009978:	4b0e      	ldr	r3, [pc, #56]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b63      	cmp	r3, #99	@ 0x63
 800997e:	d9f3      	bls.n	8009968 <Home_Z_Probe_Motor_Distance+0xf0>
 8009980:	e000      	b.n	8009984 <Home_Z_Probe_Motor_Distance+0x10c>
			  if(Sensor_Read(Z_Home_Sensor))  break;
 8009982:	bf00      	nop
		  }
		  if((pulse_count==100) && (!Sensor_Read(Z_Home_Sensor)))
 8009984:	4b0b      	ldr	r3, [pc, #44]	@ (80099b4 <Home_Z_Probe_Motor_Distance+0x13c>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b64      	cmp	r3, #100	@ 0x64
 800998a:	d10a      	bne.n	80099a2 <Home_Z_Probe_Motor_Distance+0x12a>
 800998c:	4b0c      	ldr	r3, [pc, #48]	@ (80099c0 <Home_Z_Probe_Motor_Distance+0x148>)
 800998e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009992:	f004 f863 	bl	800da5c <Sensor_Read>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <Home_Z_Probe_Motor_Distance+0x12a>
			  {
				  Error="X";
 800999c:	4b0a      	ldr	r3, [pc, #40]	@ (80099c8 <Home_Z_Probe_Motor_Distance+0x150>)
 800999e:	4a0b      	ldr	r2, [pc, #44]	@ (80099cc <Home_Z_Probe_Motor_Distance+0x154>)
 80099a0:	601a      	str	r2, [r3, #0]

			  }
	  }
	  direction_reset=0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60bb      	str	r3, [r7, #8]
	  Stop_Z_Probe_Motor();
 80099a6:	f7ff feb3 	bl	8009710 <Stop_Z_Probe_Motor>
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	200005cc 	.word	0x200005cc
 80099b8:	40020400 	.word	0x40020400
 80099bc:	40021000 	.word	0x40021000
 80099c0:	20000280 	.word	0x20000280
 80099c4:	20000288 	.word	0x20000288
 80099c8:	20000014 	.word	0x20000014
 80099cc:	08018e9c 	.word	0x08018e9c

080099d0 <Move_Z_Probe_Motor>:
	  Stop_Z_Probe_Motor();
}


void Move_Z_Probe_Motor(int Direction, int Distance )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
		  pulse_count=0;
 80099da:	4b42      	ldr	r3, [pc, #264]	@ (8009ae4 <Move_Z_Probe_Motor+0x114>)
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]
	      int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
 80099e0:	2300      	movs	r3, #0
 80099e2:	613b      	str	r3, [r7, #16]
	      int Z_Home_Check=0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]
	      int Intially_Home=0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]
	      if(Direction)Probe_Motor_Dir_Clk;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d006      	beq.n	8009a00 <Move_Z_Probe_Motor+0x30>
 80099f2:	2201      	movs	r2, #1
 80099f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80099f8:	483b      	ldr	r0, [pc, #236]	@ (8009ae8 <Move_Z_Probe_Motor+0x118>)
 80099fa:	f005 ffa1 	bl	800f940 <HAL_GPIO_WritePin>
 80099fe:	e005      	b.n	8009a0c <Move_Z_Probe_Motor+0x3c>
	      else Probe_Motor_Dir_AClk;
 8009a00:	2200      	movs	r2, #0
 8009a02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009a06:	4838      	ldr	r0, [pc, #224]	@ (8009ae8 <Move_Z_Probe_Motor+0x118>)
 8009a08:	f005 ff9a 	bl	800f940 <HAL_GPIO_WritePin>
	      Probe_Motor_En;
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2102      	movs	r1, #2
 8009a10:	4836      	ldr	r0, [pc, #216]	@ (8009aec <Move_Z_Probe_Motor+0x11c>)
 8009a12:	f005 ff95 	bl	800f940 <HAL_GPIO_WritePin>
	      if(Sensor_Read(Z_Home_Sensor))
 8009a16:	4b36      	ldr	r3, [pc, #216]	@ (8009af0 <Move_Z_Probe_Motor+0x120>)
 8009a18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a1c:	f004 f81e 	bl	800da5c <Sensor_Read>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <Move_Z_Probe_Motor+0x5a>
	      {
	    	  Intially_Home=1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
	      }
		   if(Direction)  //Direction 1 - Down
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d039      	beq.n	8009aa4 <Move_Z_Probe_Motor+0xd4>
		   {
			   Start_Z_Probe_Motor() ; // 1kHz, 50% duty, 500 pulses
 8009a30:	f7ff fe58 	bl	80096e4 <Start_Z_Probe_Motor>
			   while(pulse_count<Distance )
 8009a34:	e02e      	b.n	8009a94 <Move_Z_Probe_Motor+0xc4>
			   {
				   if(Sensor_Read(Probe_Crash_Sensor))
 8009a36:	4b2f      	ldr	r3, [pc, #188]	@ (8009af4 <Move_Z_Probe_Motor+0x124>)
 8009a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a3c:	f004 f80e 	bl	800da5c <Sensor_Read>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <Move_Z_Probe_Motor+0x7e>
					{
					   Error ="P";
 8009a46:	4b2c      	ldr	r3, [pc, #176]	@ (8009af8 <Move_Z_Probe_Motor+0x128>)
 8009a48:	4a2c      	ldr	r2, [pc, #176]	@ (8009afc <Move_Z_Probe_Motor+0x12c>)
 8009a4a:	601a      	str	r2, [r3, #0]
					   break;
 8009a4c:	e027      	b.n	8009a9e <Move_Z_Probe_Motor+0xce>
					}
					if(((pulse_count==50)&& (Sensor_Read(Z_Home_Sensor))&&(Intially_Home)))
 8009a4e:	4b25      	ldr	r3, [pc, #148]	@ (8009ae4 <Move_Z_Probe_Motor+0x114>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b32      	cmp	r3, #50	@ 0x32
 8009a54:	d10e      	bne.n	8009a74 <Move_Z_Probe_Motor+0xa4>
 8009a56:	4b26      	ldr	r3, [pc, #152]	@ (8009af0 <Move_Z_Probe_Motor+0x120>)
 8009a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a5c:	f003 fffe 	bl	800da5c <Sensor_Read>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d006      	beq.n	8009a74 <Move_Z_Probe_Motor+0xa4>
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <Move_Z_Probe_Motor+0xa4>
						{
							Error="Y";
 8009a6c:	4b22      	ldr	r3, [pc, #136]	@ (8009af8 <Move_Z_Probe_Motor+0x128>)
 8009a6e:	4a24      	ldr	r2, [pc, #144]	@ (8009b00 <Move_Z_Probe_Motor+0x130>)
 8009a70:	601a      	str	r2, [r3, #0]
							break;
 8009a72:	e014      	b.n	8009a9e <Move_Z_Probe_Motor+0xce>
						}
					if(((pulse_count>50)&& (Sensor_Read(Z_Home_Sensor))))
 8009a74:	4b1b      	ldr	r3, [pc, #108]	@ (8009ae4 <Move_Z_Probe_Motor+0x114>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b32      	cmp	r3, #50	@ 0x32
 8009a7a:	d90b      	bls.n	8009a94 <Move_Z_Probe_Motor+0xc4>
 8009a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8009af0 <Move_Z_Probe_Motor+0x120>)
 8009a7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a82:	f003 ffeb 	bl	800da5c <Sensor_Read>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <Move_Z_Probe_Motor+0xc4>
						{
							Error="Z";
 8009a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8009af8 <Move_Z_Probe_Motor+0x128>)
 8009a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8009b04 <Move_Z_Probe_Motor+0x134>)
 8009a90:	601a      	str	r2, [r3, #0]
							break;
 8009a92:	e004      	b.n	8009a9e <Move_Z_Probe_Motor+0xce>
			   while(pulse_count<Distance )
 8009a94:	4b13      	ldr	r3, [pc, #76]	@ (8009ae4 <Move_Z_Probe_Motor+0x114>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d3cb      	bcc.n	8009a36 <Move_Z_Probe_Motor+0x66>
						}

			   }
			   Stop_Z_Probe_Motor();
 8009a9e:	f7ff fe37 	bl	8009710 <Stop_Z_Probe_Motor>
 8009aa2:	e016      	b.n	8009ad2 <Move_Z_Probe_Motor+0x102>
		   }
		   else if(!Direction)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d113      	bne.n	8009ad2 <Move_Z_Probe_Motor+0x102>
		   {

				   Start_Z_Probe_Motor()  ;// 1kHz, 50% duty, 500 pulses
 8009aaa:	f7ff fe1b 	bl	80096e4 <Start_Z_Probe_Motor>
				   while(pulse_count<=Distance )
 8009aae:	e007      	b.n	8009ac0 <Move_Z_Probe_Motor+0xf0>
				   {

					   if(Sensor_Read(Z_EOT_Sensor))
 8009ab0:	4b15      	ldr	r3, [pc, #84]	@ (8009b08 <Move_Z_Probe_Motor+0x138>)
 8009ab2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ab6:	f003 ffd1 	bl	800da5c <Sensor_Read>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <Move_Z_Probe_Motor+0xfc>
				   while(pulse_count<=Distance )
 8009ac0:	4b08      	ldr	r3, [pc, #32]	@ (8009ae4 <Move_Z_Probe_Motor+0x114>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d9f2      	bls.n	8009ab0 <Move_Z_Probe_Motor+0xe0>
 8009aca:	e000      	b.n	8009ace <Move_Z_Probe_Motor+0xfe>
						{

						   break;
 8009acc:	bf00      	nop
						}
				   }
				   Stop_Z_Probe_Motor();
 8009ace:	f7ff fe1f 	bl	8009710 <Stop_Z_Probe_Motor>

		     }

		   	sensor_reached=0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	613b      	str	r3, [r7, #16]
		   	Stop_Z_Probe_Motor();
 8009ad6:	f7ff fe1b 	bl	8009710 <Stop_Z_Probe_Motor>

}
 8009ada:	bf00      	nop
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200005cc 	.word	0x200005cc
 8009ae8:	40020400 	.word	0x40020400
 8009aec:	40021000 	.word	0x40021000
 8009af0:	20000280 	.word	0x20000280
 8009af4:	200002b0 	.word	0x200002b0
 8009af8:	20000014 	.word	0x20000014
 8009afc:	08018ea0 	.word	0x08018ea0
 8009b00:	08018ea4 	.word	0x08018ea4
 8009b04:	08018ea8 	.word	0x08018ea8
 8009b08:	20000288 	.word	0x20000288

08009b0c <Start_Rocking_Motor>:
 extern char *Error;
 uint32_t Rocking_motor_pulses = 50;  // default value
 uint32_t home_cnt = 0;  // Definition (and optional initialization)

void Start_Rocking_Motor( int Rocking_motor_speed, int Rocking_motor_pulses)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	   plate_cnt=0;
 8009b16:	4b10      	ldr	r3, [pc, #64]	@ (8009b58 <Start_Rocking_Motor+0x4c>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]
       home_cnt=0;
 8009b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b5c <Start_Rocking_Motor+0x50>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
	   Rck_Motor_Dir_Clk;
 8009b22:	2201      	movs	r2, #1
 8009b24:	2104      	movs	r1, #4
 8009b26:	480e      	ldr	r0, [pc, #56]	@ (8009b60 <Start_Rocking_Motor+0x54>)
 8009b28:	f005 ff0a 	bl	800f940 <HAL_GPIO_WritePin>
       Rck_Motor_En;
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009b32:	480c      	ldr	r0, [pc, #48]	@ (8009b64 <Start_Rocking_Motor+0x58>)
 8009b34:	f005 ff04 	bl	800f940 <HAL_GPIO_WritePin>
	 //  Start_PWM(Rocking_motor_speed, Rocking_motor_pulses); // Generates 200 pulses at 1 kHz

     	Start_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL, Rocking_motor_speed, 50, 500);  // 1kHz, 50% duty, 500 pulses
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	2332      	movs	r3, #50	@ 0x32
 8009b42:	2100      	movs	r1, #0
 8009b44:	4808      	ldr	r0, [pc, #32]	@ (8009b68 <Start_Rocking_Motor+0x5c>)
 8009b46:	f004 fdeb 	bl	800e720 <Start_PWM>
     	HAL_Delay(100);
 8009b4a:	2064      	movs	r0, #100	@ 0x64
 8009b4c:	f005 fa90 	bl	800f070 <HAL_Delay>



}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	200004e4 	.word	0x200004e4
 8009b5c:	200004e8 	.word	0x200004e8
 8009b60:	40021000 	.word	0x40021000
 8009b64:	40020800 	.word	0x40020800
 8009b68:	20000788 	.word	0x20000788

08009b6c <Stop_Rocking_Motor>:
void Stop_Rocking_Motor()
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	af00      	add	r7, sp, #0
	Stop_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL);
 8009b70:	2100      	movs	r1, #0
 8009b72:	4809      	ldr	r0, [pc, #36]	@ (8009b98 <Stop_Rocking_Motor+0x2c>)
 8009b74:	f004 fe40 	bl	800e7f8 <Stop_PWM>
	 pulse_count=0;
 8009b78:	4b08      	ldr	r3, [pc, #32]	@ (8009b9c <Stop_Rocking_Motor+0x30>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]
	 plate_cnt=0;
 8009b7e:	4b08      	ldr	r3, [pc, #32]	@ (8009ba0 <Stop_Rocking_Motor+0x34>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
	 home_cnt=0;
 8009b84:	4b07      	ldr	r3, [pc, #28]	@ (8009ba4 <Stop_Rocking_Motor+0x38>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
	 Rck_Motor_Dir_AClk;
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2104      	movs	r1, #4
 8009b8e:	4806      	ldr	r0, [pc, #24]	@ (8009ba8 <Stop_Rocking_Motor+0x3c>)
 8009b90:	f005 fed6 	bl	800f940 <HAL_GPIO_WritePin>

}
 8009b94:	bf00      	nop
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20000788 	.word	0x20000788
 8009b9c:	200005cc 	.word	0x200005cc
 8009ba0:	200004e4 	.word	0x200004e4
 8009ba4:	200004e8 	.word	0x200004e8
 8009ba8:	40021000 	.word	0x40021000

08009bac <Rocking_Slow>:
void Rocking_Slow(int Rocking_motor_speed, int Rocking_motor_pulses)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af02      	add	r7, sp, #8
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
	plate_cnt=0;
 8009bb6:	4b41      	ldr	r3, [pc, #260]	@ (8009cbc <Rocking_Slow+0x110>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
    home_cnt=0;
 8009bbc:	4b40      	ldr	r3, [pc, #256]	@ (8009cc0 <Rocking_Slow+0x114>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]
	Rck_Motor_Dir_Clk;
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	2104      	movs	r1, #4
 8009bc6:	483f      	ldr	r0, [pc, #252]	@ (8009cc4 <Rocking_Slow+0x118>)
 8009bc8:	f005 feba 	bl	800f940 <HAL_GPIO_WritePin>
    Rck_Motor_En;
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009bd2:	483d      	ldr	r0, [pc, #244]	@ (8009cc8 <Rocking_Slow+0x11c>)
 8009bd4:	f005 feb4 	bl	800f940 <HAL_GPIO_WritePin>
    pulse_count=0;
 8009bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8009ccc <Rocking_Slow+0x120>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
 //   putchr('@');
 //   Send_Count(pulse_count);
	Start_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL, RockingFrequencyNormal, 50, Rocking_motor_pulses);  // 1kHz, 50% duty, 500 pulses
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	2332      	movs	r3, #50	@ 0x32
 8009be4:	22e1      	movs	r2, #225	@ 0xe1
 8009be6:	2100      	movs	r1, #0
 8009be8:	4839      	ldr	r0, [pc, #228]	@ (8009cd0 <Rocking_Slow+0x124>)
 8009bea:	f004 fd99 	bl	800e720 <Start_PWM>

	 while ((Sensor_Read(Rocking_Home_Sensor) == 0) && (pulse_count <= 1000))
 8009bee:	bf00      	nop
 8009bf0:	4b38      	ldr	r3, [pc, #224]	@ (8009cd4 <Rocking_Slow+0x128>)
 8009bf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bf6:	f003 ff31 	bl	800da5c <Sensor_Read>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d104      	bne.n	8009c0a <Rocking_Slow+0x5e>
 8009c00:	4b32      	ldr	r3, [pc, #200]	@ (8009ccc <Rocking_Slow+0x120>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c08:	d9f2      	bls.n	8009bf0 <Rocking_Slow+0x44>
		 {
		    //wait
		 }
		 // Stop PWM and related operations
		 Stop_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL);
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4830      	ldr	r0, [pc, #192]	@ (8009cd0 <Rocking_Slow+0x124>)
 8009c0e:	f004 fdf3 	bl	800e7f8 <Stop_PWM>
	     if(pulse_count >= 1000)
 8009c12:	4b2e      	ldr	r3, [pc, #184]	@ (8009ccc <Rocking_Slow+0x120>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c1a:	d303      	bcc.n	8009c24 <Rocking_Slow+0x78>
	    	 {
//	    	 putchr('&');
//	    	 Send_Count(pulse_count);
	    	 Error="L";
 8009c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8009cd8 <Rocking_Slow+0x12c>)
 8009c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8009cdc <Rocking_Slow+0x130>)
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e002      	b.n	8009c2a <Rocking_Slow+0x7e>
	    	 }
	     else
	    	 {
	    	 Error="00";
 8009c24:	4b2c      	ldr	r3, [pc, #176]	@ (8009cd8 <Rocking_Slow+0x12c>)
 8009c26:	4a2e      	ldr	r2, [pc, #184]	@ (8009ce0 <Rocking_Slow+0x134>)
 8009c28:	601a      	str	r2, [r3, #0]
	    	 }

	 Stop_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL);
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	4828      	ldr	r0, [pc, #160]	@ (8009cd0 <Rocking_Slow+0x124>)
 8009c2e:	f004 fde3 	bl	800e7f8 <Stop_PWM>
	 if(strcmp("00",Error)==0)
 8009c32:	4b29      	ldr	r3, [pc, #164]	@ (8009cd8 <Rocking_Slow+0x12c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4619      	mov	r1, r3
 8009c38:	4829      	ldr	r0, [pc, #164]	@ (8009ce0 <Rocking_Slow+0x134>)
 8009c3a:	f7fe fae9 	bl	8008210 <strcmp>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d130      	bne.n	8009ca6 <Rocking_Slow+0xfa>
	 {
	   Start_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL, Rocking_motor_speed, 50, Rocking_motor_pulses);  // 1kHz, 50% duty, 500 pulses
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	2332      	movs	r3, #50	@ 0x32
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	4820      	ldr	r0, [pc, #128]	@ (8009cd0 <Rocking_Slow+0x124>)
 8009c50:	f004 fd66 	bl	800e720 <Start_PWM>
       HAL_Delay(5000);
 8009c54:	f241 3088 	movw	r0, #5000	@ 0x1388
 8009c58:	f005 fa0a 	bl	800f070 <HAL_Delay>
       if((Sensor_Read(Rocking_Home_Sensor))==1)
 8009c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd4 <Rocking_Slow+0x128>)
 8009c5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c62:	f003 fefb 	bl	800da5c <Sensor_Read>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d102      	bne.n	8009c72 <Rocking_Slow+0xc6>
    	   {
 //   	   putchr('#');
//    	  Send_Count(pulse_count);
    	   Error= "I" ;
 8009c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8009cd8 <Rocking_Slow+0x12c>)
 8009c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ce4 <Rocking_Slow+0x138>)
 8009c70:	601a      	str	r2, [r3, #0]
    	   }
        if(strcmp("00",Error)==0) HAL_Delay(30000);
 8009c72:	4b19      	ldr	r3, [pc, #100]	@ (8009cd8 <Rocking_Slow+0x12c>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4619      	mov	r1, r3
 8009c78:	4819      	ldr	r0, [pc, #100]	@ (8009ce0 <Rocking_Slow+0x134>)
 8009c7a:	f7fe fac9 	bl	8008210 <strcmp>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d103      	bne.n	8009c8c <Rocking_Slow+0xe0>
 8009c84:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009c88:	f005 f9f2 	bl	800f070 <HAL_Delay>
		if(strcmp("00",Error)==0) Home_Rocking_Motor(1000);
 8009c8c:	4b12      	ldr	r3, [pc, #72]	@ (8009cd8 <Rocking_Slow+0x12c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4619      	mov	r1, r3
 8009c92:	4813      	ldr	r0, [pc, #76]	@ (8009ce0 <Rocking_Slow+0x134>)
 8009c94:	f7fe fabc 	bl	8008210 <strcmp>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d103      	bne.n	8009ca6 <Rocking_Slow+0xfa>
 8009c9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009ca2:	f000 f821 	bl	8009ce8 <Home_Rocking_Motor>
	 }
	 Stop_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL);
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	4809      	ldr	r0, [pc, #36]	@ (8009cd0 <Rocking_Slow+0x124>)
 8009caa:	f004 fda5 	bl	800e7f8 <Stop_PWM>
	      pulse_count=0;
 8009cae:	4b07      	ldr	r3, [pc, #28]	@ (8009ccc <Rocking_Slow+0x120>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]

}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	200004e4 	.word	0x200004e4
 8009cc0:	200004e8 	.word	0x200004e8
 8009cc4:	40021000 	.word	0x40021000
 8009cc8:	40020800 	.word	0x40020800
 8009ccc:	200005cc 	.word	0x200005cc
 8009cd0:	20000788 	.word	0x20000788
 8009cd4:	200002a0 	.word	0x200002a0
 8009cd8:	20000014 	.word	0x20000014
 8009cdc:	08018eac 	.word	0x08018eac
 8009ce0:	08018eb0 	.word	0x08018eb0
 8009ce4:	08018eb4 	.word	0x08018eb4

08009ce8 <Home_Rocking_Motor>:

void Home_Rocking_Motor(uint32_t Maximum_Pulses)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af02      	add	r7, sp, #8
 8009cee:	6078      	str	r0, [r7, #4]
     pulse_count=0;
 8009cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8009da4 <Home_Rocking_Motor+0xbc>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
	 Rck_Motor_Dir_Clk;
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	2104      	movs	r1, #4
 8009cfa:	482b      	ldr	r0, [pc, #172]	@ (8009da8 <Home_Rocking_Motor+0xc0>)
 8009cfc:	f005 fe20 	bl	800f940 <HAL_GPIO_WritePin>
	 Rck_Motor_En;
 8009d00:	2200      	movs	r2, #0
 8009d02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009d06:	4829      	ldr	r0, [pc, #164]	@ (8009dac <Home_Rocking_Motor+0xc4>)
 8009d08:	f005 fe1a 	bl	800f940 <HAL_GPIO_WritePin>
//	 Start_PWM(RockingFrequencyNormal, 0); // Generates 200 pulses at 1 kHz
	 Start_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL, RockingFrequencyNormal, 50, Rocking_motor_pulses);
 8009d0c:	4b28      	ldr	r3, [pc, #160]	@ (8009db0 <Home_Rocking_Motor+0xc8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	2332      	movs	r3, #50	@ 0x32
 8009d14:	22e1      	movs	r2, #225	@ 0xe1
 8009d16:	2100      	movs	r1, #0
 8009d18:	4826      	ldr	r0, [pc, #152]	@ (8009db4 <Home_Rocking_Motor+0xcc>)
 8009d1a:	f004 fd01 	bl	800e720 <Start_PWM>
	 if((Sensor_Read(Rocking_Home_Sensor))==1)
 8009d1e:	4b26      	ldr	r3, [pc, #152]	@ (8009db8 <Home_Rocking_Motor+0xd0>)
 8009d20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d24:	f003 fe9a 	bl	800da5c <Sensor_Read>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d112      	bne.n	8009d54 <Home_Rocking_Motor+0x6c>
	 {
 	     while(pulse_count<50);
 8009d2e:	bf00      	nop
 8009d30:	4b1c      	ldr	r3, [pc, #112]	@ (8009da4 <Home_Rocking_Motor+0xbc>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b31      	cmp	r3, #49	@ 0x31
 8009d36:	d9fb      	bls.n	8009d30 <Home_Rocking_Motor+0x48>
	     if((Sensor_Read(Rocking_Home_Sensor))==1)
 8009d38:	4b1f      	ldr	r3, [pc, #124]	@ (8009db8 <Home_Rocking_Motor+0xd0>)
 8009d3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d3e:	f003 fe8d 	bl	800da5c <Sensor_Read>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d102      	bne.n	8009d4e <Home_Rocking_Motor+0x66>
	    	 {

	    	   Error= "L" ;// wait till the mechanism goes out of home
 8009d48:	4b1c      	ldr	r3, [pc, #112]	@ (8009dbc <Home_Rocking_Motor+0xd4>)
 8009d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8009dc0 <Home_Rocking_Motor+0xd8>)
 8009d4c:	601a      	str	r2, [r3, #0]
	    	 }
		 pulse_count=0;
 8009d4e:	4b15      	ldr	r3, [pc, #84]	@ (8009da4 <Home_Rocking_Motor+0xbc>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]
	 }
	 // Wait until the Rocking_home sensor is triggered OR pulse limit is reached
	 while ((Sensor_Read(Rocking_Home_Sensor) == 0) && (pulse_count <= Maximum_Pulses))
 8009d54:	bf00      	nop
 8009d56:	4b18      	ldr	r3, [pc, #96]	@ (8009db8 <Home_Rocking_Motor+0xd0>)
 8009d58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d5c:	f003 fe7e 	bl	800da5c <Sensor_Read>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d104      	bne.n	8009d70 <Home_Rocking_Motor+0x88>
 8009d66:	4b0f      	ldr	r3, [pc, #60]	@ (8009da4 <Home_Rocking_Motor+0xbc>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d2f2      	bcs.n	8009d56 <Home_Rocking_Motor+0x6e>
	 {
	    //wait
	 }
	 // Stop PWM and related operations
	 Stop_PWM(ROCKING_TIMER, ROCKING_TIMER_CHANNEL);
 8009d70:	2100      	movs	r1, #0
 8009d72:	4810      	ldr	r0, [pc, #64]	@ (8009db4 <Home_Rocking_Motor+0xcc>)
 8009d74:	f004 fd40 	bl	800e7f8 <Stop_PWM>
     if(pulse_count >= Maximum_Pulses) Error="L";
 8009d78:	4b0a      	ldr	r3, [pc, #40]	@ (8009da4 <Home_Rocking_Motor+0xbc>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d802      	bhi.n	8009d88 <Home_Rocking_Motor+0xa0>
 8009d82:	4b0e      	ldr	r3, [pc, #56]	@ (8009dbc <Home_Rocking_Motor+0xd4>)
 8009d84:	4a0e      	ldr	r2, [pc, #56]	@ (8009dc0 <Home_Rocking_Motor+0xd8>)
 8009d86:	601a      	str	r2, [r3, #0]
      pulse_count=0;
 8009d88:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <Home_Rocking_Motor+0xbc>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
      plate_cnt=0;
 8009d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc4 <Home_Rocking_Motor+0xdc>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
      home_cnt=0;
 8009d94:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc8 <Home_Rocking_Motor+0xe0>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	200005cc 	.word	0x200005cc
 8009da8:	40021000 	.word	0x40021000
 8009dac:	40020800 	.word	0x40020800
 8009db0:	20000008 	.word	0x20000008
 8009db4:	20000788 	.word	0x20000788
 8009db8:	200002a0 	.word	0x200002a0
 8009dbc:	20000014 	.word	0x20000014
 8009dc0:	08018eac 	.word	0x08018eac
 8009dc4:	200004e4 	.word	0x200004e4
 8009dc8:	200004e8 	.word	0x200004e8

08009dcc <Rocking_Count_Function>:
//   if(pulse_count >= Maximum_Pulses) Error="L";
//    pulse_count=0;
//    plate_cnt=0;
//    home_cnt=0;
void Rocking_Count_Function()
{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
//	 Send_Count(home_cnt);
//	 putchr('@');
//	 Send_Count(plate_cnt);
	 if ((home_cnt == 0) && (plate_cnt==0))Error="I"; 	// Rocking mechanism not moving and it is at home
 8009dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8009e0c <Rocking_Count_Function+0x40>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d107      	bne.n	8009de8 <Rocking_Count_Function+0x1c>
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8009e10 <Rocking_Count_Function+0x44>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d103      	bne.n	8009de8 <Rocking_Count_Function+0x1c>
 8009de0:	4b0c      	ldr	r3, [pc, #48]	@ (8009e14 <Rocking_Count_Function+0x48>)
 8009de2:	4a0d      	ldr	r2, [pc, #52]	@ (8009e18 <Rocking_Count_Function+0x4c>)
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	e006      	b.n	8009df6 <Rocking_Count_Function+0x2a>
	 else if (home_cnt==0) Error="K"; 	// Rocking mechanism not moving and it is not at home
 8009de8:	4b08      	ldr	r3, [pc, #32]	@ (8009e0c <Rocking_Count_Function+0x40>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <Rocking_Count_Function+0x2a>
 8009df0:	4b08      	ldr	r3, [pc, #32]	@ (8009e14 <Rocking_Count_Function+0x48>)
 8009df2:	4a0a      	ldr	r2, [pc, #40]	@ (8009e1c <Rocking_Count_Function+0x50>)
 8009df4:	601a      	str	r2, [r3, #0]
//	 else if (plate_cnt==0)Error="J";	// Plate switch not sensed
	 plate_cnt=0;
 8009df6:	4b06      	ldr	r3, [pc, #24]	@ (8009e10 <Rocking_Count_Function+0x44>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]
	 home_cnt=0;
 8009dfc:	4b03      	ldr	r3, [pc, #12]	@ (8009e0c <Rocking_Count_Function+0x40>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	601a      	str	r2, [r3, #0]
}
 8009e02:	bf00      	nop
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	200004e8 	.word	0x200004e8
 8009e10:	200004e4 	.word	0x200004e4
 8009e14:	20000014 	.word	0x20000014
 8009e18:	08018eb4 	.word	0x08018eb4
 8009e1c:	08018eb8 	.word	0x08018eb8

08009e20 <Start_Syringe_Motor>:
extern char *Error;
unsigned int  syringe_motor_speed=1000;
unsigned int  syringe_pulses=0;

void Start_Syringe_Motor()
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af02      	add	r7, sp, #8

	 Start_PWM(SYRINGE_TIMER, SYRINGE_TIMER_CHANNEL, syringe_motor_speed, 50, syringe_pulses);  // 1kHz, 50% duty, 500 pulses
 8009e26:	4b06      	ldr	r3, [pc, #24]	@ (8009e40 <Start_Syringe_Motor+0x20>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	4b06      	ldr	r3, [pc, #24]	@ (8009e44 <Start_Syringe_Motor+0x24>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	2332      	movs	r3, #50	@ 0x32
 8009e32:	2100      	movs	r1, #0
 8009e34:	4804      	ldr	r0, [pc, #16]	@ (8009e48 <Start_Syringe_Motor+0x28>)
 8009e36:	f004 fc73 	bl	800e720 <Start_PWM>

}
 8009e3a:	bf00      	nop
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	2000000c 	.word	0x2000000c
 8009e44:	200004ec 	.word	0x200004ec
 8009e48:	200006b0 	.word	0x200006b0

08009e4c <Stop_Syringe_Motor>:
void Stop_Syringe_Motor()
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	af00      	add	r7, sp, #0
//	Stop_PWM(SYRINGE_TIMER, SYRINGE_TIMER_CHANNEL);
	HAL_TIM_PWM_Stop(&htim9 , TIM_CHANNEL_1);
 8009e50:	2100      	movs	r1, #0
 8009e52:	4804      	ldr	r0, [pc, #16]	@ (8009e64 <Stop_Syringe_Motor+0x18>)
 8009e54:	f007 fee4 	bl	8011c20 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim9); // Stop interrupt
 8009e58:	4802      	ldr	r0, [pc, #8]	@ (8009e64 <Stop_Syringe_Motor+0x18>)
 8009e5a:	f007 fd91 	bl	8011980 <HAL_TIM_Base_Stop_IT>
}
 8009e5e:	bf00      	nop
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200006b0 	.word	0x200006b0

08009e68 <Home_Syringe_Motor>:

void Home_Syringe_Motor(uint32_t Maximum_Pulses)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	 pulse_count=0;
 8009e70:	4b1c      	ldr	r3, [pc, #112]	@ (8009ee4 <Home_Syringe_Motor+0x7c>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
//	 int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
//	 int Encoder=0;
	 Syringe_Motor_Dir_Clk;
 8009e76:	2201      	movs	r2, #1
 8009e78:	2101      	movs	r1, #1
 8009e7a:	481b      	ldr	r0, [pc, #108]	@ (8009ee8 <Home_Syringe_Motor+0x80>)
 8009e7c:	f005 fd60 	bl	800f940 <HAL_GPIO_WritePin>
	 Syringe_Motor_En;
 8009e80:	2200      	movs	r2, #0
 8009e82:	2101      	movs	r1, #1
 8009e84:	4819      	ldr	r0, [pc, #100]	@ (8009eec <Home_Syringe_Motor+0x84>)
 8009e86:	f005 fd5b 	bl	800f940 <HAL_GPIO_WritePin>
	 if(!Sensor_Read(Syringe_Home_Sensor))	 // If already it is at Z home do not move
 8009e8a:	4b19      	ldr	r3, [pc, #100]	@ (8009ef0 <Home_Syringe_Motor+0x88>)
 8009e8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e90:	f003 fde4 	bl	800da5c <Sensor_Read>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d119      	bne.n	8009ece <Home_Syringe_Motor+0x66>
	   {
		   Start_Syringe_Motor()  ;// 1kHz, 50% duty, 500 pulses
 8009e9a:	f7ff ffc1 	bl	8009e20 <Start_Syringe_Motor>
		   while(pulse_count<=Maximum_Pulses )
 8009e9e:	e00f      	b.n	8009ec0 <Home_Syringe_Motor+0x58>
		   {
				if(Sensor_Read(Syringe_Home_Sensor)) // After 3 pulses if it is reached Z home, do not give further pusles
 8009ea0:	4b13      	ldr	r3, [pc, #76]	@ (8009ef0 <Home_Syringe_Motor+0x88>)
 8009ea2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ea6:	f003 fdd9 	bl	800da5c <Sensor_Read>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10d      	bne.n	8009ecc <Home_Syringe_Motor+0x64>
				{
	//				sensor_reached =1;
//					Encoder=9000;
					break;
				}
				if(pulse_count==Maximum_Pulses)  Error= "N";
 8009eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee4 <Home_Syringe_Motor+0x7c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d102      	bne.n	8009ec0 <Home_Syringe_Motor+0x58>
 8009eba:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef4 <Home_Syringe_Motor+0x8c>)
 8009ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8009ef8 <Home_Syringe_Motor+0x90>)
 8009ebe:	601a      	str	r2, [r3, #0]
		   while(pulse_count<=Maximum_Pulses )
 8009ec0:	4b08      	ldr	r3, [pc, #32]	@ (8009ee4 <Home_Syringe_Motor+0x7c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d2ea      	bcs.n	8009ea0 <Home_Syringe_Motor+0x38>
 8009eca:	e000      	b.n	8009ece <Home_Syringe_Motor+0x66>
					break;
 8009ecc:	bf00      	nop
		   }
	    }
	// sensor_reached=0;
	 Syringe_Motor_Dis;
 8009ece:	2201      	movs	r2, #1
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	4806      	ldr	r0, [pc, #24]	@ (8009eec <Home_Syringe_Motor+0x84>)
 8009ed4:	f005 fd34 	bl	800f940 <HAL_GPIO_WritePin>
	 Stop_Syringe_Motor();
 8009ed8:	f7ff ffb8 	bl	8009e4c <Stop_Syringe_Motor>
}
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	200005cc 	.word	0x200005cc
 8009ee8:	40020800 	.word	0x40020800
 8009eec:	40021000 	.word	0x40021000
 8009ef0:	20000298 	.word	0x20000298
 8009ef4:	20000014 	.word	0x20000014
 8009ef8:	08018ebc 	.word	0x08018ebc

08009efc <Move_Syringe_Motor>:

void Move_Syringe_Motor(int Direction, int Distance )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
		   pulse_count=0;
 8009f06:	4b43      	ldr	r3, [pc, #268]	@ (800a014 <Move_Syringe_Motor+0x118>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]
	      int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	613b      	str	r3, [r7, #16]
	      int Encoder=0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]
	      int Initially_Home=0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	617b      	str	r3, [r7, #20]
	      if(Direction)Syringe_Motor_Dir_AClk;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d005      	beq.n	8009f2a <Move_Syringe_Motor+0x2e>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2101      	movs	r1, #1
 8009f22:	483d      	ldr	r0, [pc, #244]	@ (800a018 <Move_Syringe_Motor+0x11c>)
 8009f24:	f005 fd0c 	bl	800f940 <HAL_GPIO_WritePin>
 8009f28:	e004      	b.n	8009f34 <Move_Syringe_Motor+0x38>
	    	else Syringe_Motor_Dir_Clk;
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	483a      	ldr	r0, [pc, #232]	@ (800a018 <Move_Syringe_Motor+0x11c>)
 8009f30:	f005 fd06 	bl	800f940 <HAL_GPIO_WritePin>
	        Syringe_Motor_En;
 8009f34:	2200      	movs	r2, #0
 8009f36:	2101      	movs	r1, #1
 8009f38:	4838      	ldr	r0, [pc, #224]	@ (800a01c <Move_Syringe_Motor+0x120>)
 8009f3a:	f005 fd01 	bl	800f940 <HAL_GPIO_WritePin>
	//        HAL_Delay(20000);
	//        Syringe_Motor_Dis;
           if(Sensor_Read(Syringe_Home_Sensor))
 8009f3e:	4b38      	ldr	r3, [pc, #224]	@ (800a020 <Move_Syringe_Motor+0x124>)
 8009f40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f44:	f003 fd8a 	bl	800da5c <Sensor_Read>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <Move_Syringe_Motor+0x56>
           {
        	   Initially_Home=1;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	617b      	str	r3, [r7, #20]
           }
		   if(Direction)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d02d      	beq.n	8009fb4 <Move_Syringe_Motor+0xb8>
		   {
			   Start_Syringe_Motor() ; // 1kHz, 50% duty, 500 pulses
 8009f58:	f7ff ff62 	bl	8009e20 <Start_Syringe_Motor>
			   while(pulse_count<Distance )
 8009f5c:	e022      	b.n	8009fa4 <Move_Syringe_Motor+0xa8>
			   {
				   if((pulse_count==200) &&(Sensor_Read(Syringe_Home_Sensor))&&(Initially_Home))
 8009f5e:	4b2d      	ldr	r3, [pc, #180]	@ (800a014 <Move_Syringe_Motor+0x118>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2bc8      	cmp	r3, #200	@ 0xc8
 8009f64:	d10e      	bne.n	8009f84 <Move_Syringe_Motor+0x88>
 8009f66:	4b2e      	ldr	r3, [pc, #184]	@ (800a020 <Move_Syringe_Motor+0x124>)
 8009f68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f6c:	f003 fd76 	bl	800da5c <Sensor_Read>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d006      	beq.n	8009f84 <Move_Syringe_Motor+0x88>
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <Move_Syringe_Motor+0x88>
					{
			           Error= "S";
 8009f7c:	4b29      	ldr	r3, [pc, #164]	@ (800a024 <Move_Syringe_Motor+0x128>)
 8009f7e:	4a2a      	ldr	r2, [pc, #168]	@ (800a028 <Move_Syringe_Motor+0x12c>)
 8009f80:	601a      	str	r2, [r3, #0]
					   break;
 8009f82:	e014      	b.n	8009fae <Move_Syringe_Motor+0xb2>
					}
				   if((pulse_count>200) &&(Sensor_Read(Syringe_Home_Sensor)))
 8009f84:	4b23      	ldr	r3, [pc, #140]	@ (800a014 <Move_Syringe_Motor+0x118>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2bc8      	cmp	r3, #200	@ 0xc8
 8009f8a:	d90b      	bls.n	8009fa4 <Move_Syringe_Motor+0xa8>
 8009f8c:	4b24      	ldr	r3, [pc, #144]	@ (800a020 <Move_Syringe_Motor+0x124>)
 8009f8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f92:	f003 fd63 	bl	800da5c <Sensor_Read>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <Move_Syringe_Motor+0xa8>
					{
					   Error= "T";
 8009f9c:	4b21      	ldr	r3, [pc, #132]	@ (800a024 <Move_Syringe_Motor+0x128>)
 8009f9e:	4a23      	ldr	r2, [pc, #140]	@ (800a02c <Move_Syringe_Motor+0x130>)
 8009fa0:	601a      	str	r2, [r3, #0]
					   break;
 8009fa2:	e004      	b.n	8009fae <Move_Syringe_Motor+0xb2>
			   while(pulse_count<Distance )
 8009fa4:	4b1b      	ldr	r3, [pc, #108]	@ (800a014 <Move_Syringe_Motor+0x118>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d3d7      	bcc.n	8009f5e <Move_Syringe_Motor+0x62>
					}
			   }
			   Stop_Syringe_Motor();
 8009fae:	f7ff ff4d 	bl	8009e4c <Stop_Syringe_Motor>
 8009fb2:	e022      	b.n	8009ffa <Move_Syringe_Motor+0xfe>
		   }
		   else if(!Direction)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d11f      	bne.n	8009ffa <Move_Syringe_Motor+0xfe>
		   {
			  uint8_t a= Sensor_Read(Syringe_Home_Sensor);
 8009fba:	4b19      	ldr	r3, [pc, #100]	@ (800a020 <Move_Syringe_Motor+0x124>)
 8009fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009fc0:	f003 fd4c 	bl	800da5c <Sensor_Read>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	72fb      	strb	r3, [r7, #11]
	//		  Send_Count(a);
			  if(!a)	 // If already it is at Z home do not move
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d115      	bne.n	8009ffa <Move_Syringe_Motor+0xfe>
			   {
				  Start_Syringe_Motor()  ;// 1kHz, 50% duty, 500 pulses
 8009fce:	f7ff ff27 	bl	8009e20 <Start_Syringe_Motor>
				   while(pulse_count<=Distance )
 8009fd2:	e00b      	b.n	8009fec <Move_Syringe_Motor+0xf0>
				   {
						if(Sensor_Read(Syringe_Home_Sensor)) // After 3 pulses if it is reached Z home, do not give further pusles
 8009fd4:	4b12      	ldr	r3, [pc, #72]	@ (800a020 <Move_Syringe_Motor+0x124>)
 8009fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009fda:	f003 fd3f 	bl	800da5c <Sensor_Read>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <Move_Syringe_Motor+0xf0>
						{
							Error= "T";
 8009fe4:	4b0f      	ldr	r3, [pc, #60]	@ (800a024 <Move_Syringe_Motor+0x128>)
 8009fe6:	4a11      	ldr	r2, [pc, #68]	@ (800a02c <Move_Syringe_Motor+0x130>)
 8009fe8:	601a      	str	r2, [r3, #0]
						    break;
 8009fea:	e004      	b.n	8009ff6 <Move_Syringe_Motor+0xfa>
				   while(pulse_count<=Distance )
 8009fec:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <Move_Syringe_Motor+0x118>)
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d9ee      	bls.n	8009fd4 <Move_Syringe_Motor+0xd8>
						}
				   }
				   Stop_Syringe_Motor();
 8009ff6:	f7ff ff29 	bl	8009e4c <Stop_Syringe_Motor>
		       }
		   }
		   	sensor_reached=0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	613b      	str	r3, [r7, #16]
		    Syringe_Motor_Dis;
 8009ffe:	2201      	movs	r2, #1
 800a000:	2101      	movs	r1, #1
 800a002:	4806      	ldr	r0, [pc, #24]	@ (800a01c <Move_Syringe_Motor+0x120>)
 800a004:	f005 fc9c 	bl	800f940 <HAL_GPIO_WritePin>
		   	Stop_Syringe_Motor();
 800a008:	f7ff ff20 	bl	8009e4c <Stop_Syringe_Motor>

}
 800a00c:	bf00      	nop
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	200005cc 	.word	0x200005cc
 800a018:	40020800 	.word	0x40020800
 800a01c:	40021000 	.word	0x40021000
 800a020:	20000298 	.word	0x20000298
 800a024:	20000014 	.word	0x20000014
 800a028:	08018ec0 	.word	0x08018ec0
 800a02c:	08018ec4 	.word	0x08018ec4

0800a030 <Start_X_Motor>:
 extern char *Error;
unsigned int  X_motor_speed=1500;
unsigned int  X_pulses=0;

void Start_X_Motor()
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af02      	add	r7, sp, #8
	 Start_PWM(X_MOTOR_TIMER, X_MOTOR_TIMER_CHANNEL, X_motor_speed, 50, X_pulses);  // 1kHz, 50% duty, 500 pulses
 800a036:	4b06      	ldr	r3, [pc, #24]	@ (800a050 <Start_X_Motor+0x20>)
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <Start_X_Motor+0x24>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	2332      	movs	r3, #50	@ 0x32
 800a042:	2100      	movs	r1, #0
 800a044:	4804      	ldr	r0, [pc, #16]	@ (800a058 <Start_X_Motor+0x28>)
 800a046:	f004 fb6b 	bl	800e720 <Start_PWM>

}
 800a04a:	bf00      	nop
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	20000010 	.word	0x20000010
 800a054:	200004f0 	.word	0x200004f0
 800a058:	200006f8 	.word	0x200006f8

0800a05c <Stop_X_Motor>:
void Stop_X_Motor()
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
//	Stop_PWM(X_MOTOR_TIMER, X_MOTOR_TIMER_CHANNEL);
	HAL_TIM_PWM_Stop(&htim10 , TIM_CHANNEL_1);
 800a060:	2100      	movs	r1, #0
 800a062:	4804      	ldr	r0, [pc, #16]	@ (800a074 <Stop_X_Motor+0x18>)
 800a064:	f007 fddc 	bl	8011c20 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim10); // Stop interrupt
 800a068:	4802      	ldr	r0, [pc, #8]	@ (800a074 <Stop_X_Motor+0x18>)
 800a06a:	f007 fc89 	bl	8011980 <HAL_TIM_Base_Stop_IT>
}
 800a06e:	bf00      	nop
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	200006f8 	.word	0x200006f8

0800a078 <Home_X_Motor>:
void Home_X_Motor(int Direction,uint32_t Maximum_Pulses)
{
 800a078:	b590      	push	{r4, r7, lr}
 800a07a:	b089      	sub	sp, #36	@ 0x24
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
	      pulse_count=0;
 800a082:	4ba9      	ldr	r3, [pc, #676]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]
	      int direction_reset=0,X_Home_Check=0;
 800a088:	2300      	movs	r3, #0
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	2300      	movs	r3, #0
 800a08e:	613b      	str	r3, [r7, #16]
		  int sensor_reached=0; // if sesner is sesned con firmy then this bit is set to 1. To take decition at the end of the function based on the bit starte not dpenet on realtime sensor state.
 800a090:	2300      	movs	r3, #0
 800a092:	60fb      	str	r3, [r7, #12]
		if(Direction)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 80d4 	beq.w	800a244 <Home_X_Motor+0x1cc>
		{
		  X_Motor_Dir_AClk;
 800a09c:	2200      	movs	r2, #0
 800a09e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a0a2:	48a2      	ldr	r0, [pc, #648]	@ (800a32c <Home_X_Motor+0x2b4>)
 800a0a4:	f005 fc4c 	bl	800f940 <HAL_GPIO_WritePin>
		  X_Motor_En;
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2108      	movs	r1, #8
 800a0ac:	48a0      	ldr	r0, [pc, #640]	@ (800a330 <Home_X_Motor+0x2b8>)
 800a0ae:	f005 fc47 	bl	800f940 <HAL_GPIO_WritePin>
		  if((!Sensor_Read(Reagent_Probe_Position_Sensor))&& (!Sensor_Read(Nozzle_Probe_Position_Sensor)))
 800a0b2:	4ba0      	ldr	r3, [pc, #640]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a0b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0b8:	f003 fcd0 	bl	800da5c <Sensor_Read>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10b      	bne.n	800a0da <Home_X_Motor+0x62>
 800a0c2:	4b9d      	ldr	r3, [pc, #628]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a0c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0c8:	f003 fcc8 	bl	800da5c <Sensor_Read>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d103      	bne.n	800a0da <Home_X_Motor+0x62>
		  {
	//		  Start_X_Motor()  ;// 1kHz, 50% duty, 500 pulses
			  sensor_reached=1;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	60fb      	str	r3, [r7, #12]
			  X_Home_Check=1;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	613b      	str	r3, [r7, #16]
		  }

		  if(((!Sensor_Read(Reagent_Probe_Position_Sensor)) && (Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a0da:	4b96      	ldr	r3, [pc, #600]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a0dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0e0:	f003 fcbc 	bl	800da5c <Sensor_Read>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d107      	bne.n	800a0fa <Home_X_Motor+0x82>
 800a0ea:	4b93      	ldr	r3, [pc, #588]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a0ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0f0:	f003 fcb4 	bl	800da5c <Sensor_Read>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d11f      	bne.n	800a13a <Home_X_Motor+0xc2>
			 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (!Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a0fa:	4b8e      	ldr	r3, [pc, #568]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a0fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a100:	f003 fcac 	bl	800da5c <Sensor_Read>
 800a104:	4603      	mov	r3, r0
		  if(((!Sensor_Read(Reagent_Probe_Position_Sensor)) && (Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a106:	2b00      	cmp	r3, #0
 800a108:	d007      	beq.n	800a11a <Home_X_Motor+0xa2>
			 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (!Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a10a:	4b8b      	ldr	r3, [pc, #556]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a10c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a110:	f003 fca4 	bl	800da5c <Sensor_Read>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00f      	beq.n	800a13a <Home_X_Motor+0xc2>
			 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (Sensor_Read(Nozzle_Probe_Position_Sensor))) )	 // If already it is at Z home do not move
 800a11a:	4b86      	ldr	r3, [pc, #536]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a11c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a120:	f003 fc9c 	bl	800da5c <Sensor_Read>
 800a124:	4603      	mov	r3, r0
			 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (!Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a126:	2b00      	cmp	r3, #0
 800a128:	d048      	beq.n	800a1bc <Home_X_Motor+0x144>
			 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (Sensor_Read(Nozzle_Probe_Position_Sensor))) )	 // If already it is at Z home do not move
 800a12a:	4b83      	ldr	r3, [pc, #524]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a12c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a130:	f003 fc94 	bl	800da5c <Sensor_Read>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d040      	beq.n	800a1bc <Home_X_Motor+0x144>
		   {

			  Start_X_Motor()  ;// 1kHz, 50% duty, 500 pulses
 800a13a:	f7ff ff79 	bl	800a030 <Start_X_Motor>
			   while(pulse_count<=Maximum_Pulses )
 800a13e:	e038      	b.n	800a1b2 <Home_X_Motor+0x13a>
			   {
					if((!Sensor_Read(Reagent_Probe_Position_Sensor))& (!Sensor_Read(Nozzle_Probe_Position_Sensor))) // hOME
 800a140:	4b7c      	ldr	r3, [pc, #496]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a142:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a146:	f003 fc89 	bl	800da5c <Sensor_Read>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	bf0c      	ite	eq
 800a150:	2301      	moveq	r3, #1
 800a152:	2300      	movne	r3, #0
 800a154:	b2dc      	uxtb	r4, r3
 800a156:	4b78      	ldr	r3, [pc, #480]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a158:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a15c:	f003 fc7e 	bl	800da5c <Sensor_Read>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	bf0c      	ite	eq
 800a166:	2301      	moveq	r3, #1
 800a168:	2300      	movne	r3, #0
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	4023      	ands	r3, r4
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <Home_X_Motor+0x102>
					{
						sensor_reached =1;
 800a174:	2301      	movs	r3, #1
 800a176:	60fb      	str	r3, [r7, #12]
						break;
 800a178:	e020      	b.n	800a1bc <Home_X_Motor+0x144>
					}
					else if(Sensor_Read(X_EOT_Sensor))
 800a17a:	4b70      	ldr	r3, [pc, #448]	@ (800a33c <Home_X_Motor+0x2c4>)
 800a17c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a180:	f003 fc6c 	bl	800da5c <Sensor_Read>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <Home_X_Motor+0x128>
					{
						pulse_count=0;
 800a18a:	4b67      	ldr	r3, [pc, #412]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]
						direction_reset=1;
 800a190:	2301      	movs	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
						X_Motor_Dir_Clk;
 800a194:	2201      	movs	r2, #1
 800a196:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a19a:	4864      	ldr	r0, [pc, #400]	@ (800a32c <Home_X_Motor+0x2b4>)
 800a19c:	f005 fbd0 	bl	800f940 <HAL_GPIO_WritePin>
					}
					if(pulse_count==Maximum_Pulses )
 800a1a0:	4b61      	ldr	r3, [pc, #388]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d103      	bne.n	800a1b2 <Home_X_Motor+0x13a>
					{
						Error="D";
 800a1aa:	4b65      	ldr	r3, [pc, #404]	@ (800a340 <Home_X_Motor+0x2c8>)
 800a1ac:	4a65      	ldr	r2, [pc, #404]	@ (800a344 <Home_X_Motor+0x2cc>)
 800a1ae:	601a      	str	r2, [r3, #0]
						break;
 800a1b0:	e004      	b.n	800a1bc <Home_X_Motor+0x144>
			   while(pulse_count<=Maximum_Pulses )
 800a1b2:	4b5d      	ldr	r3, [pc, #372]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d2c1      	bcs.n	800a140 <Home_X_Motor+0xc8>
					}
               }
		  }
		  if((sensor_reached==1)&&((direction_reset==0)||(X_Home_Check==1)))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d13e      	bne.n	800a240 <Home_X_Motor+0x1c8>
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <Home_X_Motor+0x156>
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d138      	bne.n	800a240 <Home_X_Motor+0x1c8>
		  {
			  X_Motor_Dir_AClk;
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a1d4:	4855      	ldr	r0, [pc, #340]	@ (800a32c <Home_X_Motor+0x2b4>)
 800a1d6:	f005 fbb3 	bl	800f940 <HAL_GPIO_WritePin>
			  Start_PWM(X_MOTOR_TIMER, X_MOTOR_TIMER_CHANNEL, 500, 50, X_pulses);
 800a1da:	4b5b      	ldr	r3, [pc, #364]	@ (800a348 <Home_X_Motor+0x2d0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	2332      	movs	r3, #50	@ 0x32
 800a1e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	4858      	ldr	r0, [pc, #352]	@ (800a34c <Home_X_Motor+0x2d4>)
 800a1ea:	f004 fa99 	bl	800e720 <Start_PWM>
			  pulse_count=0;
 800a1ee:	4b4e      	ldr	r3, [pc, #312]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
			  while(pulse_count<50);
 800a1f4:	bf00      	nop
 800a1f6:	4b4c      	ldr	r3, [pc, #304]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b31      	cmp	r3, #49	@ 0x31
 800a1fc:	d9fb      	bls.n	800a1f6 <Home_X_Motor+0x17e>
			  pulse_count=0;
 800a1fe:	4b4a      	ldr	r3, [pc, #296]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
			  X_Motor_Dir_Clk;
 800a204:	2201      	movs	r2, #1
 800a206:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a20a:	4848      	ldr	r0, [pc, #288]	@ (800a32c <Home_X_Motor+0x2b4>)
 800a20c:	f005 fb98 	bl	800f940 <HAL_GPIO_WritePin>
			  while(pulse_count<500)
 800a210:	e00f      	b.n	800a232 <Home_X_Motor+0x1ba>
			  {
				  if((!Sensor_Read(Reagent_Probe_Position_Sensor))&& (!Sensor_Read(Nozzle_Probe_Position_Sensor)))  break;// After 3 pulses if it is reached Z home, do not give further pusles
 800a212:	4b48      	ldr	r3, [pc, #288]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a214:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a218:	f003 fc20 	bl	800da5c <Sensor_Read>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d107      	bne.n	800a232 <Home_X_Motor+0x1ba>
 800a222:	4b45      	ldr	r3, [pc, #276]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a224:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a228:	f003 fc18 	bl	800da5c <Sensor_Read>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <Home_X_Motor+0x1c6>
			  while(pulse_count<500)
 800a232:	4b3d      	ldr	r3, [pc, #244]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a23a:	d3ea      	bcc.n	800a212 <Home_X_Motor+0x19a>
 800a23c:	e000      	b.n	800a240 <Home_X_Motor+0x1c8>
				  if((!Sensor_Read(Reagent_Probe_Position_Sensor))&& (!Sensor_Read(Nozzle_Probe_Position_Sensor)))  break;// After 3 pulses if it is reached Z home, do not give further pusles
 800a23e:	bf00      	nop
			  }

		  }
		  Stop_X_Motor();
 800a240:	f7ff ff0c 	bl	800a05c <Stop_X_Motor>
		}
		if(!Direction)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f040 80c8 	bne.w	800a3dc <Home_X_Motor+0x364>
		{
		    X_Motor_Dir_Clk;
 800a24c:	2201      	movs	r2, #1
 800a24e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a252:	4836      	ldr	r0, [pc, #216]	@ (800a32c <Home_X_Motor+0x2b4>)
 800a254:	f005 fb74 	bl	800f940 <HAL_GPIO_WritePin>
			X_Motor_En;
 800a258:	2200      	movs	r2, #0
 800a25a:	2108      	movs	r1, #8
 800a25c:	4834      	ldr	r0, [pc, #208]	@ (800a330 <Home_X_Motor+0x2b8>)
 800a25e:	f005 fb6f 	bl	800f940 <HAL_GPIO_WritePin>
			 if((!Sensor_Read(Reagent_Probe_Position_Sensor))&& (!Sensor_Read(Nozzle_Probe_Position_Sensor)))
 800a262:	4b34      	ldr	r3, [pc, #208]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a264:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a268:	f003 fbf8 	bl	800da5c <Sensor_Read>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <Home_X_Motor+0x212>
 800a272:	4b31      	ldr	r3, [pc, #196]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a274:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a278:	f003 fbf0 	bl	800da5c <Sensor_Read>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d103      	bne.n	800a28a <Home_X_Motor+0x212>
			  {
	//			 Start_X_Motor()  ;// 1kHz, 50% duty, 500 pulses
				  sensor_reached=1;
 800a282:	2301      	movs	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]
				  X_Home_Check=1;
 800a286:	2301      	movs	r3, #1
 800a288:	613b      	str	r3, [r7, #16]
			  }

		      if(((!Sensor_Read(Reagent_Probe_Position_Sensor)) && (Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a28a:	4b2a      	ldr	r3, [pc, #168]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a28c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a290:	f003 fbe4 	bl	800da5c <Sensor_Read>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d107      	bne.n	800a2aa <Home_X_Motor+0x232>
 800a29a:	4b27      	ldr	r3, [pc, #156]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a29c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2a0:	f003 fbdc 	bl	800da5c <Sensor_Read>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d11f      	bne.n	800a2ea <Home_X_Motor+0x272>
					 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (!Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a2aa:	4b22      	ldr	r3, [pc, #136]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a2ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2b0:	f003 fbd4 	bl	800da5c <Sensor_Read>
 800a2b4:	4603      	mov	r3, r0
		      if(((!Sensor_Read(Reagent_Probe_Position_Sensor)) && (Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d007      	beq.n	800a2ca <Home_X_Motor+0x252>
					 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (!Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a2ba:	4b1f      	ldr	r3, [pc, #124]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a2bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2c0:	f003 fbcc 	bl	800da5c <Sensor_Read>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00f      	beq.n	800a2ea <Home_X_Motor+0x272>
					 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (Sensor_Read(Nozzle_Probe_Position_Sensor))) )	 // If already it is at Z home do not move
 800a2ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a2cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2d0:	f003 fbc4 	bl	800da5c <Sensor_Read>
 800a2d4:	4603      	mov	r3, r0
					 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (!Sensor_Read(Nozzle_Probe_Position_Sensor)))||
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d03f      	beq.n	800a35a <Home_X_Motor+0x2e2>
					 ((Sensor_Read(Reagent_Probe_Position_Sensor)) && (Sensor_Read(Nozzle_Probe_Position_Sensor))) )	 // If already it is at Z home do not move
 800a2da:	4b17      	ldr	r3, [pc, #92]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a2dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2e0:	f003 fbbc 	bl	800da5c <Sensor_Read>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d037      	beq.n	800a35a <Home_X_Motor+0x2e2>
				   {
					  Start_X_Motor()  ;// 1kHz, 50% duty, 500 pulses
 800a2ea:	f7ff fea1 	bl	800a030 <Start_X_Motor>
					   while(pulse_count<=Maximum_Pulses )
 800a2ee:	e02f      	b.n	800a350 <Home_X_Motor+0x2d8>
					   {
							if((!Sensor_Read(Reagent_Probe_Position_Sensor))&& (!Sensor_Read(Nozzle_Probe_Position_Sensor))) // hOME
 800a2f0:	4b10      	ldr	r3, [pc, #64]	@ (800a334 <Home_X_Motor+0x2bc>)
 800a2f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2f6:	f003 fbb1 	bl	800da5c <Sensor_Read>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <Home_X_Motor+0x29e>
 800a300:	4b0d      	ldr	r3, [pc, #52]	@ (800a338 <Home_X_Motor+0x2c0>)
 800a302:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a306:	f003 fba9 	bl	800da5c <Sensor_Read>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d102      	bne.n	800a316 <Home_X_Motor+0x29e>
							{
								sensor_reached =1;
 800a310:	2301      	movs	r3, #1
 800a312:	60fb      	str	r3, [r7, #12]
								break;
 800a314:	e021      	b.n	800a35a <Home_X_Motor+0x2e2>
							}
							if(pulse_count==Maximum_Pulses )
 800a316:	4b04      	ldr	r3, [pc, #16]	@ (800a328 <Home_X_Motor+0x2b0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d117      	bne.n	800a350 <Home_X_Motor+0x2d8>
							{
								Error="D";
 800a320:	4b07      	ldr	r3, [pc, #28]	@ (800a340 <Home_X_Motor+0x2c8>)
 800a322:	4a08      	ldr	r2, [pc, #32]	@ (800a344 <Home_X_Motor+0x2cc>)
 800a324:	601a      	str	r2, [r3, #0]
								break;
 800a326:	e018      	b.n	800a35a <Home_X_Motor+0x2e2>
 800a328:	200005cc 	.word	0x200005cc
 800a32c:	40020400 	.word	0x40020400
 800a330:	40021000 	.word	0x40021000
 800a334:	20000270 	.word	0x20000270
 800a338:	20000278 	.word	0x20000278
 800a33c:	20000290 	.word	0x20000290
 800a340:	20000014 	.word	0x20000014
 800a344:	08018ec8 	.word	0x08018ec8
 800a348:	200004f0 	.word	0x200004f0
 800a34c:	200006f8 	.word	0x200006f8
					   while(pulse_count<=Maximum_Pulses )
 800a350:	4b24      	ldr	r3, [pc, #144]	@ (800a3e4 <Home_X_Motor+0x36c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	429a      	cmp	r2, r3
 800a358:	d2ca      	bcs.n	800a2f0 <Home_X_Motor+0x278>
							}
					   }

				  }
		      if((sensor_reached==1)&&(X_Home_Check==1))
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d13b      	bne.n	800a3d8 <Home_X_Motor+0x360>
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d138      	bne.n	800a3d8 <Home_X_Motor+0x360>
			  {
		    	  X_Motor_Dir_AClk;
 800a366:	2200      	movs	r2, #0
 800a368:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a36c:	481e      	ldr	r0, [pc, #120]	@ (800a3e8 <Home_X_Motor+0x370>)
 800a36e:	f005 fae7 	bl	800f940 <HAL_GPIO_WritePin>
		    	 			  Start_PWM(X_MOTOR_TIMER, X_MOTOR_TIMER_CHANNEL, 500, 50, X_pulses);
 800a372:	4b1e      	ldr	r3, [pc, #120]	@ (800a3ec <Home_X_Motor+0x374>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	2332      	movs	r3, #50	@ 0x32
 800a37a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a37e:	2100      	movs	r1, #0
 800a380:	481b      	ldr	r0, [pc, #108]	@ (800a3f0 <Home_X_Motor+0x378>)
 800a382:	f004 f9cd 	bl	800e720 <Start_PWM>
		    	 			  pulse_count=0;
 800a386:	4b17      	ldr	r3, [pc, #92]	@ (800a3e4 <Home_X_Motor+0x36c>)
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
		    	 			  while(pulse_count<50);
 800a38c:	bf00      	nop
 800a38e:	4b15      	ldr	r3, [pc, #84]	@ (800a3e4 <Home_X_Motor+0x36c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b31      	cmp	r3, #49	@ 0x31
 800a394:	d9fb      	bls.n	800a38e <Home_X_Motor+0x316>
		    	 			  pulse_count=0;
 800a396:	4b13      	ldr	r3, [pc, #76]	@ (800a3e4 <Home_X_Motor+0x36c>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
		    	 			  X_Motor_Dir_Clk;
 800a39c:	2201      	movs	r2, #1
 800a39e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a3a2:	4811      	ldr	r0, [pc, #68]	@ (800a3e8 <Home_X_Motor+0x370>)
 800a3a4:	f005 facc 	bl	800f940 <HAL_GPIO_WritePin>
		    	 			  while(pulse_count<500)
 800a3a8:	e00f      	b.n	800a3ca <Home_X_Motor+0x352>
		    	 			  {
		    	 				  if((!Sensor_Read(Reagent_Probe_Position_Sensor))&& (!Sensor_Read(Nozzle_Probe_Position_Sensor)))  break;// After 3 pulses if it is reached Z home, do not give further pusles
 800a3aa:	4b12      	ldr	r3, [pc, #72]	@ (800a3f4 <Home_X_Motor+0x37c>)
 800a3ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a3b0:	f003 fb54 	bl	800da5c <Sensor_Read>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d107      	bne.n	800a3ca <Home_X_Motor+0x352>
 800a3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a3f8 <Home_X_Motor+0x380>)
 800a3bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a3c0:	f003 fb4c 	bl	800da5c <Sensor_Read>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d005      	beq.n	800a3d6 <Home_X_Motor+0x35e>
		    	 			  while(pulse_count<500)
 800a3ca:	4b06      	ldr	r3, [pc, #24]	@ (800a3e4 <Home_X_Motor+0x36c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a3d2:	d3ea      	bcc.n	800a3aa <Home_X_Motor+0x332>
 800a3d4:	e000      	b.n	800a3d8 <Home_X_Motor+0x360>
		    	 				  if((!Sensor_Read(Reagent_Probe_Position_Sensor))&& (!Sensor_Read(Nozzle_Probe_Position_Sensor)))  break;// After 3 pulses if it is reached Z home, do not give further pusles
 800a3d6:	bf00      	nop
		    	 			  }
			  }
		      Stop_X_Motor();
 800a3d8:	f7ff fe40 	bl	800a05c <Stop_X_Motor>
		}


}
 800a3dc:	bf00      	nop
 800a3de:	371c      	adds	r7, #28
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd90      	pop	{r4, r7, pc}
 800a3e4:	200005cc 	.word	0x200005cc
 800a3e8:	40020400 	.word	0x40020400
 800a3ec:	200004f0 	.word	0x200004f0
 800a3f0:	200006f8 	.word	0x200006f8
 800a3f4:	20000270 	.word	0x20000270
 800a3f8:	20000278 	.word	0x20000278

0800a3fc <Move_X_Motor>:


void Move_X_Motor(int Direction,int distance_pulse,unsigned int Num_Of_Strips)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b08c      	sub	sp, #48	@ 0x30
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
	unsigned int Sensor_status,probe_nozzle_strip_gap=300,reagent_bottle_gap=600;
 800a408:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a40e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800a412:	623b      	str	r3, [r7, #32]
	unsigned char X_DIR=0;
 800a414:	2300      	movs	r3, #0
 800a416:	77fb      	strb	r3, [r7, #31]
	int sensor_reached=0;
 800a418:	2300      	movs	r3, #0
 800a41a:	61bb      	str	r3, [r7, #24]
	int half_distance=distance_pulse/2;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	0fda      	lsrs	r2, r3, #31
 800a420:	4413      	add	r3, r2
 800a422:	105b      	asrs	r3, r3, #1
 800a424:	617b      	str	r3, [r7, #20]
	X_DIR = Direction;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	77fb      	strb	r3, [r7, #31]
	if(X_DIR)
 800a42a:	7ffb      	ldrb	r3, [r7, #31]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 80a1 	beq.w	800a574 <Move_X_Motor+0x178>
	{
		pulse_count=0;
 800a432:	4b8e      	ldr	r3, [pc, #568]	@ (800a66c <Move_X_Motor+0x270>)
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
		X_Motor_En;
 800a438:	2200      	movs	r2, #0
 800a43a:	2108      	movs	r1, #8
 800a43c:	488c      	ldr	r0, [pc, #560]	@ (800a670 <Move_X_Motor+0x274>)
 800a43e:	f005 fa7f 	bl	800f940 <HAL_GPIO_WritePin>
		X_Motor_Dir_AClk;
 800a442:	2200      	movs	r2, #0
 800a444:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a448:	488a      	ldr	r0, [pc, #552]	@ (800a674 <Move_X_Motor+0x278>)
 800a44a:	f005 fa79 	bl	800f940 <HAL_GPIO_WritePin>

		Start_X_Motor();
 800a44e:	f7ff fdef 	bl	800a030 <Start_X_Motor>
		while(pulse_count<distance_pulse)
 800a452:	e053      	b.n	800a4fc <Move_X_Motor+0x100>
		{
			Sensor_status =( (!(Sensor_Read(Nozzle_Probe_Position_Sensor))) && (!(Sensor_Read(Reagent_Probe_Position_Sensor)))   );
 800a454:	4b88      	ldr	r3, [pc, #544]	@ (800a678 <Move_X_Motor+0x27c>)
 800a456:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a45a:	f003 faff 	bl	800da5c <Sensor_Read>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d109      	bne.n	800a478 <Move_X_Motor+0x7c>
 800a464:	4b85      	ldr	r3, [pc, #532]	@ (800a67c <Move_X_Motor+0x280>)
 800a466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a46a:	f003 faf7 	bl	800da5c <Sensor_Read>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <Move_X_Motor+0x7c>
 800a474:	2301      	movs	r3, #1
 800a476:	e000      	b.n	800a47a <Move_X_Motor+0x7e>
 800a478:	2300      	movs	r3, #0
 800a47a:	613b      	str	r3, [r7, #16]
//			putchr('#');
//			Send_Count(Sensor_status);

			if((pulse_count==50) && (Sensor_status==1))
 800a47c:	4b7b      	ldr	r3, [pc, #492]	@ (800a66c <Move_X_Motor+0x270>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b32      	cmp	r3, #50	@ 0x32
 800a482:	d106      	bne.n	800a492 <Move_X_Motor+0x96>
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d103      	bne.n	800a492 <Move_X_Motor+0x96>
				{
	              Error="E";
 800a48a:	4b7d      	ldr	r3, [pc, #500]	@ (800a680 <Move_X_Motor+0x284>)
 800a48c:	4a7d      	ldr	r2, [pc, #500]	@ (800a684 <Move_X_Motor+0x288>)
 800a48e:	601a      	str	r2, [r3, #0]
//	              putchr('0');
//	              Send_Count(Sensor_status);
//	              putchr('2');
				 break;
 800a490:	e039      	b.n	800a506 <Move_X_Motor+0x10a>
				}
			if((pulse_count>50) && (Sensor_status==1))
 800a492:	4b76      	ldr	r3, [pc, #472]	@ (800a66c <Move_X_Motor+0x270>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b32      	cmp	r3, #50	@ 0x32
 800a498:	d906      	bls.n	800a4a8 <Move_X_Motor+0xac>
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d103      	bne.n	800a4a8 <Move_X_Motor+0xac>
				{
				  Error="F";
 800a4a0:	4b77      	ldr	r3, [pc, #476]	@ (800a680 <Move_X_Motor+0x284>)
 800a4a2:	4a79      	ldr	r2, [pc, #484]	@ (800a688 <Move_X_Motor+0x28c>)
 800a4a4:	601a      	str	r2, [r3, #0]
//				  putchr('3');
//				  Send_Count(Sensor_status);
//				  putchr('4');
				 break;
 800a4a6:	e02e      	b.n	800a506 <Move_X_Motor+0x10a>
				}
			if(distance_pulse >500)
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a4ae:	dd16      	ble.n	800a4de <Move_X_Motor+0xe2>
			{
				if((pulse_count > 50 ) &&(!(Sensor_Read(Reagent_Probe_Position_Sensor))) &&   ((Sensor_Read(Nozzle_Probe_Position_Sensor)))      )
 800a4b0:	4b6e      	ldr	r3, [pc, #440]	@ (800a66c <Move_X_Motor+0x270>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b32      	cmp	r3, #50	@ 0x32
 800a4b6:	d921      	bls.n	800a4fc <Move_X_Motor+0x100>
 800a4b8:	4b70      	ldr	r3, [pc, #448]	@ (800a67c <Move_X_Motor+0x280>)
 800a4ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a4be:	f003 facd 	bl	800da5c <Sensor_Read>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d119      	bne.n	800a4fc <Move_X_Motor+0x100>
 800a4c8:	4b6b      	ldr	r3, [pc, #428]	@ (800a678 <Move_X_Motor+0x27c>)
 800a4ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a4ce:	f003 fac5 	bl	800da5c <Sensor_Read>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d011      	beq.n	800a4fc <Move_X_Motor+0x100>
				{
	//				 putchr('5');
					sensor_reached=1;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	61bb      	str	r3, [r7, #24]
					break;
 800a4dc:	e013      	b.n	800a506 <Move_X_Motor+0x10a>
				}
			}
			else
			{
				if((pulse_count > 50 ) &&(!(Sensor_Read(Nozzle_Probe_Position_Sensor))))  //tune 500 to the nearest first osition count
 800a4de:	4b63      	ldr	r3, [pc, #396]	@ (800a66c <Move_X_Motor+0x270>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b32      	cmp	r3, #50	@ 0x32
 800a4e4:	d90a      	bls.n	800a4fc <Move_X_Motor+0x100>
 800a4e6:	4b64      	ldr	r3, [pc, #400]	@ (800a678 <Move_X_Motor+0x27c>)
 800a4e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a4ec:	f003 fab6 	bl	800da5c <Sensor_Read>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d102      	bne.n	800a4fc <Move_X_Motor+0x100>
				{
		//			 putchr('6');
					sensor_reached=1;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	61bb      	str	r3, [r7, #24]
					break;
 800a4fa:	e004      	b.n	800a506 <Move_X_Motor+0x10a>
		while(pulse_count<distance_pulse)
 800a4fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a66c <Move_X_Motor+0x270>)
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	429a      	cmp	r2, r3
 800a504:	d3a6      	bcc.n	800a454 <Move_X_Motor+0x58>
				}
			}

		}

		for(int strip_position=2;strip_position<=Num_Of_Strips;strip_position++)
 800a506:	2302      	movs	r3, #2
 800a508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a50a:	e02d      	b.n	800a568 <Move_X_Motor+0x16c>
		{
			pulse_count=0;
 800a50c:	4b57      	ldr	r3, [pc, #348]	@ (800a66c <Move_X_Motor+0x270>)
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
			while(pulse_count < probe_nozzle_strip_gap)
 800a512:	e021      	b.n	800a558 <Move_X_Motor+0x15c>
			{
				if(distance_pulse >500)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a51a:	dd0e      	ble.n	800a53a <Move_X_Motor+0x13e>
							{
								if((pulse_count > 50 ) &&(!(Sensor_Read(Reagent_Probe_Position_Sensor))))
 800a51c:	4b53      	ldr	r3, [pc, #332]	@ (800a66c <Move_X_Motor+0x270>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b32      	cmp	r3, #50	@ 0x32
 800a522:	d919      	bls.n	800a558 <Move_X_Motor+0x15c>
 800a524:	4b55      	ldr	r3, [pc, #340]	@ (800a67c <Move_X_Motor+0x280>)
 800a526:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a52a:	f003 fa97 	bl	800da5c <Sensor_Read>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d111      	bne.n	800a558 <Move_X_Motor+0x15c>
								{
									sensor_reached=1;
 800a534:	2301      	movs	r3, #1
 800a536:	61bb      	str	r3, [r7, #24]
									break;
 800a538:	e013      	b.n	800a562 <Move_X_Motor+0x166>
								}
							}
							else
							{
								if((pulse_count > 50 ) &&(!(Sensor_Read(Nozzle_Probe_Position_Sensor))))  //tune 500 to the nearest first osition count
 800a53a:	4b4c      	ldr	r3, [pc, #304]	@ (800a66c <Move_X_Motor+0x270>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b32      	cmp	r3, #50	@ 0x32
 800a540:	d90a      	bls.n	800a558 <Move_X_Motor+0x15c>
 800a542:	4b4d      	ldr	r3, [pc, #308]	@ (800a678 <Move_X_Motor+0x27c>)
 800a544:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a548:	f003 fa88 	bl	800da5c <Sensor_Read>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d102      	bne.n	800a558 <Move_X_Motor+0x15c>
								{
									sensor_reached=1;
 800a552:	2301      	movs	r3, #1
 800a554:	61bb      	str	r3, [r7, #24]
									break;
 800a556:	e004      	b.n	800a562 <Move_X_Motor+0x166>
			while(pulse_count < probe_nozzle_strip_gap)
 800a558:	4b44      	ldr	r3, [pc, #272]	@ (800a66c <Move_X_Motor+0x270>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a55e:	429a      	cmp	r2, r3
 800a560:	d8d8      	bhi.n	800a514 <Move_X_Motor+0x118>
		for(int strip_position=2;strip_position<=Num_Of_Strips;strip_position++)
 800a562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a564:	3301      	adds	r3, #1
 800a566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d2cd      	bcs.n	800a50c <Move_X_Motor+0x110>
								}
							}

			}
		}
		 Stop_X_Motor();
 800a570:	f7ff fd74 	bl	800a05c <Stop_X_Motor>
	}
	if(!X_DIR)
 800a574:	7ffb      	ldrb	r3, [r7, #31]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d173      	bne.n	800a662 <Move_X_Motor+0x266>
	{
		pulse_count=0;
 800a57a:	4b3c      	ldr	r3, [pc, #240]	@ (800a66c <Move_X_Motor+0x270>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]
		X_Motor_En;
 800a580:	2200      	movs	r2, #0
 800a582:	2108      	movs	r1, #8
 800a584:	483a      	ldr	r0, [pc, #232]	@ (800a670 <Move_X_Motor+0x274>)
 800a586:	f005 f9db 	bl	800f940 <HAL_GPIO_WritePin>
		X_Motor_Dir_Clk;
 800a58a:	2201      	movs	r2, #1
 800a58c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a590:	4838      	ldr	r0, [pc, #224]	@ (800a674 <Move_X_Motor+0x278>)
 800a592:	f005 f9d5 	bl	800f940 <HAL_GPIO_WritePin>
		Start_X_Motor();
 800a596:	f7ff fd4b 	bl	800a030 <Start_X_Motor>
		while(pulse_count<distance_pulse)
 800a59a:	e039      	b.n	800a610 <Move_X_Motor+0x214>
		{
			Sensor_status =( (!(Sensor_Read(Reagent_Probe_Position_Sensor))) && (!(Sensor_Read(Nozzle_Probe_Position_Sensor)))   );
 800a59c:	4b37      	ldr	r3, [pc, #220]	@ (800a67c <Move_X_Motor+0x280>)
 800a59e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a5a2:	f003 fa5b 	bl	800da5c <Sensor_Read>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d109      	bne.n	800a5c0 <Move_X_Motor+0x1c4>
 800a5ac:	4b32      	ldr	r3, [pc, #200]	@ (800a678 <Move_X_Motor+0x27c>)
 800a5ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a5b2:	f003 fa53 	bl	800da5c <Sensor_Read>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <Move_X_Motor+0x1c4>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e000      	b.n	800a5c2 <Move_X_Motor+0x1c6>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	613b      	str	r3, [r7, #16]
	//		putchr('@');
	//		Send_Count(Sensor_status);

			if((pulse_count==50) && (Sensor_status==1))
 800a5c4:	4b29      	ldr	r3, [pc, #164]	@ (800a66c <Move_X_Motor+0x270>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b32      	cmp	r3, #50	@ 0x32
 800a5ca:	d106      	bne.n	800a5da <Move_X_Motor+0x1de>
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d103      	bne.n	800a5da <Move_X_Motor+0x1de>
				{
				  Error="E";
 800a5d2:	4b2b      	ldr	r3, [pc, #172]	@ (800a680 <Move_X_Motor+0x284>)
 800a5d4:	4a2b      	ldr	r2, [pc, #172]	@ (800a684 <Move_X_Motor+0x288>)
 800a5d6:	601a      	str	r2, [r3, #0]
				 break;
 800a5d8:	e01f      	b.n	800a61a <Move_X_Motor+0x21e>
				}

			if((pulse_count>50) &&  (Sensor_status==1))
 800a5da:	4b24      	ldr	r3, [pc, #144]	@ (800a66c <Move_X_Motor+0x270>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b32      	cmp	r3, #50	@ 0x32
 800a5e0:	d906      	bls.n	800a5f0 <Move_X_Motor+0x1f4>
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d103      	bne.n	800a5f0 <Move_X_Motor+0x1f4>
				{
				  Error="F";
 800a5e8:	4b25      	ldr	r3, [pc, #148]	@ (800a680 <Move_X_Motor+0x284>)
 800a5ea:	4a27      	ldr	r2, [pc, #156]	@ (800a688 <Move_X_Motor+0x28c>)
 800a5ec:	601a      	str	r2, [r3, #0]
				 break;
 800a5ee:	e014      	b.n	800a61a <Move_X_Motor+0x21e>
				}

				if((pulse_count > 300 ) &&(!(Sensor_Read(Reagent_Probe_Position_Sensor))))
 800a5f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a66c <Move_X_Motor+0x270>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a5f8:	d90a      	bls.n	800a610 <Move_X_Motor+0x214>
 800a5fa:	4b20      	ldr	r3, [pc, #128]	@ (800a67c <Move_X_Motor+0x280>)
 800a5fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a600:	f003 fa2c 	bl	800da5c <Sensor_Read>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <Move_X_Motor+0x214>
				{
					sensor_reached=1;
 800a60a:	2301      	movs	r3, #1
 800a60c:	61bb      	str	r3, [r7, #24]
					break;
 800a60e:	e004      	b.n	800a61a <Move_X_Motor+0x21e>
		while(pulse_count<distance_pulse)
 800a610:	4b16      	ldr	r3, [pc, #88]	@ (800a66c <Move_X_Motor+0x270>)
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	429a      	cmp	r2, r3
 800a618:	d3c0      	bcc.n	800a59c <Move_X_Motor+0x1a0>
				}
		}
		for(int strip_position=2;strip_position<=Num_Of_Strips;strip_position++)
 800a61a:	2302      	movs	r3, #2
 800a61c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a61e:	e01a      	b.n	800a656 <Move_X_Motor+0x25a>
		{
			pulse_count=0;
 800a620:	4b12      	ldr	r3, [pc, #72]	@ (800a66c <Move_X_Motor+0x270>)
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]
			while(pulse_count < reagent_bottle_gap)
 800a626:	e00e      	b.n	800a646 <Move_X_Motor+0x24a>
			{

				if((pulse_count > 50 )&&( !Sensor_Read(Reagent_Probe_Position_Sensor)))
 800a628:	4b10      	ldr	r3, [pc, #64]	@ (800a66c <Move_X_Motor+0x270>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b32      	cmp	r3, #50	@ 0x32
 800a62e:	d90a      	bls.n	800a646 <Move_X_Motor+0x24a>
 800a630:	4b12      	ldr	r3, [pc, #72]	@ (800a67c <Move_X_Motor+0x280>)
 800a632:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a636:	f003 fa11 	bl	800da5c <Sensor_Read>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d102      	bne.n	800a646 <Move_X_Motor+0x24a>
				{
					sensor_reached=1;
 800a640:	2301      	movs	r3, #1
 800a642:	61bb      	str	r3, [r7, #24]
					break;
 800a644:	e004      	b.n	800a650 <Move_X_Motor+0x254>
			while(pulse_count < reagent_bottle_gap)
 800a646:	4b09      	ldr	r3, [pc, #36]	@ (800a66c <Move_X_Motor+0x270>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6a3a      	ldr	r2, [r7, #32]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d8eb      	bhi.n	800a628 <Move_X_Motor+0x22c>
		for(int strip_position=2;strip_position<=Num_Of_Strips;strip_position++)
 800a650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a652:	3301      	adds	r3, #1
 800a654:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d2e0      	bcs.n	800a620 <Move_X_Motor+0x224>
				}
			}
		}
	   Stop_X_Motor();
 800a65e:	f7ff fcfd 	bl	800a05c <Stop_X_Motor>
	}
}
 800a662:	bf00      	nop
 800a664:	3730      	adds	r7, #48	@ 0x30
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	200005cc 	.word	0x200005cc
 800a670:	40021000 	.word	0x40021000
 800a674:	40020400 	.word	0x40020400
 800a678:	20000278 	.word	0x20000278
 800a67c:	20000270 	.word	0x20000270
 800a680:	20000014 	.word	0x20000014
 800a684:	08018ecc 	.word	0x08018ecc
 800a688:	08018ed0 	.word	0x08018ed0

0800a68c <Move_X_Motor_Next_Position>:


void Move_X_Motor_Next_Position(int Direction,int distance_pulse,unsigned int StripOrReagent)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
//	unsigned int probe_nozzle_strip_gap=300,reagent_bottle_gap=700;
	unsigned char X_DIR=0,strip_position=0;
 800a698:	2300      	movs	r3, #0
 800a69a:	74fb      	strb	r3, [r7, #19]
 800a69c:	2300      	movs	r3, #0
 800a69e:	74bb      	strb	r3, [r7, #18]
	int sensor_reached=0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	617b      	str	r3, [r7, #20]

	X_DIR = Direction;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	74fb      	strb	r3, [r7, #19]
	if(X_DIR)
 800a6a8:	7cfb      	ldrb	r3, [r7, #19]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d06a      	beq.n	800a784 <Move_X_Motor_Next_Position+0xf8>
	{
		pulse_count=0;
 800a6ae:	4b5c      	ldr	r3, [pc, #368]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	601a      	str	r2, [r3, #0]
		X_Motor_En;
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2108      	movs	r1, #8
 800a6b8:	485a      	ldr	r0, [pc, #360]	@ (800a824 <Move_X_Motor_Next_Position+0x198>)
 800a6ba:	f005 f941 	bl	800f940 <HAL_GPIO_WritePin>
		X_Motor_Dir_AClk;
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a6c4:	4858      	ldr	r0, [pc, #352]	@ (800a828 <Move_X_Motor_Next_Position+0x19c>)
 800a6c6:	f005 f93b 	bl	800f940 <HAL_GPIO_WritePin>

		Start_X_Motor();
 800a6ca:	f7ff fcb1 	bl	800a030 <Start_X_Motor>
		while(pulse_count<distance_pulse)
 800a6ce:	e043      	b.n	800a758 <Move_X_Motor_Next_Position+0xcc>
		{

			if(StripOrReagent==NOZZLE)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d11e      	bne.n	800a714 <Move_X_Motor_Next_Position+0x88>
			{

				 if((pulse_count==50) && ( (!Sensor_Read(Nozzle_Probe_Position_Sensor))))
 800a6d6:	4b52      	ldr	r3, [pc, #328]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b32      	cmp	r3, #50	@ 0x32
 800a6dc:	d10b      	bne.n	800a6f6 <Move_X_Motor_Next_Position+0x6a>
 800a6de:	4b53      	ldr	r3, [pc, #332]	@ (800a82c <Move_X_Motor_Next_Position+0x1a0>)
 800a6e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6e4:	f003 f9ba 	bl	800da5c <Sensor_Read>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d103      	bne.n	800a6f6 <Move_X_Motor_Next_Position+0x6a>
					{

						Error="G";	// 	Does not leave the last position
 800a6ee:	4b50      	ldr	r3, [pc, #320]	@ (800a830 <Move_X_Motor_Next_Position+0x1a4>)
 800a6f0:	4a50      	ldr	r2, [pc, #320]	@ (800a834 <Move_X_Motor_Next_Position+0x1a8>)
 800a6f2:	601a      	str	r2, [r3, #0]
						break;
 800a6f4:	e035      	b.n	800a762 <Move_X_Motor_Next_Position+0xd6>
					}
				if((pulse_count >51 ) &&(!(Sensor_Read(Nozzle_Probe_Position_Sensor))))
 800a6f6:	4b4a      	ldr	r3, [pc, #296]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b33      	cmp	r3, #51	@ 0x33
 800a6fc:	d92c      	bls.n	800a758 <Move_X_Motor_Next_Position+0xcc>
 800a6fe:	4b4b      	ldr	r3, [pc, #300]	@ (800a82c <Move_X_Motor_Next_Position+0x1a0>)
 800a700:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a704:	f003 f9aa 	bl	800da5c <Sensor_Read>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d124      	bne.n	800a758 <Move_X_Motor_Next_Position+0xcc>
				{
					sensor_reached=1;
 800a70e:	2301      	movs	r3, #1
 800a710:	617b      	str	r3, [r7, #20]
					break;
 800a712:	e026      	b.n	800a762 <Move_X_Motor_Next_Position+0xd6>
				}
			}
			else if(StripOrReagent == PROBE)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d11e      	bne.n	800a758 <Move_X_Motor_Next_Position+0xcc>
			{
				 if((pulse_count==50) && ( (!Sensor_Read(Reagent_Probe_Position_Sensor))))
 800a71a:	4b41      	ldr	r3, [pc, #260]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b32      	cmp	r3, #50	@ 0x32
 800a720:	d10b      	bne.n	800a73a <Move_X_Motor_Next_Position+0xae>
 800a722:	4b45      	ldr	r3, [pc, #276]	@ (800a838 <Move_X_Motor_Next_Position+0x1ac>)
 800a724:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a728:	f003 f998 	bl	800da5c <Sensor_Read>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d103      	bne.n	800a73a <Move_X_Motor_Next_Position+0xae>
				{

					Error="G";	// 	Does not leave the last position
 800a732:	4b3f      	ldr	r3, [pc, #252]	@ (800a830 <Move_X_Motor_Next_Position+0x1a4>)
 800a734:	4a3f      	ldr	r2, [pc, #252]	@ (800a834 <Move_X_Motor_Next_Position+0x1a8>)
 800a736:	601a      	str	r2, [r3, #0]
					break;
 800a738:	e013      	b.n	800a762 <Move_X_Motor_Next_Position+0xd6>
				}
				if((pulse_count >50 ) &&(!(Sensor_Read(Reagent_Probe_Position_Sensor))))  //tune 500 to the nearest first osition count
 800a73a:	4b39      	ldr	r3, [pc, #228]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b32      	cmp	r3, #50	@ 0x32
 800a740:	d90a      	bls.n	800a758 <Move_X_Motor_Next_Position+0xcc>
 800a742:	4b3d      	ldr	r3, [pc, #244]	@ (800a838 <Move_X_Motor_Next_Position+0x1ac>)
 800a744:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a748:	f003 f988 	bl	800da5c <Sensor_Read>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d102      	bne.n	800a758 <Move_X_Motor_Next_Position+0xcc>
				{
					sensor_reached=1;
 800a752:	2301      	movs	r3, #1
 800a754:	617b      	str	r3, [r7, #20]
					break;
 800a756:	e004      	b.n	800a762 <Move_X_Motor_Next_Position+0xd6>
		while(pulse_count<distance_pulse)
 800a758:	4b31      	ldr	r3, [pc, #196]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d3b6      	bcc.n	800a6d0 <Move_X_Motor_Next_Position+0x44>
//						if(pulse_count==100)Error="E";	// Does not leave X Home
//						else if(!sensor_reached)
//							Error="F";
//			//			Send_Count(pulse_count);
//		             }
		 Stop_X_Motor();
 800a762:	f7ff fc7b 	bl	800a05c <Stop_X_Motor>

		if((sensor_reached==0)&& (Error!="G"))
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d107      	bne.n	800a77c <Move_X_Motor_Next_Position+0xf0>
 800a76c:	4b30      	ldr	r3, [pc, #192]	@ (800a830 <Move_X_Motor_Next_Position+0x1a4>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a30      	ldr	r2, [pc, #192]	@ (800a834 <Move_X_Motor_Next_Position+0x1a8>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d002      	beq.n	800a77c <Move_X_Motor_Next_Position+0xf0>
		{
		 Error="H";	// Does not reach next position
 800a776:	4b2e      	ldr	r3, [pc, #184]	@ (800a830 <Move_X_Motor_Next_Position+0x1a4>)
 800a778:	4a30      	ldr	r2, [pc, #192]	@ (800a83c <Move_X_Motor_Next_Position+0x1b0>)
 800a77a:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(500);
 800a77c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a780:	f004 fc76 	bl	800f070 <HAL_Delay>
	}
	if(!X_DIR)
 800a784:	7cfb      	ldrb	r3, [r7, #19]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d146      	bne.n	800a818 <Move_X_Motor_Next_Position+0x18c>
	{
		pulse_count=0;
 800a78a:	4b25      	ldr	r3, [pc, #148]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
		X_Motor_En;
 800a790:	2200      	movs	r2, #0
 800a792:	2108      	movs	r1, #8
 800a794:	4823      	ldr	r0, [pc, #140]	@ (800a824 <Move_X_Motor_Next_Position+0x198>)
 800a796:	f005 f8d3 	bl	800f940 <HAL_GPIO_WritePin>
		X_Motor_Dir_Clk;
 800a79a:	2201      	movs	r2, #1
 800a79c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a7a0:	4821      	ldr	r0, [pc, #132]	@ (800a828 <Move_X_Motor_Next_Position+0x19c>)
 800a7a2:	f005 f8cd 	bl	800f940 <HAL_GPIO_WritePin>
		Start_X_Motor();
 800a7a6:	f7ff fc43 	bl	800a030 <Start_X_Motor>
		while(pulse_count<distance_pulse)
 800a7aa:	e01f      	b.n	800a7ec <Move_X_Motor_Next_Position+0x160>
		{


			   if((pulse_count==50) && ( (!Sensor_Read(Reagent_Probe_Position_Sensor))))
 800a7ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b32      	cmp	r3, #50	@ 0x32
 800a7b2:	d10b      	bne.n	800a7cc <Move_X_Motor_Next_Position+0x140>
 800a7b4:	4b20      	ldr	r3, [pc, #128]	@ (800a838 <Move_X_Motor_Next_Position+0x1ac>)
 800a7b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7ba:	f003 f94f 	bl	800da5c <Sensor_Read>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <Move_X_Motor_Next_Position+0x140>
				{

					Error="G";	// 	Does not leave the last position
 800a7c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a830 <Move_X_Motor_Next_Position+0x1a4>)
 800a7c6:	4a1b      	ldr	r2, [pc, #108]	@ (800a834 <Move_X_Motor_Next_Position+0x1a8>)
 800a7c8:	601a      	str	r2, [r3, #0]
					break;
 800a7ca:	e014      	b.n	800a7f6 <Move_X_Motor_Next_Position+0x16a>
				}

				if((pulse_count > 400 ) &&(!(Sensor_Read(Reagent_Probe_Position_Sensor))))
 800a7cc:	4b14      	ldr	r3, [pc, #80]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800a7d4:	d90a      	bls.n	800a7ec <Move_X_Motor_Next_Position+0x160>
 800a7d6:	4b18      	ldr	r3, [pc, #96]	@ (800a838 <Move_X_Motor_Next_Position+0x1ac>)
 800a7d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7dc:	f003 f93e 	bl	800da5c <Sensor_Read>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d102      	bne.n	800a7ec <Move_X_Motor_Next_Position+0x160>
				{
					sensor_reached=1;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	617b      	str	r3, [r7, #20]
					break;
 800a7ea:	e004      	b.n	800a7f6 <Move_X_Motor_Next_Position+0x16a>
		while(pulse_count<distance_pulse)
 800a7ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a820 <Move_X_Motor_Next_Position+0x194>)
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d3da      	bcc.n	800a7ac <Move_X_Motor_Next_Position+0x120>
				}

		}
		if((sensor_reached==0)&& (Error!="G"))
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d107      	bne.n	800a80c <Move_X_Motor_Next_Position+0x180>
 800a7fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a830 <Move_X_Motor_Next_Position+0x1a4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a0c      	ldr	r2, [pc, #48]	@ (800a834 <Move_X_Motor_Next_Position+0x1a8>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d002      	beq.n	800a80c <Move_X_Motor_Next_Position+0x180>
			{
			 Error="H";	// Does not reach next position
 800a806:	4b0a      	ldr	r3, [pc, #40]	@ (800a830 <Move_X_Motor_Next_Position+0x1a4>)
 800a808:	4a0c      	ldr	r2, [pc, #48]	@ (800a83c <Move_X_Motor_Next_Position+0x1b0>)
 800a80a:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(500);
 800a80c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a810:	f004 fc2e 	bl	800f070 <HAL_Delay>

	   Stop_X_Motor();
 800a814:	f7ff fc22 	bl	800a05c <Stop_X_Motor>
	}
}
 800a818:	bf00      	nop
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	200005cc 	.word	0x200005cc
 800a824:	40021000 	.word	0x40021000
 800a828:	40020400 	.word	0x40020400
 800a82c:	20000278 	.word	0x20000278
 800a830:	20000014 	.word	0x20000014
 800a834:	08018ed4 	.word	0x08018ed4
 800a838:	20000270 	.word	0x20000270
 800a83c:	08018ed8 	.word	0x08018ed8

0800a840 <Start_Process>:


#define SIGNAL_TIMEOUT_MS   100

void Start_Process()
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0

	 if(commandDetected == 1)
 800a844:	4b05      	ldr	r3, [pc, #20]	@ (800a85c <Start_Process+0x1c>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d105      	bne.n	800a858 <Start_Process+0x18>
		  {
			  processCommand(command);
 800a84c:	4804      	ldr	r0, [pc, #16]	@ (800a860 <Start_Process+0x20>)
 800a84e:	f000 f8c9 	bl	800a9e4 <processCommand>
			  commandDetected=0;
 800a852:	4b02      	ldr	r3, [pc, #8]	@ (800a85c <Start_Process+0x1c>)
 800a854:	2200      	movs	r2, #0
 800a856:	701a      	strb	r2, [r3, #0]
		  }

}
 800a858:	bf00      	nop
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	2000055e 	.word	0x2000055e
 800a860:	2000052c 	.word	0x2000052c

0800a864 <CompareToBrace>:

int CompareToBrace( char* definedCommand)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b090      	sub	sp, #64	@ 0x40
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
	  char extractedDefinedCommand[20];
	  char extractedGUICommand[20];
	// Find the '(' character, which indicates the start of parameters
	    char *position = strchr(definedCommand, '(');
 800a86c:	2128      	movs	r1, #40	@ 0x28
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f00a fc24 	bl	80150bc <strchr>
 800a874:	63f8      	str	r0, [r7, #60]	@ 0x3c
	    if (position != NULL) {
 800a876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d010      	beq.n	800a89e <CompareToBrace+0x3a>
	        // Calculate the length of the command name (everything before '(')
	        size_t len = position - definedCommand;
 800a87c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	63bb      	str	r3, [r7, #56]	@ 0x38

	        // Copy the command name into the output buffer
	        strncpy(extractedDefinedCommand, definedCommand, len);
 800a884:	f107 0320 	add.w	r3, r7, #32
 800a888:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f00a fc22 	bl	80150d6 <strncpy>

	        // Ensure the copied string is null-terminated
	        extractedDefinedCommand[len] = '\0';
 800a892:	f107 0220 	add.w	r2, r7, #32
 800a896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a898:	4413      	add	r3, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]

	    }

	   	// Find the '(' character, which indicates the start of parameters
	   	   position = strchr(command, '(');
 800a89e:	2128      	movs	r1, #40	@ 0x28
 800a8a0:	4828      	ldr	r0, [pc, #160]	@ (800a944 <CompareToBrace+0xe0>)
 800a8a2:	f00a fc0b 	bl	80150bc <strchr>
 800a8a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	   	    if (position != NULL) {
 800a8a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d010      	beq.n	800a8d0 <CompareToBrace+0x6c>
	   	        // Calculate the length of the command name (everything before '(')
	   	        size_t len = position - command;
 800a8ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8b0:	4a24      	ldr	r2, [pc, #144]	@ (800a944 <CompareToBrace+0xe0>)
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	637b      	str	r3, [r7, #52]	@ 0x34

	   	        // Copy the command name into the output buffer
	   	        strncpy(extractedGUICommand, command, len);
 800a8b6:	f107 030c 	add.w	r3, r7, #12
 800a8ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8bc:	4921      	ldr	r1, [pc, #132]	@ (800a944 <CompareToBrace+0xe0>)
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f00a fc09 	bl	80150d6 <strncpy>

	   	        // Ensure the copied string is null-terminated
	   	     extractedGUICommand[len] = '\0';
 800a8c4:	f107 020c 	add.w	r2, r7, #12
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ca:	4413      	add	r3, r2
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
	   	    }
//	   	 memset(extractedDefinedCommand, 0, sizeof(extractedDefinedCommand));
//	      HAL_UART_Transmit(&huart3, (uint8_t *)extractedDefinedCommand,strlen(extractedDefinedCommand), HAL_MAX_DELAY);
//	      HAL_UART_Transmit(&huart3, (uint8_t *)extractedGUICommand,strlen(extractedGUICommand), HAL_MAX_DELAY);

	    if (strcmp(extractedDefinedCommand, extractedGUICommand) == 0)
 800a8d0:	f107 020c 	add.w	r2, r7, #12
 800a8d4:	f107 0320 	add.w	r3, r7, #32
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fd fc98 	bl	8008210 <strcmp>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d11a      	bne.n	800a91c <CompareToBrace+0xb8>
	       {
	    	  memset(extractedDefinedCommand, 0, sizeof(extractedDefinedCommand));
 800a8e6:	f107 0320 	add.w	r3, r7, #32
 800a8ea:	2214      	movs	r2, #20
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f00a fbdc 	bl	80150ac <memset>
	    	  memset(extractedGUICommand, 0, sizeof(extractedGUICommand));
 800a8f4:	f107 030c 	add.w	r3, r7, #12
 800a8f8:	2214      	movs	r2, #20
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f00a fbd5 	bl	80150ac <memset>
	    	  HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen((const char *)command), HAL_MAX_DELAY); //echo command
 800a902:	4810      	ldr	r0, [pc, #64]	@ (800a944 <CompareToBrace+0xe0>)
 800a904:	f7fd fce4 	bl	80082d0 <strlen>
 800a908:	4603      	mov	r3, r0
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	f04f 33ff 	mov.w	r3, #4294967295
 800a910:	490c      	ldr	r1, [pc, #48]	@ (800a944 <CompareToBrace+0xe0>)
 800a912:	480d      	ldr	r0, [pc, #52]	@ (800a948 <CompareToBrace+0xe4>)
 800a914:	f008 f998 	bl	8012c48 <HAL_UART_Transmit>
	          return 1;
 800a918:	2301      	movs	r3, #1
 800a91a:	e00e      	b.n	800a93a <CompareToBrace+0xd6>
	       }
	    else
	       {
	    	  memset(extractedDefinedCommand, 0, sizeof(extractedDefinedCommand));
 800a91c:	f107 0320 	add.w	r3, r7, #32
 800a920:	2214      	movs	r2, #20
 800a922:	2100      	movs	r1, #0
 800a924:	4618      	mov	r0, r3
 800a926:	f00a fbc1 	bl	80150ac <memset>
	          memset(extractedGUICommand, 0, sizeof(extractedGUICommand));
 800a92a:	f107 030c 	add.w	r3, r7, #12
 800a92e:	2214      	movs	r2, #20
 800a930:	2100      	movs	r1, #0
 800a932:	4618      	mov	r0, r3
 800a934:	f00a fbba 	bl	80150ac <memset>
	          return 0;
 800a938:	2300      	movs	r3, #0
	       }
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3740      	adds	r7, #64	@ 0x40
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	2000052c 	.word	0x2000052c
 800a948:	200008a8 	.word	0x200008a8

0800a94c <send_ACK>:
void send_ACK()								//Sending Acknowledgment
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	af00      	add	r7, sp, #0
	putchr(0x06); // send ACK
 800a950:	2006      	movs	r0, #6
 800a952:	f004 f98f 	bl	800ec74 <putchr>
	putchr(0x0D); // CR
 800a956:	200d      	movs	r0, #13
 800a958:	f004 f98c 	bl	800ec74 <putchr>
}
 800a95c:	bf00      	nop
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <module_executed>:
	putchr(0x0D); //CR
	delay_ms(200);

}
void module_executed()
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
	if(strcmp("00",Error)!=0)
 800a964:	4b0c      	ldr	r3, [pc, #48]	@ (800a998 <module_executed+0x38>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4619      	mov	r1, r3
 800a96a:	480c      	ldr	r0, [pc, #48]	@ (800a99c <module_executed+0x3c>)
 800a96c:	f7fd fc50 	bl	8008210 <strcmp>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d004      	beq.n	800a980 <module_executed+0x20>
			{
				putstr(Error);
 800a976:	4b08      	ldr	r3, [pc, #32]	@ (800a998 <module_executed+0x38>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f004 f98c 	bl	800ec98 <putstr>
			}
	    putchr('$');
 800a980:	2024      	movs	r0, #36	@ 0x24
 800a982:	f004 f977 	bl	800ec74 <putchr>
		Error="00";   //Clear Error variable
 800a986:	4b04      	ldr	r3, [pc, #16]	@ (800a998 <module_executed+0x38>)
 800a988:	4a04      	ldr	r2, [pc, #16]	@ (800a99c <module_executed+0x3c>)
 800a98a:	601a      	str	r2, [r3, #0]
		Error_Source = "None";
 800a98c:	4b04      	ldr	r3, [pc, #16]	@ (800a9a0 <module_executed+0x40>)
 800a98e:	4a05      	ldr	r2, [pc, #20]	@ (800a9a4 <module_executed+0x44>)
 800a990:	601a      	str	r2, [r3, #0]
}
 800a992:	bf00      	nop
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	20000014 	.word	0x20000014
 800a99c:	08018edc 	.word	0x08018edc
 800a9a0:	200002e8 	.word	0x200002e8
 800a9a4:	08018ee0 	.word	0x08018ee0

0800a9a8 <Send_Count>:

void Send_Count(uint32_t count) {
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
    char buffer[16];  // Buffer to hold the converted string (enough for 32-bit int + newline)

    // Convert the integer to a string with carriage return and newline
    int length = snprintf(buffer, sizeof(buffer), "%lu", (long)count);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f107 000c 	add.w	r0, r7, #12
 800a9b6:	4a09      	ldr	r2, [pc, #36]	@ (800a9dc <Send_Count+0x34>)
 800a9b8:	2110      	movs	r1, #16
 800a9ba:	f00a fa19 	bl	8014df0 <sniprintf>
 800a9be:	61f8      	str	r0, [r7, #28]

    // Transmit the string via UART2 (blocking mode)
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, length, HAL_MAX_DELAY);
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	f107 010c 	add.w	r1, r7, #12
 800a9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9cc:	4804      	ldr	r0, [pc, #16]	@ (800a9e0 <Send_Count+0x38>)
 800a9ce:	f008 f93b 	bl	8012c48 <HAL_UART_Transmit>
}
 800a9d2:	bf00      	nop
 800a9d4:	3720      	adds	r7, #32
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	08018ee8 	.word	0x08018ee8
 800a9e0:	200008a8 	.word	0x200008a8

0800a9e4 <processCommand>:
void processCommand(char *command)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800a9ea:	af02      	add	r7, sp, #8
 800a9ec:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800a9f0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800a9f4:	6018      	str	r0, [r3, #0]

	 if((CompareToBrace(Firmware_Version))==1)//		  char Firmware_Version[]          = "!VERS()";
 800a9f6:	48c3      	ldr	r0, [pc, #780]	@ (800ad04 <processCommand+0x320>)
 800a9f8:	f7ff ff34 	bl	800a864 <CompareToBrace>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d109      	bne.n	800aa16 <processCommand+0x32>
	 		{
	 			 send_ACK();
 800aa02:	f7ff ffa3 	bl	800a94c <send_ACK>
	 			 putstr("V3.0");
 800aa06:	48c0      	ldr	r0, [pc, #768]	@ (800ad08 <processCommand+0x324>)
 800aa08:	f004 f946 	bl	800ec98 <putstr>
	 			 putchr('$');
 800aa0c:	2024      	movs	r0, #36	@ 0x24
 800aa0e:	f004 f931 	bl	800ec74 <putchr>
 800aa12:	f002 b92a 	b.w	800cc6a <processCommand+0x2286>
	 		}
	 else if((CompareToBrace(Check_Probe_Z_Home_Sensor))==1)//		 Check_Probe_Z_Home_Sensor[] ="!CZPHS()";
 800aa16:	48bd      	ldr	r0, [pc, #756]	@ (800ad0c <processCommand+0x328>)
 800aa18:	f7ff ff24 	bl	800a864 <CompareToBrace>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d115      	bne.n	800aa4e <processCommand+0x6a>
		{
			 send_ACK();
 800aa22:	f7ff ff93 	bl	800a94c <send_ACK>
			 if(Sensor_Read(Z_Home_Sensor))putchr('1');
 800aa26:	4bba      	ldr	r3, [pc, #744]	@ (800ad10 <processCommand+0x32c>)
 800aa28:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa2c:	f003 f816 	bl	800da5c <Sensor_Read>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <processCommand+0x5a>
 800aa36:	2031      	movs	r0, #49	@ 0x31
 800aa38:	f004 f91c 	bl	800ec74 <putchr>
 800aa3c:	e002      	b.n	800aa44 <processCommand+0x60>
			 else putchr('0');
 800aa3e:	2030      	movs	r0, #48	@ 0x30
 800aa40:	f004 f918 	bl	800ec74 <putchr>
			 putchr('$');
 800aa44:	2024      	movs	r0, #36	@ 0x24
 800aa46:	f004 f915 	bl	800ec74 <putchr>
 800aa4a:	f002 b90e 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(Check_Probe_Z_EOT_Sensor))==1)//		char Check_Probe_Z_EOT_Sensor[] ="CZPRS()";
 800aa4e:	48b1      	ldr	r0, [pc, #708]	@ (800ad14 <processCommand+0x330>)
 800aa50:	f7ff ff08 	bl	800a864 <CompareToBrace>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d115      	bne.n	800aa86 <processCommand+0xa2>
		{
			send_ACK();
 800aa5a:	f7ff ff77 	bl	800a94c <send_ACK>
			if(Sensor_Read(Z_EOT_Sensor))putchr('1');
 800aa5e:	4bae      	ldr	r3, [pc, #696]	@ (800ad18 <processCommand+0x334>)
 800aa60:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa64:	f002 fffa 	bl	800da5c <Sensor_Read>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <processCommand+0x92>
 800aa6e:	2031      	movs	r0, #49	@ 0x31
 800aa70:	f004 f900 	bl	800ec74 <putchr>
 800aa74:	e002      	b.n	800aa7c <processCommand+0x98>
			else putchr('0');
 800aa76:	2030      	movs	r0, #48	@ 0x30
 800aa78:	f004 f8fc 	bl	800ec74 <putchr>
		    putchr('$');
 800aa7c:	2024      	movs	r0, #36	@ 0x24
 800aa7e:	f004 f8f9 	bl	800ec74 <putchr>
 800aa82:	f002 b8f2 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(Check_Probe_X_EOT_Sensor))==1)//		char Check_Probe_X_EOT_Sensor[] ="!CXRS()";
 800aa86:	48a5      	ldr	r0, [pc, #660]	@ (800ad1c <processCommand+0x338>)
 800aa88:	f7ff feec 	bl	800a864 <CompareToBrace>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d115      	bne.n	800aabe <processCommand+0xda>
		{
			send_ACK();
 800aa92:	f7ff ff5b 	bl	800a94c <send_ACK>
			if(Sensor_Read(X_EOT_Sensor))putchr('1');
 800aa96:	4ba2      	ldr	r3, [pc, #648]	@ (800ad20 <processCommand+0x33c>)
 800aa98:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa9c:	f002 ffde 	bl	800da5c <Sensor_Read>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <processCommand+0xca>
 800aaa6:	2031      	movs	r0, #49	@ 0x31
 800aaa8:	f004 f8e4 	bl	800ec74 <putchr>
 800aaac:	e002      	b.n	800aab4 <processCommand+0xd0>
			else putchr('0');
 800aaae:	2030      	movs	r0, #48	@ 0x30
 800aab0:	f004 f8e0 	bl	800ec74 <putchr>
		    putchr('$');
 800aab4:	2024      	movs	r0, #36	@ 0x24
 800aab6:	f004 f8dd 	bl	800ec74 <putchr>
 800aaba:	f002 b8d6 	b.w	800cc6a <processCommand+0x2286>
		}

	else if((CompareToBrace(Check_Reagent_Probe_Position_Sensor))==1)//		char Check_Reagent_Probe_Position_Sensor[] ="!CRPOS()";
 800aabe:	4899      	ldr	r0, [pc, #612]	@ (800ad24 <processCommand+0x340>)
 800aac0:	f7ff fed0 	bl	800a864 <CompareToBrace>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d115      	bne.n	800aaf6 <processCommand+0x112>
		{
			send_ACK();
 800aaca:	f7ff ff3f 	bl	800a94c <send_ACK>
			if(Sensor_Read(Reagent_Probe_Position_Sensor))putchr('1');
 800aace:	4b96      	ldr	r3, [pc, #600]	@ (800ad28 <processCommand+0x344>)
 800aad0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aad4:	f002 ffc2 	bl	800da5c <Sensor_Read>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <processCommand+0x102>
 800aade:	2031      	movs	r0, #49	@ 0x31
 800aae0:	f004 f8c8 	bl	800ec74 <putchr>
 800aae4:	e002      	b.n	800aaec <processCommand+0x108>
			else putchr('0');
 800aae6:	2030      	movs	r0, #48	@ 0x30
 800aae8:	f004 f8c4 	bl	800ec74 <putchr>
		    putchr('$');
 800aaec:	2024      	movs	r0, #36	@ 0x24
 800aaee:	f004 f8c1 	bl	800ec74 <putchr>
 800aaf2:	f002 b8ba 	b.w	800cc6a <processCommand+0x2286>
		}

	else if((CompareToBrace(Check_Nozzle_Probe_Position_Sensor))==1)//		char Check_Nozzle_Probe_Position_Sensor[] ="!CNPOS()";
 800aaf6:	488d      	ldr	r0, [pc, #564]	@ (800ad2c <processCommand+0x348>)
 800aaf8:	f7ff feb4 	bl	800a864 <CompareToBrace>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d115      	bne.n	800ab2e <processCommand+0x14a>
		{
			send_ACK();
 800ab02:	f7ff ff23 	bl	800a94c <send_ACK>
			 if(Sensor_Read(Nozzle_Probe_Position_Sensor))putchr('1');
 800ab06:	4b8a      	ldr	r3, [pc, #552]	@ (800ad30 <processCommand+0x34c>)
 800ab08:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab0c:	f002 ffa6 	bl	800da5c <Sensor_Read>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <processCommand+0x13a>
 800ab16:	2031      	movs	r0, #49	@ 0x31
 800ab18:	f004 f8ac 	bl	800ec74 <putchr>
 800ab1c:	e002      	b.n	800ab24 <processCommand+0x140>
			 else putchr('0');
 800ab1e:	2030      	movs	r0, #48	@ 0x30
 800ab20:	f004 f8a8 	bl	800ec74 <putchr>
		    putchr('$');
 800ab24:	2024      	movs	r0, #36	@ 0x24
 800ab26:	f004 f8a5 	bl	800ec74 <putchr>
 800ab2a:	f002 b89e 	b.w	800cc6a <processCommand+0x2286>
		}

	else if((CompareToBrace(Check_Syringe_Home_Sensor))==1)//		char Check_Syringe_Home_Sensor[] ="!CSHS()";
 800ab2e:	4881      	ldr	r0, [pc, #516]	@ (800ad34 <processCommand+0x350>)
 800ab30:	f7ff fe98 	bl	800a864 <CompareToBrace>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d115      	bne.n	800ab66 <processCommand+0x182>
		{
			send_ACK();
 800ab3a:	f7ff ff07 	bl	800a94c <send_ACK>
			if(Sensor_Read(Syringe_Home_Sensor))putchr('1');
 800ab3e:	4b7e      	ldr	r3, [pc, #504]	@ (800ad38 <processCommand+0x354>)
 800ab40:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab44:	f002 ff8a 	bl	800da5c <Sensor_Read>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <processCommand+0x172>
 800ab4e:	2031      	movs	r0, #49	@ 0x31
 800ab50:	f004 f890 	bl	800ec74 <putchr>
 800ab54:	e002      	b.n	800ab5c <processCommand+0x178>
			else putchr('0');
 800ab56:	2030      	movs	r0, #48	@ 0x30
 800ab58:	f004 f88c 	bl	800ec74 <putchr>
		    putchr('$');
 800ab5c:	2024      	movs	r0, #36	@ 0x24
 800ab5e:	f004 f889 	bl	800ec74 <putchr>
 800ab62:	f002 b882 	b.w	800cc6a <processCommand+0x2286>
		}

	else if((CompareToBrace(Check_Probe_Crash_Sensor))==1)//		char Check_Probe_Crash_Sensor[] ="!CPCS()";
 800ab66:	4875      	ldr	r0, [pc, #468]	@ (800ad3c <processCommand+0x358>)
 800ab68:	f7ff fe7c 	bl	800a864 <CompareToBrace>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d115      	bne.n	800ab9e <processCommand+0x1ba>
		{
			send_ACK();
 800ab72:	f7ff feeb 	bl	800a94c <send_ACK>
			if(!Sensor_Read(Probe_Crash_Sensor))putchr('1');
 800ab76:	4b72      	ldr	r3, [pc, #456]	@ (800ad40 <processCommand+0x35c>)
 800ab78:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab7c:	f002 ff6e 	bl	800da5c <Sensor_Read>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <processCommand+0x1aa>
 800ab86:	2031      	movs	r0, #49	@ 0x31
 800ab88:	f004 f874 	bl	800ec74 <putchr>
 800ab8c:	e002      	b.n	800ab94 <processCommand+0x1b0>
			else putchr('0');
 800ab8e:	2030      	movs	r0, #48	@ 0x30
 800ab90:	f004 f870 	bl	800ec74 <putchr>
		    putchr('$');
 800ab94:	2024      	movs	r0, #36	@ 0x24
 800ab96:	f004 f86d 	bl	800ec74 <putchr>
 800ab9a:	f002 b866 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(Check_Rocking_Home_Sensor))==1)//		char Check_Rocking_Home_Sensor[] ="!CRHS()";
 800ab9e:	4869      	ldr	r0, [pc, #420]	@ (800ad44 <processCommand+0x360>)
 800aba0:	f7ff fe60 	bl	800a864 <CompareToBrace>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d115      	bne.n	800abd6 <processCommand+0x1f2>
		{
			send_ACK();
 800abaa:	f7ff fecf 	bl	800a94c <send_ACK>
			if(Sensor_Read(Rocking_Home_Sensor))putchr('1');
 800abae:	4b66      	ldr	r3, [pc, #408]	@ (800ad48 <processCommand+0x364>)
 800abb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abb4:	f002 ff52 	bl	800da5c <Sensor_Read>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <processCommand+0x1e2>
 800abbe:	2031      	movs	r0, #49	@ 0x31
 800abc0:	f004 f858 	bl	800ec74 <putchr>
 800abc4:	e002      	b.n	800abcc <processCommand+0x1e8>
			else putchr('0');
 800abc6:	2030      	movs	r0, #48	@ 0x30
 800abc8:	f004 f854 	bl	800ec74 <putchr>
		    putchr('$');
 800abcc:	2024      	movs	r0, #36	@ 0x24
 800abce:	f004 f851 	bl	800ec74 <putchr>
 800abd2:	f002 b84a 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(Check_Rocking_Plate_Sensor))==1)//		char Check_Rocking_Home_Sensor[] ="!CRHS()";
 800abd6:	485d      	ldr	r0, [pc, #372]	@ (800ad4c <processCommand+0x368>)
 800abd8:	f7ff fe44 	bl	800a864 <CompareToBrace>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d115      	bne.n	800ac0e <processCommand+0x22a>
		{
			send_ACK();
 800abe2:	f7ff feb3 	bl	800a94c <send_ACK>
			if(Sensor_Read(Rocking_Plate_Sensor))putchr('1');
 800abe6:	4b5a      	ldr	r3, [pc, #360]	@ (800ad50 <processCommand+0x36c>)
 800abe8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abec:	f002 ff36 	bl	800da5c <Sensor_Read>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <processCommand+0x21a>
 800abf6:	2031      	movs	r0, #49	@ 0x31
 800abf8:	f004 f83c 	bl	800ec74 <putchr>
 800abfc:	e002      	b.n	800ac04 <processCommand+0x220>
			else putchr('0');
 800abfe:	2030      	movs	r0, #48	@ 0x30
 800ac00:	f004 f838 	bl	800ec74 <putchr>
		    putchr('$');
 800ac04:	2024      	movs	r0, #36	@ 0x24
 800ac06:	f004 f835 	bl	800ec74 <putchr>
 800ac0a:	f002 b82e 	b.w	800cc6a <processCommand+0x2286>
		}
	 else if(((CompareToBrace(Check_Tube_Sensor))==1)) //har  Check_Tube_Sensor[]           = "!CTSE()";
 800ac0e:	4851      	ldr	r0, [pc, #324]	@ (800ad54 <processCommand+0x370>)
 800ac10:	f7ff fe28 	bl	800a864 <CompareToBrace>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d12b      	bne.n	800ac72 <processCommand+0x28e>
		 			 {
		 			 unsigned int Sensor_No	    = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
		 			 send_ACK();
 800ac20:	f7ff fe94 	bl	800a94c <send_ACK>
		 			 int extracted = sscanf(command, "!CTSE(%d)",&Sensor_No);
 800ac24:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800ac28:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800ac2c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800ac30:	4949      	ldr	r1, [pc, #292]	@ (800ad58 <processCommand+0x374>)
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	f00a f934 	bl	8014ea0 <siscanf>
 800ac38:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
		 			 if (extracted != 1) {
 800ac3c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d008      	beq.n	800ac56 <processCommand+0x272>
		 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800ac44:	f04f 33ff 	mov.w	r3, #4294967295
 800ac48:	2217      	movs	r2, #23
 800ac4a:	4944      	ldr	r1, [pc, #272]	@ (800ad5c <processCommand+0x378>)
 800ac4c:	4844      	ldr	r0, [pc, #272]	@ (800ad60 <processCommand+0x37c>)
 800ac4e:	f007 fffb 	bl	8012c48 <HAL_UART_Transmit>
 800ac52:	f002 b80f 	b.w	800cc74 <processCommand+0x2290>
		 				 return;
		 				}
		 			 if(Tube_Liquid_sensor_Activate)
 800ac56:	4b43      	ldr	r3, [pc, #268]	@ (800ad64 <processCommand+0x380>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d005      	beq.n	800ac6a <processCommand+0x286>
		 				 {

		 				 Liquid_Sensor_Check(Sensor_No);
 800ac5e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	4618      	mov	r0, r3
 800ac66:	f002 ff0f 	bl	800da88 <Liquid_Sensor_Check>
		 				 }
		 			 else  ;
		 			 module_executed();
 800ac6a:	f7ff fe79 	bl	800a960 <module_executed>
 800ac6e:	f001 bffc 	b.w	800cc6a <processCommand+0x2286>
		 			  }
		 else if(((CompareToBrace(Tube_Liquid_Sensor_Enable))==1)) //char  Tube_Liquid_sensor_Enable     = "!TLSE()";
 800ac72:	483d      	ldr	r0, [pc, #244]	@ (800ad68 <processCommand+0x384>)
 800ac74:	f7ff fdf6 	bl	800a864 <CompareToBrace>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d11d      	bne.n	800acba <processCommand+0x2d6>
		 	 			 {

		 	 			 send_ACK();
 800ac7e:	f7ff fe65 	bl	800a94c <send_ACK>
		 	 			 int extracted = sscanf(command, "!TLSE(%d)",&Tube_Liquid_sensor_Activate);
 800ac82:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800ac86:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800ac8a:	4a36      	ldr	r2, [pc, #216]	@ (800ad64 <processCommand+0x380>)
 800ac8c:	4937      	ldr	r1, [pc, #220]	@ (800ad6c <processCommand+0x388>)
 800ac8e:	6818      	ldr	r0, [r3, #0]
 800ac90:	f00a f906 	bl	8014ea0 <siscanf>
 800ac94:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
		 	 			 if (extracted != 1) {
 800ac98:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d008      	beq.n	800acb2 <processCommand+0x2ce>
		 	 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	2217      	movs	r2, #23
 800aca6:	492d      	ldr	r1, [pc, #180]	@ (800ad5c <processCommand+0x378>)
 800aca8:	482d      	ldr	r0, [pc, #180]	@ (800ad60 <processCommand+0x37c>)
 800acaa:	f007 ffcd 	bl	8012c48 <HAL_UART_Transmit>
		 	 				 return;
 800acae:	f001 bfe1 	b.w	800cc74 <processCommand+0x2290>
		 	 				}
		 	 			 module_executed();
 800acb2:	f7ff fe55 	bl	800a960 <module_executed>
 800acb6:	f001 bfd8 	b.w	800cc6a <processCommand+0x2286>
		 	 			 }
	else if((CompareToBrace(Check_WashOrUniversal_Buffer_Pump))==1)//	 char WashOrUniversal_Buffer_Pump ="!CP1";
 800acba:	482d      	ldr	r0, [pc, #180]	@ (800ad70 <processCommand+0x38c>)
 800acbc:	f7ff fdd2 	bl	800a864 <CompareToBrace>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	f040 808c 	bne.w	800ade0 <processCommand+0x3fc>
		{
		       int volume=0;
 800acc8:	2300      	movs	r3, #0
 800acca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
			   send_ACK();
 800acce:	f7ff fe3d 	bl	800a94c <send_ACK>
				int extracted = sscanf(command, "!CP1(%d)", &volume);
 800acd2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800acd6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800acda:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800acde:	4925      	ldr	r1, [pc, #148]	@ (800ad74 <processCommand+0x390>)
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	f00a f8dd 	bl	8014ea0 <siscanf>
 800ace6:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
				if (extracted != 1) {
 800acea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d042      	beq.n	800ad78 <processCommand+0x394>
				HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800acf2:	f04f 33ff 	mov.w	r3, #4294967295
 800acf6:	2217      	movs	r2, #23
 800acf8:	4918      	ldr	r1, [pc, #96]	@ (800ad5c <processCommand+0x378>)
 800acfa:	4819      	ldr	r0, [pc, #100]	@ (800ad60 <processCommand+0x37c>)
 800acfc:	f007 ffa4 	bl	8012c48 <HAL_UART_Transmit>
 800ad00:	f001 bfb8 	b.w	800cc74 <processCommand+0x2290>
 800ad04:	20000220 	.word	0x20000220
 800ad08:	08018eec 	.word	0x08018eec
 800ad0c:	2000001c 	.word	0x2000001c
 800ad10:	20000280 	.word	0x20000280
 800ad14:	20000028 	.word	0x20000028
 800ad18:	20000288 	.word	0x20000288
 800ad1c:	20000034 	.word	0x20000034
 800ad20:	20000290 	.word	0x20000290
 800ad24:	2000003c 	.word	0x2000003c
 800ad28:	20000270 	.word	0x20000270
 800ad2c:	20000048 	.word	0x20000048
 800ad30:	20000278 	.word	0x20000278
 800ad34:	20000054 	.word	0x20000054
 800ad38:	20000298 	.word	0x20000298
 800ad3c:	2000005c 	.word	0x2000005c
 800ad40:	200002b0 	.word	0x200002b0
 800ad44:	20000064 	.word	0x20000064
 800ad48:	200002a0 	.word	0x200002a0
 800ad4c:	2000006c 	.word	0x2000006c
 800ad50:	200002a8 	.word	0x200002a8
 800ad54:	20000074 	.word	0x20000074
 800ad58:	08018ef4 	.word	0x08018ef4
 800ad5c:	08018f00 	.word	0x08018f00
 800ad60:	200008a8 	.word	0x200008a8
 800ad64:	20000018 	.word	0x20000018
 800ad68:	2000007c 	.word	0x2000007c
 800ad6c:	08018f18 	.word	0x08018f18
 800ad70:	20000090 	.word	0x20000090
 800ad74:	08018f24 	.word	0x08018f24
				return;
				}
				Pump_On(&WashandUniversalBuffer_Pump,CLOCKWISE);
 800ad78:	2100      	movs	r1, #0
 800ad7a:	48be      	ldr	r0, [pc, #760]	@ (800b074 <processCommand+0x690>)
 800ad7c:	f002 fdb4 	bl	800d8e8 <Pump_On>
				Rising_Edge(P1_P4_GATE);
 800ad80:	4bbd      	ldr	r3, [pc, #756]	@ (800b078 <processCommand+0x694>)
 800ad82:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad86:	f004 f891 	bl	800eeac <Rising_Edge>
				delay_ms(volume);
 800ad8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f003 ff9c 	bl	800eccc <delay_ms>
				Pump_Off(&WashandUniversalBuffer_Pump);
 800ad94:	48b7      	ldr	r0, [pc, #732]	@ (800b074 <processCommand+0x690>)
 800ad96:	f002 fdd5 	bl	800d944 <Pump_Off>
				Rising_Edge(P1_P4_GATE);
 800ad9a:	4bb7      	ldr	r3, [pc, #732]	@ (800b078 <processCommand+0x694>)
 800ad9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ada0:	f004 f884 	bl	800eeac <Rising_Edge>
				HAL_Delay(1000);
 800ada4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ada8:	f004 f962 	bl	800f070 <HAL_Delay>
				Pump_On(&WashandUniversalBuffer_Pump,ANTICLOCKWISE);
 800adac:	2101      	movs	r1, #1
 800adae:	48b1      	ldr	r0, [pc, #708]	@ (800b074 <processCommand+0x690>)
 800adb0:	f002 fd9a 	bl	800d8e8 <Pump_On>
				Rising_Edge(P1_P4_GATE);
 800adb4:	4bb0      	ldr	r3, [pc, #704]	@ (800b078 <processCommand+0x694>)
 800adb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800adba:	f004 f877 	bl	800eeac <Rising_Edge>
				delay_ms(volume);
 800adbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800adc2:	4618      	mov	r0, r3
 800adc4:	f003 ff82 	bl	800eccc <delay_ms>
				Pump_Off(&WashandUniversalBuffer_Pump);
 800adc8:	48aa      	ldr	r0, [pc, #680]	@ (800b074 <processCommand+0x690>)
 800adca:	f002 fdbb 	bl	800d944 <Pump_Off>
				Rising_Edge(P1_P4_GATE);
 800adce:	4baa      	ldr	r3, [pc, #680]	@ (800b078 <processCommand+0x694>)
 800add0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800add4:	f004 f86a 	bl	800eeac <Rising_Edge>
				module_executed();
 800add8:	f7ff fdc2 	bl	800a960 <module_executed>
 800addc:	f001 bf45 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(Check_Waste_Pump))==1)//	 char Waste_Pump                  ="CP2";
 800ade0:	48a6      	ldr	r0, [pc, #664]	@ (800b07c <processCommand+0x698>)
 800ade2:	f7ff fd3f 	bl	800a864 <CompareToBrace>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d151      	bne.n	800ae90 <processCommand+0x4ac>
		{
		    int volume=0;
 800adec:	2300      	movs	r3, #0
 800adee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
		    send_ACK();
 800adf2:	f7ff fdab 	bl	800a94c <send_ACK>
			int extracted = sscanf(command, "!CP2(%d)", &volume);
 800adf6:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 800adfa:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800adfe:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800ae02:	499f      	ldr	r1, [pc, #636]	@ (800b080 <processCommand+0x69c>)
 800ae04:	6818      	ldr	r0, [r3, #0]
 800ae06:	f00a f84b 	bl	8014ea0 <siscanf>
 800ae0a:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
			if (extracted != 1) {
 800ae0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d008      	beq.n	800ae28 <processCommand+0x444>
			HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800ae16:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1a:	2217      	movs	r2, #23
 800ae1c:	4999      	ldr	r1, [pc, #612]	@ (800b084 <processCommand+0x6a0>)
 800ae1e:	489a      	ldr	r0, [pc, #616]	@ (800b088 <processCommand+0x6a4>)
 800ae20:	f007 ff12 	bl	8012c48 <HAL_UART_Transmit>
 800ae24:	f001 bf26 	b.w	800cc74 <processCommand+0x2290>
			return;
			}
			Pump_On(&Waste_RemovalPump,CLOCKWISE);
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4898      	ldr	r0, [pc, #608]	@ (800b08c <processCommand+0x6a8>)
 800ae2c:	f002 fd5c 	bl	800d8e8 <Pump_On>
			Rising_Edge(P1_P4_GATE);
 800ae30:	4b91      	ldr	r3, [pc, #580]	@ (800b078 <processCommand+0x694>)
 800ae32:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae36:	f004 f839 	bl	800eeac <Rising_Edge>
			delay_ms(volume);
 800ae3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f003 ff44 	bl	800eccc <delay_ms>
			Pump_Off(&Waste_RemovalPump);
 800ae44:	4891      	ldr	r0, [pc, #580]	@ (800b08c <processCommand+0x6a8>)
 800ae46:	f002 fd7d 	bl	800d944 <Pump_Off>
			Rising_Edge(P1_P4_GATE);
 800ae4a:	4b8b      	ldr	r3, [pc, #556]	@ (800b078 <processCommand+0x694>)
 800ae4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae50:	f004 f82c 	bl	800eeac <Rising_Edge>
			HAL_Delay(1000);
 800ae54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ae58:	f004 f90a 	bl	800f070 <HAL_Delay>
			Pump_On(&Waste_RemovalPump,ANTICLOCKWISE);
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	488b      	ldr	r0, [pc, #556]	@ (800b08c <processCommand+0x6a8>)
 800ae60:	f002 fd42 	bl	800d8e8 <Pump_On>
			Rising_Edge(P1_P4_GATE);
 800ae64:	4b84      	ldr	r3, [pc, #528]	@ (800b078 <processCommand+0x694>)
 800ae66:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae6a:	f004 f81f 	bl	800eeac <Rising_Edge>
			delay_ms(volume);
 800ae6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ae72:	4618      	mov	r0, r3
 800ae74:	f003 ff2a 	bl	800eccc <delay_ms>
			Pump_Off(&Waste_RemovalPump);
 800ae78:	4884      	ldr	r0, [pc, #528]	@ (800b08c <processCommand+0x6a8>)
 800ae7a:	f002 fd63 	bl	800d944 <Pump_Off>
			Rising_Edge(P1_P4_GATE);
 800ae7e:	4b7e      	ldr	r3, [pc, #504]	@ (800b078 <processCommand+0x694>)
 800ae80:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae84:	f004 f812 	bl	800eeac <Rising_Edge>
			module_executed();
 800ae88:	f7ff fd6a 	bl	800a960 <module_executed>
 800ae8c:	f001 beed 	b.w	800cc6a <processCommand+0x2286>
		}


	 else if((CompareToBrace(Waste_pump_On))==1)//	 char Waste_pump_On[]                = "!P2ON()" ;
 800ae90:	487f      	ldr	r0, [pc, #508]	@ (800b090 <processCommand+0x6ac>)
 800ae92:	f7ff fce7 	bl	800a864 <CompareToBrace>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d111      	bne.n	800aec0 <processCommand+0x4dc>
	 		{
	 			send_ACK();
 800ae9c:	f7ff fd56 	bl	800a94c <send_ACK>
	 			Pump_On(&Waste_RemovalPump,CLOCKWISE);
 800aea0:	2100      	movs	r1, #0
 800aea2:	487a      	ldr	r0, [pc, #488]	@ (800b08c <processCommand+0x6a8>)
 800aea4:	f002 fd20 	bl	800d8e8 <Pump_On>
	 			Rising_Edge(P1_P4_GATE);
 800aea8:	4b73      	ldr	r3, [pc, #460]	@ (800b078 <processCommand+0x694>)
 800aeaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aeae:	f003 fffd 	bl	800eeac <Rising_Edge>
	 			HAL_Delay(200);
 800aeb2:	20c8      	movs	r0, #200	@ 0xc8
 800aeb4:	f004 f8dc 	bl	800f070 <HAL_Delay>
	 			module_executed();
 800aeb8:	f7ff fd52 	bl	800a960 <module_executed>
 800aebc:	f001 bed5 	b.w	800cc6a <processCommand+0x2286>
	 		}
	else if((CompareToBrace(Waste_pump_Off))==1)//	 char Waste_pump_Off[]               ="!P2OFF()" ;
 800aec0:	4874      	ldr	r0, [pc, #464]	@ (800b094 <processCommand+0x6b0>)
 800aec2:	f7ff fccf 	bl	800a864 <CompareToBrace>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d111      	bne.n	800aef0 <processCommand+0x50c>
		{
			send_ACK();
 800aecc:	f7ff fd3e 	bl	800a94c <send_ACK>
			Pump_Off(&Waste_RemovalPump);
 800aed0:	486e      	ldr	r0, [pc, #440]	@ (800b08c <processCommand+0x6a8>)
 800aed2:	f002 fd37 	bl	800d944 <Pump_Off>
			Rising_Edge(P1_P4_GATE);
 800aed6:	4b68      	ldr	r3, [pc, #416]	@ (800b078 <processCommand+0x694>)
 800aed8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aedc:	f003 ffe6 	bl	800eeac <Rising_Edge>
			HAL_Delay(500);
 800aee0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800aee4:	f004 f8c4 	bl	800f070 <HAL_Delay>
			module_executed();
 800aee8:	f7ff fd3a 	bl	800a960 <module_executed>
 800aeec:	f001 bebd 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(WashOrUniversal_Buffer_Pump))==1)//		 char WashOrUniversal_Buffer_Pump[]   ="!P1()";
 800aef0:	4869      	ldr	r0, [pc, #420]	@ (800b098 <processCommand+0x6b4>)
 800aef2:	f7ff fcb7 	bl	800a864 <CompareToBrace>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d151      	bne.n	800afa0 <processCommand+0x5bc>
		{
			int volume=0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			send_ACK();
 800af02:	f7ff fd23 	bl	800a94c <send_ACK>
			int extracted = sscanf(command, "!P1(%d)", &volume);
 800af06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800af0a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800af0e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800af12:	4962      	ldr	r1, [pc, #392]	@ (800b09c <processCommand+0x6b8>)
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	f009 ffc3 	bl	8014ea0 <siscanf>
 800af1a:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
			if (extracted != 1) {
 800af1e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800af22:	2b01      	cmp	r3, #1
 800af24:	d008      	beq.n	800af38 <processCommand+0x554>
			HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800af26:	f04f 33ff 	mov.w	r3, #4294967295
 800af2a:	2217      	movs	r2, #23
 800af2c:	4955      	ldr	r1, [pc, #340]	@ (800b084 <processCommand+0x6a0>)
 800af2e:	4856      	ldr	r0, [pc, #344]	@ (800b088 <processCommand+0x6a4>)
 800af30:	f007 fe8a 	bl	8012c48 <HAL_UART_Transmit>
 800af34:	f001 be9e 	b.w	800cc74 <processCommand+0x2290>
			return;
			}
			Pump_On(&WashandUniversalBuffer_Pump,CLOCKWISE);
 800af38:	2100      	movs	r1, #0
 800af3a:	484e      	ldr	r0, [pc, #312]	@ (800b074 <processCommand+0x690>)
 800af3c:	f002 fcd4 	bl	800d8e8 <Pump_On>
			Rising_Edge(P1_P4_GATE);
 800af40:	4b4d      	ldr	r3, [pc, #308]	@ (800b078 <processCommand+0x694>)
 800af42:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af46:	f003 ffb1 	bl	800eeac <Rising_Edge>
			delay_ms(volume);
 800af4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800af4e:	4618      	mov	r0, r3
 800af50:	f003 febc 	bl	800eccc <delay_ms>
			Pump_Off(&WashandUniversalBuffer_Pump);
 800af54:	4847      	ldr	r0, [pc, #284]	@ (800b074 <processCommand+0x690>)
 800af56:	f002 fcf5 	bl	800d944 <Pump_Off>
			Rising_Edge(P1_P4_GATE);
 800af5a:	4b47      	ldr	r3, [pc, #284]	@ (800b078 <processCommand+0x694>)
 800af5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af60:	f003 ffa4 	bl	800eeac <Rising_Edge>
			HAL_Delay(1000);
 800af64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800af68:	f004 f882 	bl	800f070 <HAL_Delay>
			Pump_On(&WashandUniversalBuffer_Pump,ANTICLOCKWISE);
 800af6c:	2101      	movs	r1, #1
 800af6e:	4841      	ldr	r0, [pc, #260]	@ (800b074 <processCommand+0x690>)
 800af70:	f002 fcba 	bl	800d8e8 <Pump_On>
			Rising_Edge(P1_P4_GATE);
 800af74:	4b40      	ldr	r3, [pc, #256]	@ (800b078 <processCommand+0x694>)
 800af76:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af7a:	f003 ff97 	bl	800eeac <Rising_Edge>
			delay_ms(volume);
 800af7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800af82:	4618      	mov	r0, r3
 800af84:	f003 fea2 	bl	800eccc <delay_ms>
			Pump_Off(&WashandUniversalBuffer_Pump);
 800af88:	483a      	ldr	r0, [pc, #232]	@ (800b074 <processCommand+0x690>)
 800af8a:	f002 fcdb 	bl	800d944 <Pump_Off>
			Rising_Edge(P1_P4_GATE);
 800af8e:	4b3a      	ldr	r3, [pc, #232]	@ (800b078 <processCommand+0x694>)
 800af90:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af94:	f003 ff8a 	bl	800eeac <Rising_Edge>
			module_executed();
 800af98:	f7ff fce2 	bl	800a960 <module_executed>
 800af9c:	f001 be65 	b.w	800cc6a <processCommand+0x2286>
		}
	else if(((CompareToBrace(Yellow_LED_On_Time))==1))//	char  Yellow_LED_ON                 = "!LYEL()";
 800afa0:	483f      	ldr	r0, [pc, #252]	@ (800b0a0 <processCommand+0x6bc>)
 800afa2:	f7ff fc5f 	bl	800a864 <CompareToBrace>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d119      	bne.n	800afe0 <processCommand+0x5fc>
			{
			 send_ACK();
 800afac:	f7ff fcce 	bl	800a94c <send_ACK>
			 LED_Off(YellowLED);
 800afb0:	4b3c      	ldr	r3, [pc, #240]	@ (800b0a4 <processCommand+0x6c0>)
 800afb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800afb6:	f003 ff69 	bl	800ee8c <LED_Off>
			 // yellow led
			 LED_On(RedLED);
 800afba:	4b3b      	ldr	r3, [pc, #236]	@ (800b0a8 <processCommand+0x6c4>)
 800afbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800afc0:	f003 ff54 	bl	800ee6c <LED_On>
			 LED_On(GreenLED);
 800afc4:	4b39      	ldr	r3, [pc, #228]	@ (800b0ac <processCommand+0x6c8>)
 800afc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800afca:	f003 ff4f 	bl	800ee6c <LED_On>
			 Rising_Edge(VL_EXLED_GATE);
 800afce:	4b38      	ldr	r3, [pc, #224]	@ (800b0b0 <processCommand+0x6cc>)
 800afd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800afd4:	f003 ff6a 	bl	800eeac <Rising_Edge>
			 module_executed();
 800afd8:	f7ff fcc2 	bl	800a960 <module_executed>
 800afdc:	f001 be45 	b.w	800cc6a <processCommand+0x2286>
			 }
		else if(((CompareToBrace(Green_LED_On_Time))==1))//	char  Green_LED_On_Time                  = "!LGRE()";
 800afe0:	4834      	ldr	r0, [pc, #208]	@ (800b0b4 <processCommand+0x6d0>)
 800afe2:	f7ff fc3f 	bl	800a864 <CompareToBrace>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d123      	bne.n	800b034 <processCommand+0x650>
			{
			 send_ACK();
 800afec:	f7ff fcae 	bl	800a94c <send_ACK>
			 LED_Off(YellowLED);
 800aff0:	4b2c      	ldr	r3, [pc, #176]	@ (800b0a4 <processCommand+0x6c0>)
 800aff2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aff6:	f003 ff49 	bl	800ee8c <LED_Off>
			 // yellow led
			 LED_Off(RedLED);
 800affa:	4b2b      	ldr	r3, [pc, #172]	@ (800b0a8 <processCommand+0x6c4>)
 800affc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b000:	f003 ff44 	bl	800ee8c <LED_Off>
			 LED_Off(GreenLED);
 800b004:	4b29      	ldr	r3, [pc, #164]	@ (800b0ac <processCommand+0x6c8>)
 800b006:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b00a:	f003 ff3f 	bl	800ee8c <LED_Off>
			 Rising_Edge(VL_EXLED_GATE);
 800b00e:	4b28      	ldr	r3, [pc, #160]	@ (800b0b0 <processCommand+0x6cc>)
 800b010:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b014:	f003 ff4a 	bl	800eeac <Rising_Edge>
			 LED_On(GreenLED);
 800b018:	4b24      	ldr	r3, [pc, #144]	@ (800b0ac <processCommand+0x6c8>)
 800b01a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b01e:	f003 ff25 	bl	800ee6c <LED_On>
			 Rising_Edge(VL_EXLED_GATE);
 800b022:	4b23      	ldr	r3, [pc, #140]	@ (800b0b0 <processCommand+0x6cc>)
 800b024:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b028:	f003 ff40 	bl	800eeac <Rising_Edge>
			 module_executed();
 800b02c:	f7ff fc98 	bl	800a960 <module_executed>
 800b030:	f001 be1b 	b.w	800cc6a <processCommand+0x2286>
			 }
		else if(((CompareToBrace(Check_Green_LED))==1))//	  Check_Green_LED[]			    = "!CGLED()";
 800b034:	4820      	ldr	r0, [pc, #128]	@ (800b0b8 <processCommand+0x6d4>)
 800b036:	f7ff fc15 	bl	800a864 <CompareToBrace>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d174      	bne.n	800b12a <processCommand+0x746>
			{
			 send_ACK();
 800b040:	f7ff fc84 	bl	800a94c <send_ACK>
			 LED_Off(RedLED);
 800b044:	4b18      	ldr	r3, [pc, #96]	@ (800b0a8 <processCommand+0x6c4>)
 800b046:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b04a:	f003 ff1f 	bl	800ee8c <LED_Off>
			 Rising_Edge(VL_EXLED_GATE);
 800b04e:	4b18      	ldr	r3, [pc, #96]	@ (800b0b0 <processCommand+0x6cc>)
 800b050:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b054:	f003 ff2a 	bl	800eeac <Rising_Edge>
			 LED_Off(YellowLED);
 800b058:	4b12      	ldr	r3, [pc, #72]	@ (800b0a4 <processCommand+0x6c0>)
 800b05a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b05e:	f003 ff15 	bl	800ee8c <LED_Off>
			 Rising_Edge(VL_EXLED_GATE);
 800b062:	4b13      	ldr	r3, [pc, #76]	@ (800b0b0 <processCommand+0x6cc>)
 800b064:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b068:	f003 ff20 	bl	800eeac <Rising_Edge>
			 for(int i=1;i<=3;i++)
 800b06c:	2301      	movs	r3, #1
 800b06e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800b072:	e044      	b.n	800b0fe <processCommand+0x71a>
 800b074:	20000228 	.word	0x20000228
 800b078:	20000258 	.word	0x20000258
 800b07c:	20000098 	.word	0x20000098
 800b080:	08018f30 	.word	0x08018f30
 800b084:	08018f00 	.word	0x08018f00
 800b088:	200008a8 	.word	0x200008a8
 800b08c:	20000238 	.word	0x20000238
 800b090:	200000a0 	.word	0x200000a0
 800b094:	200000a8 	.word	0x200000a8
 800b098:	200000b4 	.word	0x200000b4
 800b09c:	08018f3c 	.word	0x08018f3c
 800b0a0:	20000120 	.word	0x20000120
 800b0a4:	200002d8 	.word	0x200002d8
 800b0a8:	200002d0 	.word	0x200002d0
 800b0ac:	200002c8 	.word	0x200002c8
 800b0b0:	20000268 	.word	0x20000268
 800b0b4:	20000118 	.word	0x20000118
 800b0b8:	200000f4 	.word	0x200000f4
			 {
				 LED_On(GreenLED);
 800b0bc:	4bcc      	ldr	r3, [pc, #816]	@ (800b3f0 <processCommand+0xa0c>)
 800b0be:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b0c2:	f003 fed3 	bl	800ee6c <LED_On>
				 Rising_Edge(VL_EXLED_GATE);
 800b0c6:	4bcb      	ldr	r3, [pc, #812]	@ (800b3f4 <processCommand+0xa10>)
 800b0c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b0cc:	f003 feee 	bl	800eeac <Rising_Edge>
				 HAL_Delay(1000);
 800b0d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b0d4:	f003 ffcc 	bl	800f070 <HAL_Delay>
				 LED_Off(GreenLED);
 800b0d8:	4bc5      	ldr	r3, [pc, #788]	@ (800b3f0 <processCommand+0xa0c>)
 800b0da:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b0de:	f003 fed5 	bl	800ee8c <LED_Off>
				 Rising_Edge(VL_EXLED_GATE);
 800b0e2:	4bc4      	ldr	r3, [pc, #784]	@ (800b3f4 <processCommand+0xa10>)
 800b0e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b0e8:	f003 fee0 	bl	800eeac <Rising_Edge>
				 HAL_Delay(1000);
 800b0ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b0f0:	f003 ffbe 	bl	800f070 <HAL_Delay>
			 for(int i=1;i<=3;i++)
 800b0f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800b0fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800b102:	2b03      	cmp	r3, #3
 800b104:	ddda      	ble.n	800b0bc <processCommand+0x6d8>
			 }
			 LED_On(GreenLED);
 800b106:	4bba      	ldr	r3, [pc, #744]	@ (800b3f0 <processCommand+0xa0c>)
 800b108:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b10c:	f003 feae 	bl	800ee6c <LED_On>
			 Rising_Edge(VL_EXLED_GATE);
 800b110:	4bb8      	ldr	r3, [pc, #736]	@ (800b3f4 <processCommand+0xa10>)
 800b112:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b116:	f003 fec9 	bl	800eeac <Rising_Edge>
			 HAL_Delay(500);
 800b11a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b11e:	f003 ffa7 	bl	800f070 <HAL_Delay>
			 module_executed();
 800b122:	f7ff fc1d 	bl	800a960 <module_executed>
 800b126:	f001 bda0 	b.w	800cc6a <processCommand+0x2286>
			 }
		else if(((CompareToBrace(Check_Red_LED))==1))//	  Check_Red_LED[]			    = "!CRLED()";
 800b12a:	48b3      	ldr	r0, [pc, #716]	@ (800b3f8 <processCommand+0xa14>)
 800b12c:	f7ff fb9a 	bl	800a864 <CompareToBrace>
 800b130:	4603      	mov	r3, r0
 800b132:	2b01      	cmp	r3, #1
 800b134:	d150      	bne.n	800b1d8 <processCommand+0x7f4>
		    {
			 send_ACK();
 800b136:	f7ff fc09 	bl	800a94c <send_ACK>
			 LED_Off(YellowLED);
 800b13a:	4bb0      	ldr	r3, [pc, #704]	@ (800b3fc <processCommand+0xa18>)
 800b13c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b140:	f003 fea4 	bl	800ee8c <LED_Off>
			 Rising_Edge(VL_EXLED_GATE);
 800b144:	4bab      	ldr	r3, [pc, #684]	@ (800b3f4 <processCommand+0xa10>)
 800b146:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b14a:	f003 feaf 	bl	800eeac <Rising_Edge>
			 LED_Off(GreenLED);
 800b14e:	4ba8      	ldr	r3, [pc, #672]	@ (800b3f0 <processCommand+0xa0c>)
 800b150:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b154:	f003 fe9a 	bl	800ee8c <LED_Off>
			 Rising_Edge(VL_EXLED_GATE);
 800b158:	4ba6      	ldr	r3, [pc, #664]	@ (800b3f4 <processCommand+0xa10>)
 800b15a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b15e:	f003 fea5 	bl	800eeac <Rising_Edge>
			 for(int i=1;i<=3;i++)
 800b162:	2301      	movs	r3, #1
 800b164:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800b168:	e020      	b.n	800b1ac <processCommand+0x7c8>
			 {
				 LED_On(RedLED);
 800b16a:	4ba5      	ldr	r3, [pc, #660]	@ (800b400 <processCommand+0xa1c>)
 800b16c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b170:	f003 fe7c 	bl	800ee6c <LED_On>
				 Rising_Edge(VL_EXLED_GATE);
 800b174:	4b9f      	ldr	r3, [pc, #636]	@ (800b3f4 <processCommand+0xa10>)
 800b176:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b17a:	f003 fe97 	bl	800eeac <Rising_Edge>
				 HAL_Delay(1000);
 800b17e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b182:	f003 ff75 	bl	800f070 <HAL_Delay>
				 LED_Off(RedLED);
 800b186:	4b9e      	ldr	r3, [pc, #632]	@ (800b400 <processCommand+0xa1c>)
 800b188:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b18c:	f003 fe7e 	bl	800ee8c <LED_Off>
				 Rising_Edge(VL_EXLED_GATE);
 800b190:	4b98      	ldr	r3, [pc, #608]	@ (800b3f4 <processCommand+0xa10>)
 800b192:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b196:	f003 fe89 	bl	800eeac <Rising_Edge>
				 HAL_Delay(1000);
 800b19a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b19e:	f003 ff67 	bl	800f070 <HAL_Delay>
			 for(int i=1;i<=3;i++)
 800b1a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800b1ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	ddda      	ble.n	800b16a <processCommand+0x786>
			 }
			 LED_On(GreenLED);
 800b1b4:	4b8e      	ldr	r3, [pc, #568]	@ (800b3f0 <processCommand+0xa0c>)
 800b1b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1ba:	f003 fe57 	bl	800ee6c <LED_On>
			 Rising_Edge(VL_EXLED_GATE);
 800b1be:	4b8d      	ldr	r3, [pc, #564]	@ (800b3f4 <processCommand+0xa10>)
 800b1c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1c4:	f003 fe72 	bl	800eeac <Rising_Edge>
			 HAL_Delay(500);
 800b1c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b1cc:	f003 ff50 	bl	800f070 <HAL_Delay>
			module_executed();
 800b1d0:	f7ff fbc6 	bl	800a960 <module_executed>
 800b1d4:	f001 bd49 	b.w	800cc6a <processCommand+0x2286>
			}
	  else if(((CompareToBrace(Check_Yellow_LED))==1))//	  Check_Yellow_LED[]			    = "!CYLED()";
 800b1d8:	488a      	ldr	r0, [pc, #552]	@ (800b404 <processCommand+0xa20>)
 800b1da:	f7ff fb43 	bl	800a864 <CompareToBrace>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d150      	bne.n	800b286 <processCommand+0x8a2>
	        {
			 send_ACK();
 800b1e4:	f7ff fbb2 	bl	800a94c <send_ACK>
			 LED_Off(YellowLED);
 800b1e8:	4b84      	ldr	r3, [pc, #528]	@ (800b3fc <processCommand+0xa18>)
 800b1ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1ee:	f003 fe4d 	bl	800ee8c <LED_Off>
			 Rising_Edge(VL_EXLED_GATE);
 800b1f2:	4b80      	ldr	r3, [pc, #512]	@ (800b3f4 <processCommand+0xa10>)
 800b1f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1f8:	f003 fe58 	bl	800eeac <Rising_Edge>
			 for(int i=1;i<=3;i++)
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800b202:	e02a      	b.n	800b25a <processCommand+0x876>
			 {
				 LED_On(RedLED);
 800b204:	4b7e      	ldr	r3, [pc, #504]	@ (800b400 <processCommand+0xa1c>)
 800b206:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b20a:	f003 fe2f 	bl	800ee6c <LED_On>
				 LED_On(GreenLED);
 800b20e:	4b78      	ldr	r3, [pc, #480]	@ (800b3f0 <processCommand+0xa0c>)
 800b210:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b214:	f003 fe2a 	bl	800ee6c <LED_On>
				 Rising_Edge(VL_EXLED_GATE);
 800b218:	4b76      	ldr	r3, [pc, #472]	@ (800b3f4 <processCommand+0xa10>)
 800b21a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b21e:	f003 fe45 	bl	800eeac <Rising_Edge>
				 HAL_Delay(1000);
 800b222:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b226:	f003 ff23 	bl	800f070 <HAL_Delay>
				 LED_Off(RedLED);
 800b22a:	4b75      	ldr	r3, [pc, #468]	@ (800b400 <processCommand+0xa1c>)
 800b22c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b230:	f003 fe2c 	bl	800ee8c <LED_Off>
				 LED_Off(GreenLED);
 800b234:	4b6e      	ldr	r3, [pc, #440]	@ (800b3f0 <processCommand+0xa0c>)
 800b236:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b23a:	f003 fe27 	bl	800ee8c <LED_Off>
				 Rising_Edge(VL_EXLED_GATE);
 800b23e:	4b6d      	ldr	r3, [pc, #436]	@ (800b3f4 <processCommand+0xa10>)
 800b240:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b244:	f003 fe32 	bl	800eeac <Rising_Edge>
				 HAL_Delay(1000);
 800b248:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b24c:	f003 ff10 	bl	800f070 <HAL_Delay>
			 for(int i=1;i<=3;i++)
 800b250:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800b254:	3301      	adds	r3, #1
 800b256:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800b25a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800b25e:	2b03      	cmp	r3, #3
 800b260:	ddd0      	ble.n	800b204 <processCommand+0x820>
			 }
			 LED_On(GreenLED);
 800b262:	4b63      	ldr	r3, [pc, #396]	@ (800b3f0 <processCommand+0xa0c>)
 800b264:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b268:	f003 fe00 	bl	800ee6c <LED_On>
			 Rising_Edge(VL_EXLED_GATE);
 800b26c:	4b61      	ldr	r3, [pc, #388]	@ (800b3f4 <processCommand+0xa10>)
 800b26e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b272:	f003 fe1b 	bl	800eeac <Rising_Edge>
			 HAL_Delay(1000);
 800b276:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b27a:	f003 fef9 	bl	800f070 <HAL_Delay>
			 module_executed();
 800b27e:	f7ff fb6f 	bl	800a960 <module_executed>
 800b282:	f001 bcf2 	b.w	800cc6a <processCommand+0x2286>
			 }
		else if(((CompareToBrace(Check_Alarm_ON))==1)) // ALARM() if 0-> Buzzer check, 1-> continouse ON (error), 2-> rhyme
 800b286:	4860      	ldr	r0, [pc, #384]	@ (800b408 <processCommand+0xa24>)
 800b288:	f7ff faec 	bl	800a864 <CompareToBrace>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d177      	bne.n	800b382 <processCommand+0x99e>
			{
			unsigned int alarm_type=0 ;
 800b292:	2300      	movs	r3, #0
 800b294:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	//		   unsigned int loop=0;
				send_ACK();
 800b298:	f7ff fb58 	bl	800a94c <send_ACK>
				int extracted = sscanf(command, "!ALARM(%d)", &alarm_type);
 800b29c:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 800b2a0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800b2a4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b2a8:	4958      	ldr	r1, [pc, #352]	@ (800b40c <processCommand+0xa28>)
 800b2aa:	6818      	ldr	r0, [r3, #0]
 800b2ac:	f009 fdf8 	bl	8014ea0 <siscanf>
 800b2b0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
				if (extracted != 1) {
 800b2b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d005      	beq.n	800b2c8 <processCommand+0x8e4>
				HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, 100);
 800b2bc:	2364      	movs	r3, #100	@ 0x64
 800b2be:	2217      	movs	r2, #23
 800b2c0:	4953      	ldr	r1, [pc, #332]	@ (800b410 <processCommand+0xa2c>)
 800b2c2:	4854      	ldr	r0, [pc, #336]	@ (800b414 <processCommand+0xa30>)
 800b2c4:	f007 fcc0 	bl	8012c48 <HAL_UART_Transmit>
				}

				if(alarm_type ==0) // in service mode alarm/buzzer check
 800b2c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d119      	bne.n	800b304 <processCommand+0x920>
					{
					 LED_Off(YellowLED);
 800b2d0:	4b4a      	ldr	r3, [pc, #296]	@ (800b3fc <processCommand+0xa18>)
 800b2d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2d6:	f003 fdd9 	bl	800ee8c <LED_Off>
					 LED_Off(GreenLED);
 800b2da:	4b45      	ldr	r3, [pc, #276]	@ (800b3f0 <processCommand+0xa0c>)
 800b2dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2e0:	f003 fdd4 	bl	800ee8c <LED_Off>
					 LED_On(RedLED);
 800b2e4:	4b46      	ldr	r3, [pc, #280]	@ (800b400 <processCommand+0xa1c>)
 800b2e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2ea:	f003 fdbf 	bl	800ee6c <LED_On>
				     Alarm_On(Alarm);
 800b2ee:	4b4a      	ldr	r3, [pc, #296]	@ (800b418 <processCommand+0xa34>)
 800b2f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2f4:	f003 fdff 	bl	800eef6 <Alarm_On>
					 Rising_Edge(VL_EXLED_GATE);
 800b2f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b3f4 <processCommand+0xa10>)
 800b2fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2fe:	f003 fdd5 	bl	800eeac <Rising_Edge>
 800b302:	e03a      	b.n	800b37a <processCommand+0x996>
					}

				else if(alarm_type ==1){
 800b304:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d119      	bne.n	800b340 <processCommand+0x95c>
					LED_Off(YellowLED);
 800b30c:	4b3b      	ldr	r3, [pc, #236]	@ (800b3fc <processCommand+0xa18>)
 800b30e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b312:	f003 fdbb 	bl	800ee8c <LED_Off>
					 LED_Off(GreenLED);
 800b316:	4b36      	ldr	r3, [pc, #216]	@ (800b3f0 <processCommand+0xa0c>)
 800b318:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b31c:	f003 fdb6 	bl	800ee8c <LED_Off>
					 LED_On(RedLED);
 800b320:	4b37      	ldr	r3, [pc, #220]	@ (800b400 <processCommand+0xa1c>)
 800b322:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b326:	f003 fda1 	bl	800ee6c <LED_On>
					Alarm_On(Alarm); // if error state continoue alarm/ buzer ON
 800b32a:	4b3b      	ldr	r3, [pc, #236]	@ (800b418 <processCommand+0xa34>)
 800b32c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b330:	f003 fde1 	bl	800eef6 <Alarm_On>
					Rising_Edge(VL_EXLED_GATE);
 800b334:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f4 <processCommand+0xa10>)
 800b336:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b33a:	f003 fdb7 	bl	800eeac <Rising_Edge>
 800b33e:	e01c      	b.n	800b37a <processCommand+0x996>
				}

				else if(alarm_type ==2)
 800b340:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b344:	2b02      	cmp	r3, #2
 800b346:	d118      	bne.n	800b37a <processCommand+0x996>
					{
					 LED_Off(YellowLED);
 800b348:	4b2c      	ldr	r3, [pc, #176]	@ (800b3fc <processCommand+0xa18>)
 800b34a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b34e:	f003 fd9d 	bl	800ee8c <LED_Off>
					 LED_Off(GreenLED);
 800b352:	4b27      	ldr	r3, [pc, #156]	@ (800b3f0 <processCommand+0xa0c>)
 800b354:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b358:	f003 fd98 	bl	800ee8c <LED_Off>
					 LED_On(RedLED);
 800b35c:	4b28      	ldr	r3, [pc, #160]	@ (800b400 <processCommand+0xa1c>)
 800b35e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b362:	f003 fd83 	bl	800ee6c <LED_On>
					Alarm_On(Alarm);
 800b366:	4b2c      	ldr	r3, [pc, #176]	@ (800b418 <processCommand+0xa34>)
 800b368:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b36c:	f003 fdc3 	bl	800eef6 <Alarm_On>
					Rising_Edge(VL_EXLED_GATE);
 800b370:	4b20      	ldr	r3, [pc, #128]	@ (800b3f4 <processCommand+0xa10>)
 800b372:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b376:	f003 fd99 	bl	800eeac <Rising_Edge>
			       }
				module_executed();
 800b37a:	f7ff faf1 	bl	800a960 <module_executed>
 800b37e:	f001 bc74 	b.w	800cc6a <processCommand+0x2286>
			}
		 else if(((CompareToBrace(Alarm_OFF))==1)) // MUTE()
 800b382:	4826      	ldr	r0, [pc, #152]	@ (800b41c <processCommand+0xa38>)
 800b384:	f7ff fa6e 	bl	800a864 <CompareToBrace>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d148      	bne.n	800b420 <processCommand+0xa3c>
			{
				send_ACK();
 800b38e:	f7ff fadd 	bl	800a94c <send_ACK>
				Alarm_Off(Alarm);
 800b392:	4b21      	ldr	r3, [pc, #132]	@ (800b418 <processCommand+0xa34>)
 800b394:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b398:	f003 fdbd 	bl	800ef16 <Alarm_Off>
				LED_Off(RedLED);
 800b39c:	4b18      	ldr	r3, [pc, #96]	@ (800b400 <processCommand+0xa1c>)
 800b39e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3a2:	f003 fd73 	bl	800ee8c <LED_Off>
				Rising_Edge(VL_EXLED_GATE);
 800b3a6:	4b13      	ldr	r3, [pc, #76]	@ (800b3f4 <processCommand+0xa10>)
 800b3a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3ac:	f003 fd7e 	bl	800eeac <Rising_Edge>
				LED_Off(YellowLED);
 800b3b0:	4b12      	ldr	r3, [pc, #72]	@ (800b3fc <processCommand+0xa18>)
 800b3b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3b6:	f003 fd69 	bl	800ee8c <LED_Off>
				Rising_Edge(VL_EXLED_GATE);
 800b3ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b3f4 <processCommand+0xa10>)
 800b3bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3c0:	f003 fd74 	bl	800eeac <Rising_Edge>
				LED_On(RedLED);
 800b3c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b400 <processCommand+0xa1c>)
 800b3c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3ca:	f003 fd4f 	bl	800ee6c <LED_On>
				LED_On(GreenLED);
 800b3ce:	4b08      	ldr	r3, [pc, #32]	@ (800b3f0 <processCommand+0xa0c>)
 800b3d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3d4:	f003 fd4a 	bl	800ee6c <LED_On>
				Rising_Edge(VL_EXLED_GATE);
 800b3d8:	4b06      	ldr	r3, [pc, #24]	@ (800b3f4 <processCommand+0xa10>)
 800b3da:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3de:	f003 fd65 	bl	800eeac <Rising_Edge>
				HAL_Delay(100);
 800b3e2:	2064      	movs	r0, #100	@ 0x64
 800b3e4:	f003 fe44 	bl	800f070 <HAL_Delay>
				module_executed();
 800b3e8:	f7ff faba 	bl	800a960 <module_executed>
 800b3ec:	f001 bc3d 	b.w	800cc6a <processCommand+0x2286>
 800b3f0:	200002c8 	.word	0x200002c8
 800b3f4:	20000268 	.word	0x20000268
 800b3f8:	20000100 	.word	0x20000100
 800b3fc:	200002d8 	.word	0x200002d8
 800b400:	200002d0 	.word	0x200002d0
 800b404:	2000010c 	.word	0x2000010c
 800b408:	20000128 	.word	0x20000128
 800b40c:	08018f44 	.word	0x08018f44
 800b410:	08018f00 	.word	0x08018f00
 800b414:	200008a8 	.word	0x200008a8
 800b418:	200002e0 	.word	0x200002e0
 800b41c:	20000134 	.word	0x20000134
			}
	else if((CompareToBrace(DI_Probe_Inlet_Valve))==1)//	char DI_Probe_Inlet[] ="!CV1()";
 800b420:	48c0      	ldr	r0, [pc, #768]	@ (800b724 <processCommand+0xd40>)
 800b422:	f7ff fa1f 	bl	800a864 <CompareToBrace>
 800b426:	4603      	mov	r3, r0
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d11e      	bne.n	800b46a <processCommand+0xa86>
		{
			send_ACK();
 800b42c:	f7ff fa8e 	bl	800a94c <send_ACK>
			Valve_On(DI_Probe_Inlet);
 800b430:	4bbd      	ldr	r3, [pc, #756]	@ (800b728 <processCommand+0xd44>)
 800b432:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b436:	f003 fcf9 	bl	800ee2c <Valve_On>
			Rising_Edge(VL_EXLED_GATE);
 800b43a:	4bbc      	ldr	r3, [pc, #752]	@ (800b72c <processCommand+0xd48>)
 800b43c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b440:	f003 fd34 	bl	800eeac <Rising_Edge>
			HAL_Delay(3000);
 800b444:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b448:	f003 fe12 	bl	800f070 <HAL_Delay>
			Valve_Off(DI_Probe_Inlet);
 800b44c:	4bb6      	ldr	r3, [pc, #728]	@ (800b728 <processCommand+0xd44>)
 800b44e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b452:	f003 fcfb 	bl	800ee4c <Valve_Off>
			Rising_Edge(VL_EXLED_GATE);
 800b456:	4bb5      	ldr	r3, [pc, #724]	@ (800b72c <processCommand+0xd48>)
 800b458:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b45c:	f003 fd26 	bl	800eeac <Rising_Edge>
		    putchr('$');
 800b460:	2024      	movs	r0, #36	@ 0x24
 800b462:	f003 fc07 	bl	800ec74 <putchr>
 800b466:	f001 bc00 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(Waste_Outlet_Valve))==1)//	char Waste_Outlet[]   ="!CV2()";
 800b46a:	48b1      	ldr	r0, [pc, #708]	@ (800b730 <processCommand+0xd4c>)
 800b46c:	f7ff f9fa 	bl	800a864 <CompareToBrace>
 800b470:	4603      	mov	r3, r0
 800b472:	2b01      	cmp	r3, #1
 800b474:	d11e      	bne.n	800b4b4 <processCommand+0xad0>
		{
			send_ACK();
 800b476:	f7ff fa69 	bl	800a94c <send_ACK>
			Valve_On(Waste_Outlet);
 800b47a:	4bae      	ldr	r3, [pc, #696]	@ (800b734 <processCommand+0xd50>)
 800b47c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b480:	f003 fcd4 	bl	800ee2c <Valve_On>
			Rising_Edge(VL_EXLED_GATE);
 800b484:	4ba9      	ldr	r3, [pc, #676]	@ (800b72c <processCommand+0xd48>)
 800b486:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b48a:	f003 fd0f 	bl	800eeac <Rising_Edge>
			HAL_Delay(3000);
 800b48e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b492:	f003 fded 	bl	800f070 <HAL_Delay>
			Valve_Off(Waste_Outlet);
 800b496:	4ba7      	ldr	r3, [pc, #668]	@ (800b734 <processCommand+0xd50>)
 800b498:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b49c:	f003 fcd6 	bl	800ee4c <Valve_Off>
			Rising_Edge(VL_EXLED_GATE);
 800b4a0:	4ba2      	ldr	r3, [pc, #648]	@ (800b72c <processCommand+0xd48>)
 800b4a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4a6:	f003 fd01 	bl	800eeac <Rising_Edge>
		    putchr('$');
 800b4aa:	2024      	movs	r0, #36	@ 0x24
 800b4ac:	f003 fbe2 	bl	800ec74 <putchr>
 800b4b0:	f001 bbdb 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(DI_Probe_Inlet_Valve_On))==1)//	char DI_Probe_Inlet_On[] ="!V1ON()";
 800b4b4:	48a0      	ldr	r0, [pc, #640]	@ (800b738 <processCommand+0xd54>)
 800b4b6:	f7ff f9d5 	bl	800a864 <CompareToBrace>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d114      	bne.n	800b4ea <processCommand+0xb06>
		{
			send_ACK();
 800b4c0:	f7ff fa44 	bl	800a94c <send_ACK>
			Valve_On(DI_Probe_Inlet);
 800b4c4:	4b98      	ldr	r3, [pc, #608]	@ (800b728 <processCommand+0xd44>)
 800b4c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4ca:	f003 fcaf 	bl	800ee2c <Valve_On>
			Rising_Edge(VL_EXLED_GATE);
 800b4ce:	4b97      	ldr	r3, [pc, #604]	@ (800b72c <processCommand+0xd48>)
 800b4d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4d4:	f003 fcea 	bl	800eeac <Rising_Edge>
			HAL_Delay(500);
 800b4d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b4dc:	f003 fdc8 	bl	800f070 <HAL_Delay>
		    putchr('$');
 800b4e0:	2024      	movs	r0, #36	@ 0x24
 800b4e2:	f003 fbc7 	bl	800ec74 <putchr>
 800b4e6:	f001 bbc0 	b.w	800cc6a <processCommand+0x2286>
		}
	else if((CompareToBrace(DI_Probe_Inlet_Valve_Off))==1)//	char DI_Probe_Inlet_Off[] ="!V1OFF()";
 800b4ea:	4894      	ldr	r0, [pc, #592]	@ (800b73c <processCommand+0xd58>)
 800b4ec:	f7ff f9ba 	bl	800a864 <CompareToBrace>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d114      	bne.n	800b520 <processCommand+0xb3c>
			{
				send_ACK();
 800b4f6:	f7ff fa29 	bl	800a94c <send_ACK>
				Valve_Off(DI_Probe_Inlet);
 800b4fa:	4b8b      	ldr	r3, [pc, #556]	@ (800b728 <processCommand+0xd44>)
 800b4fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b500:	f003 fca4 	bl	800ee4c <Valve_Off>
				Rising_Edge(VL_EXLED_GATE);
 800b504:	4b89      	ldr	r3, [pc, #548]	@ (800b72c <processCommand+0xd48>)
 800b506:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b50a:	f003 fccf 	bl	800eeac <Rising_Edge>
				HAL_Delay(500);
 800b50e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b512:	f003 fdad 	bl	800f070 <HAL_Delay>
			    putchr('$');
 800b516:	2024      	movs	r0, #36	@ 0x24
 800b518:	f003 fbac 	bl	800ec74 <putchr>
 800b51c:	f001 bba5 	b.w	800cc6a <processCommand+0x2286>
			}
	else if((CompareToBrace(Waste_Outlet_Valve_On))==1)//	char DI_Probe_Inlet_On[] ="!V2ON()";
 800b520:	4887      	ldr	r0, [pc, #540]	@ (800b740 <processCommand+0xd5c>)
 800b522:	f7ff f99f 	bl	800a864 <CompareToBrace>
 800b526:	4603      	mov	r3, r0
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d114      	bne.n	800b556 <processCommand+0xb72>
			{
				send_ACK();
 800b52c:	f7ff fa0e 	bl	800a94c <send_ACK>
				Valve_On(Waste_Outlet);
 800b530:	4b80      	ldr	r3, [pc, #512]	@ (800b734 <processCommand+0xd50>)
 800b532:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b536:	f003 fc79 	bl	800ee2c <Valve_On>
				Rising_Edge(VL_EXLED_GATE);
 800b53a:	4b7c      	ldr	r3, [pc, #496]	@ (800b72c <processCommand+0xd48>)
 800b53c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b540:	f003 fcb4 	bl	800eeac <Rising_Edge>
				HAL_Delay(500);
 800b544:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b548:	f003 fd92 	bl	800f070 <HAL_Delay>
			    putchr('$');
 800b54c:	2024      	movs	r0, #36	@ 0x24
 800b54e:	f003 fb91 	bl	800ec74 <putchr>
 800b552:	f001 bb8a 	b.w	800cc6a <processCommand+0x2286>
			}
	else if((CompareToBrace(Waste_Outlet_Valve_Off))==1)//	char DI_Probe_Inlet_Off[] ="!V2OFF()";
 800b556:	487b      	ldr	r0, [pc, #492]	@ (800b744 <processCommand+0xd60>)
 800b558:	f7ff f984 	bl	800a864 <CompareToBrace>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d114      	bne.n	800b58c <processCommand+0xba8>
			{
				send_ACK();
 800b562:	f7ff f9f3 	bl	800a94c <send_ACK>
				Valve_Off(Waste_Outlet);
 800b566:	4b73      	ldr	r3, [pc, #460]	@ (800b734 <processCommand+0xd50>)
 800b568:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b56c:	f003 fc6e 	bl	800ee4c <Valve_Off>
				Rising_Edge(VL_EXLED_GATE);
 800b570:	4b6e      	ldr	r3, [pc, #440]	@ (800b72c <processCommand+0xd48>)
 800b572:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b576:	f003 fc99 	bl	800eeac <Rising_Edge>
				HAL_Delay(500);
 800b57a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b57e:	f003 fd77 	bl	800f070 <HAL_Delay>
				putchr('$');
 800b582:	2024      	movs	r0, #36	@ 0x24
 800b584:	f003 fb76 	bl	800ec74 <putchr>
 800b588:	f001 bb6f 	b.w	800cc6a <processCommand+0x2286>
			}

	 else if(((CompareToBrace(Rocking_motor_Run))==1))//char  Rocking_motor_Run[]			= "!RON()";
 800b58c:	486e      	ldr	r0, [pc, #440]	@ (800b748 <processCommand+0xd64>)
 800b58e:	f7ff f969 	bl	800a864 <CompareToBrace>
 800b592:	4603      	mov	r3, r0
 800b594:	2b01      	cmp	r3, #1
 800b596:	d109      	bne.n	800b5ac <processCommand+0xbc8>
			 {

			   send_ACK();
 800b598:	f7ff f9d8 	bl	800a94c <send_ACK>
			   Start_Rocking_Motor(RockingFrequencyNormal, 0);
 800b59c:	2100      	movs	r1, #0
 800b59e:	20e1      	movs	r0, #225	@ 0xe1
 800b5a0:	f7fe fab4 	bl	8009b0c <Start_Rocking_Motor>
			   module_executed();
 800b5a4:	f7ff f9dc 	bl	800a960 <module_executed>
 800b5a8:	f001 bb5f 	b.w	800cc6a <processCommand+0x2286>
			 }
		 else if(((CompareToBrace(Rocking_motor_OFF))==1))//char  Rocking_motor_OFF[]			= "!ROFF()";
 800b5ac:	4867      	ldr	r0, [pc, #412]	@ (800b74c <processCommand+0xd68>)
 800b5ae:	f7ff f959 	bl	800a864 <CompareToBrace>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d107      	bne.n	800b5c8 <processCommand+0xbe4>
		 {
			 send_ACK();
 800b5b8:	f7ff f9c8 	bl	800a94c <send_ACK>
			 Stop_Rocking_Motor();
 800b5bc:	f7fe fad6 	bl	8009b6c <Stop_Rocking_Motor>
			 module_executed();
 800b5c0:	f7ff f9ce 	bl	800a960 <module_executed>
 800b5c4:	f001 bb51 	b.w	800cc6a <processCommand+0x2286>
		  }
		 else if(((CompareToBrace(Rocking_motor_HOME))==1))//char  Rocking_motor_HOME[]		    = "!RHOM()";
 800b5c8:	4861      	ldr	r0, [pc, #388]	@ (800b750 <processCommand+0xd6c>)
 800b5ca:	f7ff f94b 	bl	800a864 <CompareToBrace>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d126      	bne.n	800b622 <processCommand+0xc3e>
		 {
			  unsigned int Maximum_Pulses=0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
			   send_ACK();
 800b5da:	f7ff f9b7 	bl	800a94c <send_ACK>
			   int extracted = sscanf(command, "!RHOM(%d)",&Maximum_Pulses);
 800b5de:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800b5e2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800b5e6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b5ea:	495a      	ldr	r1, [pc, #360]	@ (800b754 <processCommand+0xd70>)
 800b5ec:	6818      	ldr	r0, [r3, #0]
 800b5ee:	f009 fc57 	bl	8014ea0 <siscanf>
 800b5f2:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
				if (extracted != 1) {
 800b5f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d008      	beq.n	800b610 <processCommand+0xc2c>
				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800b5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b602:	2217      	movs	r2, #23
 800b604:	4954      	ldr	r1, [pc, #336]	@ (800b758 <processCommand+0xd74>)
 800b606:	4855      	ldr	r0, [pc, #340]	@ (800b75c <processCommand+0xd78>)
 800b608:	f007 fb1e 	bl	8012c48 <HAL_UART_Transmit>
 800b60c:	f001 bb32 	b.w	800cc74 <processCommand+0x2290>
				 return;
				}
			   Home_Rocking_Motor( Maximum_Pulses);
 800b610:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe fb67 	bl	8009ce8 <Home_Rocking_Motor>
		       module_executed();
 800b61a:	f7ff f9a1 	bl	800a960 <module_executed>
 800b61e:	f001 bb24 	b.w	800cc6a <processCommand+0x2286>
		 }
		 else if(((CompareToBrace(Rocking_Count_Checker))==1))//char  Rocking_Count_Checker[]				= "!RCNT()";
 800b622:	484f      	ldr	r0, [pc, #316]	@ (800b760 <processCommand+0xd7c>)
 800b624:	f7ff f91e 	bl	800a864 <CompareToBrace>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d107      	bne.n	800b63e <processCommand+0xc5a>
		  {
			  send_ACK();
 800b62e:	f7ff f98d 	bl	800a94c <send_ACK>
			  Rocking_Count_Function();
 800b632:	f7fe fbcb 	bl	8009dcc <Rocking_Count_Function>
			  module_executed();
 800b636:	f7ff f993 	bl	800a960 <module_executed>
 800b63a:	f001 bb16 	b.w	800cc6a <processCommand+0x2286>
		  }
		 else if(((CompareToBrace(Rock_Slow))==1))//char  Rock_Slow[]           = "!CRA()";
 800b63e:	4849      	ldr	r0, [pc, #292]	@ (800b764 <processCommand+0xd80>)
 800b640:	f7ff f910 	bl	800a864 <CompareToBrace>
 800b644:	4603      	mov	r3, r0
 800b646:	2b01      	cmp	r3, #1
 800b648:	d109      	bne.n	800b65e <processCommand+0xc7a>
			 {
			 send_ACK();
 800b64a:	f7ff f97f 	bl	800a94c <send_ACK>
			 Rocking_Slow(RockingFrequencySlow,0);
 800b64e:	2100      	movs	r1, #0
 800b650:	2014      	movs	r0, #20
 800b652:	f7fe faab 	bl	8009bac <Rocking_Slow>
			 module_executed();
 800b656:	f7ff f983 	bl	800a960 <module_executed>
 800b65a:	f001 bb06 	b.w	800cc6a <processCommand+0x2286>
			  }

	     else if(((CompareToBrace(Z_Nozzle_Home))==1))//  char  Z_Nozzle_Home[]		       = "!ZNHOM()";
 800b65e:	4842      	ldr	r0, [pc, #264]	@ (800b768 <processCommand+0xd84>)
 800b660:	f7ff f900 	bl	800a864 <CompareToBrace>
 800b664:	4603      	mov	r3, r0
 800b666:	2b01      	cmp	r3, #1
 800b668:	d126      	bne.n	800b6b8 <processCommand+0xcd4>
			 {
	    	 unsigned int Maximum_Pulses=0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			 send_ACK();
 800b670:	f7ff f96c 	bl	800a94c <send_ACK>
			   int extracted = sscanf(command, "!ZNHOM(%d)",&Maximum_Pulses);
 800b674:	f507 7292 	add.w	r2, r7, #292	@ 0x124
 800b678:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800b67c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b680:	493a      	ldr	r1, [pc, #232]	@ (800b76c <processCommand+0xd88>)
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	f009 fc0c 	bl	8014ea0 <siscanf>
 800b688:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
				if (extracted != 1) {
 800b68c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b690:	2b01      	cmp	r3, #1
 800b692:	d008      	beq.n	800b6a6 <processCommand+0xcc2>
				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800b694:	f04f 33ff 	mov.w	r3, #4294967295
 800b698:	2217      	movs	r2, #23
 800b69a:	492f      	ldr	r1, [pc, #188]	@ (800b758 <processCommand+0xd74>)
 800b69c:	482f      	ldr	r0, [pc, #188]	@ (800b75c <processCommand+0xd78>)
 800b69e:	f007 fad3 	bl	8012c48 <HAL_UART_Transmit>
 800b6a2:	f001 bae7 	b.w	800cc74 <processCommand+0x2290>
				 return;
				}
			   Home_Z_Nozzle_Motor( Maximum_Pulses);
 800b6a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fd fe4a 	bl	8009344 <Home_Z_Nozzle_Motor>
			   module_executed();
 800b6b0:	f7ff f956 	bl	800a960 <module_executed>
 800b6b4:	f001 bad9 	b.w	800cc6a <processCommand+0x2286>
			  }

	 else if(((CompareToBrace(Z_Nozzle_Move))==1))//  	 char  Z_Nozzle_Move[]             ="!ZNMOV()";
 800b6b8:	482d      	ldr	r0, [pc, #180]	@ (800b770 <processCommand+0xd8c>)
 800b6ba:	f7ff f8d3 	bl	800a864 <CompareToBrace>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d159      	bne.n	800b778 <processCommand+0xd94>
	 			 {
	 	    	 unsigned int Direction=0,Distance=0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	 			 send_ACK();
 800b6d0:	f7ff f93c 	bl	800a94c <send_ACK>
	 			 //Error="C"; // Init. no error condition
	 			   int extracted = sscanf(command, "!ZNMOV(%d,%d)",&Direction, &Distance);
 800b6d4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800b6d8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800b6dc:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800b6e0:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800b6e4:	4923      	ldr	r1, [pc, #140]	@ (800b774 <processCommand+0xd90>)
 800b6e6:	6800      	ldr	r0, [r0, #0]
 800b6e8:	f009 fbda 	bl	8014ea0 <siscanf>
 800b6ec:	f8c7 0160 	str.w	r0, [r7, #352]	@ 0x160
	 				if (extracted != 2) {
 800b6f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d008      	beq.n	800b70a <processCommand+0xd26>
	 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800b6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fc:	2217      	movs	r2, #23
 800b6fe:	4916      	ldr	r1, [pc, #88]	@ (800b758 <processCommand+0xd74>)
 800b700:	4816      	ldr	r0, [pc, #88]	@ (800b75c <processCommand+0xd78>)
 800b702:	f007 faa1 	bl	8012c48 <HAL_UART_Transmit>
 800b706:	f001 bab5 	b.w	800cc74 <processCommand+0x2290>
	 				 return;
	 				}
	 				Move_Z_Nozzle_Motor(Direction, Distance);
 800b70a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b70e:	461a      	mov	r2, r3
 800b710:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b714:	4619      	mov	r1, r3
 800b716:	4610      	mov	r0, r2
 800b718:	f7fd ff56 	bl	80095c8 <Move_Z_Nozzle_Motor>
	 			   module_executed();
 800b71c:	f7ff f920 	bl	800a960 <module_executed>
 800b720:	f001 baa3 	b.w	800cc6a <processCommand+0x2286>
 800b724:	200000bc 	.word	0x200000bc
 800b728:	20000248 	.word	0x20000248
 800b72c:	20000268 	.word	0x20000268
 800b730:	200000c4 	.word	0x200000c4
 800b734:	20000250 	.word	0x20000250
 800b738:	200000cc 	.word	0x200000cc
 800b73c:	200000d4 	.word	0x200000d4
 800b740:	200000e0 	.word	0x200000e0
 800b744:	200000e8 	.word	0x200000e8
 800b748:	2000013c 	.word	0x2000013c
 800b74c:	20000144 	.word	0x20000144
 800b750:	2000014c 	.word	0x2000014c
 800b754:	08018f50 	.word	0x08018f50
 800b758:	08018f00 	.word	0x08018f00
 800b75c:	200008a8 	.word	0x200008a8
 800b760:	20000154 	.word	0x20000154
 800b764:	2000015c 	.word	0x2000015c
 800b768:	20000174 	.word	0x20000174
 800b76c:	08018f5c 	.word	0x08018f5c
 800b770:	20000180 	.word	0x20000180
 800b774:	08018f68 	.word	0x08018f68
	 			  }

	 else if(((CompareToBrace(Z_Nozzle_Dispense))==1))//  	 char  Z_Nozzle_Dispense[]             ="!NDIS()";
 800b778:	48c4      	ldr	r0, [pc, #784]	@ (800ba8c <processCommand+0x10a8>)
 800b77a:	f7ff f873 	bl	800a864 <CompareToBrace>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b01      	cmp	r3, #1
 800b782:	f040 8090 	bne.w	800b8a6 <processCommand+0xec2>
		 			 {
		 	    	 unsigned int Number_Of_Strips=0;
 800b786:	2300      	movs	r3, #0
 800b788:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		 	    	 unsigned int Nozzle_Dispense_Height=0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		 	    	 unsigned int Volume=0;
 800b792:	2300      	movs	r3, #0
 800b794:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		 	    	 unsigned int Strip_Position=2;
 800b798:	2302      	movs	r3, #2
 800b79a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		 			 send_ACK();
 800b79e:	f7ff f8d5 	bl	800a94c <send_ACK>
		 			   int extracted = sscanf(command, "!NDIS(%d,%d,%d)",&Number_Of_Strips, &Nozzle_Dispense_Height,&Volume);
 800b7a2:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 800b7a6:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800b7aa:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800b7ae:	f5a3 70fa 	sub.w	r0, r3, #500	@ 0x1f4
 800b7b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	49b5      	ldr	r1, [pc, #724]	@ (800ba90 <processCommand+0x10ac>)
 800b7bc:	6800      	ldr	r0, [r0, #0]
 800b7be:	f009 fb6f 	bl	8014ea0 <siscanf>
 800b7c2:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164
		 				if (extracted != 3) {
 800b7c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800b7ca:	2b03      	cmp	r3, #3
 800b7cc:	d008      	beq.n	800b7e0 <processCommand+0xdfc>
		 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800b7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d2:	2217      	movs	r2, #23
 800b7d4:	49af      	ldr	r1, [pc, #700]	@ (800ba94 <processCommand+0x10b0>)
 800b7d6:	48b0      	ldr	r0, [pc, #704]	@ (800ba98 <processCommand+0x10b4>)
 800b7d8:	f007 fa36 	bl	8012c48 <HAL_UART_Transmit>
 800b7dc:	f001 ba4a 	b.w	800cc74 <processCommand+0x2290>
		 				 return;
		 				}
					 if(Tube_Liquid_sensor_Activate)
 800b7e0:	4bae      	ldr	r3, [pc, #696]	@ (800ba9c <processCommand+0x10b8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00a      	beq.n	800b7fe <processCommand+0xe1a>
						 {
						       if(Sensor_Read(WashOrUniversal_Buffer_Sensor)==0) Error="M";
 800b7e8:	4bad      	ldr	r3, [pc, #692]	@ (800baa0 <processCommand+0x10bc>)
 800b7ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b7ee:	f002 f935 	bl	800da5c <Sensor_Read>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <processCommand+0xe1a>
 800b7f8:	4baa      	ldr	r3, [pc, #680]	@ (800baa4 <processCommand+0x10c0>)
 800b7fa:	4aab      	ldr	r2, [pc, #684]	@ (800baa8 <processCommand+0x10c4>)
 800b7fc:	601a      	str	r2, [r3, #0]
						 }
					 else  ;
					 if(strcmp(Error,"00")==0)
 800b7fe:	4ba9      	ldr	r3, [pc, #676]	@ (800baa4 <processCommand+0x10c0>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	49aa      	ldr	r1, [pc, #680]	@ (800baac <processCommand+0x10c8>)
 800b804:	4618      	mov	r0, r3
 800b806:	f7fc fd03 	bl	8008210 <strcmp>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d146      	bne.n	800b89e <processCommand+0xeba>
					 {
								//step 2 move nozzle down
								Move_Z_Nozzle_Motor(NOZZLE_DOWN_DIR, Nozzle_Dispense_Height);
 800b810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b814:	4619      	mov	r1, r3
 800b816:	2000      	movs	r0, #0
 800b818:	f7fd fed6 	bl	80095c8 <Move_Z_Nozzle_Motor>
								if(strcmp(Error,"00")==0)
 800b81c:	4ba1      	ldr	r3, [pc, #644]	@ (800baa4 <processCommand+0x10c0>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	49a2      	ldr	r1, [pc, #648]	@ (800baac <processCommand+0x10c8>)
 800b822:	4618      	mov	r0, r3
 800b824:	f7fc fcf4 	bl	8008210 <strcmp>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d137      	bne.n	800b89e <processCommand+0xeba>
								{
									//step 3 dispaense volume
									WashOrUniversal_Buffer_Pump_Function(Volume);
 800b82e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b832:	4618      	mov	r0, r3
 800b834:	f002 f89e 	bl	800d974 <WashOrUniversal_Buffer_Pump_Function>

									while((Number_Of_Strips>1)&&(Strip_Position <=Number_Of_Strips))
 800b838:	e018      	b.n	800b86c <processCommand+0xe88>
									{

										//step4 move to next strip
											Move_X_Motor_Next_Position(STRIP_DIRECTION,300,NOZZLE);
 800b83a:	2202      	movs	r2, #2
 800b83c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b840:	2001      	movs	r0, #1
 800b842:	f7fe ff23 	bl	800a68c <Move_X_Motor_Next_Position>
											if(strcmp(Error,"00")==0)
 800b846:	4b97      	ldr	r3, [pc, #604]	@ (800baa4 <processCommand+0x10c0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4998      	ldr	r1, [pc, #608]	@ (800baac <processCommand+0x10c8>)
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fc fcdf 	bl	8008210 <strcmp>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d114      	bne.n	800b882 <processCommand+0xe9e>
											{
												// step 5 dispense volume
												 WashOrUniversal_Buffer_Pump_Function(Volume);
 800b858:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b85c:	4618      	mov	r0, r3
 800b85e:	f002 f889 	bl	800d974 <WashOrUniversal_Buffer_Pump_Function>
												 Strip_Position++;
 800b862:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800b866:	3301      	adds	r3, #1
 800b868:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
									while((Number_Of_Strips>1)&&(Strip_Position <=Number_Of_Strips))
 800b86c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b870:	2b01      	cmp	r3, #1
 800b872:	d907      	bls.n	800b884 <processCommand+0xea0>
 800b874:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b878:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d9dc      	bls.n	800b83a <processCommand+0xe56>
 800b880:	e000      	b.n	800b884 <processCommand+0xea0>
											}
											else
											{
												break;
 800b882:	bf00      	nop
											}

									}
									//step6 Nozzle home
									if(strcmp(Error,"00")==0)
 800b884:	4b87      	ldr	r3, [pc, #540]	@ (800baa4 <processCommand+0x10c0>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4988      	ldr	r1, [pc, #544]	@ (800baac <processCommand+0x10c8>)
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fc fcc0 	bl	8008210 <strcmp>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d103      	bne.n	800b89e <processCommand+0xeba>
									{
									   Home_Z_Nozzle_Motor(NOZZLE_HOME_MAX_COUNT);
 800b896:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b89a:	f7fd fd53 	bl	8009344 <Home_Z_Nozzle_Motor>
	//	 			if(strcmp(Error,"00")!=0)
	//	 			{
	//	 				Home_Z_Nozzle_Motor(NOZZLE_HOME_MAX_COUNT);
		 				//Add Xhom function
	//	 			}
				   module_executed();
 800b89e:	f7ff f85f 	bl	800a960 <module_executed>
 800b8a2:	f001 b9e2 	b.w	800cc6a <processCommand+0x2286>
				  }
	 else if(((CompareToBrace(Z_Probe_Dispense))==1))//  	  char  Z_Probe_Dispense[]            ="!PDIS()";
 800b8a6:	4882      	ldr	r0, [pc, #520]	@ (800bab0 <processCommand+0x10cc>)
 800b8a8:	f7fe ffdc 	bl	800a864 <CompareToBrace>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	f040 80be 	bne.w	800ba30 <processCommand+0x104c>
		 			 {
		 	    	 unsigned int Number_Of_Strips=0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		 	    	 unsigned int Probe_Dispense_Height=0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
		 	    	 unsigned int Airgap=0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
		 	    	 unsigned int Volume=0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		 	    	 unsigned int Strip_Position=2;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
		 	    	 unsigned int Maximum_Pulses=700;
 800b8d2:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800b8d6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

		 	    	send_ACK();
 800b8da:	f7ff f837 	bl	800a94c <send_ACK>
		 	    	//Error="P"; // Init. no error condition
		 	    	int extracted = sscanf(command, "!PDIS(%d,%d,%d,%d)", &Number_Of_Strips, &Probe_Dispense_Height, &Airgap, &Volume);
 800b8de:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800b8e2:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800b8e6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800b8ea:	f5a3 70fa 	sub.w	r0, r3, #500	@ 0x1f4
 800b8ee:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	496d      	ldr	r1, [pc, #436]	@ (800bab4 <processCommand+0x10d0>)
 800b8fe:	6800      	ldr	r0, [r0, #0]
 800b900:	f009 face 	bl	8014ea0 <siscanf>
 800b904:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168
		 	    	if (extracted != 4)
 800b908:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	d008      	beq.n	800b922 <processCommand+0xf3e>
						{
							HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800b910:	f04f 33ff 	mov.w	r3, #4294967295
 800b914:	2217      	movs	r2, #23
 800b916:	495f      	ldr	r1, [pc, #380]	@ (800ba94 <processCommand+0x10b0>)
 800b918:	485f      	ldr	r0, [pc, #380]	@ (800ba98 <processCommand+0x10b4>)
 800b91a:	f007 f995 	bl	8012c48 <HAL_UART_Transmit>
 800b91e:	f001 b9a9 	b.w	800cc74 <processCommand+0x2290>
							return;
						}

		 	    	// Step 1: Probe move down
		 	    	Move_Z_Probe_Motor(1, Probe_Dispense_Height);
 800b922:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b926:	4619      	mov	r1, r3
 800b928:	2001      	movs	r0, #1
 800b92a:	f7fe f851 	bl	80099d0 <Move_Z_Probe_Motor>
		 	    	if (strcmp(Error, "00") == 0)
 800b92e:	4b5d      	ldr	r3, [pc, #372]	@ (800baa4 <processCommand+0x10c0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	495e      	ldr	r1, [pc, #376]	@ (800baac <processCommand+0x10c8>)
 800b934:	4618      	mov	r0, r3
 800b936:	f7fc fc6b 	bl	8008210 <strcmp>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d173      	bne.n	800ba28 <processCommand+0x1044>
		 	    		{
							// Step 2: Valve ON and Airgap
							Valve_On(DI_Probe_Inlet);  // May not req. Need to recheck
 800b940:	4b5d      	ldr	r3, [pc, #372]	@ (800bab8 <processCommand+0x10d4>)
 800b942:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b946:	f003 fa71 	bl	800ee2c <Valve_On>
							Rising_Edge(VL_EXLED_GATE);
 800b94a:	4b5c      	ldr	r3, [pc, #368]	@ (800babc <processCommand+0x10d8>)
 800b94c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b950:	f003 faac 	bl	800eeac <Rising_Edge>
							HAL_Delay(500);
 800b954:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b958:	f003 fb8a 	bl	800f070 <HAL_Delay>

							Move_Syringe_Motor(0, Airgap);
 800b95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b960:	4619      	mov	r1, r3
 800b962:	2000      	movs	r0, #0
 800b964:	f7fe faca 	bl	8009efc <Move_Syringe_Motor>

							if (strcmp(Error, "00") == 0)
 800b968:	4b4e      	ldr	r3, [pc, #312]	@ (800baa4 <processCommand+0x10c0>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	494f      	ldr	r1, [pc, #316]	@ (800baac <processCommand+0x10c8>)
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fc fc4e 	bl	8008210 <strcmp>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d156      	bne.n	800ba28 <processCommand+0x1044>
								{
									// Step 3: Initial Volume Dispense
									Move_Syringe_Motor(0, Volume);
 800b97a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b97e:	4619      	mov	r1, r3
 800b980:	2000      	movs	r0, #0
 800b982:	f7fe fabb 	bl	8009efc <Move_Syringe_Motor>
									if (strcmp(Error, "00") == 0)
 800b986:	4b47      	ldr	r3, [pc, #284]	@ (800baa4 <processCommand+0x10c0>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4948      	ldr	r1, [pc, #288]	@ (800baac <processCommand+0x10c8>)
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fc fc3f 	bl	8008210 <strcmp>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d147      	bne.n	800ba28 <processCommand+0x1044>
										{
										    // Step 4: Loop through strips
											while ((Number_Of_Strips > 1) && (Strip_Position <= Number_Of_Strips))
 800b998:	e022      	b.n	800b9e0 <processCommand+0xffc>
												{
													Move_X_Motor_Next_Position(STRIP_DIRECTION, 300, PROBE);
 800b99a:	2201      	movs	r2, #1
 800b99c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	f7fe fe73 	bl	800a68c <Move_X_Motor_Next_Position>
													if (strcmp(Error, "00") == 0)
 800b9a6:	4b3f      	ldr	r3, [pc, #252]	@ (800baa4 <processCommand+0x10c0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4940      	ldr	r1, [pc, #256]	@ (800baac <processCommand+0x10c8>)
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fc fc2f 	bl	8008210 <strcmp>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d11e      	bne.n	800b9f6 <processCommand+0x1012>
														{
															Move_Syringe_Motor(0, Volume);
 800b9b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b9bc:	4619      	mov	r1, r3
 800b9be:	2000      	movs	r0, #0
 800b9c0:	f7fe fa9c 	bl	8009efc <Move_Syringe_Motor>
															if (strcmp(Error, "00") == 0)
 800b9c4:	4b37      	ldr	r3, [pc, #220]	@ (800baa4 <processCommand+0x10c0>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4938      	ldr	r1, [pc, #224]	@ (800baac <processCommand+0x10c8>)
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fc fc20 	bl	8008210 <strcmp>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d111      	bne.n	800b9fa <processCommand+0x1016>
																{
																	Strip_Position++;
 800b9d6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800b9da:	3301      	adds	r3, #1
 800b9dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
											while ((Number_Of_Strips > 1) && (Strip_Position <= Number_Of_Strips))
 800b9e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d909      	bls.n	800b9fc <processCommand+0x1018>
 800b9e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ec:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d9d2      	bls.n	800b99a <processCommand+0xfb6>
 800b9f4:	e002      	b.n	800b9fc <processCommand+0x1018>
																  break;
																}
														}
													 else
														 {
														  break;
 800b9f6:	bf00      	nop
 800b9f8:	e000      	b.n	800b9fc <processCommand+0x1018>
																  break;
 800b9fa:	bf00      	nop
														 }
													}

													// Step 5: Valve OFF
													Valve_Off(DI_Probe_Inlet);
 800b9fc:	4b2e      	ldr	r3, [pc, #184]	@ (800bab8 <processCommand+0x10d4>)
 800b9fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba02:	f003 fa23 	bl	800ee4c <Valve_Off>
													HAL_Delay(500);
 800ba06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ba0a:	f003 fb31 	bl	800f070 <HAL_Delay>

													// Step 6: Probe Home
													if (strcmp(Error, "00") == 0) Home_Z_Probe_Motor(Maximum_Pulses);
 800ba0e:	4b25      	ldr	r3, [pc, #148]	@ (800baa4 <processCommand+0x10c0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4926      	ldr	r1, [pc, #152]	@ (800baac <processCommand+0x10c8>)
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fc fbfb 	bl	8008210 <strcmp>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d103      	bne.n	800ba28 <processCommand+0x1044>
 800ba20:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 800ba24:	f7fd fe82 	bl	800972c <Home_Z_Probe_Motor>
										}
								}
							}

		 	    	module_executed();
 800ba28:	f7fe ff9a 	bl	800a960 <module_executed>
 800ba2c:	f001 b91d 	b.w	800cc6a <processCommand+0x2286>

		}

	 else if(((CompareToBrace(Complete_Syringe_Prime))==1))//  	 char  Complete_Syringe_Prime[]     ="!SPRI()"
 800ba30:	4823      	ldr	r0, [pc, #140]	@ (800bac0 <processCommand+0x10dc>)
 800ba32:	f7fe ff17 	bl	800a864 <CompareToBrace>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	f040 813d 	bne.w	800bcb8 <processCommand+0x12d4>
		 			 {
		 	    	 unsigned int Number_of_prime_cycle=0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		 	    	 unsigned int Probe_Prime_Height=0;
 800ba44:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800ba48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	601a      	str	r2, [r3, #0]
		 			 send_ACK();
 800ba50:	f7fe ff7c 	bl	800a94c <send_ACK>
		 			 //Error="P";
		 			   int extracted = sscanf(command, "!SPRI(%d,%d)",&Number_of_prime_cycle, &Probe_Prime_Height);
 800ba54:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800ba58:	f107 02fc 	add.w	r2, r7, #252	@ 0xfc
 800ba5c:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800ba60:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800ba64:	4917      	ldr	r1, [pc, #92]	@ (800bac4 <processCommand+0x10e0>)
 800ba66:	6800      	ldr	r0, [r0, #0]
 800ba68:	f009 fa1a 	bl	8014ea0 <siscanf>
 800ba6c:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
		 				if (extracted != 2) {
 800ba70:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d027      	beq.n	800bac8 <processCommand+0x10e4>
		 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800ba78:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7c:	2217      	movs	r2, #23
 800ba7e:	4905      	ldr	r1, [pc, #20]	@ (800ba94 <processCommand+0x10b0>)
 800ba80:	4805      	ldr	r0, [pc, #20]	@ (800ba98 <processCommand+0x10b4>)
 800ba82:	f007 f8e1 	bl	8012c48 <HAL_UART_Transmit>
 800ba86:	f001 b8f5 	b.w	800cc74 <processCommand+0x2290>
 800ba8a:	bf00      	nop
 800ba8c:	2000018c 	.word	0x2000018c
 800ba90:	08018f78 	.word	0x08018f78
 800ba94:	08018f00 	.word	0x08018f00
 800ba98:	200008a8 	.word	0x200008a8
 800ba9c:	20000018 	.word	0x20000018
 800baa0:	200002b8 	.word	0x200002b8
 800baa4:	20000014 	.word	0x20000014
 800baa8:	08018f88 	.word	0x08018f88
 800baac:	08018edc 	.word	0x08018edc
 800bab0:	200001cc 	.word	0x200001cc
 800bab4:	08018f8c 	.word	0x08018f8c
 800bab8:	20000248 	.word	0x20000248
 800babc:	20000268 	.word	0x20000268
 800bac0:	200001f4 	.word	0x200001f4
 800bac4:	08018fa0 	.word	0x08018fa0
		 				 return;
		 				}

		 			//z probe hoem
		 			 Home_Z_Probe_Motor( PROBE_HOME_MAX_COUNT);
 800bac8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bacc:	f7fd fe2e 	bl	800972c <Home_Z_Probe_Motor>

		 			 if(strcmp(Error, "00") == 0)
 800bad0:	4bc3      	ldr	r3, [pc, #780]	@ (800bde0 <processCommand+0x13fc>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	49c3      	ldr	r1, [pc, #780]	@ (800bde4 <processCommand+0x1400>)
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fc fb9a 	bl	8008210 <strcmp>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f040 80c8 	bne.w	800bc74 <processCommand+0x1290>
		 			 {
		 				Valve_Off(DI_Probe_Inlet);
 800bae4:	4bc0      	ldr	r3, [pc, #768]	@ (800bde8 <processCommand+0x1404>)
 800bae6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800baea:	f003 f9af 	bl	800ee4c <Valve_Off>

						Rising_Edge(VL_EXLED_GATE);
 800baee:	4bbf      	ldr	r3, [pc, #764]	@ (800bdec <processCommand+0x1408>)
 800baf0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800baf4:	f003 f9da 	bl	800eeac <Rising_Edge>

						HAL_Delay(300);
 800baf8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bafc:	f003 fab8 	bl	800f070 <HAL_Delay>

						 //syringe_home()
						 Home_Syringe_Motor(SYRINGE_HOME_MAX_COUNT);
 800bb00:	f242 501c 	movw	r0, #9500	@ 0x251c
 800bb04:	f7fe f9b0 	bl	8009e68 <Home_Syringe_Motor>

						 if(strcmp(Error, "00") == 0)
 800bb08:	4bb5      	ldr	r3, [pc, #724]	@ (800bde0 <processCommand+0x13fc>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	49b5      	ldr	r1, [pc, #724]	@ (800bde4 <processCommand+0x1400>)
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fc fb7e 	bl	8008210 <strcmp>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f040 80ac 	bne.w	800bc74 <processCommand+0x1290>
						 {

							 //Move probe down
							Move_Z_Probe_Motor(PROBE_DOWN_DIR , Probe_Prime_Height);
 800bb1c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bb20:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4619      	mov	r1, r3
 800bb28:	2001      	movs	r0, #1
 800bb2a:	f7fd ff51 	bl	80099d0 <Move_Z_Probe_Motor>

							 if(strcmp(Error, "00") == 0)
 800bb2e:	4bac      	ldr	r3, [pc, #688]	@ (800bde0 <processCommand+0x13fc>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	49ac      	ldr	r1, [pc, #688]	@ (800bde4 <processCommand+0x1400>)
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fc fb6b 	bl	8008210 <strcmp>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f040 8099 	bne.w	800bc74 <processCommand+0x1290>
							 {

								//waste valve on
								Pump_On(&Waste_RemovalPump,CLOCKWISE);
 800bb42:	2100      	movs	r1, #0
 800bb44:	48aa      	ldr	r0, [pc, #680]	@ (800bdf0 <processCommand+0x140c>)
 800bb46:	f001 fecf 	bl	800d8e8 <Pump_On>

								Rising_Edge(P1_P4_GATE);
 800bb4a:	4baa      	ldr	r3, [pc, #680]	@ (800bdf4 <processCommand+0x1410>)
 800bb4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb50:	f003 f9ac 	bl	800eeac <Rising_Edge>
								HAL_Delay(300);
 800bb54:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bb58:	f003 fa8a 	bl	800f070 <HAL_Delay>
								//to get the DI water inside swithoff the valve
								////switch off di probe inlet valve
								Valve_Off(DI_Probe_Inlet);
 800bb5c:	4ba2      	ldr	r3, [pc, #648]	@ (800bde8 <processCommand+0x1404>)
 800bb5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb62:	f003 f973 	bl	800ee4c <Valve_Off>

								Rising_Edge(VL_EXLED_GATE);
 800bb66:	4ba1      	ldr	r3, [pc, #644]	@ (800bdec <processCommand+0x1408>)
 800bb68:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb6c:	f003 f99e 	bl	800eeac <Rising_Edge>

								HAL_Delay(300);
 800bb70:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bb74:	f003 fa7c 	bl	800f070 <HAL_Delay>
								for(int i=1;i<=Number_of_prime_cycle;i++){
 800bb78:	2301      	movs	r3, #1
 800bb7a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800bb7e:	e047      	b.n	800bc10 <processCommand+0x122c>

									Move_Syringe_Motor(1,SYRINGE_EOT_MAX_COUNT);
 800bb80:	f242 3128 	movw	r1, #9000	@ 0x2328
 800bb84:	2001      	movs	r0, #1
 800bb86:	f7fe f9b9 	bl	8009efc <Move_Syringe_Motor>

									 if(strcmp(Error, "00") == 0)
 800bb8a:	4b95      	ldr	r3, [pc, #596]	@ (800bde0 <processCommand+0x13fc>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4995      	ldr	r1, [pc, #596]	@ (800bde4 <processCommand+0x1400>)
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fc fb3d 	bl	8008210 <strcmp>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d140      	bne.n	800bc1e <processCommand+0x123a>
									 {

										HAL_Delay(200);
 800bb9c:	20c8      	movs	r0, #200	@ 0xc8
 800bb9e:	f003 fa67 	bl	800f070 <HAL_Delay>
										Valve_On(DI_Probe_Inlet);
 800bba2:	4b91      	ldr	r3, [pc, #580]	@ (800bde8 <processCommand+0x1404>)
 800bba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bba8:	f003 f940 	bl	800ee2c <Valve_On>
										Rising_Edge(VL_EXLED_GATE);
 800bbac:	4b8f      	ldr	r3, [pc, #572]	@ (800bdec <processCommand+0x1408>)
 800bbae:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bbb2:	f003 f97b 	bl	800eeac <Rising_Edge>
										HAL_Delay(300);
 800bbb6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bbba:	f003 fa59 	bl	800f070 <HAL_Delay>
										Home_Syringe_Motor(SYRINGE_HOME_MAX_COUNT);
 800bbbe:	f242 501c 	movw	r0, #9500	@ 0x251c
 800bbc2:	f7fe f951 	bl	8009e68 <Home_Syringe_Motor>
										 if(strcmp(Error, "00") != 0) break;
 800bbc6:	4b86      	ldr	r3, [pc, #536]	@ (800bde0 <processCommand+0x13fc>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4986      	ldr	r1, [pc, #536]	@ (800bde4 <processCommand+0x1400>)
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fc fb1f 	bl	8008210 <strcmp>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d124      	bne.n	800bc22 <processCommand+0x123e>

										 if(strcmp(Error, "00") != 0) break;
 800bbd8:	4b81      	ldr	r3, [pc, #516]	@ (800bde0 <processCommand+0x13fc>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4981      	ldr	r1, [pc, #516]	@ (800bde4 <processCommand+0x1400>)
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fc fb16 	bl	8008210 <strcmp>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d11d      	bne.n	800bc26 <processCommand+0x1242>
										Valve_Off(DI_Probe_Inlet);
 800bbea:	4b7f      	ldr	r3, [pc, #508]	@ (800bde8 <processCommand+0x1404>)
 800bbec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bbf0:	f003 f92c 	bl	800ee4c <Valve_Off>
										Rising_Edge(VL_EXLED_GATE);
 800bbf4:	4b7d      	ldr	r3, [pc, #500]	@ (800bdec <processCommand+0x1408>)
 800bbf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bbfa:	f003 f957 	bl	800eeac <Rising_Edge>
										HAL_Delay(300);
 800bbfe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bc02:	f003 fa35 	bl	800f070 <HAL_Delay>
								for(int i=1;i<=Number_of_prime_cycle;i++){
 800bc06:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800bc10:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 800bc14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d9b1      	bls.n	800bb80 <processCommand+0x119c>
 800bc1c:	e004      	b.n	800bc28 <processCommand+0x1244>
									 }

									 else
										 {

										    break;
 800bc1e:	bf00      	nop
 800bc20:	e002      	b.n	800bc28 <processCommand+0x1244>
										 if(strcmp(Error, "00") != 0) break;
 800bc22:	bf00      	nop
 800bc24:	e000      	b.n	800bc28 <processCommand+0x1244>
										 if(strcmp(Error, "00") != 0) break;
 800bc26:	bf00      	nop
										 }
								}
								//switchoff waste pump``
								Pump_Off(&Waste_RemovalPump);
 800bc28:	4871      	ldr	r0, [pc, #452]	@ (800bdf0 <processCommand+0x140c>)
 800bc2a:	f001 fe8b 	bl	800d944 <Pump_Off>
								Rising_Edge(P1_P4_GATE);
 800bc2e:	4b71      	ldr	r3, [pc, #452]	@ (800bdf4 <processCommand+0x1410>)
 800bc30:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc34:	f003 f93a 	bl	800eeac <Rising_Edge>
								HAL_Delay(300);
 800bc38:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bc3c:	f003 fa18 	bl	800f070 <HAL_Delay>
								 if(strcmp(Error, "00") == 0) Home_Z_Probe_Motor( PROBE_HOME_MAX_COUNT);
 800bc40:	4b67      	ldr	r3, [pc, #412]	@ (800bde0 <processCommand+0x13fc>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4967      	ldr	r1, [pc, #412]	@ (800bde4 <processCommand+0x1400>)
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fc fae2 	bl	8008210 <strcmp>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d103      	bne.n	800bc5a <processCommand+0x1276>
 800bc52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bc56:	f7fd fd69 	bl	800972c <Home_Z_Probe_Motor>

								 if(strcmp(Error, "00") == 0)
 800bc5a:	4b61      	ldr	r3, [pc, #388]	@ (800bde0 <processCommand+0x13fc>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4961      	ldr	r1, [pc, #388]	@ (800bde4 <processCommand+0x1400>)
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fc fad5 	bl	8008210 <strcmp>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d103      	bne.n	800bc74 <processCommand+0x1290>
									 {

									 Home_Syringe_Motor(SYRINGE_HOME_MAX_COUNT);
 800bc6c:	f242 501c 	movw	r0, #9500	@ 0x251c
 800bc70:	f7fe f8fa 	bl	8009e68 <Home_Syringe_Motor>
									 }
							 }
						 }
					 }

		 			 if(strcmp(Error, "00") != 0)
 800bc74:	4b5a      	ldr	r3, [pc, #360]	@ (800bde0 <processCommand+0x13fc>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	495a      	ldr	r1, [pc, #360]	@ (800bde4 <processCommand+0x1400>)
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fc fac8 	bl	8008210 <strcmp>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d014      	beq.n	800bcb0 <processCommand+0x12cc>
		 			 {

		 			//	Home_Syringe_Motor(SYRINGE_HOME_MAX_COUNT);
		 			//	Home_Z_Probe_Motor( PROBE_HOME_MAX_COUNT);
		 				Pump_Off(&Waste_RemovalPump);
 800bc86:	485a      	ldr	r0, [pc, #360]	@ (800bdf0 <processCommand+0x140c>)
 800bc88:	f001 fe5c 	bl	800d944 <Pump_Off>
		 				Rising_Edge(P1_P4_GATE);
 800bc8c:	4b59      	ldr	r3, [pc, #356]	@ (800bdf4 <processCommand+0x1410>)
 800bc8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc92:	f003 f90b 	bl	800eeac <Rising_Edge>
		 				HAL_Delay(300);
 800bc96:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bc9a:	f003 f9e9 	bl	800f070 <HAL_Delay>




		 				Valve_Off(DI_Probe_Inlet);
 800bc9e:	4b52      	ldr	r3, [pc, #328]	@ (800bde8 <processCommand+0x1404>)
 800bca0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bca4:	f003 f8d2 	bl	800ee4c <Valve_Off>
                        HAL_Delay(300);
 800bca8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bcac:	f003 f9e0 	bl	800f070 <HAL_Delay>
		 			 }
	                 module_executed();
 800bcb0:	f7fe fe56 	bl	800a960 <module_executed>
 800bcb4:	f000 bfd9 	b.w	800cc6a <processCommand+0x2286>
		 	 }


else if(((CompareToBrace(Fluid_Pickup))==1))     //  	  char  Fluid_Pickup[]               ="!FLPK()";
 800bcb8:	484f      	ldr	r0, [pc, #316]	@ (800bdf8 <processCommand+0x1414>)
 800bcba:	f7fe fdd3 	bl	800a864 <CompareToBrace>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	f040 80d7 	bne.w	800be74 <processCommand+0x1490>
{
	unsigned int Number_ofpickup=0;
 800bcc6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bcca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcce:	2200      	movs	r2, #0
 800bcd0:	601a      	str	r2, [r3, #0]
	unsigned int Volume =0;
 800bcd2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bcd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcda:	2200      	movs	r2, #0
 800bcdc:	601a      	str	r2, [r3, #0]
	send_ACK();
 800bcde:	f7fe fe35 	bl	800a94c <send_ACK>
	int extracted = sscanf(command, "!FLPK(%d,%d)",&Number_ofpickup, &Volume);
 800bce2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800bce6:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800bcea:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800bcee:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800bcf2:	4942      	ldr	r1, [pc, #264]	@ (800bdfc <processCommand+0x1418>)
 800bcf4:	6800      	ldr	r0, [r0, #0]
 800bcf6:	f009 f8d3 	bl	8014ea0 <siscanf>
 800bcfa:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
	if (extracted != 2) {
 800bcfe:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d008      	beq.n	800bd18 <processCommand+0x1334>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800bd06:	f04f 33ff 	mov.w	r3, #4294967295
 800bd0a:	2217      	movs	r2, #23
 800bd0c:	493c      	ldr	r1, [pc, #240]	@ (800be00 <processCommand+0x141c>)
 800bd0e:	483d      	ldr	r0, [pc, #244]	@ (800be04 <processCommand+0x1420>)
 800bd10:	f006 ff9a 	bl	8012c48 <HAL_UART_Transmit>
 800bd14:	f000 bfae 	b.w	800cc74 <processCommand+0x2290>
	return;
	}
	//PICK THE VOLIME
	Valve_On(DI_Probe_Inlet);
 800bd18:	4b33      	ldr	r3, [pc, #204]	@ (800bde8 <processCommand+0x1404>)
 800bd1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd1e:	f003 f885 	bl	800ee2c <Valve_On>
	Rising_Edge(VL_EXLED_GATE);
 800bd22:	4b32      	ldr	r3, [pc, #200]	@ (800bdec <processCommand+0x1408>)
 800bd24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd28:	f003 f8c0 	bl	800eeac <Rising_Edge>
	HAL_Delay(300);
 800bd2c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bd30:	f003 f99e 	bl	800f070 <HAL_Delay>

	for (int i=1;i<=Number_ofpickup;i++)
 800bd34:	2301      	movs	r3, #1
 800bd36:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800bd3a:	e075      	b.n	800be28 <processCommand+0x1444>
	{
		Move_Syringe_Motor(1,Volume );
 800bd3c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bd40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4619      	mov	r1, r3
 800bd48:	2001      	movs	r0, #1
 800bd4a:	f7fe f8d7 	bl	8009efc <Move_Syringe_Motor>
		 HAL_Delay(1000);
 800bd4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bd52:	f003 f98d 	bl	800f070 <HAL_Delay>
		// MOVE DOWN FURTHER AND CHECK IF THERE IS APROBE CREASH
		if(strcmp(Error, "00") == 0)
 800bd56:	4b22      	ldr	r3, [pc, #136]	@ (800bde0 <processCommand+0x13fc>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4922      	ldr	r1, [pc, #136]	@ (800bde4 <processCommand+0x1400>)
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fc fa57 	bl	8008210 <strcmp>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d15a      	bne.n	800be1e <processCommand+0x143a>
		 {

			if(i<Number_ofpickup)
 800bd68:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800bd6c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bd70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d251      	bcs.n	800be1e <processCommand+0x143a>
			{
				 Move_Z_Probe_Motor(PROBE_DOWN_DIR , 50);
 800bd7a:	2132      	movs	r1, #50	@ 0x32
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	f7fd fe27 	bl	80099d0 <Move_Z_Probe_Motor>

					// PICK THE VOUMEE
				if ((strcmp(Error, "P") == 0))
 800bd82:	4b17      	ldr	r3, [pc, #92]	@ (800bde0 <processCommand+0x13fc>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4920      	ldr	r1, [pc, #128]	@ (800be08 <processCommand+0x1424>)
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fc fa41 	bl	8008210 <strcmp>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d13b      	bne.n	800be0c <processCommand+0x1428>
					{

						int reverseloop=i; ///No of Z movement is less than the pickup because during first pick up is done by using  MDFS command movemnt
 800bd94:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800bd98:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
						for(int j=1;j<=reverseloop;j++)
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800bda2:	e015      	b.n	800bdd0 <processCommand+0x13ec>
						{

							  Move_Z_Probe_Motor(PROBE_UP_DIR , 50);
 800bda4:	2132      	movs	r1, #50	@ 0x32
 800bda6:	2000      	movs	r0, #0
 800bda8:	f7fd fe12 	bl	80099d0 <Move_Z_Probe_Motor>
							 Move_Syringe_Motor(0,Volume );
 800bdac:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bdb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	2000      	movs	r0, #0
 800bdba:	f7fe f89f 	bl	8009efc <Move_Syringe_Motor>
							 HAL_Delay(1000);
 800bdbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bdc2:	f003 f955 	bl	800f070 <HAL_Delay>
						for(int j=1;j<=reverseloop;j++)
 800bdc6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 800bdca:	3301      	adds	r3, #1
 800bdcc:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800bdd0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800bdd4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	dde3      	ble.n	800bda4 <processCommand+0x13c0>
						}
						break;
 800bddc:	e02f      	b.n	800be3e <processCommand+0x145a>
 800bdde:	bf00      	nop
 800bde0:	20000014 	.word	0x20000014
 800bde4:	08018edc 	.word	0x08018edc
 800bde8:	20000248 	.word	0x20000248
 800bdec:	20000268 	.word	0x20000268
 800bdf0:	20000238 	.word	0x20000238
 800bdf4:	20000258 	.word	0x20000258
 800bdf8:	200001fc 	.word	0x200001fc
 800bdfc:	08018fb0 	.word	0x08018fb0
 800be00:	08018f00 	.word	0x08018f00
 800be04:	200008a8 	.word	0x200008a8
 800be08:	08018fc0 	.word	0x08018fc0
					}
				else if((strcmp(Error, "00") == 0))
 800be0c:	4bcc      	ldr	r3, [pc, #816]	@ (800c140 <processCommand+0x175c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	49cc      	ldr	r1, [pc, #816]	@ (800c144 <processCommand+0x1760>)
 800be12:	4618      	mov	r0, r3
 800be14:	f7fc f9fc 	bl	8008210 <strcmp>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10e      	bne.n	800be3c <processCommand+0x1458>
	for (int i=1;i<=Number_ofpickup;i++)
 800be1e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800be22:	3301      	adds	r3, #1
 800be24:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800be28:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800be2c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800be30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	429a      	cmp	r2, r3
 800be38:	d980      	bls.n	800bd3c <processCommand+0x1358>
 800be3a:	e000      	b.n	800be3e <processCommand+0x145a>
				{
					;
				}
				else
				{
					break;
 800be3c:	bf00      	nop
			}
		 }
	}
//	Home_Z_Probe_Motor( PROBE_HOME_MAX_COUNT);
//	Home_Syringe_Motor(SYRINGE_HOME_MAX_COUNT);
	if(strcmp(Error, "00") != 0)
 800be3e:	4bc0      	ldr	r3, [pc, #768]	@ (800c140 <processCommand+0x175c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	49c0      	ldr	r1, [pc, #768]	@ (800c144 <processCommand+0x1760>)
 800be44:	4618      	mov	r0, r3
 800be46:	f7fc f9e3 	bl	8008210 <strcmp>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00d      	beq.n	800be6c <processCommand+0x1488>
	{
	//	Home_Z_Probe_Motor( PROBE_HOME_MAX_COUNT);
	//	Home_Syringe_Motor(SYRINGE_HOME_MAX_COUNT);
		Valve_On(DI_Probe_Inlet);
 800be50:	4bbd      	ldr	r3, [pc, #756]	@ (800c148 <processCommand+0x1764>)
 800be52:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be56:	f002 ffe9 	bl	800ee2c <Valve_On>
		Rising_Edge(VL_EXLED_GATE);
 800be5a:	4bbc      	ldr	r3, [pc, #752]	@ (800c14c <processCommand+0x1768>)
 800be5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be60:	f003 f824 	bl	800eeac <Rising_Edge>
		HAL_Delay(300);
 800be64:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800be68:	f003 f902 	bl	800f070 <HAL_Delay>
	}

	module_executed();
 800be6c:	f7fe fd78 	bl	800a960 <module_executed>
 800be70:	f000 befb 	b.w	800cc6a <processCommand+0x2286>
}


	   else if(((CompareToBrace(Prime_Pump))==1))//  	 char  Prime_Pump[]                 ="PPRI()";
 800be74:	48b6      	ldr	r0, [pc, #728]	@ (800c150 <processCommand+0x176c>)
 800be76:	f7fe fcf5 	bl	800a864 <CompareToBrace>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	f040 8090 	bne.w	800bfa2 <processCommand+0x15be>
	   {
			 	    	 unsigned int Nozzle_Prime_Height=0;
 800be82:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800be86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800be8a:	2200      	movs	r2, #0
 800be8c:	601a      	str	r2, [r3, #0]
			 	    	 unsigned int Buffer_Prime_Volume =0;
 800be8e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800be92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800be96:	2200      	movs	r2, #0
 800be98:	601a      	str	r2, [r3, #0]
			 			 send_ACK();
 800be9a:	f7fe fd57 	bl	800a94c <send_ACK>
			 			   int extracted = sscanf(command, "!PPRI(%d,%d)",&Nozzle_Prime_Height, &Buffer_Prime_Volume);
 800be9e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800bea2:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800bea6:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800beaa:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800beae:	49a9      	ldr	r1, [pc, #676]	@ (800c154 <processCommand+0x1770>)
 800beb0:	6800      	ldr	r0, [r0, #0]
 800beb2:	f008 fff5 	bl	8014ea0 <siscanf>
 800beb6:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
			 				if (extracted != 2) {
 800beba:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d008      	beq.n	800bed4 <processCommand+0x14f0>
			 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800bec2:	f04f 33ff 	mov.w	r3, #4294967295
 800bec6:	2217      	movs	r2, #23
 800bec8:	49a3      	ldr	r1, [pc, #652]	@ (800c158 <processCommand+0x1774>)
 800beca:	48a4      	ldr	r0, [pc, #656]	@ (800c15c <processCommand+0x1778>)
 800becc:	f006 febc 	bl	8012c48 <HAL_UART_Transmit>
 800bed0:	f000 bed0 	b.w	800cc74 <processCommand+0x2290>
			 				 return;
			 				}
			 			// move nozzle down
			 				Move_Z_Nozzle_Motor(NOZZLE_DOWN_DIR, Nozzle_Prime_Height);
 800bed4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bed8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4619      	mov	r1, r3
 800bee0:	2000      	movs	r0, #0
 800bee2:	f7fd fb71 	bl	80095c8 <Move_Z_Nozzle_Motor>

			 			//waste pump on
			 			  if((strcmp("00",Error)==0))
 800bee6:	4b96      	ldr	r3, [pc, #600]	@ (800c140 <processCommand+0x175c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4619      	mov	r1, r3
 800beec:	4895      	ldr	r0, [pc, #596]	@ (800c144 <processCommand+0x1760>)
 800beee:	f7fc f98f 	bl	8008210 <strcmp>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d150      	bne.n	800bf9a <processCommand+0x15b6>
			 			  {
			 				Pump_On(&Waste_RemovalPump,CLOCKWISE);
 800bef8:	2100      	movs	r1, #0
 800befa:	4899      	ldr	r0, [pc, #612]	@ (800c160 <processCommand+0x177c>)
 800befc:	f001 fcf4 	bl	800d8e8 <Pump_On>

			 				Rising_Edge(P1_P4_GATE);
 800bf00:	4b98      	ldr	r3, [pc, #608]	@ (800c164 <processCommand+0x1780>)
 800bf02:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf06:	f002 ffd1 	bl	800eeac <Rising_Edge>
							HAL_Delay(300);
 800bf0a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bf0e:	f003 f8af 	bl	800f070 <HAL_Delay>
						   //buffer pump on
							Pump_On(&WashandUniversalBuffer_Pump,CLOCKWISE);
 800bf12:	2100      	movs	r1, #0
 800bf14:	4894      	ldr	r0, [pc, #592]	@ (800c168 <processCommand+0x1784>)
 800bf16:	f001 fce7 	bl	800d8e8 <Pump_On>

							Rising_Edge(P1_P4_GATE);
 800bf1a:	4b92      	ldr	r3, [pc, #584]	@ (800c164 <processCommand+0x1780>)
 800bf1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf20:	f002 ffc4 	bl	800eeac <Rising_Edge>
							delay_ms(Buffer_Prime_Volume);
 800bf24:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bf28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f002 fecc 	bl	800eccc <delay_ms>
							Pump_Off(&WashandUniversalBuffer_Pump);
 800bf34:	488c      	ldr	r0, [pc, #560]	@ (800c168 <processCommand+0x1784>)
 800bf36:	f001 fd05 	bl	800d944 <Pump_Off>

							Rising_Edge(P1_P4_GATE);
 800bf3a:	4b8a      	ldr	r3, [pc, #552]	@ (800c164 <processCommand+0x1780>)
 800bf3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf40:	f002 ffb4 	bl	800eeac <Rising_Edge>
							HAL_Delay(1000);
 800bf44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bf48:	f003 f892 	bl	800f070 <HAL_Delay>
							Pump_On(&WashandUniversalBuffer_Pump,ANTICLOCKWISE);
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	4886      	ldr	r0, [pc, #536]	@ (800c168 <processCommand+0x1784>)
 800bf50:	f001 fcca 	bl	800d8e8 <Pump_On>

							Rising_Edge(P1_P4_GATE);
 800bf54:	4b83      	ldr	r3, [pc, #524]	@ (800c164 <processCommand+0x1780>)
 800bf56:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf5a:	f002 ffa7 	bl	800eeac <Rising_Edge>
							delay_ms(100);
 800bf5e:	2064      	movs	r0, #100	@ 0x64
 800bf60:	f002 feb4 	bl	800eccc <delay_ms>
							Pump_Off(&WashandUniversalBuffer_Pump);
 800bf64:	4880      	ldr	r0, [pc, #512]	@ (800c168 <processCommand+0x1784>)
 800bf66:	f001 fced 	bl	800d944 <Pump_Off>

							Rising_Edge(P1_P4_GATE);
 800bf6a:	4b7e      	ldr	r3, [pc, #504]	@ (800c164 <processCommand+0x1780>)
 800bf6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf70:	f002 ff9c 	bl	800eeac <Rising_Edge>
							delay_ms(100);
 800bf74:	2064      	movs	r0, #100	@ 0x64
 800bf76:	f002 fea9 	bl	800eccc <delay_ms>
			 			   //waste pump off
							Pump_Off(&Waste_RemovalPump);
 800bf7a:	4879      	ldr	r0, [pc, #484]	@ (800c160 <processCommand+0x177c>)
 800bf7c:	f001 fce2 	bl	800d944 <Pump_Off>

							Rising_Edge(P1_P4_GATE);
 800bf80:	4b78      	ldr	r3, [pc, #480]	@ (800c164 <processCommand+0x1780>)
 800bf82:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf86:	f002 ff91 	bl	800eeac <Rising_Edge>
							HAL_Delay(300);
 800bf8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bf8e:	f003 f86f 	bl	800f070 <HAL_Delay>
						   // home Z
							Home_Z_Nozzle_Motor(NOZZLE_HOME_MAX_COUNT);
 800bf92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bf96:	f7fd f9d5 	bl	8009344 <Home_Z_Nozzle_Motor>

			 			  }
					       module_executed();
 800bf9a:	f7fe fce1 	bl	800a960 <module_executed>
 800bf9e:	f000 be64 	b.w	800cc6a <processCommand+0x2286>
					  }

	 else if(((CompareToBrace(Z_Nozzle_Aspirate))==1))//  	 char  Z_Nozzle_Aspirate[]             ="!NAS()";
 800bfa2:	4872      	ldr	r0, [pc, #456]	@ (800c16c <processCommand+0x1788>)
 800bfa4:	f7fe fc5e 	bl	800a864 <CompareToBrace>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	f040 8105 	bne.w	800c1ba <processCommand+0x17d6>
				 {
				 unsigned int Number_Of_Strips=0;
 800bfb0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bfb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
				 unsigned int Nozzle_Aspirate_Height=0;
 800bfbc:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bfc0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]
				 unsigned int Waste_Aspirate_Count=0;
 800bfc8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bfcc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]
				 unsigned int Strip_Position=2;
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
				 unsigned int Number_Of_Aspiration=0;
 800bfda:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bfde:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
				 send_ACK();
 800bfe6:	f7fe fcb1 	bl	800a94c <send_ACK>
				   int extracted = sscanf(command, "!NAS(%d,%d,%d,%d)",&Number_Of_Strips, &Nozzle_Aspirate_Height,&Waste_Aspirate_Count,&Number_Of_Aspiration);
 800bfea:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800bfee:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 800bff2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800bff6:	f5a3 70fa 	sub.w	r0, r3, #500	@ 0x1f4
 800bffa:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800bffe:	9301      	str	r3, [sp, #4]
 800c000:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	460b      	mov	r3, r1
 800c008:	4959      	ldr	r1, [pc, #356]	@ (800c170 <processCommand+0x178c>)
 800c00a:	6800      	ldr	r0, [r0, #0]
 800c00c:	f008 ff48 	bl	8014ea0 <siscanf>
 800c010:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
					if (extracted != 4) {
 800c014:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800c018:	2b04      	cmp	r3, #4
 800c01a:	d008      	beq.n	800c02e <processCommand+0x164a>
					 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c01c:	f04f 33ff 	mov.w	r3, #4294967295
 800c020:	2217      	movs	r2, #23
 800c022:	494d      	ldr	r1, [pc, #308]	@ (800c158 <processCommand+0x1774>)
 800c024:	484d      	ldr	r0, [pc, #308]	@ (800c15c <processCommand+0x1778>)
 800c026:	f006 fe0f 	bl	8012c48 <HAL_UART_Transmit>
 800c02a:	f000 be23 	b.w	800cc74 <processCommand+0x2290>
					 return;
					}
			  for( int i=1;i<=Number_Of_Aspiration;i++)
 800c02e:	2301      	movs	r3, #1
 800c030:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800c034:	e026      	b.n	800c084 <processCommand+0x16a0>
			  {
				  Send_Count(Strip_Position);
 800c036:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 800c03a:	f7fe fcb5 	bl	800a9a8 <Send_Count>

				//step 2 move nozzle down
				Move_Z_Nozzle_Motor(NOZZLE_DOWN_DIR, Nozzle_Aspirate_Height);
 800c03e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c042:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4619      	mov	r1, r3
 800c04a:	2000      	movs	r0, #0
 800c04c:	f7fd fabc 	bl	80095c8 <Move_Z_Nozzle_Motor>
				if(strcmp("00",Error)==0)
 800c050:	4b3b      	ldr	r3, [pc, #236]	@ (800c140 <processCommand+0x175c>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4619      	mov	r1, r3
 800c056:	483b      	ldr	r0, [pc, #236]	@ (800c144 <processCommand+0x1760>)
 800c058:	f7fc f8da 	bl	8008210 <strcmp>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10b      	bne.n	800c07a <processCommand+0x1696>
				{
					//step 3 dispaense volume

					Waste_Pump_Function(Waste_Aspirate_Count);
 800c062:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c066:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 fcbd 	bl	800d9ec <Waste_Pump_Function>

					Home_Z_Nozzle_Motor(NOZZLE_HOME_MAX_COUNT);
 800c072:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c076:	f7fd f965 	bl	8009344 <Home_Z_Nozzle_Motor>
			  for( int i=1;i<=Number_Of_Aspiration;i++)
 800c07a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800c07e:	3301      	adds	r3, #1
 800c080:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800c084:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800c088:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c08c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	d9cf      	bls.n	800c036 <processCommand+0x1652>
				}
			  }

			  if(strcmp("00",Error)==0)
 800c096:	4b2a      	ldr	r3, [pc, #168]	@ (800c140 <processCommand+0x175c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4619      	mov	r1, r3
 800c09c:	4829      	ldr	r0, [pc, #164]	@ (800c144 <processCommand+0x1760>)
 800c09e:	f7fc f8b7 	bl	8008210 <strcmp>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f040 8084 	bne.w	800c1b2 <processCommand+0x17ce>
			  {
				while((Number_Of_Strips>1)&&(Strip_Position <=Number_Of_Strips))
 800c0aa:	e06f      	b.n	800c18c <processCommand+0x17a8>
		    	{

					//step4 move to next strip
				 Move_X_Motor_Next_Position(STRIP_DIRECTION,300,NOZZLE);
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800c0b2:	2001      	movs	r0, #1
 800c0b4:	f7fe faea 	bl	800a68c <Move_X_Motor_Next_Position>
				  if(strcmp("00",Error)==0)
 800c0b8:	4b21      	ldr	r3, [pc, #132]	@ (800c140 <processCommand+0x175c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4821      	ldr	r0, [pc, #132]	@ (800c144 <processCommand+0x1760>)
 800c0c0:	f7fc f8a6 	bl	8008210 <strcmp>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d172      	bne.n	800c1b0 <processCommand+0x17cc>
				  {
					  for( int i=1;i<=Number_Of_Aspiration;i++)
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800c0d0:	e02b      	b.n	800c12a <processCommand+0x1746>
					  {

						  Move_Z_Nozzle_Motor(NOZZLE_DOWN_DIR, Nozzle_Aspirate_Height);
 800c0d2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c0d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f7fd fa72 	bl	80095c8 <Move_Z_Nozzle_Motor>
						// step 5 dispense volume
						  if(strcmp("00",Error)==0)
 800c0e4:	4b16      	ldr	r3, [pc, #88]	@ (800c140 <processCommand+0x175c>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4816      	ldr	r0, [pc, #88]	@ (800c144 <processCommand+0x1760>)
 800c0ec:	f7fc f890 	bl	8008210 <strcmp>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d13e      	bne.n	800c174 <processCommand+0x1790>
						  {

							 Waste_Pump_Function(Waste_Aspirate_Count);
 800c0f6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c0fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4618      	mov	r0, r3
 800c102:	f001 fc73 	bl	800d9ec <Waste_Pump_Function>

							 Home_Z_Nozzle_Motor(NOZZLE_HOME_MAX_COUNT);
 800c106:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c10a:	f7fd f91b 	bl	8009344 <Home_Z_Nozzle_Motor>

							  if(strcmp("00",Error)!=0) break;
 800c10e:	4b0c      	ldr	r3, [pc, #48]	@ (800c140 <processCommand+0x175c>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4619      	mov	r1, r3
 800c114:	480b      	ldr	r0, [pc, #44]	@ (800c144 <processCommand+0x1760>)
 800c116:	f7fc f87b 	bl	8008210 <strcmp>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d12b      	bne.n	800c178 <processCommand+0x1794>
					  for( int i=1;i<=Number_Of_Aspiration;i++)
 800c120:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800c124:	3301      	adds	r3, #1
 800c126:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800c12a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800c12e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c132:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d9ca      	bls.n	800c0d2 <processCommand+0x16ee>
 800c13c:	e01d      	b.n	800c17a <processCommand+0x1796>
 800c13e:	bf00      	nop
 800c140:	20000014 	.word	0x20000014
 800c144:	08018edc 	.word	0x08018edc
 800c148:	20000248 	.word	0x20000248
 800c14c:	20000268 	.word	0x20000268
 800c150:	20000204 	.word	0x20000204
 800c154:	08018fc4 	.word	0x08018fc4
 800c158:	08018f00 	.word	0x08018f00
 800c15c:	200008a8 	.word	0x200008a8
 800c160:	20000238 	.word	0x20000238
 800c164:	20000258 	.word	0x20000258
 800c168:	20000228 	.word	0x20000228
 800c16c:	20000194 	.word	0x20000194
 800c170:	08018fd4 	.word	0x08018fd4
						  }
						  else
						  {
							  break;
 800c174:	bf00      	nop
 800c176:	e000      	b.n	800c17a <processCommand+0x1796>
							  if(strcmp("00",Error)!=0) break;
 800c178:	bf00      	nop
				  }
				  else
				  {
					  break;
				  }
				  Strip_Position++;
 800c17a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800c17e:	3301      	adds	r3, #1
 800c180:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
				  Send_Count(Strip_Position);
 800c184:	f8d7 01d4 	ldr.w	r0, [r7, #468]	@ 0x1d4
 800c188:	f7fe fc0e 	bl	800a9a8 <Send_Count>
				while((Number_Of_Strips>1)&&(Strip_Position <=Number_Of_Strips))
 800c18c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c190:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d90b      	bls.n	800c1b2 <processCommand+0x17ce>
 800c19a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c19e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	f67f af7f 	bls.w	800c0ac <processCommand+0x16c8>
 800c1ae:	e000      	b.n	800c1b2 <processCommand+0x17ce>
					  break;
 800c1b0:	bf00      	nop
				}
			  }

				//step6 Nozzle home
	//			Home_Z_Nozzle_Motor(NOZZLE_HOME_MAX_COUNT);
			   module_executed();
 800c1b2:	f7fe fbd5 	bl	800a960 <module_executed>
 800c1b6:	f000 bd58 	b.w	800cc6a <processCommand+0x2286>
			  }

     else if(((CompareToBrace(Z_Probe_Home))==1))//   char  Z_Probe_Home[]		       ="!ZPHOM()";
 800c1ba:	48ca      	ldr	r0, [pc, #808]	@ (800c4e4 <processCommand+0x1b00>)
 800c1bc:	f7fe fb52 	bl	800a864 <CompareToBrace>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d12c      	bne.n	800c220 <processCommand+0x183c>
			 {
	    	 unsigned int Maximum_Pulses=0;
 800c1c6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c1ca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
			 send_ACK();
 800c1d2:	f7fe fbbb 	bl	800a94c <send_ACK>
			 //Error="X";
			   int extracted = sscanf(command, "!ZPHOM(%d)",&Maximum_Pulses);
 800c1d6:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 800c1da:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c1de:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800c1e2:	49c1      	ldr	r1, [pc, #772]	@ (800c4e8 <processCommand+0x1b04>)
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f008 fe5b 	bl	8014ea0 <siscanf>
 800c1ea:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
				if (extracted != 1) {
 800c1ee:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d008      	beq.n	800c208 <processCommand+0x1824>
				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fa:	2217      	movs	r2, #23
 800c1fc:	49bb      	ldr	r1, [pc, #748]	@ (800c4ec <processCommand+0x1b08>)
 800c1fe:	48bc      	ldr	r0, [pc, #752]	@ (800c4f0 <processCommand+0x1b0c>)
 800c200:	f006 fd22 	bl	8012c48 <HAL_UART_Transmit>
 800c204:	f000 bd36 	b.w	800cc74 <processCommand+0x2290>
				 return;
				}
			   Home_Z_Probe_Motor( Maximum_Pulses);
 800c208:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c20c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4618      	mov	r0, r3
 800c214:	f7fd fa8a 	bl	800972c <Home_Z_Probe_Motor>
			   module_executed();
 800c218:	f7fe fba2 	bl	800a960 <module_executed>
 800c21c:	f000 bd25 	b.w	800cc6a <processCommand+0x2286>
			  }
     else if(((CompareToBrace(Z_Probe_Home_Distance))==1))//    char  Z_Probe_Home_Distance[]      ="!ZPECC()";
 800c220:	48b4      	ldr	r0, [pc, #720]	@ (800c4f4 <processCommand+0x1b10>)
 800c222:	f7fe fb1f 	bl	800a864 <CompareToBrace>
 800c226:	4603      	mov	r3, r0
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d12c      	bne.n	800c286 <processCommand+0x18a2>
 			 {
 	    	 unsigned int Maximum_Pulses=0;
 800c22c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c230:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
 			 send_ACK();
 800c238:	f7fe fb88 	bl	800a94c <send_ACK>
 			   int extracted = sscanf(command, "!ZPECC(%d)",&Maximum_Pulses);
 800c23c:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800c240:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c244:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800c248:	49ab      	ldr	r1, [pc, #684]	@ (800c4f8 <processCommand+0x1b14>)
 800c24a:	6818      	ldr	r0, [r3, #0]
 800c24c:	f008 fe28 	bl	8014ea0 <siscanf>
 800c250:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
 				if (extracted != 1) {
 800c254:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d008      	beq.n	800c26e <processCommand+0x188a>
 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c25c:	f04f 33ff 	mov.w	r3, #4294967295
 800c260:	2217      	movs	r2, #23
 800c262:	49a2      	ldr	r1, [pc, #648]	@ (800c4ec <processCommand+0x1b08>)
 800c264:	48a2      	ldr	r0, [pc, #648]	@ (800c4f0 <processCommand+0x1b0c>)
 800c266:	f006 fcef 	bl	8012c48 <HAL_UART_Transmit>
 800c26a:	f000 bd03 	b.w	800cc74 <processCommand+0x2290>
 				 return;
 				}
 				Home_Z_Probe_Motor_Distance( Maximum_Pulses);
 800c26e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c272:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fd fafd 	bl	8009878 <Home_Z_Probe_Motor_Distance>
 			   module_executed();
 800c27e:	f7fe fb6f 	bl	800a960 <module_executed>
 800c282:	f000 bcf2 	b.w	800cc6a <processCommand+0x2286>
 			  }
     else if(((CompareToBrace(Z_Nozzle_Home_Distance))==1))//   c char  Z_Nozzle_Home_Distance[]    ="!ZNECC()";
 800c286:	489d      	ldr	r0, [pc, #628]	@ (800c4fc <processCommand+0x1b18>)
 800c288:	f7fe faec 	bl	800a864 <CompareToBrace>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d12c      	bne.n	800c2ec <processCommand+0x1908>
     			 {
     	    	 unsigned int Maximum_Pulses=0;
 800c292:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c296:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]
     			 send_ACK();
 800c29e:	f7fe fb55 	bl	800a94c <send_ACK>
     			   int extracted = sscanf(command, "!ZNECC(%d)",&Maximum_Pulses);
 800c2a2:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 800c2a6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c2aa:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800c2ae:	4994      	ldr	r1, [pc, #592]	@ (800c500 <processCommand+0x1b1c>)
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	f008 fdf5 	bl	8014ea0 <siscanf>
 800c2b6:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
     				if (extracted != 1) {
 800c2ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d008      	beq.n	800c2d4 <processCommand+0x18f0>
     				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c6:	2217      	movs	r2, #23
 800c2c8:	4988      	ldr	r1, [pc, #544]	@ (800c4ec <processCommand+0x1b08>)
 800c2ca:	4889      	ldr	r0, [pc, #548]	@ (800c4f0 <processCommand+0x1b0c>)
 800c2cc:	f006 fcbc 	bl	8012c48 <HAL_UART_Transmit>
 800c2d0:	f000 bcd0 	b.w	800cc74 <processCommand+0x2290>
     				 return;
     				}
     				Home_Z_Nozzle_Motor_Distance( Maximum_Pulses);
 800c2d4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c2d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fd f8ce 	bl	8009480 <Home_Z_Nozzle_Motor_Distance>
     			   module_executed();
 800c2e4:	f7fe fb3c 	bl	800a960 <module_executed>
 800c2e8:	f000 bcbf 	b.w	800cc6a <processCommand+0x2286>
     			  }

	 else if(((CompareToBrace(Z_Probe_Move))==1))//  	 char  Z_Probe_Move[]              ="!ZPMOV()";
 800c2ec:	4885      	ldr	r0, [pc, #532]	@ (800c504 <processCommand+0x1b20>)
 800c2ee:	f7fe fab9 	bl	800a864 <CompareToBrace>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d13b      	bne.n	800c370 <processCommand+0x198c>
	 			 {
	 	    	 unsigned int Direction=0,Distance=0;
 800c2f8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c2fc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c300:	2200      	movs	r2, #0
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c308:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c30c:	2200      	movs	r2, #0
 800c30e:	601a      	str	r2, [r3, #0]

	 			 send_ACK();
 800c310:	f7fe fb1c 	bl	800a94c <send_ACK>
	 			//Error="P";
	 			   int extracted = sscanf(command, "!ZPMOV(%d,%d)",&Direction, &Distance);
 800c314:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800c318:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 800c31c:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800c320:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800c324:	4978      	ldr	r1, [pc, #480]	@ (800c508 <processCommand+0x1b24>)
 800c326:	6800      	ldr	r0, [r0, #0]
 800c328:	f008 fdba 	bl	8014ea0 <siscanf>
 800c32c:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
	 				if (extracted !=2) {
 800c330:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800c334:	2b02      	cmp	r3, #2
 800c336:	d008      	beq.n	800c34a <processCommand+0x1966>
	 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c338:	f04f 33ff 	mov.w	r3, #4294967295
 800c33c:	2217      	movs	r2, #23
 800c33e:	496b      	ldr	r1, [pc, #428]	@ (800c4ec <processCommand+0x1b08>)
 800c340:	486b      	ldr	r0, [pc, #428]	@ (800c4f0 <processCommand+0x1b0c>)
 800c342:	f006 fc81 	bl	8012c48 <HAL_UART_Transmit>
 800c346:	f000 bc95 	b.w	800cc74 <processCommand+0x2290>
	 				 return;
	 				}
	 				Move_Z_Probe_Motor(Direction, Distance);
 800c34a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c34e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	461a      	mov	r2, r3
 800c356:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c35a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4619      	mov	r1, r3
 800c362:	4610      	mov	r0, r2
 800c364:	f7fd fb34 	bl	80099d0 <Move_Z_Probe_Motor>
	 			   module_executed();
 800c368:	f7fe fafa 	bl	800a960 <module_executed>
 800c36c:	f000 bc7d 	b.w	800cc6a <processCommand+0x2286>
	 			  }
	 else if(((CompareToBrace(Syringe_Home))==1))//  		 char  Syringe_Home[]		       ="!SHOM()";
 800c370:	4866      	ldr	r0, [pc, #408]	@ (800c50c <processCommand+0x1b28>)
 800c372:	f7fe fa77 	bl	800a864 <CompareToBrace>
 800c376:	4603      	mov	r3, r0
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d12c      	bne.n	800c3d6 <processCommand+0x19f2>
	 			 {
		            unsigned int Maximum_Pulses=0;
 800c37c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c380:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]
					 send_ACK();
 800c388:	f7fe fae0 	bl	800a94c <send_ACK>
					   int extracted = sscanf(command, "!SHOM(%d)",&Maximum_Pulses);
 800c38c:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 800c390:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c394:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800c398:	495d      	ldr	r1, [pc, #372]	@ (800c510 <processCommand+0x1b2c>)
 800c39a:	6818      	ldr	r0, [r3, #0]
 800c39c:	f008 fd80 	bl	8014ea0 <siscanf>
 800c3a0:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
						if (extracted != 1) {
 800c3a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d008      	beq.n	800c3be <processCommand+0x19da>
						 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b0:	2217      	movs	r2, #23
 800c3b2:	494e      	ldr	r1, [pc, #312]	@ (800c4ec <processCommand+0x1b08>)
 800c3b4:	484e      	ldr	r0, [pc, #312]	@ (800c4f0 <processCommand+0x1b0c>)
 800c3b6:	f006 fc47 	bl	8012c48 <HAL_UART_Transmit>
 800c3ba:	f000 bc5b 	b.w	800cc74 <processCommand+0x2290>
						 return;
						}
				   Home_Syringe_Motor( Maximum_Pulses);
 800c3be:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c3c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fd fd4d 	bl	8009e68 <Home_Syringe_Motor>
				   module_executed();
 800c3ce:	f7fe fac7 	bl	800a960 <module_executed>
 800c3d2:	f000 bc4a 	b.w	800cc6a <processCommand+0x2286>
	 			  }
	 else if(((CompareToBrace(Syringe_Move))==1))//  	     char  Syringe_Move[]              ="!SMOV()";
 800c3d6:	484f      	ldr	r0, [pc, #316]	@ (800c514 <processCommand+0x1b30>)
 800c3d8:	f7fe fa44 	bl	800a864 <CompareToBrace>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d13b      	bne.n	800c45a <processCommand+0x1a76>
	 			 {
	 	    	 unsigned int Direction=0,Distance=0;
 800c3e2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c3e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c3f2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	601a      	str	r2, [r3, #0]

	 			 send_ACK();
 800c3fa:	f7fe faa7 	bl	800a94c <send_ACK>
	 			   int extracted = sscanf(command, "!SMOV(%d,%d)",&Direction, &Distance);
 800c3fe:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c402:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800c406:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800c40a:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800c40e:	4942      	ldr	r1, [pc, #264]	@ (800c518 <processCommand+0x1b34>)
 800c410:	6800      	ldr	r0, [r0, #0]
 800c412:	f008 fd45 	bl	8014ea0 <siscanf>
 800c416:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
	 				if (extracted != 2) {
 800c41a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d008      	beq.n	800c434 <processCommand+0x1a50>
	 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c422:	f04f 33ff 	mov.w	r3, #4294967295
 800c426:	2217      	movs	r2, #23
 800c428:	4930      	ldr	r1, [pc, #192]	@ (800c4ec <processCommand+0x1b08>)
 800c42a:	4831      	ldr	r0, [pc, #196]	@ (800c4f0 <processCommand+0x1b0c>)
 800c42c:	f006 fc0c 	bl	8012c48 <HAL_UART_Transmit>
 800c430:	f000 bc20 	b.w	800cc74 <processCommand+0x2290>
	 				 return;
	 				}
	 				Move_Syringe_Motor(Direction, Distance);
 800c434:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c438:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c444:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f7fd fd55 	bl	8009efc <Move_Syringe_Motor>
	 			   module_executed();
 800c452:	f7fe fa85 	bl	800a960 <module_executed>
 800c456:	f000 bc08 	b.w	800cc6a <processCommand+0x2286>
	 			  }
	 else if(((CompareToBrace(Air_Gap))==1))//  	     char  Air_Gap[]              ="!AIRG()";
 800c45a:	4830      	ldr	r0, [pc, #192]	@ (800c51c <processCommand+0x1b38>)
 800c45c:	f7fe fa02 	bl	800a864 <CompareToBrace>
 800c460:	4603      	mov	r3, r0
 800c462:	2b01      	cmp	r3, #1
 800c464:	d162      	bne.n	800c52c <processCommand+0x1b48>
	 			 {
	 	    	 unsigned int Direction=1,VolumeCount=0;
 800c466:	2301      	movs	r3, #1
 800c468:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800c46c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c470:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800c474:	2200      	movs	r2, #0
 800c476:	601a      	str	r2, [r3, #0]

	 			 send_ACK();
 800c478:	f7fe fa68 	bl	800a94c <send_ACK>
	 			   int extracted = sscanf(command, "!AIRG(%d)", &VolumeCount);
 800c47c:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 800c480:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c484:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800c488:	4925      	ldr	r1, [pc, #148]	@ (800c520 <processCommand+0x1b3c>)
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	f008 fd08 	bl	8014ea0 <siscanf>
 800c490:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
	 				if (extracted != 1) {
 800c494:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d007      	beq.n	800c4ac <processCommand+0x1ac8>
	 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c49c:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a0:	2217      	movs	r2, #23
 800c4a2:	4912      	ldr	r1, [pc, #72]	@ (800c4ec <processCommand+0x1b08>)
 800c4a4:	4812      	ldr	r0, [pc, #72]	@ (800c4f0 <processCommand+0x1b0c>)
 800c4a6:	f006 fbcf 	bl	8012c48 <HAL_UART_Transmit>
 800c4aa:	e3e3      	b.n	800cc74 <processCommand+0x2290>
	 				 return;
	 				}
	 				Valve_On(DI_Probe_Inlet);
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	@ (800c524 <processCommand+0x1b40>)
 800c4ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4b2:	f002 fcbb 	bl	800ee2c <Valve_On>
	 				Rising_Edge(VL_EXLED_GATE);
 800c4b6:	4b1c      	ldr	r3, [pc, #112]	@ (800c528 <processCommand+0x1b44>)
 800c4b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4bc:	f002 fcf6 	bl	800eeac <Rising_Edge>
	 				HAL_Delay(500);
 800c4c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c4c4:	f002 fdd4 	bl	800f070 <HAL_Delay>
	 				Move_Syringe_Motor(Direction, VolumeCount);
 800c4c8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800c4cc:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c4d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4610      	mov	r0, r2
 800c4da:	f7fd fd0f 	bl	8009efc <Move_Syringe_Motor>
	 			   module_executed();
 800c4de:	f7fe fa3f 	bl	800a960 <module_executed>
 800c4e2:	e3c2      	b.n	800cc6a <processCommand+0x2286>
 800c4e4:	200001a8 	.word	0x200001a8
 800c4e8:	08018fe8 	.word	0x08018fe8
 800c4ec:	08018f00 	.word	0x08018f00
 800c4f0:	200008a8 	.word	0x200008a8
 800c4f4:	200001c0 	.word	0x200001c0
 800c4f8:	08018ff4 	.word	0x08018ff4
 800c4fc:	2000019c 	.word	0x2000019c
 800c500:	08019000 	.word	0x08019000
 800c504:	200001b4 	.word	0x200001b4
 800c508:	0801900c 	.word	0x0801900c
 800c50c:	200001d4 	.word	0x200001d4
 800c510:	0801901c 	.word	0x0801901c
 800c514:	200001dc 	.word	0x200001dc
 800c518:	08019028 	.word	0x08019028
 800c51c:	200001e4 	.word	0x200001e4
 800c520:	08019038 	.word	0x08019038
 800c524:	20000248 	.word	0x20000248
 800c528:	20000268 	.word	0x20000268
	 			  }
	 else if(((CompareToBrace(X_Home))==1))//  	   char  X_Home[]                     ="!XHOM()";
 800c52c:	48d0      	ldr	r0, [pc, #832]	@ (800c870 <processCommand+0x1e8c>)
 800c52e:	f7fe f999 	bl	800a864 <CompareToBrace>
 800c532:	4603      	mov	r3, r0
 800c534:	2b01      	cmp	r3, #1
 800c536:	d139      	bne.n	800c5ac <processCommand+0x1bc8>
	 			 {
		           unsigned int Maximum_Pulses=0,Direction=0;
 800c538:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c53c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800c540:	2200      	movs	r2, #0
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c548:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
					 send_ACK();
 800c550:	f7fe f9fc 	bl	800a94c <send_ACK>
					   int extracted = sscanf(command, "!XHOM(%d,%d)",&Direction, &Maximum_Pulses);
 800c554:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800c558:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800c55c:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800c560:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800c564:	49c3      	ldr	r1, [pc, #780]	@ (800c874 <processCommand+0x1e90>)
 800c566:	6800      	ldr	r0, [r0, #0]
 800c568:	f008 fc9a 	bl	8014ea0 <siscanf>
 800c56c:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4
						if (extracted != 2) {
 800c570:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800c574:	2b02      	cmp	r3, #2
 800c576:	d007      	beq.n	800c588 <processCommand+0x1ba4>
						 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c578:	f04f 33ff 	mov.w	r3, #4294967295
 800c57c:	2217      	movs	r2, #23
 800c57e:	49be      	ldr	r1, [pc, #760]	@ (800c878 <processCommand+0x1e94>)
 800c580:	48be      	ldr	r0, [pc, #760]	@ (800c87c <processCommand+0x1e98>)
 800c582:	f006 fb61 	bl	8012c48 <HAL_UART_Transmit>
 800c586:	e375      	b.n	800cc74 <processCommand+0x2290>
						 return;
						}
				   Home_X_Motor(Direction, Maximum_Pulses);
 800c588:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c58c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	461a      	mov	r2, r3
 800c594:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c598:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	f7fd fd69 	bl	800a078 <Home_X_Motor>
				   module_executed();
 800c5a6:	f7fe f9db 	bl	800a960 <module_executed>
 800c5aa:	e35e      	b.n	800cc6a <processCommand+0x2286>
	 			  }
	 else if(((CompareToBrace(X_Move))==1))//  	     char  X_Move[]                     ="XMOV()";
 800c5ac:	48b4      	ldr	r0, [pc, #720]	@ (800c880 <processCommand+0x1e9c>)
 800c5ae:	f7fe f959 	bl	800a864 <CompareToBrace>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d148      	bne.n	800c64a <processCommand+0x1c66>
	 			 {
	 	    	 unsigned int Direction=0,Distance=0,position=0;
 800c5b8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c5bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c5c8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c5d4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800c5d8:	2200      	movs	r2, #0
 800c5da:	601a      	str	r2, [r3, #0]
	 			 send_ACK();
 800c5dc:	f7fe f9b6 	bl	800a94c <send_ACK>
	 			 //Error="F";
	 			    int extracted = sscanf(command, "!XMOV(%d,%d,%d)",&Direction, &Distance, &position);
 800c5e0:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800c5e4:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800c5e8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c5ec:	f5a3 70fa 	sub.w	r0, r3, #500	@ 0x1f4
 800c5f0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	49a2      	ldr	r1, [pc, #648]	@ (800c884 <processCommand+0x1ea0>)
 800c5fa:	6800      	ldr	r0, [r0, #0]
 800c5fc:	f008 fc50 	bl	8014ea0 <siscanf>
 800c600:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8
	 				if (extracted != 3) {
 800c604:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800c608:	2b03      	cmp	r3, #3
 800c60a:	d007      	beq.n	800c61c <processCommand+0x1c38>
	 				 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295
 800c610:	2217      	movs	r2, #23
 800c612:	4999      	ldr	r1, [pc, #612]	@ (800c878 <processCommand+0x1e94>)
 800c614:	4899      	ldr	r0, [pc, #612]	@ (800c87c <processCommand+0x1e98>)
 800c616:	f006 fb17 	bl	8012c48 <HAL_UART_Transmit>
 800c61a:	e32b      	b.n	800cc74 <processCommand+0x2290>
	 				 return;
	 				}
	 				Move_X_Motor(Direction, Distance,position);
 800c61c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c620:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4618      	mov	r0, r3
 800c628:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c62c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4619      	mov	r1, r3
 800c634:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c638:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	f7fd fedc 	bl	800a3fc <Move_X_Motor>
	 			   module_executed();
 800c644:	f7fe f98c 	bl	800a960 <module_executed>
 800c648:	e30f      	b.n	800cc6a <processCommand+0x2286>
	 			  }
	 else if(((CompareToBrace(Check_Frequency))==1))   //  	   char  Check_Frequency[]            ="!CFREQ()"
 800c64a:	488f      	ldr	r0, [pc, #572]	@ (800c888 <processCommand+0x1ea4>)
 800c64c:	f7fe f90a 	bl	800a864 <CompareToBrace>
 800c650:	4603      	mov	r3, r0
 800c652:	2b01      	cmp	r3, #1
 800c654:	d128      	bne.n	800c6a8 <processCommand+0x1cc4>
	 {
		  float freq_in_MHZ;
		  char freq_str[32];
		  send_ACK();
 800c656:	f7fe f979 	bl	800a94c <send_ACK>
		  uint32_t freq = read_frequency_tim3();
 800c65a:	f7fc fd19 	bl	8009090 <read_frequency_tim3>
 800c65e:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0
		  freq_in_MHZ =freq/1000000.0f;
 800c662:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800c666:	ee07 3a90 	vmov	s15, r3
 800c66a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c66e:	eddf 6a87 	vldr	s13, [pc, #540]	@ 800c88c <processCommand+0x1ea8>
 800c672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c676:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
		  sprintf(freq_str, "%.2f \r\n", freq_in_MHZ);
 800c67a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 800c67e:	f7fb ff93 	bl	80085a8 <__aeabi_f2d>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	f107 000c 	add.w	r0, r7, #12
 800c68a:	4981      	ldr	r1, [pc, #516]	@ (800c890 <processCommand+0x1eac>)
 800c68c:	f008 fbe6 	bl	8014e5c <siprintf>
		  putstr(freq_str);
 800c690:	f107 030c 	add.w	r3, r7, #12
 800c694:	4618      	mov	r0, r3
 800c696:	f002 faff 	bl	800ec98 <putstr>
		  HAL_Delay(500);
 800c69a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c69e:	f002 fce7 	bl	800f070 <HAL_Delay>
		 module_executed();
 800c6a2:	f7fe f95d 	bl	800a960 <module_executed>
 800c6a6:	e2e0      	b.n	800cc6a <processCommand+0x2286>
	 }

	 else if (CompareToBrace(Move_Down_Fluid_sense) == 1)  // char  Move_Down_Fluid_sense[]	    ="!MDFS()";
 800c6a8:	487a      	ldr	r0, [pc, #488]	@ (800c894 <processCommand+0x1eb0>)
 800c6aa:	f7fe f8db 	bl	800a864 <CompareToBrace>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d15d      	bne.n	800c770 <processCommand+0x1d8c>
	 {
	     unsigned int Unconditional_Movement = 0, Maximum_Distance = 0;
 800c6b4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c6b8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c6bc:	2200      	movs	r2, #0
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c6c4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]
	     uint32_t avg_frequency = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
	     char msg[128];

	     send_ACK();
 800c6d2:	f7fe f93b 	bl	800a94c <send_ACK>

	     int extracted = sscanf(command, "!MDFS(%u,%u)", &Unconditional_Movement, &Maximum_Distance);
 800c6d6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800c6da:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800c6de:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800c6e2:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800c6e6:	496c      	ldr	r1, [pc, #432]	@ (800c898 <processCommand+0x1eb4>)
 800c6e8:	6800      	ldr	r0, [r0, #0]
 800c6ea:	f008 fbd9 	bl	8014ea0 <siscanf>
 800c6ee:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8
	     if (extracted != 2)
 800c6f2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d007      	beq.n	800c70a <processCommand+0x1d26>
	     {
	         HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, HAL_MAX_DELAY);
 800c6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fe:	2217      	movs	r2, #23
 800c700:	495d      	ldr	r1, [pc, #372]	@ (800c878 <processCommand+0x1e94>)
 800c702:	485e      	ldr	r0, [pc, #376]	@ (800c87c <processCommand+0x1e98>)
 800c704:	f006 faa0 	bl	8012c48 <HAL_UART_Transmit>
 800c708:	e2b4      	b.n	800cc74 <processCommand+0x2290>
	         return;
	     }

	     // Step 1: Take baseline frequency at no movement
	     avg_frequency = Read_Average_Frequency();
 800c70a:	f7fc fcb9 	bl	8009080 <Read_Average_Frequency>
 800c70e:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc
	     snprintf(msg, sizeof(msg), "avg_frequency: %lu Hz\r\n", avg_frequency);
	     HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
*/

	     // Step 2: Move unconditionally
	     Move_Z_Probe_Motor(PROBE_DOWN_DIR, Unconditional_Movement);
 800c712:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c716:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4619      	mov	r1, r3
 800c71e:	2001      	movs	r0, #1
 800c720:	f7fd f956 	bl	80099d0 <Move_Z_Probe_Motor>

	     // Step 3: Move and monitor frequency if no prior error
	     if (strcmp(Error, "00") == 0)
 800c724:	4b5d      	ldr	r3, [pc, #372]	@ (800c89c <processCommand+0x1eb8>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	495d      	ldr	r1, [pc, #372]	@ (800c8a0 <processCommand+0x1ebc>)
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fb fd70 	bl	8008210 <strcmp>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d107      	bne.n	800c746 <processCommand+0x1d62>
	     {
	         Move_And_Monitor_Frequency(Maximum_Distance);
 800c736:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c73a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4618      	mov	r0, r3
 800c742:	f7fc fd01 	bl	8009148 <Move_And_Monitor_Frequency>
	     }

	     // Step 4: Extra movement after detection (e.g. 50 pulses)
	    if (strcmp(Error, "00") == 0)
 800c746:	4b55      	ldr	r3, [pc, #340]	@ (800c89c <processCommand+0x1eb8>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4955      	ldr	r1, [pc, #340]	@ (800c8a0 <processCommand+0x1ebc>)
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fb fd5f 	bl	8008210 <strcmp>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d108      	bne.n	800c76a <processCommand+0x1d86>
	    {
	     const uint32_t Extra_Movement_Pulses = 20;
 800c758:	2314      	movs	r3, #20
 800c75a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
	     Move_Z_Probe_Motor(PROBE_DOWN_DIR, Extra_Movement_Pulses);
 800c75e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800c762:	4619      	mov	r1, r3
 800c764:	2001      	movs	r0, #1
 800c766:	f7fd f933 	bl	80099d0 <Move_Z_Probe_Motor>
	      }
	     module_executed();
 800c76a:	f7fe f8f9 	bl	800a960 <module_executed>
 800c76e:	e27c      	b.n	800cc6a <processCommand+0x2286>

	 }

	  else if(((CompareToBrace(Read_Sensor_Voltage))==1))// char  Read_Sensor_Voltage[]          ="!RSEN()";
 800c770:	484c      	ldr	r0, [pc, #304]	@ (800c8a4 <processCommand+0x1ec0>)
 800c772:	f7fe f877 	bl	800a864 <CompareToBrace>
 800c776:	4603      	mov	r3, r0
 800c778:	2b01      	cmp	r3, #1
 800c77a:	f040 809d 	bne.w	800c8b8 <processCommand+0x1ed4>
				 {
				 unsigned int Sensor_No  			= 0;
 800c77e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c782:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800c786:	2200      	movs	r2, #0
 800c788:	601a      	str	r2, [r3, #0]
				 char voltage_str[32];                // Buffer to store the voltage string
				 float voltage     =0.0;
 800c78a:	f04f 0300 	mov.w	r3, #0
 800c78e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
				 send_ACK();
 800c792:	f7fe f8db 	bl	800a94c <send_ACK>
				 int extracted = sscanf(command, "!RSEN(%d)",&Sensor_No);
 800c796:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 800c79a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c79e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800c7a2:	4941      	ldr	r1, [pc, #260]	@ (800c8a8 <processCommand+0x1ec4>)
 800c7a4:	6818      	ldr	r0, [r3, #0]
 800c7a6:	f008 fb7b 	bl	8014ea0 <siscanf>
 800c7aa:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0
				 Sensor_No=7;
 800c7ae:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c7b2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800c7b6:	2207      	movs	r2, #7
 800c7b8:	601a      	str	r2, [r3, #0]
				 if (extracted != 1) {
 800c7ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d006      	beq.n	800c7d0 <processCommand+0x1dec>
					 HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid command format\n", 23, I2C_Delay_Ms);
 800c7c2:	2364      	movs	r3, #100	@ 0x64
 800c7c4:	2217      	movs	r2, #23
 800c7c6:	492c      	ldr	r1, [pc, #176]	@ (800c878 <processCommand+0x1e94>)
 800c7c8:	482c      	ldr	r0, [pc, #176]	@ (800c87c <processCommand+0x1e98>)
 800c7ca:	f006 fa3d 	bl	8012c48 <HAL_UART_Transmit>
					 return;
 800c7ce:	e251      	b.n	800cc74 <processCommand+0x2290>
					}
				   if (I2C_Device_Check(ADS7828_ADDR))
 800c7d0:	2090      	movs	r0, #144	@ 0x90
 800c7d2:	f000 fc65 	bl	800d0a0 <I2C_Device_Check>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d042      	beq.n	800c862 <processCommand+0x1e7e>
				  {

					 {
					  voltage = Read_Sensor_Volage(Sensor_No);
 800c7dc:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c7e0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fd4a 	bl	800d280 <Read_Sensor_Volage>
 800c7ec:	ed87 0a71 	vstr	s0, [r7, #452]	@ 0x1c4
					  // Format the voltage into the string buffer
					   if(voltage<=1.0 || voltage>=4.0)
 800c7f0:	edd7 7a71 	vldr	s15, [r7, #452]	@ 0x1c4
 800c7f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c800:	d908      	bls.n	800c814 <processCommand+0x1e30>
 800c802:	edd7 7a71 	vldr	s15, [r7, #452]	@ 0x1c4
 800c806:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c80a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c812:	db15      	blt.n	800c840 <processCommand+0x1e5c>
						 {
							 voltage=9.9;
 800c814:	4b25      	ldr	r3, [pc, #148]	@ (800c8ac <processCommand+0x1ec8>)
 800c816:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
							 sprintf(voltage_str, "%.1f\r\n", voltage);
 800c81a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 800c81e:	f7fb fec3 	bl	80085a8 <__aeabi_f2d>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	f107 000c 	add.w	r0, r7, #12
 800c82a:	4921      	ldr	r1, [pc, #132]	@ (800c8b0 <processCommand+0x1ecc>)
 800c82c:	f008 fb16 	bl	8014e5c <siprintf>
							 putstr(voltage_str);
 800c830:	f107 030c 	add.w	r3, r7, #12
 800c834:	4618      	mov	r0, r3
 800c836:	f002 fa2f 	bl	800ec98 <putstr>
					  //  	   I2C2_Recover();

							  //putchr('R');
							  module_executed();
 800c83a:	f7fe f891 	bl	800a960 <module_executed>
							 return;
 800c83e:	e219      	b.n	800cc74 <processCommand+0x2290>
						 }
					  sprintf(voltage_str, "%.1f\r\n", voltage);
 800c840:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 800c844:	f7fb feb0 	bl	80085a8 <__aeabi_f2d>
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	f107 000c 	add.w	r0, r7, #12
 800c850:	4917      	ldr	r1, [pc, #92]	@ (800c8b0 <processCommand+0x1ecc>)
 800c852:	f008 fb03 	bl	8014e5c <siprintf>
					  putstr(voltage_str);
 800c856:	f107 030c 	add.w	r3, r7, #12
 800c85a:	4618      	mov	r0, r3
 800c85c:	f002 fa1c 	bl	800ec98 <putstr>
 800c860:	e002      	b.n	800c868 <processCommand+0x1e84>
					 }
			   	}
				   else Error="R";
 800c862:	4b0e      	ldr	r3, [pc, #56]	@ (800c89c <processCommand+0x1eb8>)
 800c864:	4a13      	ldr	r2, [pc, #76]	@ (800c8b4 <processCommand+0x1ed0>)
 800c866:	601a      	str	r2, [r3, #0]
				  module_executed();
 800c868:	f7fe f87a 	bl	800a960 <module_executed>
 800c86c:	e1fd      	b.n	800cc6a <processCommand+0x2286>
 800c86e:	bf00      	nop
 800c870:	20000164 	.word	0x20000164
 800c874:	08019044 	.word	0x08019044
 800c878:	08018f00 	.word	0x08018f00
 800c87c:	200008a8 	.word	0x200008a8
 800c880:	2000016c 	.word	0x2000016c
 800c884:	08019054 	.word	0x08019054
 800c888:	20000084 	.word	0x20000084
 800c88c:	49742400 	.word	0x49742400
 800c890:	08019064 	.word	0x08019064
 800c894:	200001ec 	.word	0x200001ec
 800c898:	0801906c 	.word	0x0801906c
 800c89c:	20000014 	.word	0x20000014
 800c8a0:	08018edc 	.word	0x08018edc
 800c8a4:	2000020c 	.word	0x2000020c
 800c8a8:	0801907c 	.word	0x0801907c
 800c8ac:	411e6666 	.word	0x411e6666
 800c8b0:	08019088 	.word	0x08019088
 800c8b4:	08019090 	.word	0x08019090
		 		 }
		  else if(((CompareToBrace(Write_EPOT_Resistance))==1))//  char  Write_EPOT_Resistance[]        ="!WEPOT()";
 800c8b8:	48ad      	ldr	r0, [pc, #692]	@ (800cb70 <processCommand+0x218c>)
 800c8ba:	f7fd ffd3 	bl	800a864 <CompareToBrace>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	f040 81cd 	bne.w	800cc60 <processCommand+0x227c>
		  		{
			  unsigned int sensor_no = 0;
 800c8c6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c8ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]
			  float voltage = 0.0f;
 800c8d2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c8d6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800c8da:	f04f 0200 	mov.w	r2, #0
 800c8de:	601a      	str	r2, [r3, #0]
			  char voltage_str[32];
			  uint8_t wiper_val = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f887 31cb 	strb.w	r3, [r7, #459]	@ 0x1cb
			  send_ACK();
 800c8e6:	f7fe f831 	bl	800a94c <send_ACK>
		     sscanf(command, "!WEPOT(%d,%f)", &sensor_no, &voltage);
 800c8ea:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800c8ee:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800c8f2:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800c8f6:	f5a1 70fa 	sub.w	r0, r1, #500	@ 0x1f4
 800c8fa:	499e      	ldr	r1, [pc, #632]	@ (800cb74 <processCommand+0x2190>)
 800c8fc:	6800      	ldr	r0, [r0, #0]
 800c8fe:	f008 facf 	bl	8014ea0 <siscanf>
		     char msg[64];  // Buffer for UART message
		       // Print desired voltage to UART for debugging
//		       snprintf(msg, sizeof(msg), "Desired Voltage for sensor %d = %.3f V\r\n", sensor_no, voltage);
//		       HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
		     sensor_no=7;
 800c902:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c906:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800c90a:	2207      	movs	r2, #7
 800c90c:	601a      	str	r2, [r3, #0]


		     wiper_val= voltageToStep(voltage);
 800c90e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c912:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800c916:	edd3 7a00 	vldr	s15, [r3]
 800c91a:	eeb0 0a67 	vmov.f32	s0, s15
 800c91e:	f000 fd31 	bl	800d384 <voltageToStep>
 800c922:	4603      	mov	r3, r0
 800c924:	f887 31cb 	strb.w	r3, [r7, #459]	@ 0x1cb
						break ;
			}*/
/////////////////////////////For testing  epot////////////////////////////////////////////////////////////////

	//		I2C_ScanBus();
			switch (sensor_no) {
 800c928:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800c92c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3b01      	subs	r3, #1
 800c934:	2b06      	cmp	r3, #6
 800c936:	f200 8129 	bhi.w	800cb8c <processCommand+0x21a8>
 800c93a:	a201      	add	r2, pc, #4	@ (adr r2, 800c940 <processCommand+0x1f5c>)
 800c93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c940:	0800c95d 	.word	0x0800c95d
 800c944:	0800c9a9 	.word	0x0800c9a9
 800c948:	0800c9f5 	.word	0x0800c9f5
 800c94c:	0800ca41 	.word	0x0800ca41
 800c950:	0800ca8d 	.word	0x0800ca8d
 800c954:	0800cad9 	.word	0x0800cad9
 800c958:	0800cb25 	.word	0x0800cb25
			case 1:
					   MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_5, 1); // Enable for ePot 1_1
 800c95c:	2201      	movs	r2, #1
 800c95e:	2120      	movs	r1, #32
 800c960:	4885      	ldr	r0, [pc, #532]	@ (800cb78 <processCommand+0x2194>)
 800c962:	f000 fd9f 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  // Write to RAM (volatile) wiper 0
					  if (MCP4661_WriteWiperRAM(&hi2c2, 0x29, 0, wiper_val) != HAL_OK)
 800c966:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800c96a:	2200      	movs	r2, #0
 800c96c:	2129      	movs	r1, #41	@ 0x29
 800c96e:	4883      	ldr	r0, [pc, #524]	@ (800cb7c <processCommand+0x2198>)
 800c970:	f000 fcda 	bl	800d328 <MCP4661_WriteWiperRAM>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <processCommand+0x1f9c>
					  {
						  Error = "W";
 800c97a:	4b81      	ldr	r3, [pc, #516]	@ (800cb80 <processCommand+0x219c>)
 800c97c:	4a81      	ldr	r2, [pc, #516]	@ (800cb84 <processCommand+0x21a0>)
 800c97e:	601a      	str	r2, [r3, #0]
					  }
					  // Write to EEPROM (non-volatile) wiper 0
					  if (MCP4661_WriteWiper_EEPROM(&hi2c2, 0x29, 0, wiper_val) != HAL_OK)
 800c980:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800c984:	b29b      	uxth	r3, r3
 800c986:	2200      	movs	r2, #0
 800c988:	2129      	movs	r1, #41	@ 0x29
 800c98a:	487c      	ldr	r0, [pc, #496]	@ (800cb7c <processCommand+0x2198>)
 800c98c:	f000 fd3e 	bl	800d40c <MCP4661_WriteWiper_EEPROM>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d002      	beq.n	800c99c <processCommand+0x1fb8>
					  {
						  Error = "W";
 800c996:	4b7a      	ldr	r3, [pc, #488]	@ (800cb80 <processCommand+0x219c>)
 800c998:	4a7a      	ldr	r2, [pc, #488]	@ (800cb84 <processCommand+0x21a0>)
 800c99a:	601a      	str	r2, [r3, #0]
					  }
					  MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_5, 0); // Enable for ePot 1_1
 800c99c:	2200      	movs	r2, #0
 800c99e:	2120      	movs	r1, #32
 800c9a0:	4875      	ldr	r0, [pc, #468]	@ (800cb78 <processCommand+0x2194>)
 800c9a2:	f000 fd7f 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					   break ;
 800c9a6:	e0f2      	b.n	800cb8e <processCommand+0x21aa>

			case 2:
					  MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_5, 1); // Enable for ePot 1_2
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	2120      	movs	r1, #32
 800c9ac:	4872      	ldr	r0, [pc, #456]	@ (800cb78 <processCommand+0x2194>)
 800c9ae:	f000 fd79 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  // Write to RAM (volatile) wiper 0
					  if (MCP4661_WriteWiperRAM(&hi2c2, 0x29, 1, wiper_val) != HAL_OK)
 800c9b2:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	2129      	movs	r1, #41	@ 0x29
 800c9ba:	4870      	ldr	r0, [pc, #448]	@ (800cb7c <processCommand+0x2198>)
 800c9bc:	f000 fcb4 	bl	800d328 <MCP4661_WriteWiperRAM>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <processCommand+0x1fe8>
					  {
						  Error = "W";
 800c9c6:	4b6e      	ldr	r3, [pc, #440]	@ (800cb80 <processCommand+0x219c>)
 800c9c8:	4a6e      	ldr	r2, [pc, #440]	@ (800cb84 <processCommand+0x21a0>)
 800c9ca:	601a      	str	r2, [r3, #0]
					  }
					  // Write to EEPROM (non-volatile) wiper 0
					  if (MCP4661_WriteWiper_EEPROM(&hi2c2, 0x29, 1, wiper_val) != HAL_OK)
 800c9cc:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	2129      	movs	r1, #41	@ 0x29
 800c9d6:	4869      	ldr	r0, [pc, #420]	@ (800cb7c <processCommand+0x2198>)
 800c9d8:	f000 fd18 	bl	800d40c <MCP4661_WriteWiper_EEPROM>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <processCommand+0x2004>
					  {
						  Error = "W";
 800c9e2:	4b67      	ldr	r3, [pc, #412]	@ (800cb80 <processCommand+0x219c>)
 800c9e4:	4a67      	ldr	r2, [pc, #412]	@ (800cb84 <processCommand+0x21a0>)
 800c9e6:	601a      	str	r2, [r3, #0]
					  }
					  MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_5, 0); // Enable for ePot 1_2
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2120      	movs	r1, #32
 800c9ec:	4862      	ldr	r0, [pc, #392]	@ (800cb78 <processCommand+0x2194>)
 800c9ee:	f000 fd59 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  break ;
 800c9f2:	e0cc      	b.n	800cb8e <processCommand+0x21aa>

			case 3:
				      MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_4, 1); // Enable for ePot 2_1
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	2110      	movs	r1, #16
 800c9f8:	485f      	ldr	r0, [pc, #380]	@ (800cb78 <processCommand+0x2194>)
 800c9fa:	f000 fd53 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  // Write to RAM (volatile) wiper 0
					  if (MCP4661_WriteWiperRAM(&hi2c2, 0x2B, 0, wiper_val) != HAL_OK)
 800c9fe:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800ca02:	2200      	movs	r2, #0
 800ca04:	212b      	movs	r1, #43	@ 0x2b
 800ca06:	485d      	ldr	r0, [pc, #372]	@ (800cb7c <processCommand+0x2198>)
 800ca08:	f000 fc8e 	bl	800d328 <MCP4661_WriteWiperRAM>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d002      	beq.n	800ca18 <processCommand+0x2034>
					  {
						  Error = "W";
 800ca12:	4b5b      	ldr	r3, [pc, #364]	@ (800cb80 <processCommand+0x219c>)
 800ca14:	4a5b      	ldr	r2, [pc, #364]	@ (800cb84 <processCommand+0x21a0>)
 800ca16:	601a      	str	r2, [r3, #0]
					  }
					  // Write to EEPROM (non-volatile) wiper 0
					  if (MCP4661_WriteWiper_EEPROM(&hi2c2, 0x2B, 0, wiper_val) != HAL_OK)
 800ca18:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	2200      	movs	r2, #0
 800ca20:	212b      	movs	r1, #43	@ 0x2b
 800ca22:	4856      	ldr	r0, [pc, #344]	@ (800cb7c <processCommand+0x2198>)
 800ca24:	f000 fcf2 	bl	800d40c <MCP4661_WriteWiper_EEPROM>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d002      	beq.n	800ca34 <processCommand+0x2050>
					  {
						  Error = "W";
 800ca2e:	4b54      	ldr	r3, [pc, #336]	@ (800cb80 <processCommand+0x219c>)
 800ca30:	4a54      	ldr	r2, [pc, #336]	@ (800cb84 <processCommand+0x21a0>)
 800ca32:	601a      	str	r2, [r3, #0]
					  }
					  MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_4, 0); // Enable for ePot 2_1
 800ca34:	2200      	movs	r2, #0
 800ca36:	2110      	movs	r1, #16
 800ca38:	484f      	ldr	r0, [pc, #316]	@ (800cb78 <processCommand+0x2194>)
 800ca3a:	f000 fd33 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  break;
 800ca3e:	e0a6      	b.n	800cb8e <processCommand+0x21aa>

			case 4:
					  MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_4, 1); // Enable for ePot 2_2
 800ca40:	2201      	movs	r2, #1
 800ca42:	2110      	movs	r1, #16
 800ca44:	484c      	ldr	r0, [pc, #304]	@ (800cb78 <processCommand+0x2194>)
 800ca46:	f000 fd2d 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
						// Write to RAM (volatile) wiper 1
					  if (MCP4661_WriteWiperRAM(&hi2c2, 0x2B, 1, wiper_val) != HAL_OK)
 800ca4a:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800ca4e:	2201      	movs	r2, #1
 800ca50:	212b      	movs	r1, #43	@ 0x2b
 800ca52:	484a      	ldr	r0, [pc, #296]	@ (800cb7c <processCommand+0x2198>)
 800ca54:	f000 fc68 	bl	800d328 <MCP4661_WriteWiperRAM>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d002      	beq.n	800ca64 <processCommand+0x2080>
					  {
						  Error = "W";
 800ca5e:	4b48      	ldr	r3, [pc, #288]	@ (800cb80 <processCommand+0x219c>)
 800ca60:	4a48      	ldr	r2, [pc, #288]	@ (800cb84 <processCommand+0x21a0>)
 800ca62:	601a      	str	r2, [r3, #0]
					  }

					  // Write to EEPROM (non-volatile) wiper 1
					  if (MCP4661_WriteWiper_EEPROM(&hi2c2, 0x2B, 1, wiper_val) != HAL_OK)
 800ca64:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	212b      	movs	r1, #43	@ 0x2b
 800ca6e:	4843      	ldr	r0, [pc, #268]	@ (800cb7c <processCommand+0x2198>)
 800ca70:	f000 fccc 	bl	800d40c <MCP4661_WriteWiper_EEPROM>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d002      	beq.n	800ca80 <processCommand+0x209c>
					  {
						  Error = "W";
 800ca7a:	4b41      	ldr	r3, [pc, #260]	@ (800cb80 <processCommand+0x219c>)
 800ca7c:	4a41      	ldr	r2, [pc, #260]	@ (800cb84 <processCommand+0x21a0>)
 800ca7e:	601a      	str	r2, [r3, #0]
					  }
					  MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_4, 0); // Enable for ePot 2_2
 800ca80:	2200      	movs	r2, #0
 800ca82:	2110      	movs	r1, #16
 800ca84:	483c      	ldr	r0, [pc, #240]	@ (800cb78 <processCommand+0x2194>)
 800ca86:	f000 fd0d 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
						break ;
 800ca8a:	e080      	b.n	800cb8e <processCommand+0x21aa>

			case 5:
				      MCP4661_SetHardwareWriteProtect(GPIOD, GPIO_PIN_6, 1); // Enable for ePot 3_1
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	2140      	movs	r1, #64	@ 0x40
 800ca90:	483d      	ldr	r0, [pc, #244]	@ (800cb88 <processCommand+0x21a4>)
 800ca92:	f000 fd07 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  // Write to RAM (volatile) wiper 0
					  if (MCP4661_WriteWiperRAM(&hi2c2, 0x2D, 0, wiper_val) != HAL_OK)
 800ca96:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	212d      	movs	r1, #45	@ 0x2d
 800ca9e:	4837      	ldr	r0, [pc, #220]	@ (800cb7c <processCommand+0x2198>)
 800caa0:	f000 fc42 	bl	800d328 <MCP4661_WriteWiperRAM>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d002      	beq.n	800cab0 <processCommand+0x20cc>
					  {
						  Error = "W";
 800caaa:	4b35      	ldr	r3, [pc, #212]	@ (800cb80 <processCommand+0x219c>)
 800caac:	4a35      	ldr	r2, [pc, #212]	@ (800cb84 <processCommand+0x21a0>)
 800caae:	601a      	str	r2, [r3, #0]
					  }
					  // Write to EEPROM (non-volatile) wiper 0
					  if (MCP4661_WriteWiper_EEPROM(&hi2c2, 0x2D, 0, wiper_val) != HAL_OK)
 800cab0:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	2200      	movs	r2, #0
 800cab8:	212d      	movs	r1, #45	@ 0x2d
 800caba:	4830      	ldr	r0, [pc, #192]	@ (800cb7c <processCommand+0x2198>)
 800cabc:	f000 fca6 	bl	800d40c <MCP4661_WriteWiper_EEPROM>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d002      	beq.n	800cacc <processCommand+0x20e8>
					  {
						  Error = "W";
 800cac6:	4b2e      	ldr	r3, [pc, #184]	@ (800cb80 <processCommand+0x219c>)
 800cac8:	4a2e      	ldr	r2, [pc, #184]	@ (800cb84 <processCommand+0x21a0>)
 800caca:	601a      	str	r2, [r3, #0]
					  }
					  MCP4661_SetHardwareWriteProtect(GPIOD, GPIO_PIN_6, 0); // Enable for ePot 3_1
 800cacc:	2200      	movs	r2, #0
 800cace:	2140      	movs	r1, #64	@ 0x40
 800cad0:	482d      	ldr	r0, [pc, #180]	@ (800cb88 <processCommand+0x21a4>)
 800cad2:	f000 fce7 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  break ;
 800cad6:	e05a      	b.n	800cb8e <processCommand+0x21aa>

			case 6:
					  MCP4661_SetHardwareWriteProtect(GPIOD, GPIO_PIN_6, 1); // Enable for ePot 3_2
 800cad8:	2201      	movs	r2, #1
 800cada:	2140      	movs	r1, #64	@ 0x40
 800cadc:	482a      	ldr	r0, [pc, #168]	@ (800cb88 <processCommand+0x21a4>)
 800cade:	f000 fce1 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  if (MCP4661_WriteWiperRAM(&hi2c2, 0x2D, 1, wiper_val) != HAL_OK)
 800cae2:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800cae6:	2201      	movs	r2, #1
 800cae8:	212d      	movs	r1, #45	@ 0x2d
 800caea:	4824      	ldr	r0, [pc, #144]	@ (800cb7c <processCommand+0x2198>)
 800caec:	f000 fc1c 	bl	800d328 <MCP4661_WriteWiperRAM>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d002      	beq.n	800cafc <processCommand+0x2118>
					  {
						  Error = "W";
 800caf6:	4b22      	ldr	r3, [pc, #136]	@ (800cb80 <processCommand+0x219c>)
 800caf8:	4a22      	ldr	r2, [pc, #136]	@ (800cb84 <processCommand+0x21a0>)
 800cafa:	601a      	str	r2, [r3, #0]
					  }
					  // Write to EEPROM (non-volatile) wiper 0
					  if (MCP4661_WriteWiper_EEPROM(&hi2c2, 0x2D, 1, wiper_val) != HAL_OK)
 800cafc:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	2201      	movs	r2, #1
 800cb04:	212d      	movs	r1, #45	@ 0x2d
 800cb06:	481d      	ldr	r0, [pc, #116]	@ (800cb7c <processCommand+0x2198>)
 800cb08:	f000 fc80 	bl	800d40c <MCP4661_WriteWiper_EEPROM>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <processCommand+0x2134>
					  {
						  Error = "W";
 800cb12:	4b1b      	ldr	r3, [pc, #108]	@ (800cb80 <processCommand+0x219c>)
 800cb14:	4a1b      	ldr	r2, [pc, #108]	@ (800cb84 <processCommand+0x21a0>)
 800cb16:	601a      	str	r2, [r3, #0]
					  }
					  MCP4661_SetHardwareWriteProtect(GPIOD, GPIO_PIN_6, 0); // Enable for ePot 3_2
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2140      	movs	r1, #64	@ 0x40
 800cb1c:	481a      	ldr	r0, [pc, #104]	@ (800cb88 <processCommand+0x21a4>)
 800cb1e:	f000 fcc1 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					  break ;
 800cb22:	e034      	b.n	800cb8e <processCommand+0x21aa>

			case 7:
					 MCP4661_SetHardwareWriteProtect(GPIOD, GPIO_PIN_5, 1); // Enable for ePot 4_1
 800cb24:	2201      	movs	r2, #1
 800cb26:	2120      	movs	r1, #32
 800cb28:	4817      	ldr	r0, [pc, #92]	@ (800cb88 <processCommand+0x21a4>)
 800cb2a:	f000 fcbb 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
					 if (MCP4661_WriteWiperRAM(&hi2c2, 0x2F, 0, wiper_val) != HAL_OK)
 800cb2e:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800cb32:	2200      	movs	r2, #0
 800cb34:	212f      	movs	r1, #47	@ 0x2f
 800cb36:	4811      	ldr	r0, [pc, #68]	@ (800cb7c <processCommand+0x2198>)
 800cb38:	f000 fbf6 	bl	800d328 <MCP4661_WriteWiperRAM>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <processCommand+0x2164>
					  {
	//					 putchr('1');
						  Error = "W";
 800cb42:	4b0f      	ldr	r3, [pc, #60]	@ (800cb80 <processCommand+0x219c>)
 800cb44:	4a0f      	ldr	r2, [pc, #60]	@ (800cb84 <processCommand+0x21a0>)
 800cb46:	601a      	str	r2, [r3, #0]
					  }
					  // Write to EEPROM (non-volatile) wiper 0
					  if (MCP4661_WriteWiper_EEPROM(&hi2c2, 0x2F, 0, wiper_val) != HAL_OK )
 800cb48:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	2200      	movs	r2, #0
 800cb50:	212f      	movs	r1, #47	@ 0x2f
 800cb52:	480a      	ldr	r0, [pc, #40]	@ (800cb7c <processCommand+0x2198>)
 800cb54:	f000 fc5a 	bl	800d40c <MCP4661_WriteWiper_EEPROM>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <processCommand+0x2180>
					  {
//					      putchr('2');
						  Error = "W";
 800cb5e:	4b08      	ldr	r3, [pc, #32]	@ (800cb80 <processCommand+0x219c>)
 800cb60:	4a08      	ldr	r2, [pc, #32]	@ (800cb84 <processCommand+0x21a0>)
 800cb62:	601a      	str	r2, [r3, #0]
					  }
					  MCP4661_SetHardwareWriteProtect(GPIOD, GPIO_PIN_5, 0); // Enable for ePot 4_1
 800cb64:	2200      	movs	r2, #0
 800cb66:	2120      	movs	r1, #32
 800cb68:	4807      	ldr	r0, [pc, #28]	@ (800cb88 <processCommand+0x21a4>)
 800cb6a:	f000 fc9b 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>
	//				  putstr(Error);
					  break ;
 800cb6e:	e00e      	b.n	800cb8e <processCommand+0x21aa>
 800cb70:	20000214 	.word	0x20000214
 800cb74:	08019094 	.word	0x08019094
 800cb78:	40020400 	.word	0x40020400
 800cb7c:	20000574 	.word	0x20000574
 800cb80:	20000014 	.word	0x20000014
 800cb84:	080190a4 	.word	0x080190a4
 800cb88:	40020c00 	.word	0x40020c00

			default:
					 break ;
 800cb8c:	bf00      	nop
			}

/////////////////////////////For testing  epot////////////////////////////////////////////////////////////////
			 if(strcmp(Error, "00") == 0)
 800cb8e:	4b3b      	ldr	r3, [pc, #236]	@ (800cc7c <processCommand+0x2298>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	493b      	ldr	r1, [pc, #236]	@ (800cc80 <processCommand+0x229c>)
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fb fb3b 	bl	8008210 <strcmp>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d15a      	bne.n	800cc56 <processCommand+0x2272>
			{
		          voltage = Read_Sensor_Volage(sensor_no);
 800cba0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800cba4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 fb68 	bl	800d280 <Read_Sensor_Volage>
 800cbb0:	eef0 7a40 	vmov.f32	s15, s0
 800cbb4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800cbb8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800cbbc:	edc3 7a00 	vstr	s15, [r3]
				  // Format the voltage into the string buffer
		//          putstr(Error);
		          if(voltage<=1.0 || voltage>=4.0)
 800cbc0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800cbc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800cbc8:	edd3 7a00 	vldr	s15, [r3]
 800cbcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd8:	d90c      	bls.n	800cbf4 <processCommand+0x2210>
 800cbda:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800cbde:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800cbe2:	edd3 7a00 	vldr	s15, [r3]
 800cbe6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800cbea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf2:	db1c      	blt.n	800cc2e <processCommand+0x224a>
		     		     {
		     		    	 voltage=9.9;
 800cbf4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800cbf8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800cbfc:	4a21      	ldr	r2, [pc, #132]	@ (800cc84 <processCommand+0x22a0>)
 800cbfe:	601a      	str	r2, [r3, #0]
		     		    	 sprintf(voltage_str, "%.1f\r\n", voltage);
 800cc00:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800cc04:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fb fccc 	bl	80085a8 <__aeabi_f2d>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	f107 000c 	add.w	r0, r7, #12
 800cc18:	491b      	ldr	r1, [pc, #108]	@ (800cc88 <processCommand+0x22a4>)
 800cc1a:	f008 f91f 	bl	8014e5c <siprintf>
		     		    	 putstr(voltage_str);
 800cc1e:	f107 030c 	add.w	r3, r7, #12
 800cc22:	4618      	mov	r0, r3
 800cc24:	f002 f838 	bl	800ec98 <putstr>
		     		  //  	   I2C2_Recover();

		     				  //putchr('R');
		     				  module_executed();
 800cc28:	f7fd fe9a 	bl	800a960 <module_executed>
 800cc2c:	e022      	b.n	800cc74 <processCommand+0x2290>
		     		    	 return;
		     		     }

		          sprintf(voltage_str, "%.1f\n", voltage);
 800cc2e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800cc32:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fb fcb5 	bl	80085a8 <__aeabi_f2d>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	f107 000c 	add.w	r0, r7, #12
 800cc46:	4911      	ldr	r1, [pc, #68]	@ (800cc8c <processCommand+0x22a8>)
 800cc48:	f008 f908 	bl	8014e5c <siprintf>
				  putstr(voltage_str);
 800cc4c:	f107 030c 	add.w	r3, r7, #12
 800cc50:	4618      	mov	r0, r3
 800cc52:	f002 f821 	bl	800ec98 <putstr>
			 }
			      I2C2_Recover();
 800cc56:	f000 fc3d 	bl	800d4d4 <I2C2_Recover>
	//		      putstr(Error);
			  //putchr('R');
			  module_executed();
 800cc5a:	f7fd fe81 	bl	800a960 <module_executed>
 800cc5e:	e004      	b.n	800cc6a <processCommand+0x2286>


		  }
	   else
	       {
		     send_ACK();
 800cc60:	f7fd fe74 	bl	800a94c <send_ACK>
	         putchr('W');
 800cc64:	2057      	movs	r0, #87	@ 0x57
 800cc66:	f002 f805 	bl	800ec74 <putchr>
           }

	// Restart UART reception for continuous data flow
	   HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	4908      	ldr	r1, [pc, #32]	@ (800cc90 <processCommand+0x22ac>)
 800cc6e:	4809      	ldr	r0, [pc, #36]	@ (800cc94 <processCommand+0x22b0>)
 800cc70:	f006 f875 	bl	8012d5e <HAL_UART_Receive_IT>
}
 800cc74:	f507 77fc 	add.w	r7, r7, #504	@ 0x1f8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	20000014 	.word	0x20000014
 800cc80:	08018edc 	.word	0x08018edc
 800cc84:	411e6666 	.word	0x411e6666
 800cc88:	08019088 	.word	0x08019088
 800cc8c:	080190a8 	.word	0x080190a8
 800cc90:	200004f4 	.word	0x200004f4
 800cc94:	200008a8 	.word	0x200008a8

0800cc98 <MX_GPIO_Init>:

/** Configure pins
     PC6   ------> S_TIM8_CH1
*/
void MX_GPIO_Init(void)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08a      	sub	sp, #40	@ 0x28
 800cc9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc9e:	f107 0314 	add.w	r3, r7, #20
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	605a      	str	r2, [r3, #4]
 800cca8:	609a      	str	r2, [r3, #8]
 800ccaa:	60da      	str	r2, [r3, #12]
 800ccac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ccae:	2300      	movs	r3, #0
 800ccb0:	613b      	str	r3, [r7, #16]
 800ccb2:	4b96      	ldr	r3, [pc, #600]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccb6:	4a95      	ldr	r2, [pc, #596]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccb8:	f043 0310 	orr.w	r3, r3, #16
 800ccbc:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccbe:	4b93      	ldr	r3, [pc, #588]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccc2:	f003 0310 	and.w	r3, r3, #16
 800ccc6:	613b      	str	r3, [r7, #16]
 800ccc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccca:	2300      	movs	r3, #0
 800cccc:	60fb      	str	r3, [r7, #12]
 800ccce:	4b8f      	ldr	r3, [pc, #572]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccd2:	4a8e      	ldr	r2, [pc, #568]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccd4:	f043 0304 	orr.w	r3, r3, #4
 800ccd8:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccda:	4b8c      	ldr	r3, [pc, #560]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccde:	f003 0304 	and.w	r3, r3, #4
 800cce2:	60fb      	str	r3, [r7, #12]
 800cce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cce6:	2300      	movs	r3, #0
 800cce8:	60bb      	str	r3, [r7, #8]
 800ccea:	4b88      	ldr	r3, [pc, #544]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccee:	4a87      	ldr	r2, [pc, #540]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccf0:	f043 0301 	orr.w	r3, r3, #1
 800ccf4:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccf6:	4b85      	ldr	r3, [pc, #532]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800ccf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccfa:	f003 0301 	and.w	r3, r3, #1
 800ccfe:	60bb      	str	r3, [r7, #8]
 800cd00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd02:	2300      	movs	r3, #0
 800cd04:	607b      	str	r3, [r7, #4]
 800cd06:	4b81      	ldr	r3, [pc, #516]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800cd08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd0a:	4a80      	ldr	r2, [pc, #512]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800cd0c:	f043 0302 	orr.w	r3, r3, #2
 800cd10:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd12:	4b7e      	ldr	r3, [pc, #504]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd16:	f003 0302 	and.w	r3, r3, #2
 800cd1a:	607b      	str	r3, [r7, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd1e:	2300      	movs	r3, #0
 800cd20:	603b      	str	r3, [r7, #0]
 800cd22:	4b7a      	ldr	r3, [pc, #488]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800cd24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd26:	4a79      	ldr	r2, [pc, #484]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800cd28:	f043 0308 	orr.w	r3, r3, #8
 800cd2c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd2e:	4b77      	ldr	r3, [pc, #476]	@ (800cf0c <MX_GPIO_Init+0x274>)
 800cd30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd32:	f003 0308 	and.w	r3, r3, #8
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f64b 711f 	movw	r1, #48927	@ 0xbf1f
 800cd40:	4873      	ldr	r0, [pc, #460]	@ (800cf10 <MX_GPIO_Init+0x278>)
 800cd42:	f002 fdfd 	bl	800f940 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 800cd46:	2200      	movs	r2, #0
 800cd48:	f246 013f 	movw	r1, #24639	@ 0x603f
 800cd4c:	4871      	ldr	r0, [pc, #452]	@ (800cf14 <MX_GPIO_Init+0x27c>)
 800cd4e:	f002 fdf7 	bl	800f940 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800cd52:	2200      	movs	r2, #0
 800cd54:	21f9      	movs	r1, #249	@ 0xf9
 800cd56:	4870      	ldr	r0, [pc, #448]	@ (800cf18 <MX_GPIO_Init+0x280>)
 800cd58:	f002 fdf2 	bl	800f940 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f243 0133 	movw	r1, #12339	@ 0x3033
 800cd62:	486e      	ldr	r0, [pc, #440]	@ (800cf1c <MX_GPIO_Init+0x284>)
 800cd64:	f002 fdec 	bl	800f940 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_5
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f642 4160 	movw	r1, #11360	@ 0x2c60
 800cd6e:	486c      	ldr	r0, [pc, #432]	@ (800cf20 <MX_GPIO_Init+0x288>)
 800cd70:	f002 fde6 	bl	800f940 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 800cd74:	f64b 731f 	movw	r3, #48927	@ 0xbf1f
 800cd78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd82:	2300      	movs	r3, #0
 800cd84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cd86:	f107 0314 	add.w	r3, r7, #20
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4860      	ldr	r0, [pc, #384]	@ (800cf10 <MX_GPIO_Init+0x278>)
 800cd8e:	f002 fb37 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cd92:	2340      	movs	r3, #64	@ 0x40
 800cd94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800cd9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cda0:	f107 0314 	add.w	r3, r7, #20
 800cda4:	4619      	mov	r1, r3
 800cda6:	485a      	ldr	r0, [pc, #360]	@ (800cf10 <MX_GPIO_Init+0x278>)
 800cda8:	f002 fb2a 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 800cdac:	f246 033f 	movw	r3, #24639	@ 0x603f
 800cdb0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cdbe:	f107 0314 	add.w	r3, r7, #20
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	4853      	ldr	r0, [pc, #332]	@ (800cf14 <MX_GPIO_Init+0x27c>)
 800cdc6:	f002 fb1b 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800cdca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cdd8:	f107 0314 	add.w	r3, r7, #20
 800cddc:	4619      	mov	r1, r3
 800cdde:	484d      	ldr	r0, [pc, #308]	@ (800cf14 <MX_GPIO_Init+0x27c>)
 800cde0:	f002 fb0e 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800cde4:	23f9      	movs	r3, #249	@ 0xf9
 800cde6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cde8:	2301      	movs	r3, #1
 800cdea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdec:	2300      	movs	r3, #0
 800cdee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdf4:	f107 0314 	add.w	r3, r7, #20
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4847      	ldr	r0, [pc, #284]	@ (800cf18 <MX_GPIO_Init+0x280>)
 800cdfc:	f002 fb00 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB13
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 800ce00:	f243 0333 	movw	r3, #12339	@ 0x3033
 800ce04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce06:	2301      	movs	r3, #1
 800ce08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce12:	f107 0314 	add.w	r3, r7, #20
 800ce16:	4619      	mov	r1, r3
 800ce18:	4840      	ldr	r0, [pc, #256]	@ (800cf1c <MX_GPIO_Init+0x284>)
 800ce1a:	f002 faf1 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800ce1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ce22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ce24:	2300      	movs	r3, #0
 800ce26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ce2c:	f107 0314 	add.w	r3, r7, #20
 800ce30:	4619      	mov	r1, r3
 800ce32:	4837      	ldr	r0, [pc, #220]	@ (800cf10 <MX_GPIO_Init+0x278>)
 800ce34:	f002 fae4 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD13 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_5
 800ce38:	f642 4360 	movw	r3, #11360	@ 0x2c60
 800ce3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce46:	2300      	movs	r3, #0
 800ce48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce4a:	f107 0314 	add.w	r3, r7, #20
 800ce4e:	4619      	mov	r1, r3
 800ce50:	4833      	ldr	r0, [pc, #204]	@ (800cf20 <MX_GPIO_Init+0x288>)
 800ce52:	f002 fad5 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD15 PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 800ce56:	f249 0303 	movw	r3, #36867	@ 0x9003
 800ce5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ce60:	2302      	movs	r3, #2
 800ce62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce64:	f107 0314 	add.w	r3, r7, #20
 800ce68:	4619      	mov	r1, r3
 800ce6a:	482d      	ldr	r0, [pc, #180]	@ (800cf20 <MX_GPIO_Init+0x288>)
 800ce6c:	f002 fac8 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ce70:	2340      	movs	r3, #64	@ 0x40
 800ce72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce74:	2302      	movs	r3, #2
 800ce76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ce80:	2303      	movs	r3, #3
 800ce82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ce84:	f107 0314 	add.w	r3, r7, #20
 800ce88:	4619      	mov	r1, r3
 800ce8a:	4822      	ldr	r0, [pc, #136]	@ (800cf14 <MX_GPIO_Init+0x27c>)
 800ce8c:	f002 fab8 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800ce90:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800ce94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ce96:	2300      	movs	r3, #0
 800ce98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ce9e:	f107 0314 	add.w	r3, r7, #20
 800cea2:	4619      	mov	r1, r3
 800cea4:	481b      	ldr	r0, [pc, #108]	@ (800cf14 <MX_GPIO_Init+0x27c>)
 800cea6:	f002 faab 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800ceaa:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 800ceae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ceb8:	f107 0314 	add.w	r3, r7, #20
 800cebc:	4619      	mov	r1, r3
 800cebe:	4816      	ldr	r0, [pc, #88]	@ (800cf18 <MX_GPIO_Init+0x280>)
 800cec0:	f002 fa9e 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
 800cec4:	2398      	movs	r3, #152	@ 0x98
 800cec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cec8:	2300      	movs	r3, #0
 800ceca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cecc:	2300      	movs	r3, #0
 800cece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ced0:	f107 0314 	add.w	r3, r7, #20
 800ced4:	4619      	mov	r1, r3
 800ced6:	4812      	ldr	r0, [pc, #72]	@ (800cf20 <MX_GPIO_Init+0x288>)
 800ced8:	f002 fa92 	bl	800f400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cedc:	23c0      	movs	r3, #192	@ 0xc0
 800cede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cee0:	2300      	movs	r3, #0
 800cee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cee4:	2300      	movs	r3, #0
 800cee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cee8:	f107 0314 	add.w	r3, r7, #20
 800ceec:	4619      	mov	r1, r3
 800ceee:	480b      	ldr	r0, [pc, #44]	@ (800cf1c <MX_GPIO_Init+0x284>)
 800cef0:	f002 fa86 	bl	800f400 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800cef4:	2200      	movs	r2, #0
 800cef6:	2100      	movs	r1, #0
 800cef8:	2017      	movs	r0, #23
 800cefa:	f002 f9b8 	bl	800f26e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800cefe:	2017      	movs	r0, #23
 800cf00:	f002 f9d1 	bl	800f2a6 <HAL_NVIC_EnableIRQ>

}
 800cf04:	bf00      	nop
 800cf06:	3728      	adds	r7, #40	@ 0x28
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	40023800 	.word	0x40023800
 800cf10:	40021000 	.word	0x40021000
 800cf14:	40020800 	.word	0x40020800
 800cf18:	40020000 	.word	0x40020000
 800cf1c:	40020400 	.word	0x40020400
 800cf20:	40020c00 	.word	0x40020c00

0800cf24 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800cf28:	4b12      	ldr	r3, [pc, #72]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf2a:	4a13      	ldr	r2, [pc, #76]	@ (800cf78 <MX_I2C2_Init+0x54>)
 800cf2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800cf2e:	4b11      	ldr	r3, [pc, #68]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf30:	4a12      	ldr	r2, [pc, #72]	@ (800cf7c <MX_I2C2_Init+0x58>)
 800cf32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cf34:	4b0f      	ldr	r3, [pc, #60]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf36:	2200      	movs	r2, #0
 800cf38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800cf3a:	4b0e      	ldr	r3, [pc, #56]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cf40:	4b0c      	ldr	r3, [pc, #48]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800cf46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cf48:	4b0a      	ldr	r3, [pc, #40]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800cf4e:	4b09      	ldr	r3, [pc, #36]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cf54:	4b07      	ldr	r3, [pc, #28]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cf5a:	4b06      	ldr	r3, [pc, #24]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800cf60:	4804      	ldr	r0, [pc, #16]	@ (800cf74 <MX_I2C2_Init+0x50>)
 800cf62:	f002 fd2b 	bl	800f9bc <HAL_I2C_Init>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800cf6c:	f000 fcb6 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800cf70:	bf00      	nop
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20000574 	.word	0x20000574
 800cf78:	40005800 	.word	0x40005800
 800cf7c:	00061a80 	.word	0x00061a80

0800cf80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08a      	sub	sp, #40	@ 0x28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf88:	f107 0314 	add.w	r3, r7, #20
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	601a      	str	r2, [r3, #0]
 800cf90:	605a      	str	r2, [r3, #4]
 800cf92:	609a      	str	r2, [r3, #8]
 800cf94:	60da      	str	r2, [r3, #12]
 800cf96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a29      	ldr	r2, [pc, #164]	@ (800d044 <HAL_I2C_MspInit+0xc4>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d14b      	bne.n	800d03a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	613b      	str	r3, [r7, #16]
 800cfa6:	4b28      	ldr	r3, [pc, #160]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfaa:	4a27      	ldr	r2, [pc, #156]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800cfac:	f043 0302 	orr.w	r3, r3, #2
 800cfb0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cfb2:	4b25      	ldr	r3, [pc, #148]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800cfb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfb6:	f003 0302 	and.w	r3, r3, #2
 800cfba:	613b      	str	r3, [r7, #16]
 800cfbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	60fb      	str	r3, [r7, #12]
 800cfc2:	4b21      	ldr	r3, [pc, #132]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800cfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfc6:	4a20      	ldr	r2, [pc, #128]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800cfc8:	f043 0304 	orr.w	r3, r3, #4
 800cfcc:	6313      	str	r3, [r2, #48]	@ 0x30
 800cfce:	4b1e      	ldr	r3, [pc, #120]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800cfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfd2:	f003 0304 	and.w	r3, r3, #4
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800cfda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cfe0:	2312      	movs	r3, #18
 800cfe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800cfec:	2304      	movs	r3, #4
 800cfee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cff0:	f107 0314 	add.w	r3, r7, #20
 800cff4:	4619      	mov	r1, r3
 800cff6:	4815      	ldr	r0, [pc, #84]	@ (800d04c <HAL_I2C_MspInit+0xcc>)
 800cff8:	f002 fa02 	bl	800f400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d002:	2312      	movs	r3, #18
 800d004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d006:	2300      	movs	r3, #0
 800d008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d00a:	2303      	movs	r3, #3
 800d00c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d00e:	2304      	movs	r3, #4
 800d010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d012:	f107 0314 	add.w	r3, r7, #20
 800d016:	4619      	mov	r1, r3
 800d018:	480d      	ldr	r0, [pc, #52]	@ (800d050 <HAL_I2C_MspInit+0xd0>)
 800d01a:	f002 f9f1 	bl	800f400 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d01e:	2300      	movs	r3, #0
 800d020:	60bb      	str	r3, [r7, #8]
 800d022:	4b09      	ldr	r3, [pc, #36]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800d024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d026:	4a08      	ldr	r2, [pc, #32]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800d028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d02c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d02e:	4b06      	ldr	r3, [pc, #24]	@ (800d048 <HAL_I2C_MspInit+0xc8>)
 800d030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d036:	60bb      	str	r3, [r7, #8]
 800d038:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800d03a:	bf00      	nop
 800d03c:	3728      	adds	r7, #40	@ 0x28
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	40005800 	.word	0x40005800
 800d048:	40023800 	.word	0x40023800
 800d04c:	40020400 	.word	0x40020400
 800d050:	40020800 	.word	0x40020800

0800d054 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a0b      	ldr	r2, [pc, #44]	@ (800d090 <HAL_I2C_MspDeInit+0x3c>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d10f      	bne.n	800d086 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800d066:	4b0b      	ldr	r3, [pc, #44]	@ (800d094 <HAL_I2C_MspDeInit+0x40>)
 800d068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d06a:	4a0a      	ldr	r2, [pc, #40]	@ (800d094 <HAL_I2C_MspDeInit+0x40>)
 800d06c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800d070:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800d072:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d076:	4808      	ldr	r0, [pc, #32]	@ (800d098 <HAL_I2C_MspDeInit+0x44>)
 800d078:	f002 fb56 	bl	800f728 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800d07c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d080:	4806      	ldr	r0, [pc, #24]	@ (800d09c <HAL_I2C_MspDeInit+0x48>)
 800d082:	f002 fb51 	bl	800f728 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 800d086:	bf00      	nop
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	40005800 	.word	0x40005800
 800d094:	40023800 	.word	0x40023800
 800d098:	40020400 	.word	0x40020400
 800d09c:	40020800 	.word	0x40020800

0800d0a0 <I2C_Device_Check>:
 * @brief  Check if an I2C device is responding.
 * @param  dev_addr: 7-bit I2C device address (not shifted)
 * @retval 1 if device is present and responding, 0 otherwise
 **/
uint8_t I2C_Device_Check(uint8_t dev_addr)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	71fb      	strb	r3, [r7, #7]
	if(MCP4661_BASE_ADDR==dev_addr)
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	2b2c      	cmp	r3, #44	@ 0x2c
 800d0ae:	d10d      	bne.n	800d0cc <I2C_Device_Check+0x2c>
	{
		if (HAL_I2C_IsDeviceReady(&hi2c2, dev_addr, 3, 100) == HAL_OK) {
 800d0b0:	79fb      	ldrb	r3, [r7, #7]
 800d0b2:	b299      	uxth	r1, r3
 800d0b4:	2364      	movs	r3, #100	@ 0x64
 800d0b6:	2203      	movs	r2, #3
 800d0b8:	480f      	ldr	r0, [pc, #60]	@ (800d0f8 <I2C_Device_Check+0x58>)
 800d0ba:	f003 f923 	bl	8010304 <HAL_I2C_IsDeviceReady>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <I2C_Device_Check+0x28>
			// ACK received
			return 1;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e013      	b.n	800d0f0 <I2C_Device_Check+0x50>
		} else {
			// NACK received or timeout
			return 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	e011      	b.n	800d0f0 <I2C_Device_Check+0x50>
		}
	}
	else if(ADS7828_ADDR==dev_addr)
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	2b90      	cmp	r3, #144	@ 0x90
 800d0d0:	d10d      	bne.n	800d0ee <I2C_Device_Check+0x4e>
	{
		if (HAL_I2C_IsDeviceReady(&hi2c2, dev_addr, 3, 100) == HAL_OK) {
 800d0d2:	79fb      	ldrb	r3, [r7, #7]
 800d0d4:	b299      	uxth	r1, r3
 800d0d6:	2364      	movs	r3, #100	@ 0x64
 800d0d8:	2203      	movs	r2, #3
 800d0da:	4807      	ldr	r0, [pc, #28]	@ (800d0f8 <I2C_Device_Check+0x58>)
 800d0dc:	f003 f912 	bl	8010304 <HAL_I2C_IsDeviceReady>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d101      	bne.n	800d0ea <I2C_Device_Check+0x4a>
			// ACK received
			return 1;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e002      	b.n	800d0f0 <I2C_Device_Check+0x50>
		} else {
			// NACK received or timeout
			return 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e000      	b.n	800d0f0 <I2C_Device_Check+0x50>
		}
    }
	else
	{
	//	debug_print("Invalid device or device not found\r\n");
		return 0;
 800d0ee:	2300      	movs	r3, #0
	}
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	20000574 	.word	0x20000574

0800d0fc <ADS7828_ReadChannel>:
// Function to read a single-ended channel (AIN0 to AIN7)
uint16_t ADS7828_ReadChannel(uint8_t channel) {
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af02      	add	r7, sp, #8
 800d102:	4603      	mov	r3, r0
 800d104:	71fb      	strb	r3, [r7, #7]
    if (channel > 7) return 0xFFFF; // Invalid channel index, return error code
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	2b07      	cmp	r3, #7
 800d10a:	d902      	bls.n	800d112 <ADS7828_ReadChannel+0x16>
 800d10c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d110:	e048      	b.n	800d1a4 <ADS7828_ReadChannel+0xa8>

//       char msg[50];
//       snprintf(msg, sizeof(msg), "channel: %d\r\n", channel);
//       HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), I2C_Delay_Ms);

    uint8_t ctrl_byte = 0;  // Control byte to be sent to ADS7828
 800d112:	2300      	movs	r3, #0
 800d114:	737b      	strb	r3, [r7, #13]
    // Construct control byte:
    // Bit 7: Always 1 (Start bit)
    // Bits 6-4: Channel selection bits (channel << 4)
    // Bit 3: Single-ended mode (1)
    // Bits 2-0: Power-down selection (PD)
    ctrl_byte |= (1 << 7);                        // Start bit = 1
 800d116:	7b7b      	ldrb	r3, [r7, #13]
 800d118:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	737b      	strb	r3, [r7, #13]
    ctrl_byte |= (channel & 0x07) << 4;           // Channel selection
 800d120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d124:	011b      	lsls	r3, r3, #4
 800d126:	b25b      	sxtb	r3, r3
 800d128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d12c:	b25a      	sxtb	r2, r3
 800d12e:	7b7b      	ldrb	r3, [r7, #13]
 800d130:	b25b      	sxtb	r3, r3
 800d132:	4313      	orrs	r3, r2
 800d134:	b25b      	sxtb	r3, r3
 800d136:	b2db      	uxtb	r3, r3
 800d138:	737b      	strb	r3, [r7, #13]
    ctrl_byte |= (1 << 3);                        // Single-ended mode
 800d13a:	7b7b      	ldrb	r3, [r7, #13]
 800d13c:	f043 0308 	orr.w	r3, r3, #8
 800d140:	b2db      	uxtb	r3, r3
 800d142:	737b      	strb	r3, [r7, #13]
    ctrl_byte |= (PD_ALL_ON & 0x03); // Power-down mode
 800d144:	7b7b      	ldrb	r3, [r7, #13]
 800d146:	f043 0303 	orr.w	r3, r3, #3
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	737b      	strb	r3, [r7, #13]
//    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), I2C_Delay_Ms);

    uint8_t raw[2];  // Buffer to store received data (2 bytes)

    // Send control byte to initiate conversion for the selected channel
    if (HAL_I2C_Master_Transmit(&hi2c2, ADS7828_ADDR, &ctrl_byte, 1, I2C_Delay_Ms) != HAL_OK) {
 800d14e:	f107 020d 	add.w	r2, r7, #13
 800d152:	2364      	movs	r3, #100	@ 0x64
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	2301      	movs	r3, #1
 800d158:	2190      	movs	r1, #144	@ 0x90
 800d15a:	4814      	ldr	r0, [pc, #80]	@ (800d1ac <ADS7828_ReadChannel+0xb0>)
 800d15c:	f002 fda2 	bl	800fca4 <HAL_I2C_Master_Transmit>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <ADS7828_ReadChannel+0x70>
        return 0xFFFF; // Transmission failed
 800d166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d16a:	e01b      	b.n	800d1a4 <ADS7828_ReadChannel+0xa8>
    }
    HAL_Delay(1);
 800d16c:	2001      	movs	r0, #1
 800d16e:	f001 ff7f 	bl	800f070 <HAL_Delay>
    // Read 2-byte ADC result from ADS7828
    if (HAL_I2C_Master_Receive(&hi2c2, ADS7828_ADDR, raw, 2, I2C_Delay_Ms) != HAL_OK) {
 800d172:	f107 0208 	add.w	r2, r7, #8
 800d176:	2364      	movs	r3, #100	@ 0x64
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	2302      	movs	r3, #2
 800d17c:	2190      	movs	r1, #144	@ 0x90
 800d17e:	480b      	ldr	r0, [pc, #44]	@ (800d1ac <ADS7828_ReadChannel+0xb0>)
 800d180:	f002 fe8e 	bl	800fea0 <HAL_I2C_Master_Receive>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d002      	beq.n	800d190 <ADS7828_ReadChannel+0x94>
        return 0xFFFF; // Reception failed
 800d18a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d18e:	e009      	b.n	800d1a4 <ADS7828_ReadChannel+0xa8>

    // Combine the 12-bit result from 2 bytes (raw[0]: high 8 bits, raw[1]: low 4 bits)
 //   uint16_t result = (raw[0] << 4) | (raw[1] >> 4);

 //   uint16_t result = ((uint16_t)raw[0] << 4) | (raw[1] >> 4);
    uint16_t result = (((uint16_t)raw[0] << 8) | raw[1]);
 800d190:	7a3b      	ldrb	r3, [r7, #8]
 800d192:	b21b      	sxth	r3, r3
 800d194:	021b      	lsls	r3, r3, #8
 800d196:	b21a      	sxth	r2, r3
 800d198:	7a7b      	ldrb	r3, [r7, #9]
 800d19a:	b21b      	sxth	r3, r3
 800d19c:	4313      	orrs	r3, r2
 800d19e:	b21b      	sxth	r3, r3
 800d1a0:	81fb      	strh	r3, [r7, #14]
 //   char debug[50];
 //   snprintf(debug, sizeof(debug), "ADC Raw: %02X %02X, Value: %u\r\n", raw[0], raw[1], result);
//    HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), I2C_Delay_Ms);
    return result; // Return 12-bit ADC value
 800d1a2:	89fb      	ldrh	r3, [r7, #14]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	20000574 	.word	0x20000574

0800d1b0 <ADS7828_ConvertToVoltage>:

float ADS7828_ConvertToVoltage(uint16_t adc_val) {
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	80fb      	strh	r3, [r7, #6]

       // 1. Convert ADC value to float and divide by 1000 to normalize
          float normalized_adc = (float)adc_val / 1000.0f;
 800d1ba:	88fb      	ldrh	r3, [r7, #6]
 800d1bc:	ee07 3a90 	vmov	s15, r3
 800d1c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d1c4:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800d234 <ADS7828_ConvertToVoltage+0x84>
 800d1c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d1cc:	edc7 7a02 	vstr	s15, [r7, #8]

          // 2. Round to 2 decimal places (e.g., 1.2345 -> 1.23, 1.2367 -> 1.24)
          float voltage = roundf(normalized_adc * 100.0f) / 100.0f;
 800d1d0:	edd7 7a02 	vldr	s15, [r7, #8]
 800d1d4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d238 <ADS7828_ConvertToVoltage+0x88>
 800d1d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d1e0:	f00b fe22 	bl	8018e28 <roundf>
 800d1e4:	eeb0 7a40 	vmov.f32	s14, s0
 800d1e8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800d238 <ADS7828_ConvertToVoltage+0x88>
 800d1ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d1f0:	edc7 7a03 	vstr	s15, [r7, #12]

       if (voltage <  0.9f)
 800d1f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1f8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800d23c <ADS7828_ConvertToVoltage+0x8c>
 800d1fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d204:	d502      	bpl.n	800d20c <ADS7828_ConvertToVoltage+0x5c>
           voltage = -0.0f;
 800d206:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d20a:	60fb      	str	r3, [r7, #12]
       if (voltage > 4.0f)
 800d20c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d210:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800d214:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	dd01      	ble.n	800d222 <ADS7828_ConvertToVoltage+0x72>
           voltage = -5.0f;
 800d21e:	4b08      	ldr	r3, [pc, #32]	@ (800d240 <ADS7828_ConvertToVoltage+0x90>)
 800d220:	60fb      	str	r3, [r7, #12]
  //  snprintf(msg, sizeof(msg), "ADC Value: %u, Voltage: %.3f V\r\n", adc_val, voltage);

    // Transmit message over UART
  //  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 1000);

    return voltage;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	ee07 3a90 	vmov	s15, r3
}
 800d228:	eeb0 0a67 	vmov.f32	s0, s15
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	447a0000 	.word	0x447a0000
 800d238:	42c80000 	.word	0x42c80000
 800d23c:	3f666666 	.word	0x3f666666
 800d240:	c0a00000 	.word	0xc0a00000

0800d244 <ADS7828_ReadChannelVoltage>:

// Function to read and return the voltage of a specific channel
float ADS7828_ReadChannelVoltage(uint8_t channel) {
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	71fb      	strb	r3, [r7, #7]
    uint16_t adc_val = ADS7828_ReadChannel(channel); // Get raw ADC value
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff ff53 	bl	800d0fc <ADS7828_ReadChannel>
 800d256:	4603      	mov	r3, r0
 800d258:	81fb      	strh	r3, [r7, #14]
    if (adc_val == 0xFFFF) {
 800d25a:	89fb      	ldrh	r3, [r7, #14]
 800d25c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d260:	4293      	cmp	r3, r2
 800d262:	d102      	bne.n	800d26a <ADS7828_ReadChannelVoltage+0x26>
        return -1.0f; // Return error indicator (negative voltage not possible)
 800d264:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800d268:	e005      	b.n	800d276 <ADS7828_ReadChannelVoltage+0x32>
    }

    return ADS7828_ConvertToVoltage(adc_val); // Return converted voltage
 800d26a:	89fb      	ldrh	r3, [r7, #14]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7ff ff9f 	bl	800d1b0 <ADS7828_ConvertToVoltage>
 800d272:	eef0 7a40 	vmov.f32	s15, s0
}
 800d276:	eeb0 0a67 	vmov.f32	s0, s15
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <Read_Sensor_Volage>:
    }

    return adc_val; // Return converted voltage
}
float Read_Sensor_Volage(int Sensor_No)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
		            return -1.0f; // Invalid channel
		    }*/

     //* For all EPOT Testing

	switch (Sensor_No) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	3b01      	subs	r3, #1
 800d28c:	2b07      	cmp	r3, #7
 800d28e:	d843      	bhi.n	800d318 <Read_Sensor_Volage+0x98>
 800d290:	a201      	add	r2, pc, #4	@ (adr r2, 800d298 <Read_Sensor_Volage+0x18>)
 800d292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d296:	bf00      	nop
 800d298:	0800d2b9 	.word	0x0800d2b9
 800d29c:	0800d2c5 	.word	0x0800d2c5
 800d2a0:	0800d2d1 	.word	0x0800d2d1
 800d2a4:	0800d2dd 	.word	0x0800d2dd
 800d2a8:	0800d2e9 	.word	0x0800d2e9
 800d2ac:	0800d2f5 	.word	0x0800d2f5
 800d2b0:	0800d301 	.word	0x0800d301
 800d2b4:	0800d30d 	.word	0x0800d30d
	       case 1:
	            return ADS7828_ReadChannelVoltage(SampleOrBlocking_Buffer_ADC); // Reads CH0
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	f7ff ffc3 	bl	800d244 <ADS7828_ReadChannelVoltage>
 800d2be:	eef0 7a40 	vmov.f32	s15, s0
 800d2c2:	e02b      	b.n	800d31c <Read_Sensor_Volage+0x9c>
	        case 2:
	            return ADS7828_ReadChannelVoltage(WashOrUniversal_Buffer_ADC); // Reads CH1
 800d2c4:	2004      	movs	r0, #4
 800d2c6:	f7ff ffbd 	bl	800d244 <ADS7828_ReadChannelVoltage>
 800d2ca:	eef0 7a40 	vmov.f32	s15, s0
 800d2ce:	e025      	b.n	800d31c <Read_Sensor_Volage+0x9c>
	        case 3:
	            return ADS7828_ReadChannelVoltage(Conjugate_IgG_ADC); // Reads CH2
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	f7ff ffb7 	bl	800d244 <ADS7828_ReadChannelVoltage>
 800d2d6:	eef0 7a40 	vmov.f32	s15, s0
 800d2da:	e01f      	b.n	800d31c <Read_Sensor_Volage+0x9c>
	        case 4:
	            return ADS7828_ReadChannelVoltage(Conjugate_IgMOrIgE_ADC); // Reads CH3
 800d2dc:	2005      	movs	r0, #5
 800d2de:	f7ff ffb1 	bl	800d244 <ADS7828_ReadChannelVoltage>
 800d2e2:	eef0 7a40 	vmov.f32	s15, s0
 800d2e6:	e019      	b.n	800d31c <Read_Sensor_Volage+0x9c>
	        case 5:
	            return ADS7828_ReadChannelVoltage(Subsrtrate_ADC); // Reads CH4
 800d2e8:	2002      	movs	r0, #2
 800d2ea:	f7ff ffab 	bl	800d244 <ADS7828_ReadChannelVoltage>
 800d2ee:	eef0 7a40 	vmov.f32	s15, s0
 800d2f2:	e013      	b.n	800d31c <Read_Sensor_Volage+0x9c>
	        case 6:
	            return ADS7828_ReadChannelVoltage(DI_Water_ADC); // Reads CH5
 800d2f4:	2006      	movs	r0, #6
 800d2f6:	f7ff ffa5 	bl	800d244 <ADS7828_ReadChannelVoltage>
 800d2fa:	eef0 7a40 	vmov.f32	s15, s0
 800d2fe:	e00d      	b.n	800d31c <Read_Sensor_Volage+0x9c>
	        case 7:
	            return ADS7828_ReadChannelVoltage(Waste_Full_ADC); // Reads CH6
 800d300:	2003      	movs	r0, #3
 800d302:	f7ff ff9f 	bl	800d244 <ADS7828_ReadChannelVoltage>
 800d306:	eef0 7a40 	vmov.f32	s15, s0
 800d30a:	e007      	b.n	800d31c <Read_Sensor_Volage+0x9c>
	        case 8:
	            return ADS7828_ReadChannelVoltage(Vaccum_Sensor_ADC); // Reads CH7
 800d30c:	2007      	movs	r0, #7
 800d30e:	f7ff ff99 	bl	800d244 <ADS7828_ReadChannelVoltage>
 800d312:	eef0 7a40 	vmov.f32	s15, s0
 800d316:	e001      	b.n	800d31c <Read_Sensor_Volage+0x9c>
	        default:
	            return -1.0f; // Invalid channel
 800d318:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
	    }


}
 800d31c:	eeb0 0a67 	vmov.f32	s0, s15
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop

0800d328 <MCP4661_WriteWiperRAM>:
 * @param wiper 0 for WIPER0, 1 for WIPER1
 * @param value 8-bit wiper value (0–255)
 * @return HAL status
 */
HAL_StatusTypeDef MCP4661_WriteWiperRAM(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t wiper, uint8_t value)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af02      	add	r7, sp, #8
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	4608      	mov	r0, r1
 800d332:	4611      	mov	r1, r2
 800d334:	461a      	mov	r2, r3
 800d336:	4603      	mov	r3, r0
 800d338:	70fb      	strb	r3, [r7, #3]
 800d33a:	460b      	mov	r3, r1
 800d33c:	70bb      	strb	r3, [r7, #2]
 800d33e:	4613      	mov	r3, r2
 800d340:	707b      	strb	r3, [r7, #1]
    uint8_t reg = (wiper == 0) ? 0x00 : 0x01;  // 0x00 = WIPER0_VOL, 0x01 = WIPER1_VOL
 800d342:	78bb      	ldrb	r3, [r7, #2]
 800d344:	2b00      	cmp	r3, #0
 800d346:	bf14      	ite	ne
 800d348:	2301      	movne	r3, #1
 800d34a:	2300      	moveq	r3, #0
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd[2];

    // Command byte:
    // C1:C0 = 00 (write), AD3:AD0 = reg, D9 = 0, D8 = (value >> 8) & 0x01
    uint8_t command = (reg << 4) | (0x0 << 2) | ((value >> 8) & 0x03);
 800d350:	7bfb      	ldrb	r3, [r7, #15]
 800d352:	011b      	lsls	r3, r3, #4
 800d354:	73bb      	strb	r3, [r7, #14]

    cmd[0] = command;          // High byte: command + bits 9:8 of value
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	723b      	strb	r3, [r7, #8]
    cmd[1] = value & 0xFF;     // Low byte: D7–D0
 800d35a:	787b      	ldrb	r3, [r7, #1]
 800d35c:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1), cmd, 2, I2C_Delay_Ms);
 800d35e:	78fb      	ldrb	r3, [r7, #3]
 800d360:	b29b      	uxth	r3, r3
 800d362:	005b      	lsls	r3, r3, #1
 800d364:	b299      	uxth	r1, r3
 800d366:	f107 0208 	add.w	r2, r7, #8
 800d36a:	2364      	movs	r3, #100	@ 0x64
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	2302      	movs	r3, #2
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f002 fc97 	bl	800fca4 <HAL_I2C_Master_Transmit>
 800d376:	4603      	mov	r3, r0
 800d378:	737b      	strb	r3, [r7, #13]
//        char msg[64];
//        snprintf(msg, sizeof(msg), err, dev_addr);
//        HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), I2C_Delay_Ms);
//    }

    return status;
 800d37a:	7b7b      	ldrb	r3, [r7, #13]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <voltageToStep>:

    return HAL_OK;
}

uint8_t voltageToStep(float voltage)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b094      	sub	sp, #80	@ 0x50
 800d388:	af00      	add	r7, sp, #0
 800d38a:	ed87 0a01 	vstr	s0, [r7, #4]

    // Print the voltage value
//    snprintf(msg, sizeof(msg), "Voltage = %.3f V\r\n", voltage);
//    HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 1000);

    if (voltage <= V_LOW) return 0;
 800d38e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d392:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800d400 <voltageToStep+0x7c>
 800d396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39e:	d801      	bhi.n	800d3a4 <voltageToStep+0x20>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e029      	b.n	800d3f8 <voltageToStep+0x74>
    if (voltage >= V_MAX) return MAX_STEP;
 800d3a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3a8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d3ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b4:	db01      	blt.n	800d3ba <voltageToStep+0x36>
 800d3b6:	2326      	movs	r3, #38	@ 0x26
 800d3b8:	e01e      	b.n	800d3f8 <voltageToStep+0x74>

    float step = MAX_STEP * (voltage - V_LOW) / (V_MAX - V_LOW);
 800d3ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3be:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800d400 <voltageToStep+0x7c>
 800d3c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3c6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800d404 <voltageToStep+0x80>
 800d3ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d3ce:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d408 <voltageToStep+0x84>
 800d3d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d3d6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    // Print the step value (float)
//    snprintf(msg, sizeof(msg), "Step (float) = %.3f\r\n", step);
 //   HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 1000);

    // Print the step value (rounded integer)
    uint8_t step_int = (uint8_t)roundf(step);
 800d3da:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 800d3de:	f00b fd23 	bl	8018e28 <roundf>
 800d3e2:	eef0 7a40 	vmov.f32	s15, s0
 800d3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3ea:	edc7 7a00 	vstr	s15, [r7]
 800d3ee:	783b      	ldrb	r3, [r7, #0]
 800d3f0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 //   snprintf(msg, sizeof(msg), "Step (rounded) = %u\r\n", step_int);
//    HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 1000);

    return step_int;
 800d3f4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3750      	adds	r7, #80	@ 0x50
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	3f3851ec 	.word	0x3f3851ec
 800d404:	42180000 	.word	0x42180000
 800d408:	4088f5c2 	.word	0x4088f5c2

0800d40c <MCP4661_WriteWiper_EEPROM>:
HAL_StatusTypeDef MCP4661_WriteWiper_EEPROM(
    I2C_HandleTypeDef *hi2c,
    uint8_t dev_addr,
    uint8_t wiper_index,
    uint16_t wiper_value)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b096      	sub	sp, #88	@ 0x58
 800d410:	af02      	add	r7, sp, #8
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	4608      	mov	r0, r1
 800d416:	4611      	mov	r1, r2
 800d418:	461a      	mov	r2, r3
 800d41a:	4603      	mov	r3, r0
 800d41c:	70fb      	strb	r3, [r7, #3]
 800d41e:	460b      	mov	r3, r1
 800d420:	70bb      	strb	r3, [r7, #2]
 800d422:	4613      	mov	r3, r2
 800d424:	803b      	strh	r3, [r7, #0]
    uint8_t cmd[2];
    char msg[64];
    MCP4661_SetHardwareWriteProtect(GPIOB, GPIO_PIN_5, 1); // Enable for ePot 1
 800d426:	2201      	movs	r2, #1
 800d428:	2120      	movs	r1, #32
 800d42a:	481d      	ldr	r0, [pc, #116]	@ (800d4a0 <MCP4661_WriteWiper_EEPROM+0x94>)
 800d42c:	f000 f83a 	bl	800d4a4 <MCP4661_SetHardwareWriteProtect>

    // Limit wiper_value to 9 bits (0–256 for MCP4661)
    wiper_value &= 0x01FF;
 800d430:	883b      	ldrh	r3, [r7, #0]
 800d432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d436:	803b      	strh	r3, [r7, #0]

    // EEPROM Wiper address: 0x02 (W0), 0x03 (W1)
    uint8_t address = 0x02 + (wiper_index & 0x01);
 800d438:	78bb      	ldrb	r3, [r7, #2]
 800d43a:	f003 0301 	and.w	r3, r3, #1
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	3302      	adds	r3, #2
 800d442:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    // Command byte: [AD3:AD0][C1:C0=00][D8]
    cmd[0] = (address << 4) | (0x00 << 2) | ((wiper_value >> 8) & 0x01);
 800d446:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800d44a:	011b      	lsls	r3, r3, #4
 800d44c:	b25a      	sxtb	r2, r3
 800d44e:	883b      	ldrh	r3, [r7, #0]
 800d450:	0a1b      	lsrs	r3, r3, #8
 800d452:	b29b      	uxth	r3, r3
 800d454:	b25b      	sxtb	r3, r3
 800d456:	f003 0301 	and.w	r3, r3, #1
 800d45a:	b25b      	sxtb	r3, r3
 800d45c:	4313      	orrs	r3, r2
 800d45e:	b25b      	sxtb	r3, r3
 800d460:	b2db      	uxtb	r3, r3
 800d462:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    cmd[1] = wiper_value & 0xFF;
 800d466:	883b      	ldrh	r3, [r7, #0]
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    // Optional: Check/disable WP and WL bits first as needed (see status register docs)

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1), cmd, 2, 1000);
 800d46e:	78fb      	ldrb	r3, [r7, #3]
 800d470:	b29b      	uxth	r3, r3
 800d472:	005b      	lsls	r3, r3, #1
 800d474:	b299      	uxth	r1, r3
 800d476:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800d47a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	2302      	movs	r3, #2
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f002 fc0e 	bl	800fca4 <HAL_I2C_Master_Transmit>
 800d488:	4603      	mov	r3, r0
 800d48a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
//        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);
//        return status;
//    }

    // Delay for EEPROM write cycle (datasheet: tWR = 5–15ms)
    HAL_Delay(15);
 800d48e:	200f      	movs	r0, #15
 800d490:	f001 fdee 	bl	800f070 <HAL_Delay>

//    snprintf(msg, sizeof(msg), "EEPROM write OK: Wiper%d = %u\r\n", wiper_index, wiper_value);
//    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);

    return status;
 800d494:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3750      	adds	r7, #80	@ 0x50
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	40020400 	.word	0x40020400

0800d4a4 <MCP4661_SetHardwareWriteProtect>:
 * @param hw_wp_pin   GPIO pin number (e.g., GPIO_PIN_5)
 * @param enable      1 to disable HW WP (set pin HIGH, allows EEPROM writes)
 *                    0 to enable HW WP (set pin LOW, blocks EEPROM writes)
 */
void MCP4661_SetHardwareWriteProtect(GPIO_TypeDef* hw_wp_port, uint16_t hw_wp_pin, uint8_t enable)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	807b      	strh	r3, [r7, #2]
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	707b      	strb	r3, [r7, #1]
    // Set HW WP pin: HIGH (GPIO_PIN_SET) disables hardware write protection
    //                LOW  (GPIO_PIN_RESET) enables hardware write protection
    HAL_GPIO_WritePin(hw_wp_port, hw_wp_pin, enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800d4b4:	787b      	ldrb	r3, [r7, #1]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	bf14      	ite	ne
 800d4ba:	2301      	movne	r3, #1
 800d4bc:	2300      	moveq	r3, #0
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	887b      	ldrh	r3, [r7, #2]
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f002 fa3a 	bl	800f940 <HAL_GPIO_WritePin>
}
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <I2C2_Recover>:



void I2C2_Recover(void)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b088      	sub	sp, #32
 800d4d8:	af00      	add	r7, sp, #0

	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4da:	f107 0308 	add.w	r3, r7, #8
 800d4de:	2200      	movs	r2, #0
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	605a      	str	r2, [r3, #4]
 800d4e4:	609a      	str	r2, [r3, #8]
 800d4e6:	60da      	str	r2, [r3, #12]
 800d4e8:	611a      	str	r2, [r3, #16]

	    // 1. DeInit I2C to gain control over pins
	    HAL_I2C_DeInit(&hi2c2);
 800d4ea:	483a      	ldr	r0, [pc, #232]	@ (800d5d4 <I2C2_Recover+0x100>)
 800d4ec:	f002 fbaa 	bl	800fc44 <HAL_I2C_DeInit>

	    // 2. Enable GPIO clocks if not already enabled
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	607b      	str	r3, [r7, #4]
 800d4f4:	4b38      	ldr	r3, [pc, #224]	@ (800d5d8 <I2C2_Recover+0x104>)
 800d4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f8:	4a37      	ldr	r2, [pc, #220]	@ (800d5d8 <I2C2_Recover+0x104>)
 800d4fa:	f043 0302 	orr.w	r3, r3, #2
 800d4fe:	6313      	str	r3, [r2, #48]	@ 0x30
 800d500:	4b35      	ldr	r3, [pc, #212]	@ (800d5d8 <I2C2_Recover+0x104>)
 800d502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d504:	f003 0302 	and.w	r3, r3, #2
 800d508:	607b      	str	r3, [r7, #4]
 800d50a:	687b      	ldr	r3, [r7, #4]

	    // 3. Configure SCL and SDA as GPIO Output Open Drain
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d50c:	2311      	movs	r3, #17
 800d50e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d510:	2300      	movs	r3, #0
 800d512:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d514:	2302      	movs	r3, #2
 800d516:	617b      	str	r3, [r7, #20]

	    GPIO_InitStruct.Pin = I2C2_SCL_PIN;
 800d518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d51c:	60bb      	str	r3, [r7, #8]
	    HAL_GPIO_Init(I2C2_SCL_PORT, &GPIO_InitStruct);
 800d51e:	f107 0308 	add.w	r3, r7, #8
 800d522:	4619      	mov	r1, r3
 800d524:	482d      	ldr	r0, [pc, #180]	@ (800d5dc <I2C2_Recover+0x108>)
 800d526:	f001 ff6b 	bl	800f400 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = I2C2_SDA_PIN;
 800d52a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d52e:	60bb      	str	r3, [r7, #8]
	    HAL_GPIO_Init(I2C2_SDA_PORT, &GPIO_InitStruct);
 800d530:	f107 0308 	add.w	r3, r7, #8
 800d534:	4619      	mov	r1, r3
 800d536:	482a      	ldr	r0, [pc, #168]	@ (800d5e0 <I2C2_Recover+0x10c>)
 800d538:	f001 ff62 	bl	800f400 <HAL_GPIO_Init>

	    // 4. Manually clock SCL to free SDA if stuck
	    for (int i = 0; i < 9; i++) {
 800d53c:	2300      	movs	r3, #0
 800d53e:	61fb      	str	r3, [r7, #28]
 800d540:	e014      	b.n	800d56c <I2C2_Recover+0x98>
	        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 800d542:	2201      	movs	r2, #1
 800d544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d548:	4824      	ldr	r0, [pc, #144]	@ (800d5dc <I2C2_Recover+0x108>)
 800d54a:	f002 f9f9 	bl	800f940 <HAL_GPIO_WritePin>
	        HAL_Delay(1);
 800d54e:	2001      	movs	r0, #1
 800d550:	f001 fd8e 	bl	800f070 <HAL_Delay>
	        HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_RESET);
 800d554:	2200      	movs	r2, #0
 800d556:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d55a:	4820      	ldr	r0, [pc, #128]	@ (800d5dc <I2C2_Recover+0x108>)
 800d55c:	f002 f9f0 	bl	800f940 <HAL_GPIO_WritePin>
	        HAL_Delay(1);
 800d560:	2001      	movs	r0, #1
 800d562:	f001 fd85 	bl	800f070 <HAL_Delay>
	    for (int i = 0; i < 9; i++) {
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	3301      	adds	r3, #1
 800d56a:	61fb      	str	r3, [r7, #28]
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	2b08      	cmp	r3, #8
 800d570:	dde7      	ble.n	800d542 <I2C2_Recover+0x6e>
	    }

	    // 5. Generate manual STOP
	    HAL_GPIO_WritePin(I2C2_SDA_PORT, I2C2_SDA_PIN, GPIO_PIN_RESET);
 800d572:	2200      	movs	r2, #0
 800d574:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d578:	4819      	ldr	r0, [pc, #100]	@ (800d5e0 <I2C2_Recover+0x10c>)
 800d57a:	f002 f9e1 	bl	800f940 <HAL_GPIO_WritePin>
	    HAL_Delay(1);
 800d57e:	2001      	movs	r0, #1
 800d580:	f001 fd76 	bl	800f070 <HAL_Delay>
	    HAL_GPIO_WritePin(I2C2_SCL_PORT, I2C2_SCL_PIN, GPIO_PIN_SET);
 800d584:	2201      	movs	r2, #1
 800d586:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d58a:	4814      	ldr	r0, [pc, #80]	@ (800d5dc <I2C2_Recover+0x108>)
 800d58c:	f002 f9d8 	bl	800f940 <HAL_GPIO_WritePin>
	    HAL_Delay(1);
 800d590:	2001      	movs	r0, #1
 800d592:	f001 fd6d 	bl	800f070 <HAL_Delay>
	    HAL_GPIO_WritePin(I2C2_SDA_PORT, I2C2_SDA_PIN, GPIO_PIN_SET);
 800d596:	2201      	movs	r2, #1
 800d598:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d59c:	4810      	ldr	r0, [pc, #64]	@ (800d5e0 <I2C2_Recover+0x10c>)
 800d59e:	f002 f9cf 	bl	800f940 <HAL_GPIO_WritePin>
	    HAL_Delay(1);
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	f001 fd64 	bl	800f070 <HAL_Delay>

	    // 6. Reset I2C2 peripheral
	    __HAL_RCC_I2C2_FORCE_RESET();
 800d5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d8 <I2C2_Recover+0x104>)
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d5d8 <I2C2_Recover+0x104>)
 800d5ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d5b2:	6213      	str	r3, [r2, #32]
	    HAL_Delay(2);
 800d5b4:	2002      	movs	r0, #2
 800d5b6:	f001 fd5b 	bl	800f070 <HAL_Delay>
	    __HAL_RCC_I2C2_RELEASE_RESET();
 800d5ba:	4b07      	ldr	r3, [pc, #28]	@ (800d5d8 <I2C2_Recover+0x104>)
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	4a06      	ldr	r2, [pc, #24]	@ (800d5d8 <I2C2_Recover+0x104>)
 800d5c0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800d5c4:	6213      	str	r3, [r2, #32]

	    // 7. Reconfigure pins back to I2C mode and reinit peripheral
	    MX_I2C2_Init();  // Must be CubeMX-generated function
 800d5c6:	f7ff fcad 	bl	800cf24 <MX_I2C2_Init>

}
 800d5ca:	bf00      	nop
 800d5cc:	3720      	adds	r7, #32
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000574 	.word	0x20000574
 800d5d8:	40023800 	.word	0x40023800
 800d5dc:	40020400 	.word	0x40020400
 800d5e0:	40020800 	.word	0x40020800

0800d5e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d5e8:	f001 fcd0 	bl	800ef8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d5ec:	f000 f90a 	bl	800d804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d5f0:	f7ff fb52 	bl	800cc98 <MX_GPIO_Init>
  MX_I2C2_Init();
 800d5f4:	f7ff fc96 	bl	800cf24 <MX_I2C2_Init>
  MX_TIM5_Init();
 800d5f8:	f000 fca2 	bl	800df40 <MX_TIM5_Init>
  MX_TIM9_Init();
 800d5fc:	f000 fd16 	bl	800e02c <MX_TIM9_Init>
  MX_TIM10_Init();
 800d600:	f000 fd76 	bl	800e0f0 <MX_TIM10_Init>
  MX_TIM11_Init();
 800d604:	f000 fdc2 	bl	800e18c <MX_TIM11_Init>
  MX_TIM12_Init();
 800d608:	f000 fe0e 	bl	800e228 <MX_TIM12_Init>
  MX_TIM13_Init();
 800d60c:	f000 fe7a 	bl	800e304 <MX_TIM13_Init>
  MX_UART4_Init();
 800d610:	f001 f9ec 	bl	800e9ec <MX_UART4_Init>
  MX_USART1_UART_Init();
 800d614:	f001 fa14 	bl	800ea40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800d618:	f001 fa3c 	bl	800ea94 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800d61c:	f000 fc42 	bl	800dea4 <MX_TIM4_Init>
  MX_TIM3_Init();
 800d620:	f000 fbea 	bl	800ddf8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800d624:	2201      	movs	r2, #1
 800d626:	2110      	movs	r1, #16
 800d628:	4867      	ldr	r0, [pc, #412]	@ (800d7c8 <main+0x1e4>)
 800d62a:	f002 f989 	bl	800f940 <HAL_GPIO_WritePin>
	Rising_Edge(VL_EXLED_GATE);
 800d62e:	4b67      	ldr	r3, [pc, #412]	@ (800d7cc <main+0x1e8>)
 800d630:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d634:	f001 fc3a 	bl	800eeac <Rising_Edge>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800d638:	2200      	movs	r2, #0
 800d63a:	2102      	movs	r1, #2
 800d63c:	4862      	ldr	r0, [pc, #392]	@ (800d7c8 <main+0x1e4>)
 800d63e:	f002 f97f 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,GPIO_PIN_RESET);
 800d642:	2200      	movs	r2, #0
 800d644:	2104      	movs	r1, #4
 800d646:	4860      	ldr	r0, [pc, #384]	@ (800d7c8 <main+0x1e4>)
 800d648:	f002 f97a 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 800d64c:	2200      	movs	r2, #0
 800d64e:	2108      	movs	r1, #8
 800d650:	485d      	ldr	r0, [pc, #372]	@ (800d7c8 <main+0x1e4>)
 800d652:	f002 f975 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_RESET);
 800d656:	2200      	movs	r2, #0
 800d658:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d65c:	485c      	ldr	r0, [pc, #368]	@ (800d7d0 <main+0x1ec>)
 800d65e:	f002 f96f 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET);
 800d662:	2200      	movs	r2, #0
 800d664:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d668:	4859      	ldr	r0, [pc, #356]	@ (800d7d0 <main+0x1ec>)
 800d66a:	f002 f969 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7,GPIO_PIN_RESET);
 800d66e:	2200      	movs	r2, #0
 800d670:	2180      	movs	r1, #128	@ 0x80
 800d672:	4857      	ldr	r0, [pc, #348]	@ (800d7d0 <main+0x1ec>)
 800d674:	f002 f964 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800d678:	2200      	movs	r2, #0
 800d67a:	2102      	movs	r1, #2
 800d67c:	4855      	ldr	r0, [pc, #340]	@ (800d7d4 <main+0x1f0>)
 800d67e:	f002 f95f 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800d682:	2200      	movs	r2, #0
 800d684:	2101      	movs	r1, #1
 800d686:	4853      	ldr	r0, [pc, #332]	@ (800d7d4 <main+0x1f0>)
 800d688:	f002 f95a 	bl	800f940 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_RESET);
 800d68c:	2200      	movs	r2, #0
 800d68e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d692:	484f      	ldr	r0, [pc, #316]	@ (800d7d0 <main+0x1ec>)
 800d694:	f002 f954 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 800d698:	2200      	movs	r2, #0
 800d69a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d69e:	484c      	ldr	r0, [pc, #304]	@ (800d7d0 <main+0x1ec>)
 800d6a0:	f002 f94e 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d6aa:	4849      	ldr	r0, [pc, #292]	@ (800d7d0 <main+0x1ec>)
 800d6ac:	f002 f948 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_RESET);
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d6b6:	4846      	ldr	r0, [pc, #280]	@ (800d7d0 <main+0x1ec>)
 800d6b8:	f002 f942 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_RESET);
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d6c2:	4843      	ldr	r0, [pc, #268]	@ (800d7d0 <main+0x1ec>)
 800d6c4:	f002 f93c 	bl	800f940 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	2120      	movs	r1, #32
 800d6cc:	483e      	ldr	r0, [pc, #248]	@ (800d7c8 <main+0x1e4>)
 800d6ce:	f002 f937 	bl	800f940 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	2180      	movs	r1, #128	@ 0x80
 800d6d6:	4840      	ldr	r0, [pc, #256]	@ (800d7d8 <main+0x1f4>)
 800d6d8:	f002 f932 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800d6dc:	2200      	movs	r2, #0
 800d6de:	2140      	movs	r1, #64	@ 0x40
 800d6e0:	483d      	ldr	r0, [pc, #244]	@ (800d7d8 <main+0x1f4>)
 800d6e2:	f002 f92d 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2120      	movs	r1, #32
 800d6ea:	483b      	ldr	r0, [pc, #236]	@ (800d7d8 <main+0x1f4>)
 800d6ec:	f002 f928 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2110      	movs	r1, #16
 800d6f4:	4838      	ldr	r0, [pc, #224]	@ (800d7d8 <main+0x1f4>)
 800d6f6:	f002 f923 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2108      	movs	r1, #8
 800d6fe:	4836      	ldr	r0, [pc, #216]	@ (800d7d8 <main+0x1f4>)
 800d700:	f002 f91e 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 800d704:	2200      	movs	r2, #0
 800d706:	2101      	movs	r1, #1
 800d708:	4833      	ldr	r0, [pc, #204]	@ (800d7d8 <main+0x1f4>)
 800d70a:	f002 f919 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);// for epot 1 -write protect
 800d70e:	2200      	movs	r2, #0
 800d710:	2120      	movs	r1, #32
 800d712:	4830      	ldr	r0, [pc, #192]	@ (800d7d4 <main+0x1f0>)
 800d714:	f002 f914 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);// for epot 2- write protect
 800d718:	2200      	movs	r2, #0
 800d71a:	2110      	movs	r1, #16
 800d71c:	482d      	ldr	r0, [pc, #180]	@ (800d7d4 <main+0x1f0>)
 800d71e:	f002 f90f 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,GPIO_PIN_RESET);// for epot 3- write protect
 800d722:	2200      	movs	r2, #0
 800d724:	2140      	movs	r1, #64	@ 0x40
 800d726:	482d      	ldr	r0, [pc, #180]	@ (800d7dc <main+0x1f8>)
 800d728:	f002 f90a 	bl	800f940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_RESET);// for epot 4- write protect
 800d72c:	2200      	movs	r2, #0
 800d72e:	2120      	movs	r1, #32
 800d730:	482a      	ldr	r0, [pc, #168]	@ (800d7dc <main+0x1f8>)
 800d732:	f002 f905 	bl	800f940 <HAL_GPIO_WritePin>
	Rising_Edge(P1_P4_GATE);
 800d736:	4b2a      	ldr	r3, [pc, #168]	@ (800d7e0 <main+0x1fc>)
 800d738:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d73c:	f001 fbb6 	bl	800eeac <Rising_Edge>
	Rising_Edge(P5_P7_GATE);
 800d740:	4b28      	ldr	r3, [pc, #160]	@ (800d7e4 <main+0x200>)
 800d742:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d746:	f001 fbb1 	bl	800eeac <Rising_Edge>
	Rising_Edge(VL_EXLED_GATE);
 800d74a:	4b20      	ldr	r3, [pc, #128]	@ (800d7cc <main+0x1e8>)
 800d74c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d750:	f001 fbac 	bl	800eeac <Rising_Edge>

	Syringe_Motor_Dis;   //if it is enabled, the 2.5 ml keyto syring will produce humming noise
 800d754:	2201      	movs	r2, #1
 800d756:	2101      	movs	r1, #1
 800d758:	481d      	ldr	r0, [pc, #116]	@ (800d7d0 <main+0x1ec>)
 800d75a:	f002 f8f1 	bl	800f940 <HAL_GPIO_WritePin>





	HAL_UART_Transmit(&huart3, (uint8_t *)"PLexMAT 4  V1.0\n",strlen("PLexMAT 4  V1.0\n"), 100);
 800d75e:	2364      	movs	r3, #100	@ 0x64
 800d760:	2210      	movs	r2, #16
 800d762:	4921      	ldr	r1, [pc, #132]	@ (800d7e8 <main+0x204>)
 800d764:	4821      	ldr	r0, [pc, #132]	@ (800d7ec <main+0x208>)
 800d766:	f005 fa6f 	bl	8012c48 <HAL_UART_Transmit>
	// Start UART reception (1 byte at a time)
	HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 800d76a:	2201      	movs	r2, #1
 800d76c:	4920      	ldr	r1, [pc, #128]	@ (800d7f0 <main+0x20c>)
 800d76e:	481f      	ldr	r0, [pc, #124]	@ (800d7ec <main+0x208>)
 800d770:	f005 faf5 	bl	8012d5e <HAL_UART_Receive_IT>
	// Start TIM2 Input Capture with interrupt on channel 1
	//HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);

// Make Z Home -during power up

	 LED_Off(RedLED);
 800d774:	4b1f      	ldr	r3, [pc, #124]	@ (800d7f4 <main+0x210>)
 800d776:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d77a:	f001 fb87 	bl	800ee8c <LED_Off>
	 Rising_Edge(VL_EXLED_GATE);
 800d77e:	4b13      	ldr	r3, [pc, #76]	@ (800d7cc <main+0x1e8>)
 800d780:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d784:	f001 fb92 	bl	800eeac <Rising_Edge>
	 LED_Off(YellowLED);
 800d788:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f8 <main+0x214>)
 800d78a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d78e:	f001 fb7d 	bl	800ee8c <LED_Off>
	 Rising_Edge(VL_EXLED_GATE);
 800d792:	4b0e      	ldr	r3, [pc, #56]	@ (800d7cc <main+0x1e8>)
 800d794:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d798:	f001 fb88 	bl	800eeac <Rising_Edge>
	 LED_On(GreenLED);
 800d79c:	4b17      	ldr	r3, [pc, #92]	@ (800d7fc <main+0x218>)
 800d79e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7a2:	f001 fb63 	bl	800ee6c <LED_On>
	 Rising_Edge(VL_EXLED_GATE);
 800d7a6:	4b09      	ldr	r3, [pc, #36]	@ (800d7cc <main+0x1e8>)
 800d7a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7ac:	f001 fb7e 	bl	800eeac <Rising_Edge>
	 HAL_Delay(10);
 800d7b0:	200a      	movs	r0, #10
 800d7b2:	f001 fc5d 	bl	800f070 <HAL_Delay>
	// Initialize last capture tick to current tick
//	last_capture_tick = HAL_GetTick();

		last_capture_tick = HAL_GetTick();
 800d7b6:	f001 fc4f 	bl	800f058 <HAL_GetTick>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	4a10      	ldr	r2, [pc, #64]	@ (800d800 <main+0x21c>)
 800d7be:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Start_Process();
 800d7c0:	f7fd f83e 	bl	800a840 <Start_Process>
 800d7c4:	e7fc      	b.n	800d7c0 <main+0x1dc>
 800d7c6:	bf00      	nop
 800d7c8:	40020800 	.word	0x40020800
 800d7cc:	20000268 	.word	0x20000268
 800d7d0:	40021000 	.word	0x40021000
 800d7d4:	40020400 	.word	0x40020400
 800d7d8:	40020000 	.word	0x40020000
 800d7dc:	40020c00 	.word	0x40020c00
 800d7e0:	20000258 	.word	0x20000258
 800d7e4:	20000260 	.word	0x20000260
 800d7e8:	080190b8 	.word	0x080190b8
 800d7ec:	200008a8 	.word	0x200008a8
 800d7f0:	200004f4 	.word	0x200004f4
 800d7f4:	200002d0 	.word	0x200002d0
 800d7f8:	200002d8 	.word	0x200002d8
 800d7fc:	200002c8 	.word	0x200002c8
 800d800:	20000570 	.word	0x20000570

0800d804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b094      	sub	sp, #80	@ 0x50
 800d808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d80a:	f107 031c 	add.w	r3, r7, #28
 800d80e:	2234      	movs	r2, #52	@ 0x34
 800d810:	2100      	movs	r1, #0
 800d812:	4618      	mov	r0, r3
 800d814:	f007 fc4a 	bl	80150ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d818:	f107 0308 	add.w	r3, r7, #8
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	605a      	str	r2, [r3, #4]
 800d822:	609a      	str	r2, [r3, #8]
 800d824:	60da      	str	r2, [r3, #12]
 800d826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d828:	2300      	movs	r3, #0
 800d82a:	607b      	str	r3, [r7, #4]
 800d82c:	4b29      	ldr	r3, [pc, #164]	@ (800d8d4 <SystemClock_Config+0xd0>)
 800d82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d830:	4a28      	ldr	r2, [pc, #160]	@ (800d8d4 <SystemClock_Config+0xd0>)
 800d832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d836:	6413      	str	r3, [r2, #64]	@ 0x40
 800d838:	4b26      	ldr	r3, [pc, #152]	@ (800d8d4 <SystemClock_Config+0xd0>)
 800d83a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d83c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d840:	607b      	str	r3, [r7, #4]
 800d842:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800d844:	2300      	movs	r3, #0
 800d846:	603b      	str	r3, [r7, #0]
 800d848:	4b23      	ldr	r3, [pc, #140]	@ (800d8d8 <SystemClock_Config+0xd4>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800d850:	4a21      	ldr	r2, [pc, #132]	@ (800d8d8 <SystemClock_Config+0xd4>)
 800d852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d856:	6013      	str	r3, [r2, #0]
 800d858:	4b1f      	ldr	r3, [pc, #124]	@ (800d8d8 <SystemClock_Config+0xd4>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d860:	603b      	str	r3, [r7, #0]
 800d862:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d864:	2302      	movs	r3, #2
 800d866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d868:	2301      	movs	r3, #1
 800d86a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d86c:	2310      	movs	r3, #16
 800d86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d870:	2302      	movs	r3, #2
 800d872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d874:	2300      	movs	r3, #0
 800d876:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d878:	2308      	movs	r3, #8
 800d87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800d87c:	2354      	movs	r3, #84	@ 0x54
 800d87e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d880:	2302      	movs	r3, #2
 800d882:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800d884:	2302      	movs	r3, #2
 800d886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d888:	2302      	movs	r3, #2
 800d88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d88c:	f107 031c 	add.w	r3, r7, #28
 800d890:	4618      	mov	r0, r3
 800d892:	f003 fcaf 	bl	80111f4 <HAL_RCC_OscConfig>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d001      	beq.n	800d8a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800d89c:	f000 f81e 	bl	800d8dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d8a0:	230f      	movs	r3, #15
 800d8a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d8ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d8b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d8b6:	f107 0308 	add.w	r3, r7, #8
 800d8ba:	2102      	movs	r1, #2
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f003 f9d5 	bl	8010c6c <HAL_RCC_ClockConfig>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800d8c8:	f000 f808 	bl	800d8dc <Error_Handler>
  }
}
 800d8cc:	bf00      	nop
 800d8ce:	3750      	adds	r7, #80	@ 0x50
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	40023800 	.word	0x40023800
 800d8d8:	40007000 	.word	0x40007000

0800d8dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d8e0:	b672      	cpsid	i
}
 800d8e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d8e4:	bf00      	nop
 800d8e6:	e7fd      	b.n	800d8e4 <Error_Handler+0x8>

0800d8e8 <Pump_On>:
 */

#include "pump.h"

void Pump_On(Pump* pump, PumpDirection direction)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	70fb      	strb	r3, [r7, #3]
    if (direction == CLOCKWISE) {
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d110      	bne.n	800d91c <Pump_On+0x34>
        HAL_GPIO_WritePin(pump->pin1_port, pump->pin1, GPIO_PIN_SET);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6818      	ldr	r0, [r3, #0]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	889b      	ldrh	r3, [r3, #4]
 800d902:	2201      	movs	r2, #1
 800d904:	4619      	mov	r1, r3
 800d906:	f002 f81b 	bl	800f940 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(pump->pin2_port, pump->pin2, GPIO_PIN_RESET);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6898      	ldr	r0, [r3, #8]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	899b      	ldrh	r3, [r3, #12]
 800d912:	2200      	movs	r2, #0
 800d914:	4619      	mov	r1, r3
 800d916:	f002 f813 	bl	800f940 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(pump->pin1_port, pump->pin1, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(pump->pin2_port, pump->pin2, GPIO_PIN_SET);
    }
}
 800d91a:	e00f      	b.n	800d93c <Pump_On+0x54>
        HAL_GPIO_WritePin(pump->pin1_port, pump->pin1, GPIO_PIN_RESET);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6818      	ldr	r0, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	889b      	ldrh	r3, [r3, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	4619      	mov	r1, r3
 800d928:	f002 f80a 	bl	800f940 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(pump->pin2_port, pump->pin2, GPIO_PIN_SET);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6898      	ldr	r0, [r3, #8]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	899b      	ldrh	r3, [r3, #12]
 800d934:	2201      	movs	r2, #1
 800d936:	4619      	mov	r1, r3
 800d938:	f002 f802 	bl	800f940 <HAL_GPIO_WritePin>
}
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <Pump_Off>:


void Pump_Off(Pump* pump)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(pump->pin1_port, pump->pin1, GPIO_PIN_RESET);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6818      	ldr	r0, [r3, #0]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	889b      	ldrh	r3, [r3, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	4619      	mov	r1, r3
 800d958:	f001 fff2 	bl	800f940 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pump->pin2_port, pump->pin2, GPIO_PIN_RESET);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6898      	ldr	r0, [r3, #8]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	899b      	ldrh	r3, [r3, #12]
 800d964:	2200      	movs	r2, #0
 800d966:	4619      	mov	r1, r3
 800d968:	f001 ffea 	bl	800f940 <HAL_GPIO_WritePin>
}
 800d96c:	bf00      	nop
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <WashOrUniversal_Buffer_Pump_Function>:



void WashOrUniversal_Buffer_Pump_Function(unsigned int volume)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
	Pump_On(&WashandUniversalBuffer_Pump,CLOCKWISE);
 800d97c:	2100      	movs	r1, #0
 800d97e:	4819      	ldr	r0, [pc, #100]	@ (800d9e4 <WashOrUniversal_Buffer_Pump_Function+0x70>)
 800d980:	f7ff ffb2 	bl	800d8e8 <Pump_On>
	Rising_Edge(P1_P4_GATE);
 800d984:	4b18      	ldr	r3, [pc, #96]	@ (800d9e8 <WashOrUniversal_Buffer_Pump_Function+0x74>)
 800d986:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d98a:	f001 fa8f 	bl	800eeac <Rising_Edge>
	delay_ms(volume);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f001 f99c 	bl	800eccc <delay_ms>
	Pump_Off(&WashandUniversalBuffer_Pump);
 800d994:	4813      	ldr	r0, [pc, #76]	@ (800d9e4 <WashOrUniversal_Buffer_Pump_Function+0x70>)
 800d996:	f7ff ffd5 	bl	800d944 <Pump_Off>
	Rising_Edge(P1_P4_GATE);
 800d99a:	4b13      	ldr	r3, [pc, #76]	@ (800d9e8 <WashOrUniversal_Buffer_Pump_Function+0x74>)
 800d99c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d9a0:	f001 fa84 	bl	800eeac <Rising_Edge>
	HAL_Delay(1000);
 800d9a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d9a8:	f001 fb62 	bl	800f070 <HAL_Delay>
	Pump_On(&WashandUniversalBuffer_Pump,ANTICLOCKWISE);
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	480d      	ldr	r0, [pc, #52]	@ (800d9e4 <WashOrUniversal_Buffer_Pump_Function+0x70>)
 800d9b0:	f7ff ff9a 	bl	800d8e8 <Pump_On>
	Rising_Edge(P1_P4_GATE);
 800d9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e8 <WashOrUniversal_Buffer_Pump_Function+0x74>)
 800d9b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d9ba:	f001 fa77 	bl	800eeac <Rising_Edge>
	delay_ms(PUMP_REVERSE_COUNT);
 800d9be:	2064      	movs	r0, #100	@ 0x64
 800d9c0:	f001 f984 	bl	800eccc <delay_ms>
	Pump_Off(&WashandUniversalBuffer_Pump);
 800d9c4:	4807      	ldr	r0, [pc, #28]	@ (800d9e4 <WashOrUniversal_Buffer_Pump_Function+0x70>)
 800d9c6:	f7ff ffbd 	bl	800d944 <Pump_Off>
	Rising_Edge(P1_P4_GATE);
 800d9ca:	4b07      	ldr	r3, [pc, #28]	@ (800d9e8 <WashOrUniversal_Buffer_Pump_Function+0x74>)
 800d9cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d9d0:	f001 fa6c 	bl	800eeac <Rising_Edge>
	HAL_Delay(300);
 800d9d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d9d8:	f001 fb4a 	bl	800f070 <HAL_Delay>
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20000228 	.word	0x20000228
 800d9e8:	20000258 	.word	0x20000258

0800d9ec <Waste_Pump_Function>:

void Waste_Pump_Function(unsigned int volume)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
	Valve_On(Waste_Outlet);
 800d9f4:	4b16      	ldr	r3, [pc, #88]	@ (800da50 <Waste_Pump_Function+0x64>)
 800d9f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d9fa:	f001 fa17 	bl	800ee2c <Valve_On>
	HAL_Delay(300);
 800d9fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800da02:	f001 fb35 	bl	800f070 <HAL_Delay>
	Pump_On(&Waste_RemovalPump,CLOCKWISE);
 800da06:	2100      	movs	r1, #0
 800da08:	4812      	ldr	r0, [pc, #72]	@ (800da54 <Waste_Pump_Function+0x68>)
 800da0a:	f7ff ff6d 	bl	800d8e8 <Pump_On>
	Rising_Edge(P1_P4_GATE);
 800da0e:	4b12      	ldr	r3, [pc, #72]	@ (800da58 <Waste_Pump_Function+0x6c>)
 800da10:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da14:	f001 fa4a 	bl	800eeac <Rising_Edge>
	HAL_Delay(volume);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f001 fb29 	bl	800f070 <HAL_Delay>
	Pump_Off(&Waste_RemovalPump);
 800da1e:	480d      	ldr	r0, [pc, #52]	@ (800da54 <Waste_Pump_Function+0x68>)
 800da20:	f7ff ff90 	bl	800d944 <Pump_Off>
	Rising_Edge(P1_P4_GATE);
 800da24:	4b0c      	ldr	r3, [pc, #48]	@ (800da58 <Waste_Pump_Function+0x6c>)
 800da26:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da2a:	f001 fa3f 	bl	800eeac <Rising_Edge>
	HAL_Delay(300);
 800da2e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800da32:	f001 fb1d 	bl	800f070 <HAL_Delay>
	Valve_Off(Waste_Outlet);
 800da36:	4b06      	ldr	r3, [pc, #24]	@ (800da50 <Waste_Pump_Function+0x64>)
 800da38:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da3c:	f001 fa06 	bl	800ee4c <Valve_Off>
	HAL_Delay(100);
 800da40:	2064      	movs	r0, #100	@ 0x64
 800da42:	f001 fb15 	bl	800f070 <HAL_Delay>

}
 800da46:	bf00      	nop
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20000250 	.word	0x20000250
 800da54:	20000238 	.word	0x20000238
 800da58:	20000258 	.word	0x20000258

0800da5c <Sensor_Read>:
 *  Created on: May 9, 2025
 *      Author: RAGHUL
 */
#include"sensors.h"

uint8_t Sensor_Read(Sensor sensor) {
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	463b      	mov	r3, r7
 800da64:	e883 0003 	stmia.w	r3, {r0, r1}
    return (!HAL_GPIO_ReadPin(sensor.port, sensor.pin)); //inverted the output because we want 1 when interuupted. To change at all instance we changed here
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	88ba      	ldrh	r2, [r7, #4]
 800da6c:	4611      	mov	r1, r2
 800da6e:	4618      	mov	r0, r3
 800da70:	f001 ff4e 	bl	800f910 <HAL_GPIO_ReadPin>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	bf0c      	ite	eq
 800da7a:	2301      	moveq	r3, #1
 800da7c:	2300      	movne	r3, #0
 800da7e:	b2db      	uxtb	r3, r3
}
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <Liquid_Sensor_Check>:

void Liquid_Sensor_Check(uint8_t sensor_no)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	4603      	mov	r3, r0
 800da90:	71fb      	strb	r3, [r7, #7]

    switch (sensor_no)
 800da92:	79fb      	ldrb	r3, [r7, #7]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d002      	beq.n	800da9e <Liquid_Sensor_Check+0x16>
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d00c      	beq.n	800dab6 <Liquid_Sensor_Check+0x2e>
               	  if(Sensor_Read(DI_Water_Sensor)==0)  putchr('M');
                   break;

        default:

            return;
 800da9c:	e01a      	b.n	800dad4 <Liquid_Sensor_Check+0x4c>
                if(Sensor_Read(WashOrUniversal_Buffer_Sensor)==0)  putchr('M');
 800da9e:	4b0f      	ldr	r3, [pc, #60]	@ (800dadc <Liquid_Sensor_Check+0x54>)
 800daa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800daa4:	f7ff ffda 	bl	800da5c <Sensor_Read>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10f      	bne.n	800dace <Liquid_Sensor_Check+0x46>
 800daae:	204d      	movs	r0, #77	@ 0x4d
 800dab0:	f001 f8e0 	bl	800ec74 <putchr>
                 break;
 800dab4:	e00b      	b.n	800dace <Liquid_Sensor_Check+0x46>
               	  if(Sensor_Read(DI_Water_Sensor)==0)  putchr('M');
 800dab6:	4b0a      	ldr	r3, [pc, #40]	@ (800dae0 <Liquid_Sensor_Check+0x58>)
 800dab8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dabc:	f7ff ffce 	bl	800da5c <Sensor_Read>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d105      	bne.n	800dad2 <Liquid_Sensor_Check+0x4a>
 800dac6:	204d      	movs	r0, #77	@ 0x4d
 800dac8:	f001 f8d4 	bl	800ec74 <putchr>
                   break;
 800dacc:	e001      	b.n	800dad2 <Liquid_Sensor_Check+0x4a>
                 break;
 800dace:	bf00      	nop
 800dad0:	e000      	b.n	800dad4 <Liquid_Sensor_Check+0x4c>
                   break;
 800dad2:	bf00      	nop
    }
}
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	200002b8 	.word	0x200002b8
 800dae0:	200002c0 	.word	0x200002c0

0800dae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800daea:	2300      	movs	r3, #0
 800daec:	607b      	str	r3, [r7, #4]
 800daee:	4b10      	ldr	r3, [pc, #64]	@ (800db30 <HAL_MspInit+0x4c>)
 800daf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daf2:	4a0f      	ldr	r2, [pc, #60]	@ (800db30 <HAL_MspInit+0x4c>)
 800daf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800daf8:	6453      	str	r3, [r2, #68]	@ 0x44
 800dafa:	4b0d      	ldr	r3, [pc, #52]	@ (800db30 <HAL_MspInit+0x4c>)
 800dafc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dafe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db02:	607b      	str	r3, [r7, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800db06:	2300      	movs	r3, #0
 800db08:	603b      	str	r3, [r7, #0]
 800db0a:	4b09      	ldr	r3, [pc, #36]	@ (800db30 <HAL_MspInit+0x4c>)
 800db0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db0e:	4a08      	ldr	r2, [pc, #32]	@ (800db30 <HAL_MspInit+0x4c>)
 800db10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db14:	6413      	str	r3, [r2, #64]	@ 0x40
 800db16:	4b06      	ldr	r3, [pc, #24]	@ (800db30 <HAL_MspInit+0x4c>)
 800db18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db1e:	603b      	str	r3, [r7, #0]
 800db20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800db22:	bf00      	nop
 800db24:	370c      	adds	r7, #12
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	40023800 	.word	0x40023800

0800db34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800db34:	b480      	push	{r7}
 800db36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800db38:	bf00      	nop
 800db3a:	e7fd      	b.n	800db38 <NMI_Handler+0x4>

0800db3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800db3c:	b480      	push	{r7}
 800db3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800db40:	bf00      	nop
 800db42:	e7fd      	b.n	800db40 <HardFault_Handler+0x4>

0800db44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800db44:	b480      	push	{r7}
 800db46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800db48:	bf00      	nop
 800db4a:	e7fd      	b.n	800db48 <MemManage_Handler+0x4>

0800db4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800db4c:	b480      	push	{r7}
 800db4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800db50:	bf00      	nop
 800db52:	e7fd      	b.n	800db50 <BusFault_Handler+0x4>

0800db54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800db54:	b480      	push	{r7}
 800db56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800db58:	bf00      	nop
 800db5a:	e7fd      	b.n	800db58 <UsageFault_Handler+0x4>

0800db5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800db5c:	b480      	push	{r7}
 800db5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800db60:	bf00      	nop
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800db6a:	b480      	push	{r7}
 800db6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800db6e:	bf00      	nop
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800db78:	b480      	push	{r7}
 800db7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800db7c:	bf00      	nop
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800db8a:	f001 fa51 	bl	800f030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800db8e:	bf00      	nop
 800db90:	bd80      	pop	{r7, pc}

0800db92 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800db96:	2040      	movs	r0, #64	@ 0x40
 800db98:	f001 feec 	bl	800f974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800db9c:	bf00      	nop
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800dba4:	4802      	ldr	r0, [pc, #8]	@ (800dbb0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800dba6:	f004 f8ab 	bl	8011d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800dbaa:	bf00      	nop
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	200006b0 	.word	0x200006b0

0800dbb4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800dbb8:	4802      	ldr	r0, [pc, #8]	@ (800dbc4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800dbba:	f004 f8a1 	bl	8011d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800dbbe:	bf00      	nop
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	200006f8 	.word	0x200006f8

0800dbc8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800dbcc:	4802      	ldr	r0, [pc, #8]	@ (800dbd8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800dbce:	f004 f897 	bl	8011d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800dbd2:	bf00      	nop
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20000740 	.word	0x20000740

0800dbdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800dbe0:	4802      	ldr	r0, [pc, #8]	@ (800dbec <TIM3_IRQHandler+0x10>)
 800dbe2:	f004 f88d 	bl	8011d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800dbe6:	bf00      	nop
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	200005d8 	.word	0x200005d8

0800dbf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800dbf4:	4802      	ldr	r0, [pc, #8]	@ (800dc00 <USART1_IRQHandler+0x10>)
 800dbf6:	f005 f989 	bl	8012f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800dbfa:	bf00      	nop
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20000860 	.word	0x20000860

0800dc04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800dc08:	4802      	ldr	r0, [pc, #8]	@ (800dc14 <USART3_IRQHandler+0x10>)
 800dc0a:	f005 f97f 	bl	8012f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800dc0e:	bf00      	nop
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	200008a8 	.word	0x200008a8

0800dc18 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800dc1c:	4802      	ldr	r0, [pc, #8]	@ (800dc28 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800dc1e:	f004 f86f 	bl	8011d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800dc22:	bf00      	nop
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	20000788 	.word	0x20000788

0800dc2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800dc30:	4802      	ldr	r0, [pc, #8]	@ (800dc3c <TIM5_IRQHandler+0x10>)
 800dc32:	f004 f865 	bl	8011d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800dc36:	bf00      	nop
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20000668 	.word	0x20000668

0800dc40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dc40:	b480      	push	{r7}
 800dc42:	af00      	add	r7, sp, #0
  return 1;
 800dc44:	2301      	movs	r3, #1
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <_kill>:

int _kill(int pid, int sig)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800dc5a:	f007 faa9 	bl	80151b0 <__errno>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2216      	movs	r2, #22
 800dc62:	601a      	str	r2, [r3, #0]
  return -1;
 800dc64:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <_exit>:

void _exit (int status)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dc78:	f04f 31ff 	mov.w	r1, #4294967295
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f7ff ffe7 	bl	800dc50 <_kill>
  while (1) {}    /* Make sure we hang here */
 800dc82:	bf00      	nop
 800dc84:	e7fd      	b.n	800dc82 <_exit+0x12>

0800dc86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b086      	sub	sp, #24
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	60f8      	str	r0, [r7, #12]
 800dc8e:	60b9      	str	r1, [r7, #8]
 800dc90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc92:	2300      	movs	r3, #0
 800dc94:	617b      	str	r3, [r7, #20]
 800dc96:	e00a      	b.n	800dcae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800dc98:	f3af 8000 	nop.w
 800dc9c:	4601      	mov	r1, r0
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	60ba      	str	r2, [r7, #8]
 800dca4:	b2ca      	uxtb	r2, r1
 800dca6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	617b      	str	r3, [r7, #20]
 800dcae:	697a      	ldr	r2, [r7, #20]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	dbf0      	blt.n	800dc98 <_read+0x12>
  }

  return len;
 800dcb6:	687b      	ldr	r3, [r7, #4]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3718      	adds	r7, #24
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
 800dcd0:	e009      	b.n	800dce6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	1c5a      	adds	r2, r3, #1
 800dcd6:	60ba      	str	r2, [r7, #8]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	3301      	adds	r3, #1
 800dce4:	617b      	str	r3, [r7, #20]
 800dce6:	697a      	ldr	r2, [r7, #20]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	dbf1      	blt.n	800dcd2 <_write+0x12>
  }
  return len;
 800dcee:	687b      	ldr	r3, [r7, #4]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3718      	adds	r7, #24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <_close>:

int _close(int file)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800dd00:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b083      	sub	sp, #12
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800dd20:	605a      	str	r2, [r3, #4]
  return 0;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <_isatty>:

int _isatty(int file)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800dd38:	2301      	movs	r3, #1
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dd46:	b480      	push	{r7}
 800dd48:	b085      	sub	sp, #20
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	60f8      	str	r0, [r7, #12]
 800dd4e:	60b9      	str	r1, [r7, #8]
 800dd50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dd52:	2300      	movs	r3, #0
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dd68:	4a14      	ldr	r2, [pc, #80]	@ (800ddbc <_sbrk+0x5c>)
 800dd6a:	4b15      	ldr	r3, [pc, #84]	@ (800ddc0 <_sbrk+0x60>)
 800dd6c:	1ad3      	subs	r3, r2, r3
 800dd6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dd74:	4b13      	ldr	r3, [pc, #76]	@ (800ddc4 <_sbrk+0x64>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d102      	bne.n	800dd82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dd7c:	4b11      	ldr	r3, [pc, #68]	@ (800ddc4 <_sbrk+0x64>)
 800dd7e:	4a12      	ldr	r2, [pc, #72]	@ (800ddc8 <_sbrk+0x68>)
 800dd80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dd82:	4b10      	ldr	r3, [pc, #64]	@ (800ddc4 <_sbrk+0x64>)
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4413      	add	r3, r2
 800dd8a:	693a      	ldr	r2, [r7, #16]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d207      	bcs.n	800dda0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dd90:	f007 fa0e 	bl	80151b0 <__errno>
 800dd94:	4603      	mov	r3, r0
 800dd96:	220c      	movs	r2, #12
 800dd98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dd9a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd9e:	e009      	b.n	800ddb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dda0:	4b08      	ldr	r3, [pc, #32]	@ (800ddc4 <_sbrk+0x64>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dda6:	4b07      	ldr	r3, [pc, #28]	@ (800ddc4 <_sbrk+0x64>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4413      	add	r3, r2
 800ddae:	4a05      	ldr	r2, [pc, #20]	@ (800ddc4 <_sbrk+0x64>)
 800ddb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	20020000 	.word	0x20020000
 800ddc0:	00000400 	.word	0x00000400
 800ddc4:	200005c8 	.word	0x200005c8
 800ddc8:	20000a40 	.word	0x20000a40

0800ddcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ddd0:	4b07      	ldr	r3, [pc, #28]	@ (800ddf0 <SystemInit+0x24>)
 800ddd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddd6:	4a06      	ldr	r2, [pc, #24]	@ (800ddf0 <SystemInit+0x24>)
 800ddd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800dde0:	4b03      	ldr	r3, [pc, #12]	@ (800ddf0 <SystemInit+0x24>)
 800dde2:	4a04      	ldr	r2, [pc, #16]	@ (800ddf4 <SystemInit+0x28>)
 800dde4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dde6:	bf00      	nop
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	e000ed00 	.word	0xe000ed00
 800ddf4:	08008000 	.word	0x08008000

0800ddf8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800ddfe:	f107 030c 	add.w	r3, r7, #12
 800de02:	2200      	movs	r2, #0
 800de04:	601a      	str	r2, [r3, #0]
 800de06:	605a      	str	r2, [r3, #4]
 800de08:	609a      	str	r2, [r3, #8]
 800de0a:	60da      	str	r2, [r3, #12]
 800de0c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de0e:	1d3b      	adds	r3, r7, #4
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800de16:	4b21      	ldr	r3, [pc, #132]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de18:	4a21      	ldr	r2, [pc, #132]	@ (800dea0 <MX_TIM3_Init+0xa8>)
 800de1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800de1c:	4b1f      	ldr	r3, [pc, #124]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de1e:	2200      	movs	r2, #0
 800de20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de22:	4b1e      	ldr	r3, [pc, #120]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de24:	2200      	movs	r2, #0
 800de26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800de28:	4b1c      	ldr	r3, [pc, #112]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800de2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de30:	4b1a      	ldr	r3, [pc, #104]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de32:	2200      	movs	r2, #0
 800de34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de36:	4b19      	ldr	r3, [pc, #100]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de38:	2200      	movs	r2, #0
 800de3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800de3c:	4817      	ldr	r0, [pc, #92]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de3e:	f003 fc77 	bl	8011730 <HAL_TIM_Base_Init>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800de48:	f7ff fd48 	bl	800d8dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800de4c:	2307      	movs	r3, #7
 800de4e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800de50:	2370      	movs	r3, #112	@ 0x70
 800de52:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800de54:	2300      	movs	r3, #0
 800de56:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800de58:	2300      	movs	r3, #0
 800de5a:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 2;
 800de5c:	2302      	movs	r3, #2
 800de5e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800de60:	f107 030c 	add.w	r3, r7, #12
 800de64:	4619      	mov	r1, r3
 800de66:	480d      	ldr	r0, [pc, #52]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de68:	f004 f9c3 	bl	80121f2 <HAL_TIM_SlaveConfigSynchro>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800de72:	f7ff fd33 	bl	800d8dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de76:	2300      	movs	r3, #0
 800de78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de7a:	2300      	movs	r3, #0
 800de7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800de7e:	1d3b      	adds	r3, r7, #4
 800de80:	4619      	mov	r1, r3
 800de82:	4806      	ldr	r0, [pc, #24]	@ (800de9c <MX_TIM3_Init+0xa4>)
 800de84:	f004 fe00 	bl	8012a88 <HAL_TIMEx_MasterConfigSynchronization>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800de8e:	f7ff fd25 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800de92:	bf00      	nop
 800de94:	3720      	adds	r7, #32
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	200005d8 	.word	0x200005d8
 800dea0:	40000400 	.word	0x40000400

0800dea4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800deaa:	f107 0308 	add.w	r3, r7, #8
 800deae:	2200      	movs	r2, #0
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	605a      	str	r2, [r3, #4]
 800deb4:	609a      	str	r2, [r3, #8]
 800deb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800deb8:	463b      	mov	r3, r7
 800deba:	2200      	movs	r2, #0
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800dec0:	4b1d      	ldr	r3, [pc, #116]	@ (800df38 <MX_TIM4_Init+0x94>)
 800dec2:	4a1e      	ldr	r2, [pc, #120]	@ (800df3c <MX_TIM4_Init+0x98>)
 800dec4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800dec6:	4b1c      	ldr	r3, [pc, #112]	@ (800df38 <MX_TIM4_Init+0x94>)
 800dec8:	2200      	movs	r2, #0
 800deca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800decc:	4b1a      	ldr	r3, [pc, #104]	@ (800df38 <MX_TIM4_Init+0x94>)
 800dece:	2200      	movs	r2, #0
 800ded0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800ded2:	4b19      	ldr	r3, [pc, #100]	@ (800df38 <MX_TIM4_Init+0x94>)
 800ded4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ded8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800deda:	4b17      	ldr	r3, [pc, #92]	@ (800df38 <MX_TIM4_Init+0x94>)
 800dedc:	2200      	movs	r2, #0
 800dede:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dee0:	4b15      	ldr	r3, [pc, #84]	@ (800df38 <MX_TIM4_Init+0x94>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800dee6:	4814      	ldr	r0, [pc, #80]	@ (800df38 <MX_TIM4_Init+0x94>)
 800dee8:	f003 fc22 	bl	8011730 <HAL_TIM_Base_Init>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800def2:	f7ff fcf3 	bl	800d8dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800def6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800defa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	4619      	mov	r1, r3
 800df02:	480d      	ldr	r0, [pc, #52]	@ (800df38 <MX_TIM4_Init+0x94>)
 800df04:	f004 f8ae 	bl	8012064 <HAL_TIM_ConfigClockSource>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d001      	beq.n	800df12 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800df0e:	f7ff fce5 	bl	800d8dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df12:	2300      	movs	r3, #0
 800df14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df16:	2300      	movs	r3, #0
 800df18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800df1a:	463b      	mov	r3, r7
 800df1c:	4619      	mov	r1, r3
 800df1e:	4806      	ldr	r0, [pc, #24]	@ (800df38 <MX_TIM4_Init+0x94>)
 800df20:	f004 fdb2 	bl	8012a88 <HAL_TIMEx_MasterConfigSynchronization>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800df2a:	f7ff fcd7 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800df2e:	bf00      	nop
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	20000620 	.word	0x20000620
 800df3c:	40000800 	.word	0x40000800

0800df40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08e      	sub	sp, #56	@ 0x38
 800df44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800df46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800df4a:	2200      	movs	r2, #0
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	605a      	str	r2, [r3, #4]
 800df50:	609a      	str	r2, [r3, #8]
 800df52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df54:	f107 0320 	add.w	r3, r7, #32
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df5e:	1d3b      	adds	r3, r7, #4
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]
 800df64:	605a      	str	r2, [r3, #4]
 800df66:	609a      	str	r2, [r3, #8]
 800df68:	60da      	str	r2, [r3, #12]
 800df6a:	611a      	str	r2, [r3, #16]
 800df6c:	615a      	str	r2, [r3, #20]
 800df6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800df70:	4b2c      	ldr	r3, [pc, #176]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800df72:	4a2d      	ldr	r2, [pc, #180]	@ (800e028 <MX_TIM5_Init+0xe8>)
 800df74:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800df76:	4b2b      	ldr	r3, [pc, #172]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800df78:	2200      	movs	r2, #0
 800df7a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df7c:	4b29      	ldr	r3, [pc, #164]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800df7e:	2200      	movs	r2, #0
 800df80:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800df82:	4b28      	ldr	r3, [pc, #160]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800df84:	f04f 32ff 	mov.w	r2, #4294967295
 800df88:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df8a:	4b26      	ldr	r3, [pc, #152]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df90:	4b24      	ldr	r3, [pc, #144]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800df92:	2200      	movs	r2, #0
 800df94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800df96:	4823      	ldr	r0, [pc, #140]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800df98:	f003 fbca 	bl	8011730 <HAL_TIM_Base_Init>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800dfa2:	f7ff fc9b 	bl	800d8dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dfa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800dfac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	481c      	ldr	r0, [pc, #112]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800dfb4:	f004 f856 	bl	8012064 <HAL_TIM_ConfigClockSource>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800dfbe:	f7ff fc8d 	bl	800d8dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800dfc2:	4818      	ldr	r0, [pc, #96]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800dfc4:	f003 fd0b 	bl	80119de <HAL_TIM_PWM_Init>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800dfce:	f7ff fc85 	bl	800d8dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dfda:	f107 0320 	add.w	r3, r7, #32
 800dfde:	4619      	mov	r1, r3
 800dfe0:	4810      	ldr	r0, [pc, #64]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800dfe2:	f004 fd51 	bl	8012a88 <HAL_TIMEx_MasterConfigSynchronization>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d001      	beq.n	800dff0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800dfec:	f7ff fc76 	bl	800d8dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dff0:	2360      	movs	r3, #96	@ 0x60
 800dff2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800dff4:	2300      	movs	r3, #0
 800dff6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dff8:	2300      	movs	r3, #0
 800dffa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e000:	1d3b      	adds	r3, r7, #4
 800e002:	2208      	movs	r2, #8
 800e004:	4619      	mov	r1, r3
 800e006:	4807      	ldr	r0, [pc, #28]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800e008:	f003 ff6a 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800e012:	f7ff fc63 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e016:	4803      	ldr	r0, [pc, #12]	@ (800e024 <MX_TIM5_Init+0xe4>)
 800e018:	f000 faaa 	bl	800e570 <HAL_TIM_MspPostInit>

}
 800e01c:	bf00      	nop
 800e01e:	3738      	adds	r7, #56	@ 0x38
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	20000668 	.word	0x20000668
 800e028:	40000c00 	.word	0x40000c00

0800e02c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08c      	sub	sp, #48	@ 0x30
 800e030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e032:	f107 0320 	add.w	r3, r7, #32
 800e036:	2200      	movs	r2, #0
 800e038:	601a      	str	r2, [r3, #0]
 800e03a:	605a      	str	r2, [r3, #4]
 800e03c:	609a      	str	r2, [r3, #8]
 800e03e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e040:	1d3b      	adds	r3, r7, #4
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	605a      	str	r2, [r3, #4]
 800e048:	609a      	str	r2, [r3, #8]
 800e04a:	60da      	str	r2, [r3, #12]
 800e04c:	611a      	str	r2, [r3, #16]
 800e04e:	615a      	str	r2, [r3, #20]
 800e050:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800e052:	4b25      	ldr	r3, [pc, #148]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e054:	4a25      	ldr	r2, [pc, #148]	@ (800e0ec <MX_TIM9_Init+0xc0>)
 800e056:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800e058:	4b23      	ldr	r3, [pc, #140]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e05e:	4b22      	ldr	r3, [pc, #136]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e060:	2200      	movs	r2, #0
 800e062:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800e064:	4b20      	ldr	r3, [pc, #128]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e066:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e06a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e06c:	4b1e      	ldr	r3, [pc, #120]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e06e:	2200      	movs	r2, #0
 800e070:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e072:	4b1d      	ldr	r3, [pc, #116]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e074:	2200      	movs	r2, #0
 800e076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800e078:	481b      	ldr	r0, [pc, #108]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e07a:	f003 fb59 	bl	8011730 <HAL_TIM_Base_Init>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800e084:	f7ff fc2a 	bl	800d8dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e08c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800e08e:	f107 0320 	add.w	r3, r7, #32
 800e092:	4619      	mov	r1, r3
 800e094:	4814      	ldr	r0, [pc, #80]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e096:	f003 ffe5 	bl	8012064 <HAL_TIM_ConfigClockSource>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800e0a0:	f7ff fc1c 	bl	800d8dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800e0a4:	4810      	ldr	r0, [pc, #64]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e0a6:	f003 fc9a 	bl	80119de <HAL_TIM_PWM_Init>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800e0b0:	f7ff fc14 	bl	800d8dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e0b4:	2360      	movs	r3, #96	@ 0x60
 800e0b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e0c4:	1d3b      	adds	r3, r7, #4
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	4807      	ldr	r0, [pc, #28]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e0cc:	f003 ff08 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800e0d6:	f7ff fc01 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800e0da:	4803      	ldr	r0, [pc, #12]	@ (800e0e8 <MX_TIM9_Init+0xbc>)
 800e0dc:	f000 fa48 	bl	800e570 <HAL_TIM_MspPostInit>

}
 800e0e0:	bf00      	nop
 800e0e2:	3730      	adds	r7, #48	@ 0x30
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	200006b0 	.word	0x200006b0
 800e0ec:	40014000 	.word	0x40014000

0800e0f0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800e0f6:	1d3b      	adds	r3, r7, #4
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	605a      	str	r2, [r3, #4]
 800e0fe:	609a      	str	r2, [r3, #8]
 800e100:	60da      	str	r2, [r3, #12]
 800e102:	611a      	str	r2, [r3, #16]
 800e104:	615a      	str	r2, [r3, #20]
 800e106:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800e108:	4b1e      	ldr	r3, [pc, #120]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e10a:	4a1f      	ldr	r2, [pc, #124]	@ (800e188 <MX_TIM10_Init+0x98>)
 800e10c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84;
 800e10e:	4b1d      	ldr	r3, [pc, #116]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e110:	2254      	movs	r2, #84	@ 0x54
 800e112:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e114:	4b1b      	ldr	r3, [pc, #108]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e116:	2200      	movs	r2, #0
 800e118:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800e11a:	4b1a      	ldr	r3, [pc, #104]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e11c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e120:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e122:	4b18      	ldr	r3, [pc, #96]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e124:	2200      	movs	r2, #0
 800e126:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e128:	4b16      	ldr	r3, [pc, #88]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e12a:	2280      	movs	r2, #128	@ 0x80
 800e12c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800e12e:	4815      	ldr	r0, [pc, #84]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e130:	f003 fafe 	bl	8011730 <HAL_TIM_Base_Init>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800e13a:	f7ff fbcf 	bl	800d8dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800e13e:	4811      	ldr	r0, [pc, #68]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e140:	f003 fc4d 	bl	80119de <HAL_TIM_PWM_Init>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800e14a:	f7ff fbc7 	bl	800d8dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e14e:	2360      	movs	r3, #96	@ 0x60
 800e150:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e152:	2300      	movs	r3, #0
 800e154:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e156:	2300      	movs	r3, #0
 800e158:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e15a:	2300      	movs	r3, #0
 800e15c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e15e:	1d3b      	adds	r3, r7, #4
 800e160:	2200      	movs	r2, #0
 800e162:	4619      	mov	r1, r3
 800e164:	4807      	ldr	r0, [pc, #28]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e166:	f003 febb 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d001      	beq.n	800e174 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800e170:	f7ff fbb4 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800e174:	4803      	ldr	r0, [pc, #12]	@ (800e184 <MX_TIM10_Init+0x94>)
 800e176:	f000 f9fb 	bl	800e570 <HAL_TIM_MspPostInit>

}
 800e17a:	bf00      	nop
 800e17c:	3720      	adds	r7, #32
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	200006f8 	.word	0x200006f8
 800e188:	40014400 	.word	0x40014400

0800e18c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b088      	sub	sp, #32
 800e190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800e192:	1d3b      	adds	r3, r7, #4
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
 800e198:	605a      	str	r2, [r3, #4]
 800e19a:	609a      	str	r2, [r3, #8]
 800e19c:	60da      	str	r2, [r3, #12]
 800e19e:	611a      	str	r2, [r3, #16]
 800e1a0:	615a      	str	r2, [r3, #20]
 800e1a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800e1a4:	4b1e      	ldr	r3, [pc, #120]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e1a6:	4a1f      	ldr	r2, [pc, #124]	@ (800e224 <MX_TIM11_Init+0x98>)
 800e1a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84;
 800e1aa:	4b1d      	ldr	r3, [pc, #116]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e1ac:	2254      	movs	r2, #84	@ 0x54
 800e1ae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e1b0:	4b1b      	ldr	r3, [pc, #108]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 800e1b6:	4b1a      	ldr	r3, [pc, #104]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e1b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800e1bc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e1be:	4b18      	ldr	r3, [pc, #96]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e1c4:	4b16      	ldr	r3, [pc, #88]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e1c6:	2280      	movs	r2, #128	@ 0x80
 800e1c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800e1ca:	4815      	ldr	r0, [pc, #84]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e1cc:	f003 fab0 	bl	8011730 <HAL_TIM_Base_Init>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800e1d6:	f7ff fb81 	bl	800d8dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800e1da:	4811      	ldr	r0, [pc, #68]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e1dc:	f003 fbff 	bl	80119de <HAL_TIM_PWM_Init>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800e1e6:	f7ff fb79 	bl	800d8dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e1ea:	2360      	movs	r3, #96	@ 0x60
 800e1ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e1fa:	1d3b      	adds	r3, r7, #4
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	4619      	mov	r1, r3
 800e200:	4807      	ldr	r0, [pc, #28]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e202:	f003 fe6d 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800e20c:	f7ff fb66 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800e210:	4803      	ldr	r0, [pc, #12]	@ (800e220 <MX_TIM11_Init+0x94>)
 800e212:	f000 f9ad 	bl	800e570 <HAL_TIM_MspPostInit>

}
 800e216:	bf00      	nop
 800e218:	3720      	adds	r7, #32
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	20000740 	.word	0x20000740
 800e224:	40014800 	.word	0x40014800

0800e228 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08c      	sub	sp, #48	@ 0x30
 800e22c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e22e:	f107 0320 	add.w	r3, r7, #32
 800e232:	2200      	movs	r2, #0
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	605a      	str	r2, [r3, #4]
 800e238:	609a      	str	r2, [r3, #8]
 800e23a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e23c:	1d3b      	adds	r3, r7, #4
 800e23e:	2200      	movs	r2, #0
 800e240:	601a      	str	r2, [r3, #0]
 800e242:	605a      	str	r2, [r3, #4]
 800e244:	609a      	str	r2, [r3, #8]
 800e246:	60da      	str	r2, [r3, #12]
 800e248:	611a      	str	r2, [r3, #16]
 800e24a:	615a      	str	r2, [r3, #20]
 800e24c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800e24e:	4b2b      	ldr	r3, [pc, #172]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e250:	4a2b      	ldr	r2, [pc, #172]	@ (800e300 <MX_TIM12_Init+0xd8>)
 800e252:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800e254:	4b29      	ldr	r3, [pc, #164]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e256:	2200      	movs	r2, #0
 800e258:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e25a:	4b28      	ldr	r3, [pc, #160]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800e260:	4b26      	ldr	r3, [pc, #152]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e266:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e268:	4b24      	ldr	r3, [pc, #144]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e26e:	4b23      	ldr	r3, [pc, #140]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e270:	2200      	movs	r2, #0
 800e272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800e274:	4821      	ldr	r0, [pc, #132]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e276:	f003 fa5b 	bl	8011730 <HAL_TIM_Base_Init>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d001      	beq.n	800e284 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800e280:	f7ff fb2c 	bl	800d8dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e288:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800e28a:	f107 0320 	add.w	r3, r7, #32
 800e28e:	4619      	mov	r1, r3
 800e290:	481a      	ldr	r0, [pc, #104]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e292:	f003 fee7 	bl	8012064 <HAL_TIM_ConfigClockSource>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800e29c:	f7ff fb1e 	bl	800d8dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800e2a0:	4816      	ldr	r0, [pc, #88]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e2a2:	f003 fb9c 	bl	80119de <HAL_TIM_PWM_Init>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d001      	beq.n	800e2b0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800e2ac:	f7ff fb16 	bl	800d8dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e2b0:	2360      	movs	r3, #96	@ 0x60
 800e2b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e2c0:	1d3b      	adds	r3, r7, #4
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	480d      	ldr	r0, [pc, #52]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e2c8:	f003 fe0a 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800e2d2:	f7ff fb03 	bl	800d8dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e2d6:	1d3b      	adds	r3, r7, #4
 800e2d8:	2204      	movs	r2, #4
 800e2da:	4619      	mov	r1, r3
 800e2dc:	4807      	ldr	r0, [pc, #28]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e2de:	f003 fdff 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 800e2e8:	f7ff faf8 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800e2ec:	4803      	ldr	r0, [pc, #12]	@ (800e2fc <MX_TIM12_Init+0xd4>)
 800e2ee:	f000 f93f 	bl	800e570 <HAL_TIM_MspPostInit>

}
 800e2f2:	bf00      	nop
 800e2f4:	3730      	adds	r7, #48	@ 0x30
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20000788 	.word	0x20000788
 800e300:	40001800 	.word	0x40001800

0800e304 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800e308:	4b0e      	ldr	r3, [pc, #56]	@ (800e344 <MX_TIM13_Init+0x40>)
 800e30a:	4a0f      	ldr	r2, [pc, #60]	@ (800e348 <MX_TIM13_Init+0x44>)
 800e30c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800e30e:	4b0d      	ldr	r3, [pc, #52]	@ (800e344 <MX_TIM13_Init+0x40>)
 800e310:	2200      	movs	r2, #0
 800e312:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e314:	4b0b      	ldr	r3, [pc, #44]	@ (800e344 <MX_TIM13_Init+0x40>)
 800e316:	2200      	movs	r2, #0
 800e318:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800e31a:	4b0a      	ldr	r3, [pc, #40]	@ (800e344 <MX_TIM13_Init+0x40>)
 800e31c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e320:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e322:	4b08      	ldr	r3, [pc, #32]	@ (800e344 <MX_TIM13_Init+0x40>)
 800e324:	2200      	movs	r2, #0
 800e326:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e328:	4b06      	ldr	r3, [pc, #24]	@ (800e344 <MX_TIM13_Init+0x40>)
 800e32a:	2200      	movs	r2, #0
 800e32c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800e32e:	4805      	ldr	r0, [pc, #20]	@ (800e344 <MX_TIM13_Init+0x40>)
 800e330:	f003 f9fe 	bl	8011730 <HAL_TIM_Base_Init>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800e33a:	f7ff facf 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800e33e:	bf00      	nop
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	200007d0 	.word	0x200007d0
 800e348:	40001c00 	.word	0x40001c00

0800e34c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b090      	sub	sp, #64	@ 0x40
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e354:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e358:	2200      	movs	r2, #0
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	605a      	str	r2, [r3, #4]
 800e35e:	609a      	str	r2, [r3, #8]
 800e360:	60da      	str	r2, [r3, #12]
 800e362:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a77      	ldr	r2, [pc, #476]	@ (800e548 <HAL_TIM_Base_MspInit+0x1fc>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d134      	bne.n	800e3d8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e36e:	2300      	movs	r3, #0
 800e370:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e372:	4b76      	ldr	r3, [pc, #472]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e376:	4a75      	ldr	r2, [pc, #468]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e378:	f043 0302 	orr.w	r3, r3, #2
 800e37c:	6413      	str	r3, [r2, #64]	@ 0x40
 800e37e:	4b73      	ldr	r3, [pc, #460]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e382:	f003 0302 	and.w	r3, r3, #2
 800e386:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e388:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e38a:	2300      	movs	r3, #0
 800e38c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e38e:	4b6f      	ldr	r3, [pc, #444]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e392:	4a6e      	ldr	r2, [pc, #440]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e394:	f043 0308 	orr.w	r3, r3, #8
 800e398:	6313      	str	r3, [r2, #48]	@ 0x30
 800e39a:	4b6c      	ldr	r3, [pc, #432]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e39e:	f003 0308 	and.w	r3, r3, #8
 800e3a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PD2     ------> TIM3_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e3a6:	2304      	movs	r3, #4
 800e3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e3b6:	2302      	movs	r3, #2
 800e3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e3ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e3be:	4619      	mov	r1, r3
 800e3c0:	4863      	ldr	r0, [pc, #396]	@ (800e550 <HAL_TIM_Base_MspInit+0x204>)
 800e3c2:	f001 f81d 	bl	800f400 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	201d      	movs	r0, #29
 800e3cc:	f000 ff4f 	bl	800f26e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e3d0:	201d      	movs	r0, #29
 800e3d2:	f000 ff68 	bl	800f2a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800e3d6:	e0b2      	b.n	800e53e <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM4)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a5d      	ldr	r2, [pc, #372]	@ (800e554 <HAL_TIM_Base_MspInit+0x208>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d10e      	bne.n	800e400 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	623b      	str	r3, [r7, #32]
 800e3e6:	4b59      	ldr	r3, [pc, #356]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ea:	4a58      	ldr	r2, [pc, #352]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e3ec:	f043 0304 	orr.w	r3, r3, #4
 800e3f0:	6413      	str	r3, [r2, #64]	@ 0x40
 800e3f2:	4b56      	ldr	r3, [pc, #344]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3f6:	f003 0304 	and.w	r3, r3, #4
 800e3fa:	623b      	str	r3, [r7, #32]
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
}
 800e3fe:	e09e      	b.n	800e53e <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM5)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a54      	ldr	r2, [pc, #336]	@ (800e558 <HAL_TIM_Base_MspInit+0x20c>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d116      	bne.n	800e438 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e40a:	2300      	movs	r3, #0
 800e40c:	61fb      	str	r3, [r7, #28]
 800e40e:	4b4f      	ldr	r3, [pc, #316]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e412:	4a4e      	ldr	r2, [pc, #312]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e414:	f043 0308 	orr.w	r3, r3, #8
 800e418:	6413      	str	r3, [r2, #64]	@ 0x40
 800e41a:	4b4c      	ldr	r3, [pc, #304]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e41c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e41e:	f003 0308 	and.w	r3, r3, #8
 800e422:	61fb      	str	r3, [r7, #28]
 800e424:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800e426:	2200      	movs	r2, #0
 800e428:	2100      	movs	r1, #0
 800e42a:	2032      	movs	r0, #50	@ 0x32
 800e42c:	f000 ff1f 	bl	800f26e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800e430:	2032      	movs	r0, #50	@ 0x32
 800e432:	f000 ff38 	bl	800f2a6 <HAL_NVIC_EnableIRQ>
}
 800e436:	e082      	b.n	800e53e <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM9)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a47      	ldr	r2, [pc, #284]	@ (800e55c <HAL_TIM_Base_MspInit+0x210>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d116      	bne.n	800e470 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800e442:	2300      	movs	r3, #0
 800e444:	61bb      	str	r3, [r7, #24]
 800e446:	4b41      	ldr	r3, [pc, #260]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e44a:	4a40      	ldr	r2, [pc, #256]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e44c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e450:	6453      	str	r3, [r2, #68]	@ 0x44
 800e452:	4b3e      	ldr	r3, [pc, #248]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e45a:	61bb      	str	r3, [r7, #24]
 800e45c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800e45e:	2200      	movs	r2, #0
 800e460:	2100      	movs	r1, #0
 800e462:	2018      	movs	r0, #24
 800e464:	f000 ff03 	bl	800f26e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800e468:	2018      	movs	r0, #24
 800e46a:	f000 ff1c 	bl	800f2a6 <HAL_NVIC_EnableIRQ>
}
 800e46e:	e066      	b.n	800e53e <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM10)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a3a      	ldr	r2, [pc, #232]	@ (800e560 <HAL_TIM_Base_MspInit+0x214>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d116      	bne.n	800e4a8 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800e47a:	2300      	movs	r3, #0
 800e47c:	617b      	str	r3, [r7, #20]
 800e47e:	4b33      	ldr	r3, [pc, #204]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e482:	4a32      	ldr	r2, [pc, #200]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e488:	6453      	str	r3, [r2, #68]	@ 0x44
 800e48a:	4b30      	ldr	r3, [pc, #192]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e48e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e492:	617b      	str	r3, [r7, #20]
 800e494:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800e496:	2200      	movs	r2, #0
 800e498:	2100      	movs	r1, #0
 800e49a:	2019      	movs	r0, #25
 800e49c:	f000 fee7 	bl	800f26e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e4a0:	2019      	movs	r0, #25
 800e4a2:	f000 ff00 	bl	800f2a6 <HAL_NVIC_EnableIRQ>
}
 800e4a6:	e04a      	b.n	800e53e <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM11)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a2d      	ldr	r2, [pc, #180]	@ (800e564 <HAL_TIM_Base_MspInit+0x218>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d116      	bne.n	800e4e0 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	613b      	str	r3, [r7, #16]
 800e4b6:	4b25      	ldr	r3, [pc, #148]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ba:	4a24      	ldr	r2, [pc, #144]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e4bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e4c0:	6453      	str	r3, [r2, #68]	@ 0x44
 800e4c2:	4b22      	ldr	r3, [pc, #136]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e4c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e4ca:	613b      	str	r3, [r7, #16]
 800e4cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	201a      	movs	r0, #26
 800e4d4:	f000 fecb 	bl	800f26e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800e4d8:	201a      	movs	r0, #26
 800e4da:	f000 fee4 	bl	800f2a6 <HAL_NVIC_EnableIRQ>
}
 800e4de:	e02e      	b.n	800e53e <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM12)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a20      	ldr	r2, [pc, #128]	@ (800e568 <HAL_TIM_Base_MspInit+0x21c>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d116      	bne.n	800e518 <HAL_TIM_Base_MspInit+0x1cc>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	4b17      	ldr	r3, [pc, #92]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4f2:	4a16      	ldr	r2, [pc, #88]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800e4fa:	4b14      	ldr	r3, [pc, #80]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e502:	60fb      	str	r3, [r7, #12]
 800e504:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800e506:	2200      	movs	r2, #0
 800e508:	2100      	movs	r1, #0
 800e50a:	202b      	movs	r0, #43	@ 0x2b
 800e50c:	f000 feaf 	bl	800f26e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800e510:	202b      	movs	r0, #43	@ 0x2b
 800e512:	f000 fec8 	bl	800f2a6 <HAL_NVIC_EnableIRQ>
}
 800e516:	e012      	b.n	800e53e <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM13)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a13      	ldr	r2, [pc, #76]	@ (800e56c <HAL_TIM_Base_MspInit+0x220>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d10d      	bne.n	800e53e <HAL_TIM_Base_MspInit+0x1f2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800e522:	2300      	movs	r3, #0
 800e524:	60bb      	str	r3, [r7, #8]
 800e526:	4b09      	ldr	r3, [pc, #36]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e52a:	4a08      	ldr	r2, [pc, #32]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e52c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e530:	6413      	str	r3, [r2, #64]	@ 0x40
 800e532:	4b06      	ldr	r3, [pc, #24]	@ (800e54c <HAL_TIM_Base_MspInit+0x200>)
 800e534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e53a:	60bb      	str	r3, [r7, #8]
 800e53c:	68bb      	ldr	r3, [r7, #8]
}
 800e53e:	bf00      	nop
 800e540:	3740      	adds	r7, #64	@ 0x40
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	40000400 	.word	0x40000400
 800e54c:	40023800 	.word	0x40023800
 800e550:	40020c00 	.word	0x40020c00
 800e554:	40000800 	.word	0x40000800
 800e558:	40000c00 	.word	0x40000c00
 800e55c:	40014000 	.word	0x40014000
 800e560:	40014400 	.word	0x40014400
 800e564:	40014800 	.word	0x40014800
 800e568:	40001800 	.word	0x40001800
 800e56c:	40001c00 	.word	0x40001c00

0800e570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08c      	sub	sp, #48	@ 0x30
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e578:	f107 031c 	add.w	r3, r7, #28
 800e57c:	2200      	movs	r2, #0
 800e57e:	601a      	str	r2, [r3, #0]
 800e580:	605a      	str	r2, [r3, #4]
 800e582:	609a      	str	r2, [r3, #8]
 800e584:	60da      	str	r2, [r3, #12]
 800e586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a5b      	ldr	r2, [pc, #364]	@ (800e6fc <HAL_TIM_MspPostInit+0x18c>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d11e      	bne.n	800e5d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e592:	2300      	movs	r3, #0
 800e594:	61bb      	str	r3, [r7, #24]
 800e596:	4b5a      	ldr	r3, [pc, #360]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e59a:	4a59      	ldr	r2, [pc, #356]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e59c:	f043 0301 	orr.w	r3, r3, #1
 800e5a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800e5a2:	4b57      	ldr	r3, [pc, #348]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	61bb      	str	r3, [r7, #24]
 800e5ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e5ae:	2304      	movs	r3, #4
 800e5b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5b2:	2302      	movs	r3, #2
 800e5b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e5be:	2302      	movs	r3, #2
 800e5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5c2:	f107 031c 	add.w	r3, r7, #28
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	484e      	ldr	r0, [pc, #312]	@ (800e704 <HAL_TIM_MspPostInit+0x194>)
 800e5ca:	f000 ff19 	bl	800f400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800e5ce:	e091      	b.n	800e6f4 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM9)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4a4c      	ldr	r2, [pc, #304]	@ (800e708 <HAL_TIM_MspPostInit+0x198>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d11e      	bne.n	800e618 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e5da:	2300      	movs	r3, #0
 800e5dc:	617b      	str	r3, [r7, #20]
 800e5de:	4b48      	ldr	r3, [pc, #288]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5e2:	4a47      	ldr	r2, [pc, #284]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e5e4:	f043 0310 	orr.w	r3, r3, #16
 800e5e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800e5ea:	4b45      	ldr	r3, [pc, #276]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e5ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5ee:	f003 0310 	and.w	r3, r3, #16
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e5f6:	2320      	movs	r3, #32
 800e5f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5fa:	2302      	movs	r3, #2
 800e5fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e602:	2300      	movs	r3, #0
 800e604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800e606:	2303      	movs	r3, #3
 800e608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e60a:	f107 031c 	add.w	r3, r7, #28
 800e60e:	4619      	mov	r1, r3
 800e610:	483e      	ldr	r0, [pc, #248]	@ (800e70c <HAL_TIM_MspPostInit+0x19c>)
 800e612:	f000 fef5 	bl	800f400 <HAL_GPIO_Init>
}
 800e616:	e06d      	b.n	800e6f4 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM10)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a3c      	ldr	r2, [pc, #240]	@ (800e710 <HAL_TIM_MspPostInit+0x1a0>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d11f      	bne.n	800e662 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e622:	2300      	movs	r3, #0
 800e624:	613b      	str	r3, [r7, #16]
 800e626:	4b36      	ldr	r3, [pc, #216]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e62a:	4a35      	ldr	r2, [pc, #212]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e62c:	f043 0302 	orr.w	r3, r3, #2
 800e630:	6313      	str	r3, [r2, #48]	@ 0x30
 800e632:	4b33      	ldr	r3, [pc, #204]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e636:	f003 0302 	and.w	r3, r3, #2
 800e63a:	613b      	str	r3, [r7, #16]
 800e63c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800e63e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e644:	2302      	movs	r3, #2
 800e646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e648:	2300      	movs	r3, #0
 800e64a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e64c:	2300      	movs	r3, #0
 800e64e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800e650:	2303      	movs	r3, #3
 800e652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e654:	f107 031c 	add.w	r3, r7, #28
 800e658:	4619      	mov	r1, r3
 800e65a:	482e      	ldr	r0, [pc, #184]	@ (800e714 <HAL_TIM_MspPostInit+0x1a4>)
 800e65c:	f000 fed0 	bl	800f400 <HAL_GPIO_Init>
}
 800e660:	e048      	b.n	800e6f4 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM11)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	4a2c      	ldr	r2, [pc, #176]	@ (800e718 <HAL_TIM_MspPostInit+0x1a8>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d11f      	bne.n	800e6ac <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e66c:	2300      	movs	r3, #0
 800e66e:	60fb      	str	r3, [r7, #12]
 800e670:	4b23      	ldr	r3, [pc, #140]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e674:	4a22      	ldr	r2, [pc, #136]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e676:	f043 0302 	orr.w	r3, r3, #2
 800e67a:	6313      	str	r3, [r2, #48]	@ 0x30
 800e67c:	4b20      	ldr	r3, [pc, #128]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e67e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e680:	f003 0302 	and.w	r3, r3, #2
 800e684:	60fb      	str	r3, [r7, #12]
 800e686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e68c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e68e:	2302      	movs	r3, #2
 800e690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e692:	2300      	movs	r3, #0
 800e694:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e696:	2300      	movs	r3, #0
 800e698:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800e69a:	2303      	movs	r3, #3
 800e69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e69e:	f107 031c 	add.w	r3, r7, #28
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	481b      	ldr	r0, [pc, #108]	@ (800e714 <HAL_TIM_MspPostInit+0x1a4>)
 800e6a6:	f000 feab 	bl	800f400 <HAL_GPIO_Init>
}
 800e6aa:	e023      	b.n	800e6f4 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM12)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a1a      	ldr	r2, [pc, #104]	@ (800e71c <HAL_TIM_MspPostInit+0x1ac>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d11e      	bne.n	800e6f4 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	60bb      	str	r3, [r7, #8]
 800e6ba:	4b11      	ldr	r3, [pc, #68]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6be:	4a10      	ldr	r2, [pc, #64]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e6c0:	f043 0302 	orr.w	r3, r3, #2
 800e6c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800e6c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e700 <HAL_TIM_MspPostInit+0x190>)
 800e6c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ca:	f003 0302 	and.w	r3, r3, #2
 800e6ce:	60bb      	str	r3, [r7, #8]
 800e6d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e6d2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800e6d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6d8:	2302      	movs	r3, #2
 800e6da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800e6e4:	2309      	movs	r3, #9
 800e6e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e6e8:	f107 031c 	add.w	r3, r7, #28
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4809      	ldr	r0, [pc, #36]	@ (800e714 <HAL_TIM_MspPostInit+0x1a4>)
 800e6f0:	f000 fe86 	bl	800f400 <HAL_GPIO_Init>
}
 800e6f4:	bf00      	nop
 800e6f6:	3730      	adds	r7, #48	@ 0x30
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	40000c00 	.word	0x40000c00
 800e700:	40023800 	.word	0x40023800
 800e704:	40020000 	.word	0x40020000
 800e708:	40014000 	.word	0x40014000
 800e70c:	40021000 	.word	0x40021000
 800e710:	40014400 	.word	0x40014400
 800e714:	40020400 	.word	0x40020400
 800e718:	40014800 	.word	0x40014800
 800e71c:	40001800 	.word	0x40001800

0800e720 <Start_PWM>:
 * @param  frequency   Desired PWM frequency (Hz)
 * @param  duty_cycle  Duty cycle (0 to 100%)
 * @param  num_pulses  Number of PWM pulses to generate
 */
void Start_PWM(TIM_HandleTypeDef* htim, uint32_t channel, uint32_t frequency, uint32_t duty_cycle, uint32_t num_pulses)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
 800e72c:	603b      	str	r3, [r7, #0]
    uint32_t timer_clk = 84000000; // APB1 timer clock (adjust if using a different timer clock)
 800e72e:	4b2e      	ldr	r3, [pc, #184]	@ (800e7e8 <Start_PWM+0xc8>)
 800e730:	61fb      	str	r3, [r7, #28]
    uint32_t prescaler = 84 - 1;   // Timer tick = 1 MHz
 800e732:	2353      	movs	r3, #83	@ 0x53
 800e734:	61bb      	str	r3, [r7, #24]
    uint32_t period = (timer_clk / ((prescaler + 1) * frequency)) - 1;
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	3301      	adds	r3, #1
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	fb02 f303 	mul.w	r3, r2, r3
 800e740:	69fa      	ldr	r2, [r7, #28]
 800e742:	fbb2 f3f3 	udiv	r3, r2, r3
 800e746:	3b01      	subs	r3, #1
 800e748:	617b      	str	r3, [r7, #20]
    uint32_t pulse = (period * duty_cycle) / 100;
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	683a      	ldr	r2, [r7, #0]
 800e74e:	fb02 f303 	mul.w	r3, r2, r3
 800e752:	4a26      	ldr	r2, [pc, #152]	@ (800e7ec <Start_PWM+0xcc>)
 800e754:	fba2 2303 	umull	r2, r3, r2, r3
 800e758:	095b      	lsrs	r3, r3, #5
 800e75a:	613b      	str	r3, [r7, #16]

    __HAL_TIM_SET_PRESCALER(htim, prescaler);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	69ba      	ldr	r2, [r7, #24]
 800e762:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(htim, period);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	697a      	ldr	r2, [r7, #20]
 800e76a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d104      	bne.n	800e782 <Start_PWM+0x62>
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	693a      	ldr	r2, [r7, #16]
 800e77e:	635a      	str	r2, [r3, #52]	@ 0x34
 800e780:	e013      	b.n	800e7aa <Start_PWM+0x8a>
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	2b04      	cmp	r3, #4
 800e786:	d104      	bne.n	800e792 <Start_PWM+0x72>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	6393      	str	r3, [r2, #56]	@ 0x38
 800e790:	e00b      	b.n	800e7aa <Start_PWM+0x8a>
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b08      	cmp	r3, #8
 800e796:	d104      	bne.n	800e7a2 <Start_PWM+0x82>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800e7a0:	e003      	b.n	800e7aa <Start_PWM+0x8a>
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	6413      	str	r3, [r2, #64]	@ 0x40

    target_pulses = num_pulses;
 800e7aa:	4a11      	ldr	r2, [pc, #68]	@ (800e7f0 <Start_PWM+0xd0>)
 800e7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ae:	6013      	str	r3, [r2, #0]
    pulse_count = 0;
 800e7b0:	4b10      	ldr	r3, [pc, #64]	@ (800e7f4 <Start_PWM+0xd4>)
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	601a      	str	r2, [r3, #0]

    __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f06f 0201 	mvn.w	r2, #1
 800e7be:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68da      	ldr	r2, [r3, #12]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f042 0201 	orr.w	r2, r2, #1
 800e7ce:	60da      	str	r2, [r3, #12]
    HAL_TIM_PWM_Start(htim, channel);
 800e7d0:	68b9      	ldr	r1, [r7, #8]
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f003 f95c 	bl	8011a90 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start(htim);
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f002 fff9 	bl	80117d0 <HAL_TIM_Base_Start>
}
 800e7de:	bf00      	nop
 800e7e0:	3720      	adds	r7, #32
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	0501bd00 	.word	0x0501bd00
 800e7ec:	51eb851f 	.word	0x51eb851f
 800e7f0:	200005d0 	.word	0x200005d0
 800e7f4:	200005cc 	.word	0x200005cc

0800e7f8 <Stop_PWM>:
 *         This parameter can be one of the following values:
 *         TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4
 * @retval None
 */
void Stop_PWM(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Stop(htim, channel);
 800e802:	6839      	ldr	r1, [r7, #0]
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f003 fa0b 	bl	8011c20 <HAL_TIM_PWM_Stop>
    HAL_TIM_Base_Stop_IT(htim); // Stop interrupt
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f003 f8b8 	bl	8011980 <HAL_TIM_Base_Stop_IT>
}
 800e810:	bf00      	nop
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <HAL_TIM_PeriodElapsedCallback>:
 *         - Calculates time difference (handle overflow)
 *         - Computes frequency
 *         - Performs optional software averaging
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
//		        Read_Frequency_TIM4_CH1();
//		        HAL_UART_Transmit(&huart3, (uint8_t *)"e\n",1, 100);
//
//	}

	if (htim->Instance == TIM3) {
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a40      	ldr	r2, [pc, #256]	@ (800e928 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d104      	bne.n	800e834 <HAL_TIM_PeriodElapsedCallback+0x1c>
		tim3_overflow++; // This increments on every timer overflow (count wraps)
 800e82a:	4b40      	ldr	r3, [pc, #256]	@ (800e92c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3301      	adds	r3, #1
 800e830:	4a3e      	ldr	r2, [pc, #248]	@ (800e92c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800e832:	6013      	str	r3, [r2, #0]
	}


    if (htim->Instance == TIM2)  // Timeout occurred
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e83c:	d114      	bne.n	800e868 <HAL_TIM_PeriodElapsedCallback+0x50>
        {
            receptionActive = 0;
 800e83e:	4b3c      	ldr	r3, [pc, #240]	@ (800e930 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800e840:	2200      	movs	r2, #0
 800e842:	701a      	strb	r2, [r3, #0]
            rxIndex = 0;
 800e844:	4b3b      	ldr	r3, [pc, #236]	@ (800e934 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800e846:	2200      	movs	r2, #0
 800e848:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, strlen((const char *)rxBuffer), 100);
 800e84a:	483b      	ldr	r0, [pc, #236]	@ (800e938 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800e84c:	f7f9 fd40 	bl	80082d0 <strlen>
 800e850:	4603      	mov	r3, r0
 800e852:	b29a      	uxth	r2, r3
 800e854:	2364      	movs	r3, #100	@ 0x64
 800e856:	4938      	ldr	r1, [pc, #224]	@ (800e938 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800e858:	4838      	ldr	r0, [pc, #224]	@ (800e93c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800e85a:	f004 f9f5 	bl	8012c48 <HAL_UART_Transmit>
            memset(rxBuffer, 0, sizeof(rxBuffer)); // Clear buffer
 800e85e:	2232      	movs	r2, #50	@ 0x32
 800e860:	2100      	movs	r1, #0
 800e862:	4835      	ldr	r0, [pc, #212]	@ (800e938 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800e864:	f006 fc22 	bl	80150ac <memset>
     //      HAL_UART_Transmit(&huart3, (uint8_t *)"Incomplete Command\n",19, I2C_Delay_Ms);


  //          HAL_TIM_Base_Stop_IT(&htim2);  // Stop the timeout timer
        }
        if (htim->Instance == TIM12) {
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a34      	ldr	r2, [pc, #208]	@ (800e940 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d11e      	bne.n	800e8b0 <HAL_TIM_PeriodElapsedCallback+0x98>
        	 pulse_count++;
 800e872:	4b34      	ldr	r3, [pc, #208]	@ (800e944 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	3301      	adds	r3, #1
 800e878:	4a32      	ldr	r2, [pc, #200]	@ (800e944 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800e87a:	6013      	str	r3, [r2, #0]
        	 if((Sensor_Read(Rocking_Home_Sensor)==1)) home_cnt++;
 800e87c:	4b32      	ldr	r3, [pc, #200]	@ (800e948 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800e87e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e882:	f7ff f8eb 	bl	800da5c <Sensor_Read>
 800e886:	4603      	mov	r3, r0
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d104      	bne.n	800e896 <HAL_TIM_PeriodElapsedCallback+0x7e>
 800e88c:	4b2f      	ldr	r3, [pc, #188]	@ (800e94c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	3301      	adds	r3, #1
 800e892:	4a2e      	ldr	r2, [pc, #184]	@ (800e94c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800e894:	6013      	str	r3, [r2, #0]
        	 if((Sensor_Read(Rocking_Plate_Sensor)==0))   plate_cnt++;
 800e896:	4b2e      	ldr	r3, [pc, #184]	@ (800e950 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800e898:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e89c:	f7ff f8de 	bl	800da5c <Sensor_Read>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d104      	bne.n	800e8b0 <HAL_TIM_PeriodElapsedCallback+0x98>
 800e8a6:	4b2b      	ldr	r3, [pc, #172]	@ (800e954 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	4a29      	ldr	r2, [pc, #164]	@ (800e954 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800e8ae:	6013      	str	r3, [r2, #0]

       //         Send_Count(pulse_count);
           //   HAL_UART_Transmit(&huart3, (uint8_t *)"d\n",1, 100);
          //      Sensor_Sensed++;
            }
        if (htim->Instance == TIM9) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a28      	ldr	r2, [pc, #160]	@ (800e958 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d11e      	bne.n	800e8f8 <HAL_TIM_PeriodElapsedCallback+0xe0>
                pulse_count++;
 800e8ba:	4b22      	ldr	r3, [pc, #136]	@ (800e944 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	4a20      	ldr	r2, [pc, #128]	@ (800e944 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800e8c2:	6013      	str	r3, [r2, #0]
      //          Send_Count(pulse_count);
                if((Sensor_Read(Rocking_Home_Sensor)==1)) home_cnt++;
 800e8c4:	4b20      	ldr	r3, [pc, #128]	@ (800e948 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800e8c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8ca:	f7ff f8c7 	bl	800da5c <Sensor_Read>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d104      	bne.n	800e8de <HAL_TIM_PeriodElapsedCallback+0xc6>
 800e8d4:	4b1d      	ldr	r3, [pc, #116]	@ (800e94c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	4a1c      	ldr	r2, [pc, #112]	@ (800e94c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800e8dc:	6013      	str	r3, [r2, #0]
                if((Sensor_Read(Rocking_Plate_Sensor)==0))   plate_cnt++;
 800e8de:	4b1c      	ldr	r3, [pc, #112]	@ (800e950 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800e8e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e8e4:	f7ff f8ba 	bl	800da5c <Sensor_Read>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d104      	bne.n	800e8f8 <HAL_TIM_PeriodElapsedCallback+0xe0>
 800e8ee:	4b19      	ldr	r3, [pc, #100]	@ (800e954 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	4a17      	ldr	r2, [pc, #92]	@ (800e954 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800e8f6:	6013      	str	r3, [r2, #0]
               // HAL_UART_Transmit(&huart3, (uint8_t *)"a\n",1, 100);
            }
        if (htim->Instance == TIM10) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a17      	ldr	r2, [pc, #92]	@ (800e95c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d104      	bne.n	800e90c <HAL_TIM_PeriodElapsedCallback+0xf4>
                   pulse_count++; // Increment pulse counter
 800e902:	4b10      	ldr	r3, [pc, #64]	@ (800e944 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	3301      	adds	r3, #1
 800e908:	4a0e      	ldr	r2, [pc, #56]	@ (800e944 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800e90a:	6013      	str	r3, [r2, #0]
          //         Send_Count(pulse_count);
          //         HAL_UART_Transmit(&huart3, (uint8_t *)"b\n",1, 100);

               }
        if (htim->Instance == TIM11) {                      //PROBE AND NOZZLE IN 4, NOZZLE IN 8 AND 16
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a13      	ldr	r2, [pc, #76]	@ (800e960 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d104      	bne.n	800e920 <HAL_TIM_PeriodElapsedCallback+0x108>
               pulse_count++; // Increment pulse counter
 800e916:	4b0b      	ldr	r3, [pc, #44]	@ (800e944 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	3301      	adds	r3, #1
 800e91c:	4a09      	ldr	r2, [pc, #36]	@ (800e944 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800e91e:	6013      	str	r3, [r2, #0]
       //        HAL_UART_Transmit(&huart3, (uint8_t *)"c\n",1, 100);

           }


}
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	40000400 	.word	0x40000400
 800e92c:	200005d4 	.word	0x200005d4
 800e930:	20000560 	.word	0x20000560
 800e934:	2000055f 	.word	0x2000055f
 800e938:	200004f8 	.word	0x200004f8
 800e93c:	200008a8 	.word	0x200008a8
 800e940:	40001800 	.word	0x40001800
 800e944:	200005cc 	.word	0x200005cc
 800e948:	200002a0 	.word	0x200002a0
 800e94c:	200004e8 	.word	0x200004e8
 800e950:	200002a8 	.word	0x200002a8
 800e954:	200004e4 	.word	0x200004e4
 800e958:	40014000 	.word	0x40014000
 800e95c:	40014400 	.word	0x40014400
 800e960:	40014800 	.word	0x40014800

0800e964 <HAL_TIM_IC_CaptureCallback>:
//	          }
//	      }
//}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
  {
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
//	  putchr('a');
      if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a19      	ldr	r2, [pc, #100]	@ (800e9d8 <HAL_TIM_IC_CaptureCallback+0x74>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d12c      	bne.n	800e9d0 <HAL_TIM_IC_CaptureCallback+0x6c>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	7f1b      	ldrb	r3, [r3, #28]
 800e97a:	2b08      	cmp	r3, #8
 800e97c:	d128      	bne.n	800e9d0 <HAL_TIM_IC_CaptureCallback+0x6c>
      {
    //	  putchr('b');
          if (capture_ready == 0)
 800e97e:	4b17      	ldr	r3, [pc, #92]	@ (800e9dc <HAL_TIM_IC_CaptureCallback+0x78>)
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	b2db      	uxtb	r3, r3
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10f      	bne.n	800e9a8 <HAL_TIM_IC_CaptureCallback+0x44>
          {
              capture_val_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800e988:	210c      	movs	r1, #12
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f003 fc74 	bl	8012278 <HAL_TIM_ReadCapturedValue>
 800e990:	4603      	mov	r3, r0
 800e992:	4a13      	ldr	r2, [pc, #76]	@ (800e9e0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800e994:	6013      	str	r3, [r2, #0]
              last_capture_tick = HAL_GetTick();
 800e996:	f000 fb5f 	bl	800f058 <HAL_GetTick>
 800e99a:	4603      	mov	r3, r0
 800e99c:	4a11      	ldr	r2, [pc, #68]	@ (800e9e4 <HAL_TIM_IC_CaptureCallback+0x80>)
 800e99e:	6013      	str	r3, [r2, #0]
              capture_ready = 1;
 800e9a0:	4b0e      	ldr	r3, [pc, #56]	@ (800e9dc <HAL_TIM_IC_CaptureCallback+0x78>)
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	701a      	strb	r2, [r3, #0]
              last_capture_tick = HAL_GetTick();
              capture_ready = 2;
        //      putchr('d');
          }
      }
  }
 800e9a6:	e013      	b.n	800e9d0 <HAL_TIM_IC_CaptureCallback+0x6c>
          else if (capture_ready == 1)
 800e9a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e9dc <HAL_TIM_IC_CaptureCallback+0x78>)
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d10e      	bne.n	800e9d0 <HAL_TIM_IC_CaptureCallback+0x6c>
              capture_val_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800e9b2:	210c      	movs	r1, #12
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f003 fc5f 	bl	8012278 <HAL_TIM_ReadCapturedValue>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e9e8 <HAL_TIM_IC_CaptureCallback+0x84>)
 800e9be:	6013      	str	r3, [r2, #0]
              last_capture_tick = HAL_GetTick();
 800e9c0:	f000 fb4a 	bl	800f058 <HAL_GetTick>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	4a07      	ldr	r2, [pc, #28]	@ (800e9e4 <HAL_TIM_IC_CaptureCallback+0x80>)
 800e9c8:	6013      	str	r3, [r2, #0]
              capture_ready = 2;
 800e9ca:	4b04      	ldr	r3, [pc, #16]	@ (800e9dc <HAL_TIM_IC_CaptureCallback+0x78>)
 800e9cc:	2202      	movs	r2, #2
 800e9ce:	701a      	strb	r2, [r3, #0]
  }
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	40010000 	.word	0x40010000
 800e9dc:	2000056c 	.word	0x2000056c
 800e9e0:	20000564 	.word	0x20000564
 800e9e4:	20000570 	.word	0x20000570
 800e9e8:	20000568 	.word	0x20000568

0800e9ec <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800e9f0:	4b11      	ldr	r3, [pc, #68]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800e9f2:	4a12      	ldr	r2, [pc, #72]	@ (800ea3c <MX_UART4_Init+0x50>)
 800e9f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e9f6:	4b10      	ldr	r3, [pc, #64]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800e9f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800e9fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800ea00:	2200      	movs	r2, #0
 800ea02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ea04:	4b0c      	ldr	r3, [pc, #48]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800ea0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ea10:	4b09      	ldr	r3, [pc, #36]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800ea12:	220c      	movs	r2, #12
 800ea14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ea16:	4b08      	ldr	r3, [pc, #32]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800ea18:	2200      	movs	r2, #0
 800ea1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ea1c:	4b06      	ldr	r3, [pc, #24]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ea22:	4805      	ldr	r0, [pc, #20]	@ (800ea38 <MX_UART4_Init+0x4c>)
 800ea24:	f004 f8c0 	bl	8012ba8 <HAL_UART_Init>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d001      	beq.n	800ea32 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800ea2e:	f7fe ff55 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800ea32:	bf00      	nop
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	20000818 	.word	0x20000818
 800ea3c:	40004c00 	.word	0x40004c00

0800ea40 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ea44:	4b11      	ldr	r3, [pc, #68]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea46:	4a12      	ldr	r2, [pc, #72]	@ (800ea90 <MX_USART1_UART_Init+0x50>)
 800ea48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ea4a:	4b10      	ldr	r3, [pc, #64]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ea50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ea52:	4b0e      	ldr	r3, [pc, #56]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ea58:	4b0c      	ldr	r3, [pc, #48]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ea5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ea64:	4b09      	ldr	r3, [pc, #36]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea66:	220c      	movs	r2, #12
 800ea68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ea6a:	4b08      	ldr	r3, [pc, #32]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ea70:	4b06      	ldr	r3, [pc, #24]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ea76:	4805      	ldr	r0, [pc, #20]	@ (800ea8c <MX_USART1_UART_Init+0x4c>)
 800ea78:	f004 f896 	bl	8012ba8 <HAL_UART_Init>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d001      	beq.n	800ea86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ea82:	f7fe ff2b 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ea86:	bf00      	nop
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20000860 	.word	0x20000860
 800ea90:	40011000 	.word	0x40011000

0800ea94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ea98:	4b11      	ldr	r3, [pc, #68]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800ea9a:	4a12      	ldr	r2, [pc, #72]	@ (800eae4 <MX_USART3_UART_Init+0x50>)
 800ea9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800ea9e:	4b10      	ldr	r3, [pc, #64]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800eaa0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800eaa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800eaa6:	4b0e      	ldr	r3, [pc, #56]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800eaac:	4b0c      	ldr	r3, [pc, #48]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800eaae:	2200      	movs	r2, #0
 800eab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800eab2:	4b0b      	ldr	r3, [pc, #44]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800eab8:	4b09      	ldr	r3, [pc, #36]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800eaba:	220c      	movs	r2, #12
 800eabc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eabe:	4b08      	ldr	r3, [pc, #32]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800eac4:	4b06      	ldr	r3, [pc, #24]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800eac6:	2200      	movs	r2, #0
 800eac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800eaca:	4805      	ldr	r0, [pc, #20]	@ (800eae0 <MX_USART3_UART_Init+0x4c>)
 800eacc:	f004 f86c 	bl	8012ba8 <HAL_UART_Init>
 800ead0:	4603      	mov	r3, r0
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d001      	beq.n	800eada <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800ead6:	f7fe ff01 	bl	800d8dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800eada:	bf00      	nop
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	200008a8 	.word	0x200008a8
 800eae4:	40004800 	.word	0x40004800

0800eae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b08e      	sub	sp, #56	@ 0x38
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eaf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	605a      	str	r2, [r3, #4]
 800eafa:	609a      	str	r2, [r3, #8]
 800eafc:	60da      	str	r2, [r3, #12]
 800eafe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a54      	ldr	r2, [pc, #336]	@ (800ec58 <HAL_UART_MspInit+0x170>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d12d      	bne.n	800eb66 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	623b      	str	r3, [r7, #32]
 800eb0e:	4b53      	ldr	r3, [pc, #332]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb12:	4a52      	ldr	r2, [pc, #328]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb18:	6413      	str	r3, [r2, #64]	@ 0x40
 800eb1a:	4b50      	ldr	r3, [pc, #320]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800eb22:	623b      	str	r3, [r7, #32]
 800eb24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eb26:	2300      	movs	r3, #0
 800eb28:	61fb      	str	r3, [r7, #28]
 800eb2a:	4b4c      	ldr	r3, [pc, #304]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb2e:	4a4b      	ldr	r2, [pc, #300]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb30:	f043 0304 	orr.w	r3, r3, #4
 800eb34:	6313      	str	r3, [r2, #48]	@ 0x30
 800eb36:	4b49      	ldr	r3, [pc, #292]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb3a:	f003 0304 	and.w	r3, r3, #4
 800eb3e:	61fb      	str	r3, [r7, #28]
 800eb40:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800eb42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800eb46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb48:	2302      	movs	r3, #2
 800eb4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb50:	2303      	movs	r3, #3
 800eb52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800eb54:	2308      	movs	r3, #8
 800eb56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eb58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	4840      	ldr	r0, [pc, #256]	@ (800ec60 <HAL_UART_MspInit+0x178>)
 800eb60:	f000 fc4e 	bl	800f400 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800eb64:	e074      	b.n	800ec50 <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==USART1)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a3e      	ldr	r2, [pc, #248]	@ (800ec64 <HAL_UART_MspInit+0x17c>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d135      	bne.n	800ebdc <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800eb70:	2300      	movs	r3, #0
 800eb72:	61bb      	str	r3, [r7, #24]
 800eb74:	4b39      	ldr	r3, [pc, #228]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb78:	4a38      	ldr	r2, [pc, #224]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb7a:	f043 0310 	orr.w	r3, r3, #16
 800eb7e:	6453      	str	r3, [r2, #68]	@ 0x44
 800eb80:	4b36      	ldr	r3, [pc, #216]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb84:	f003 0310 	and.w	r3, r3, #16
 800eb88:	61bb      	str	r3, [r7, #24]
 800eb8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	617b      	str	r3, [r7, #20]
 800eb90:	4b32      	ldr	r3, [pc, #200]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb94:	4a31      	ldr	r2, [pc, #196]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb96:	f043 0301 	orr.w	r3, r3, #1
 800eb9a:	6313      	str	r3, [r2, #48]	@ 0x30
 800eb9c:	4b2f      	ldr	r3, [pc, #188]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800eb9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eba0:	f003 0301 	and.w	r3, r3, #1
 800eba4:	617b      	str	r3, [r7, #20]
 800eba6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800eba8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800ebac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebae:	2302      	movs	r3, #2
 800ebb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebb6:	2303      	movs	r3, #3
 800ebb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ebba:	2307      	movs	r3, #7
 800ebbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ebbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	4828      	ldr	r0, [pc, #160]	@ (800ec68 <HAL_UART_MspInit+0x180>)
 800ebc6:	f000 fc1b 	bl	800f400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ebca:	2200      	movs	r2, #0
 800ebcc:	2100      	movs	r1, #0
 800ebce:	2025      	movs	r0, #37	@ 0x25
 800ebd0:	f000 fb4d 	bl	800f26e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ebd4:	2025      	movs	r0, #37	@ 0x25
 800ebd6:	f000 fb66 	bl	800f2a6 <HAL_NVIC_EnableIRQ>
}
 800ebda:	e039      	b.n	800ec50 <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==USART3)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a22      	ldr	r2, [pc, #136]	@ (800ec6c <HAL_UART_MspInit+0x184>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d134      	bne.n	800ec50 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	613b      	str	r3, [r7, #16]
 800ebea:	4b1c      	ldr	r3, [pc, #112]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800ebec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebee:	4a1b      	ldr	r2, [pc, #108]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800ebf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ebf4:	6413      	str	r3, [r2, #64]	@ 0x40
 800ebf6:	4b19      	ldr	r3, [pc, #100]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800ebf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ebfe:	613b      	str	r3, [r7, #16]
 800ec00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ec02:	2300      	movs	r3, #0
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	4b15      	ldr	r3, [pc, #84]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800ec08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec0a:	4a14      	ldr	r2, [pc, #80]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800ec0c:	f043 0308 	orr.w	r3, r3, #8
 800ec10:	6313      	str	r3, [r2, #48]	@ 0x30
 800ec12:	4b12      	ldr	r3, [pc, #72]	@ (800ec5c <HAL_UART_MspInit+0x174>)
 800ec14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec16:	f003 0308 	and.w	r3, r3, #8
 800ec1a:	60fb      	str	r3, [r7, #12]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ec1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ec22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec24:	2302      	movs	r3, #2
 800ec26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ec30:	2307      	movs	r3, #7
 800ec32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ec34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec38:	4619      	mov	r1, r3
 800ec3a:	480d      	ldr	r0, [pc, #52]	@ (800ec70 <HAL_UART_MspInit+0x188>)
 800ec3c:	f000 fbe0 	bl	800f400 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ec40:	2200      	movs	r2, #0
 800ec42:	2100      	movs	r1, #0
 800ec44:	2027      	movs	r0, #39	@ 0x27
 800ec46:	f000 fb12 	bl	800f26e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ec4a:	2027      	movs	r0, #39	@ 0x27
 800ec4c:	f000 fb2b 	bl	800f2a6 <HAL_NVIC_EnableIRQ>
}
 800ec50:	bf00      	nop
 800ec52:	3738      	adds	r7, #56	@ 0x38
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	40004c00 	.word	0x40004c00
 800ec5c:	40023800 	.word	0x40023800
 800ec60:	40020800 	.word	0x40020800
 800ec64:	40011000 	.word	0x40011000
 800ec68:	40020000 	.word	0x40020000
 800ec6c:	40004800 	.word	0x40004800
 800ec70:	40020c00 	.word	0x40020c00

0800ec74 <putchr>:
  }
}

/* USER CODE BEGIN 1 */
void putchr(char senddata)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3,(uint8_t *)&senddata ,1, HAL_MAX_DELAY);
 800ec7e:	1df9      	adds	r1, r7, #7
 800ec80:	f04f 33ff 	mov.w	r3, #4294967295
 800ec84:	2201      	movs	r2, #1
 800ec86:	4803      	ldr	r0, [pc, #12]	@ (800ec94 <putchr+0x20>)
 800ec88:	f003 ffde 	bl	8012c48 <HAL_UART_Transmit>
}
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	200008a8 	.word	0x200008a8

0800ec98 <putstr>:
void putstr(char *senddata)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart3,(uint8_t *)&senddata ,1, HAL_MAX_DELAY);
	 while (*senddata) {  // Loop until the string reaches the null terminator
 800eca0:	e009      	b.n	800ecb6 <putstr+0x1e>
	        HAL_UART_Transmit(&huart3, (uint8_t*)senddata, 1, HAL_MAX_DELAY); // Send 1 byte at a time
 800eca2:	f04f 33ff 	mov.w	r3, #4294967295
 800eca6:	2201      	movs	r2, #1
 800eca8:	6879      	ldr	r1, [r7, #4]
 800ecaa:	4807      	ldr	r0, [pc, #28]	@ (800ecc8 <putstr+0x30>)
 800ecac:	f003 ffcc 	bl	8012c48 <HAL_UART_Transmit>
	        senddata++; // Move to the next character in the string
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	607b      	str	r3, [r7, #4]
	 while (*senddata) {  // Loop until the string reaches the null terminator
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1f1      	bne.n	800eca2 <putstr+0xa>
	    }
}
 800ecbe:	bf00      	nop
 800ecc0:	bf00      	nop
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	200008a8 	.word	0x200008a8

0800eccc <delay_ms>:
    char msg[64];
    snprintf(msg, sizeof(msg), "Frequency: %lu Hz\r\n", freq);
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}
void delay_ms(unsigned int time)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 f9cb 	bl	800f070 <HAL_Delay>
}
 800ecda:	bf00      	nop
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
	...

0800ece4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a45      	ldr	r2, [pc, #276]	@ (800ee08 <HAL_UART_RxCpltCallback+0x124>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	f040 8084 	bne.w	800ee00 <HAL_UART_RxCpltCallback+0x11c>
		{
			// Case 1: New command start condition
			if (!receptionActive && !commandDetected)
 800ecf8:	4b44      	ldr	r3, [pc, #272]	@ (800ee0c <HAL_UART_RxCpltCallback+0x128>)
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d11a      	bne.n	800ed38 <HAL_UART_RxCpltCallback+0x54>
 800ed02:	4b43      	ldr	r3, [pc, #268]	@ (800ee10 <HAL_UART_RxCpltCallback+0x12c>)
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d116      	bne.n	800ed38 <HAL_UART_RxCpltCallback+0x54>
			{
				if (rxByte == '!')
 800ed0a:	4b42      	ldr	r3, [pc, #264]	@ (800ee14 <HAL_UART_RxCpltCallback+0x130>)
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	2b21      	cmp	r3, #33	@ 0x21
 800ed10:	d171      	bne.n	800edf6 <HAL_UART_RxCpltCallback+0x112>
				{
					receptionActive = 1;
 800ed12:	4b3e      	ldr	r3, [pc, #248]	@ (800ee0c <HAL_UART_RxCpltCallback+0x128>)
 800ed14:	2201      	movs	r2, #1
 800ed16:	701a      	strb	r2, [r3, #0]
					rxIndex = 0;
 800ed18:	4b3f      	ldr	r3, [pc, #252]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	701a      	strb	r2, [r3, #0]
					rxBuffer[rxIndex++] = rxByte;
 800ed1e:	4b3e      	ldr	r3, [pc, #248]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	1c5a      	adds	r2, r3, #1
 800ed26:	b2d1      	uxtb	r1, r2
 800ed28:	4a3b      	ldr	r2, [pc, #236]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800ed2a:	7011      	strb	r1, [r2, #0]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	4b39      	ldr	r3, [pc, #228]	@ (800ee14 <HAL_UART_RxCpltCallback+0x130>)
 800ed30:	7819      	ldrb	r1, [r3, #0]
 800ed32:	4b3a      	ldr	r3, [pc, #232]	@ (800ee1c <HAL_UART_RxCpltCallback+0x138>)
 800ed34:	5499      	strb	r1, [r3, r2]
				if (rxByte == '!')
 800ed36:	e05e      	b.n	800edf6 <HAL_UART_RxCpltCallback+0x112>
			//		HAL_TIM_Base_Start_IT(&htim2);  // Start timeout timer
				}
			}
			// Case 2: Still processing previous command – discard incoming '!' if any
			else if (!receptionActive && commandDetected)
 800ed38:	4b34      	ldr	r3, [pc, #208]	@ (800ee0c <HAL_UART_RxCpltCallback+0x128>)
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10d      	bne.n	800ed5e <HAL_UART_RxCpltCallback+0x7a>
 800ed42:	4b33      	ldr	r3, [pc, #204]	@ (800ee10 <HAL_UART_RxCpltCallback+0x12c>)
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d009      	beq.n	800ed5e <HAL_UART_RxCpltCallback+0x7a>
			{
				if (rxByte == '!')
 800ed4a:	4b32      	ldr	r3, [pc, #200]	@ (800ee14 <HAL_UART_RxCpltCallback+0x130>)
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	2b21      	cmp	r3, #33	@ 0x21
 800ed50:	d151      	bne.n	800edf6 <HAL_UART_RxCpltCallback+0x112>
				{
					// Discard this stray '!' received while busy
					 HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 800ed52:	2201      	movs	r2, #1
 800ed54:	492f      	ldr	r1, [pc, #188]	@ (800ee14 <HAL_UART_RxCpltCallback+0x130>)
 800ed56:	4832      	ldr	r0, [pc, #200]	@ (800ee20 <HAL_UART_RxCpltCallback+0x13c>)
 800ed58:	f004 f801 	bl	8012d5e <HAL_UART_Receive_IT>
					return;
 800ed5c:	e050      	b.n	800ee00 <HAL_UART_RxCpltCallback+0x11c>
				}
			}
			// Case 3: Command reception in progress
			else if (receptionActive)
 800ed5e:	4b2b      	ldr	r3, [pc, #172]	@ (800ee0c <HAL_UART_RxCpltCallback+0x128>)
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d046      	beq.n	800edf6 <HAL_UART_RxCpltCallback+0x112>
			{
				if (rxIndex < RX_BUFFER_SIZE - 1)
 800ed68:	4b2b      	ldr	r3, [pc, #172]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	2b30      	cmp	r3, #48	@ 0x30
 800ed70:	d82f      	bhi.n	800edd2 <HAL_UART_RxCpltCallback+0xee>
				{
					rxBuffer[rxIndex++] = rxByte;
 800ed72:	4b29      	ldr	r3, [pc, #164]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	1c5a      	adds	r2, r3, #1
 800ed7a:	b2d1      	uxtb	r1, r2
 800ed7c:	4a26      	ldr	r2, [pc, #152]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800ed7e:	7011      	strb	r1, [r2, #0]
 800ed80:	461a      	mov	r2, r3
 800ed82:	4b24      	ldr	r3, [pc, #144]	@ (800ee14 <HAL_UART_RxCpltCallback+0x130>)
 800ed84:	7819      	ldrb	r1, [r3, #0]
 800ed86:	4b25      	ldr	r3, [pc, #148]	@ (800ee1c <HAL_UART_RxCpltCallback+0x138>)
 800ed88:	5499      	strb	r1, [r3, r2]

					if (rxByte == ')')
 800ed8a:	4b22      	ldr	r3, [pc, #136]	@ (800ee14 <HAL_UART_RxCpltCallback+0x130>)
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	2b29      	cmp	r3, #41	@ 0x29
 800ed90:	d131      	bne.n	800edf6 <HAL_UART_RxCpltCallback+0x112>
					{
						HAL_UART_AbortReceive_IT(&huart3);
 800ed92:	4823      	ldr	r0, [pc, #140]	@ (800ee20 <HAL_UART_RxCpltCallback+0x13c>)
 800ed94:	f004 f808 	bl	8012da8 <HAL_UART_AbortReceive_IT>
				//		HAL_TIM_Base_Stop_IT(&htim2);  // Stop timeout timer

						commandDetected = 1;
 800ed98:	4b1d      	ldr	r3, [pc, #116]	@ (800ee10 <HAL_UART_RxCpltCallback+0x12c>)
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	701a      	strb	r2, [r3, #0]
						rxBuffer[rxIndex] = '\0';  // Null-terminate
 800ed9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	461a      	mov	r2, r3
 800eda6:	4b1d      	ldr	r3, [pc, #116]	@ (800ee1c <HAL_UART_RxCpltCallback+0x138>)
 800eda8:	2100      	movs	r1, #0
 800edaa:	5499      	strb	r1, [r3, r2]
	//					HAL_UART_Transmit(&huart3, (uint8_t *)"Received command\n", strlen("Received command\n"), HAL_MAX_DELAY);
	//					HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, strlen((const char *)rxBuffer), HAL_MAX_DELAY);

						strcpy(command, (char *)rxBuffer);
 800edac:	491b      	ldr	r1, [pc, #108]	@ (800ee1c <HAL_UART_RxCpltCallback+0x138>)
 800edae:	481d      	ldr	r0, [pc, #116]	@ (800ee24 <HAL_UART_RxCpltCallback+0x140>)
 800edb0:	f006 fa2b 	bl	801520a <strcpy>
	//					HAL_UART_Transmit(&huart3, (uint8_t *)rxBuffer, strlen((const char *)rxBuffer), HAL_MAX_DELAY);
	//					HAL_UART_Transmit(&huart3, (uint8_t *)"After copying command is\n", strlen("After copying command is\n"), HAL_MAX_DELAY);
	//					HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen((const char *)command), HAL_MAX_DELAY);

						// Clear buffer, reset states
						memset(rxBuffer, 0, sizeof(rxBuffer));
 800edb4:	2232      	movs	r2, #50	@ 0x32
 800edb6:	2100      	movs	r1, #0
 800edb8:	4818      	ldr	r0, [pc, #96]	@ (800ee1c <HAL_UART_RxCpltCallback+0x138>)
 800edba:	f006 f977 	bl	80150ac <memset>
						rxIndex = 0;
 800edbe:	4b16      	ldr	r3, [pc, #88]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	701a      	strb	r2, [r3, #0]
						receptionActive = 0;
 800edc4:	4b11      	ldr	r3, [pc, #68]	@ (800ee0c <HAL_UART_RxCpltCallback+0x128>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	701a      	strb	r2, [r3, #0]

						// ⚠️ Flush any leftover byte from USART RX register
						__HAL_UART_FLUSH_DRREGISTER(&huart3);
 800edca:	4b15      	ldr	r3, [pc, #84]	@ (800ee20 <HAL_UART_RxCpltCallback+0x13c>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	e011      	b.n	800edf6 <HAL_UART_RxCpltCallback+0x112>
					}
				}
				else
				{
					receptionActive = 0;
 800edd2:	4b0e      	ldr	r3, [pc, #56]	@ (800ee0c <HAL_UART_RxCpltCallback+0x128>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	701a      	strb	r2, [r3, #0]
					rxIndex = 0;
 800edd8:	4b0f      	ldr	r3, [pc, #60]	@ (800ee18 <HAL_UART_RxCpltCallback+0x134>)
 800edda:	2200      	movs	r2, #0
 800eddc:	701a      	strb	r2, [r3, #0]
					memset(rxBuffer, 0, sizeof(rxBuffer));
 800edde:	2232      	movs	r2, #50	@ 0x32
 800ede0:	2100      	movs	r1, #0
 800ede2:	480e      	ldr	r0, [pc, #56]	@ (800ee1c <HAL_UART_RxCpltCallback+0x138>)
 800ede4:	f006 f962 	bl	80150ac <memset>
					HAL_UART_Transmit(&huart3, (uint8_t *)"Error: Incomplete or invalid command\n", 36, HAL_MAX_DELAY);
 800ede8:	f04f 33ff 	mov.w	r3, #4294967295
 800edec:	2224      	movs	r2, #36	@ 0x24
 800edee:	490e      	ldr	r1, [pc, #56]	@ (800ee28 <HAL_UART_RxCpltCallback+0x144>)
 800edf0:	480b      	ldr	r0, [pc, #44]	@ (800ee20 <HAL_UART_RxCpltCallback+0x13c>)
 800edf2:	f003 ff29 	bl	8012c48 <HAL_UART_Transmit>
				}
			}

			// Always restart reception
			HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 800edf6:	2201      	movs	r2, #1
 800edf8:	4906      	ldr	r1, [pc, #24]	@ (800ee14 <HAL_UART_RxCpltCallback+0x130>)
 800edfa:	4809      	ldr	r0, [pc, #36]	@ (800ee20 <HAL_UART_RxCpltCallback+0x13c>)
 800edfc:	f003 ffaf 	bl	8012d5e <HAL_UART_Receive_IT>
		}
    }
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	40004800 	.word	0x40004800
 800ee0c:	20000560 	.word	0x20000560
 800ee10:	2000055e 	.word	0x2000055e
 800ee14:	200004f4 	.word	0x200004f4
 800ee18:	2000055f 	.word	0x2000055f
 800ee1c:	200004f8 	.word	0x200004f8
 800ee20:	200008a8 	.word	0x200008a8
 800ee24:	2000052c 	.word	0x2000052c
 800ee28:	080190e0 	.word	0x080190e0

0800ee2c <Valve_On>:


#include "command_processor.h"  // HAL_GPIO functions
#include "valves.h" // Assuming valve_t is defined here

void Valve_On(valve_t valve) {
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	463b      	mov	r3, r7
 800ee34:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_GPIO_WritePin(valve.port, valve.pin, GPIO_PIN_SET);
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	88b9      	ldrh	r1, [r7, #4]
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f000 fd7e 	bl	800f940 <HAL_GPIO_WritePin>
   // HAL_GPIO_WritePin(valve.port, valve.pin, GPIO_PIN_RESET);
}
 800ee44:	bf00      	nop
 800ee46:	3708      	adds	r7, #8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <Valve_Off>:

void Valve_Off(valve_t valve) {
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	463b      	mov	r3, r7
 800ee54:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_GPIO_WritePin(valve.port, valve.pin, GPIO_PIN_RESET);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	88b9      	ldrh	r1, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f000 fd6e 	bl	800f940 <HAL_GPIO_WritePin>
  //  HAL_GPIO_WritePin(valve.port, valve.pin, GPIO_PIN_SET);
}
 800ee64:	bf00      	nop
 800ee66:	3708      	adds	r7, #8
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <LED_On>:


void LED_On(LED Led) {
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	463b      	mov	r3, r7
 800ee74:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_GPIO_WritePin(Led.port, Led.pin, GPIO_PIN_SET);
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	88b9      	ldrh	r1, [r7, #4]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f000 fd5e 	bl	800f940 <HAL_GPIO_WritePin>
}
 800ee84:	bf00      	nop
 800ee86:	3708      	adds	r7, #8
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <LED_Off>:

void LED_Off(LED Led) {
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	463b      	mov	r3, r7
 800ee94:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_GPIO_WritePin(Led.port, Led.pin, GPIO_PIN_RESET);
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	88b9      	ldrh	r1, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f000 fd4e 	bl	800f940 <HAL_GPIO_WritePin>
}
 800eea4:	bf00      	nop
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <Rising_Edge>:
void Rising_Edge(GATE_t clk_pin)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	463b      	mov	r3, r7
 800eeb4:	e883 0003 	stmia.w	r3, {r0, r1}
 HAL_GPIO_WritePin(clk_pin.port,clk_pin.pin, GPIO_PIN_RESET);
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	88b9      	ldrh	r1, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	4618      	mov	r0, r3
 800eec0:	f000 fd3e 	bl	800f940 <HAL_GPIO_WritePin>
 HAL_Delay(1);
 800eec4:	2001      	movs	r0, #1
 800eec6:	f000 f8d3 	bl	800f070 <HAL_Delay>
 HAL_GPIO_WritePin(clk_pin.port,clk_pin.pin, GPIO_PIN_SET);
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	88b9      	ldrh	r1, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	4618      	mov	r0, r3
 800eed2:	f000 fd35 	bl	800f940 <HAL_GPIO_WritePin>
 HAL_Delay(1);
 800eed6:	2001      	movs	r0, #1
 800eed8:	f000 f8ca 	bl	800f070 <HAL_Delay>
 HAL_GPIO_WritePin(clk_pin.port,clk_pin.pin, GPIO_PIN_RESET);
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	88b9      	ldrh	r1, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	4618      	mov	r0, r3
 800eee4:	f000 fd2c 	bl	800f940 <HAL_GPIO_WritePin>
 HAL_Delay(1);
 800eee8:	2001      	movs	r0, #1
 800eeea:	f000 f8c1 	bl	800f070 <HAL_Delay>
}
 800eeee:	bf00      	nop
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <Alarm_On>:

void Alarm_On(ALARM Alarm ) {
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b082      	sub	sp, #8
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	463b      	mov	r3, r7
 800eefe:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(Alarm.port, Alarm.pin, GPIO_PIN_SET);
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	88b9      	ldrh	r1, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f000 fd19 	bl	800f940 <HAL_GPIO_WritePin>
}
 800ef0e:	bf00      	nop
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <Alarm_Off>:
void Alarm_Off(ALARM Alarm){
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b082      	sub	sp, #8
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	463b      	mov	r3, r7
 800ef1e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(Alarm.port, Alarm.pin, GPIO_PIN_RESET);
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	88b9      	ldrh	r1, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f000 fd09 	bl	800f940 <HAL_GPIO_WritePin>
}
 800ef2e:	bf00      	nop
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
	...

0800ef38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ef38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ef70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800ef3c:	f7fe ff46 	bl	800ddcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ef40:	480c      	ldr	r0, [pc, #48]	@ (800ef74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ef42:	490d      	ldr	r1, [pc, #52]	@ (800ef78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ef44:	4a0d      	ldr	r2, [pc, #52]	@ (800ef7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ef46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ef48:	e002      	b.n	800ef50 <LoopCopyDataInit>

0800ef4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ef4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ef4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ef4e:	3304      	adds	r3, #4

0800ef50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ef50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ef52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ef54:	d3f9      	bcc.n	800ef4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ef56:	4a0a      	ldr	r2, [pc, #40]	@ (800ef80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ef58:	4c0a      	ldr	r4, [pc, #40]	@ (800ef84 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ef5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ef5c:	e001      	b.n	800ef62 <LoopFillZerobss>

0800ef5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ef5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ef60:	3204      	adds	r2, #4

0800ef62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ef62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ef64:	d3fb      	bcc.n	800ef5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800ef66:	f006 f929 	bl	80151bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ef6a:	f7fe fb3b 	bl	800d5e4 <main>
  bx  lr    
 800ef6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ef70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ef74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ef78:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 800ef7c:	0801957c 	.word	0x0801957c
  ldr r2, =_sbss
 800ef80:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 800ef84:	20000a40 	.word	0x20000a40

0800ef88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ef88:	e7fe      	b.n	800ef88 <ADC_IRQHandler>
	...

0800ef8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ef90:	4b0e      	ldr	r3, [pc, #56]	@ (800efcc <HAL_Init+0x40>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a0d      	ldr	r2, [pc, #52]	@ (800efcc <HAL_Init+0x40>)
 800ef96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ef9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ef9c:	4b0b      	ldr	r3, [pc, #44]	@ (800efcc <HAL_Init+0x40>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a0a      	ldr	r2, [pc, #40]	@ (800efcc <HAL_Init+0x40>)
 800efa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800efa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800efa8:	4b08      	ldr	r3, [pc, #32]	@ (800efcc <HAL_Init+0x40>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a07      	ldr	r2, [pc, #28]	@ (800efcc <HAL_Init+0x40>)
 800efae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800efb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800efb4:	2003      	movs	r0, #3
 800efb6:	f000 f94f 	bl	800f258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800efba:	200f      	movs	r0, #15
 800efbc:	f000 f808 	bl	800efd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800efc0:	f7fe fd90 	bl	800dae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	40023c00 	.word	0x40023c00

0800efd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800efd8:	4b12      	ldr	r3, [pc, #72]	@ (800f024 <HAL_InitTick+0x54>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	4b12      	ldr	r3, [pc, #72]	@ (800f028 <HAL_InitTick+0x58>)
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	4619      	mov	r1, r3
 800efe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efe6:	fbb3 f3f1 	udiv	r3, r3, r1
 800efea:	fbb2 f3f3 	udiv	r3, r2, r3
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 f967 	bl	800f2c2 <HAL_SYSTICK_Config>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	e00e      	b.n	800f01c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b0f      	cmp	r3, #15
 800f002:	d80a      	bhi.n	800f01a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f004:	2200      	movs	r2, #0
 800f006:	6879      	ldr	r1, [r7, #4]
 800f008:	f04f 30ff 	mov.w	r0, #4294967295
 800f00c:	f000 f92f 	bl	800f26e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f010:	4a06      	ldr	r2, [pc, #24]	@ (800f02c <HAL_InitTick+0x5c>)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	e000      	b.n	800f01c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800f01a:	2301      	movs	r3, #1
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3708      	adds	r7, #8
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	200002ec 	.word	0x200002ec
 800f028:	200002f4 	.word	0x200002f4
 800f02c:	200002f0 	.word	0x200002f0

0800f030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f030:	b480      	push	{r7}
 800f032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f034:	4b06      	ldr	r3, [pc, #24]	@ (800f050 <HAL_IncTick+0x20>)
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	461a      	mov	r2, r3
 800f03a:	4b06      	ldr	r3, [pc, #24]	@ (800f054 <HAL_IncTick+0x24>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4413      	add	r3, r2
 800f040:	4a04      	ldr	r2, [pc, #16]	@ (800f054 <HAL_IncTick+0x24>)
 800f042:	6013      	str	r3, [r2, #0]
}
 800f044:	bf00      	nop
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	200002f4 	.word	0x200002f4
 800f054:	200008f0 	.word	0x200008f0

0800f058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f058:	b480      	push	{r7}
 800f05a:	af00      	add	r7, sp, #0
  return uwTick;
 800f05c:	4b03      	ldr	r3, [pc, #12]	@ (800f06c <HAL_GetTick+0x14>)
 800f05e:	681b      	ldr	r3, [r3, #0]
}
 800f060:	4618      	mov	r0, r3
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	200008f0 	.word	0x200008f0

0800f070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f078:	f7ff ffee 	bl	800f058 <HAL_GetTick>
 800f07c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f088:	d005      	beq.n	800f096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f08a:	4b0a      	ldr	r3, [pc, #40]	@ (800f0b4 <HAL_Delay+0x44>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	461a      	mov	r2, r3
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	4413      	add	r3, r2
 800f094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f096:	bf00      	nop
 800f098:	f7ff ffde 	bl	800f058 <HAL_GetTick>
 800f09c:	4602      	mov	r2, r0
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d8f7      	bhi.n	800f098 <HAL_Delay+0x28>
  {
  }
}
 800f0a8:	bf00      	nop
 800f0aa:	bf00      	nop
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	200002f4 	.word	0x200002f4

0800f0b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f0c8:	4b0c      	ldr	r3, [pc, #48]	@ (800f0fc <__NVIC_SetPriorityGrouping+0x44>)
 800f0ca:	68db      	ldr	r3, [r3, #12]
 800f0cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f0ce:	68ba      	ldr	r2, [r7, #8]
 800f0d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800f0d4:	4013      	ands	r3, r2
 800f0d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f0e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800f0e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f0e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f0ea:	4a04      	ldr	r2, [pc, #16]	@ (800f0fc <__NVIC_SetPriorityGrouping+0x44>)
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	60d3      	str	r3, [r2, #12]
}
 800f0f0:	bf00      	nop
 800f0f2:	3714      	adds	r7, #20
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	e000ed00 	.word	0xe000ed00

0800f100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f100:	b480      	push	{r7}
 800f102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f104:	4b04      	ldr	r3, [pc, #16]	@ (800f118 <__NVIC_GetPriorityGrouping+0x18>)
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	0a1b      	lsrs	r3, r3, #8
 800f10a:	f003 0307 	and.w	r3, r3, #7
}
 800f10e:	4618      	mov	r0, r3
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	e000ed00 	.word	0xe000ed00

0800f11c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	db0b      	blt.n	800f146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f12e:	79fb      	ldrb	r3, [r7, #7]
 800f130:	f003 021f 	and.w	r2, r3, #31
 800f134:	4907      	ldr	r1, [pc, #28]	@ (800f154 <__NVIC_EnableIRQ+0x38>)
 800f136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f13a:	095b      	lsrs	r3, r3, #5
 800f13c:	2001      	movs	r0, #1
 800f13e:	fa00 f202 	lsl.w	r2, r0, r2
 800f142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800f146:	bf00      	nop
 800f148:	370c      	adds	r7, #12
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	e000e100 	.word	0xe000e100

0800f158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	4603      	mov	r3, r0
 800f160:	6039      	str	r1, [r7, #0]
 800f162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	db0a      	blt.n	800f182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	b2da      	uxtb	r2, r3
 800f170:	490c      	ldr	r1, [pc, #48]	@ (800f1a4 <__NVIC_SetPriority+0x4c>)
 800f172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f176:	0112      	lsls	r2, r2, #4
 800f178:	b2d2      	uxtb	r2, r2
 800f17a:	440b      	add	r3, r1
 800f17c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f180:	e00a      	b.n	800f198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	b2da      	uxtb	r2, r3
 800f186:	4908      	ldr	r1, [pc, #32]	@ (800f1a8 <__NVIC_SetPriority+0x50>)
 800f188:	79fb      	ldrb	r3, [r7, #7]
 800f18a:	f003 030f 	and.w	r3, r3, #15
 800f18e:	3b04      	subs	r3, #4
 800f190:	0112      	lsls	r2, r2, #4
 800f192:	b2d2      	uxtb	r2, r2
 800f194:	440b      	add	r3, r1
 800f196:	761a      	strb	r2, [r3, #24]
}
 800f198:	bf00      	nop
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	e000e100 	.word	0xe000e100
 800f1a8:	e000ed00 	.word	0xe000ed00

0800f1ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b089      	sub	sp, #36	@ 0x24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f003 0307 	and.w	r3, r3, #7
 800f1be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	f1c3 0307 	rsb	r3, r3, #7
 800f1c6:	2b04      	cmp	r3, #4
 800f1c8:	bf28      	it	cs
 800f1ca:	2304      	movcs	r3, #4
 800f1cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	2b06      	cmp	r3, #6
 800f1d4:	d902      	bls.n	800f1dc <NVIC_EncodePriority+0x30>
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	3b03      	subs	r3, #3
 800f1da:	e000      	b.n	800f1de <NVIC_EncodePriority+0x32>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1ea:	43da      	mvns	r2, r3
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	401a      	ands	r2, r3
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f1f4:	f04f 31ff 	mov.w	r1, #4294967295
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800f1fe:	43d9      	mvns	r1, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f204:	4313      	orrs	r3, r2
         );
}
 800f206:	4618      	mov	r0, r3
 800f208:	3724      	adds	r7, #36	@ 0x24
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
	...

0800f214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3b01      	subs	r3, #1
 800f220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f224:	d301      	bcc.n	800f22a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f226:	2301      	movs	r3, #1
 800f228:	e00f      	b.n	800f24a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f22a:	4a0a      	ldr	r2, [pc, #40]	@ (800f254 <SysTick_Config+0x40>)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3b01      	subs	r3, #1
 800f230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f232:	210f      	movs	r1, #15
 800f234:	f04f 30ff 	mov.w	r0, #4294967295
 800f238:	f7ff ff8e 	bl	800f158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f23c:	4b05      	ldr	r3, [pc, #20]	@ (800f254 <SysTick_Config+0x40>)
 800f23e:	2200      	movs	r2, #0
 800f240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f242:	4b04      	ldr	r3, [pc, #16]	@ (800f254 <SysTick_Config+0x40>)
 800f244:	2207      	movs	r2, #7
 800f246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f248:	2300      	movs	r3, #0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	e000e010 	.word	0xe000e010

0800f258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff ff29 	bl	800f0b8 <__NVIC_SetPriorityGrouping>
}
 800f266:	bf00      	nop
 800f268:	3708      	adds	r7, #8
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f26e:	b580      	push	{r7, lr}
 800f270:	b086      	sub	sp, #24
 800f272:	af00      	add	r7, sp, #0
 800f274:	4603      	mov	r3, r0
 800f276:	60b9      	str	r1, [r7, #8]
 800f278:	607a      	str	r2, [r7, #4]
 800f27a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f27c:	2300      	movs	r3, #0
 800f27e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f280:	f7ff ff3e 	bl	800f100 <__NVIC_GetPriorityGrouping>
 800f284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	68b9      	ldr	r1, [r7, #8]
 800f28a:	6978      	ldr	r0, [r7, #20]
 800f28c:	f7ff ff8e 	bl	800f1ac <NVIC_EncodePriority>
 800f290:	4602      	mov	r2, r0
 800f292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f296:	4611      	mov	r1, r2
 800f298:	4618      	mov	r0, r3
 800f29a:	f7ff ff5d 	bl	800f158 <__NVIC_SetPriority>
}
 800f29e:	bf00      	nop
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b082      	sub	sp, #8
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f2b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff ff31 	bl	800f11c <__NVIC_EnableIRQ>
}
 800f2ba:	bf00      	nop
 800f2bc:	3708      	adds	r7, #8
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b082      	sub	sp, #8
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff ffa2 	bl	800f214 <SysTick_Config>
 800f2d0:	4603      	mov	r3, r0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b084      	sub	sp, #16
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800f2e8:	f7ff feb6 	bl	800f058 <HAL_GetTick>
 800f2ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	2b02      	cmp	r3, #2
 800f2f8:	d008      	beq.n	800f30c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2280      	movs	r2, #128	@ 0x80
 800f2fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800f308:	2301      	movs	r3, #1
 800f30a:	e052      	b.n	800f3b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f022 0216 	bic.w	r2, r2, #22
 800f31a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	695a      	ldr	r2, [r3, #20]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f32a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f330:	2b00      	cmp	r3, #0
 800f332:	d103      	bne.n	800f33c <HAL_DMA_Abort+0x62>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d007      	beq.n	800f34c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f022 0208 	bic.w	r2, r2, #8
 800f34a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f022 0201 	bic.w	r2, r2, #1
 800f35a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f35c:	e013      	b.n	800f386 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f35e:	f7ff fe7b 	bl	800f058 <HAL_GetTick>
 800f362:	4602      	mov	r2, r0
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	2b05      	cmp	r3, #5
 800f36a:	d90c      	bls.n	800f386 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2220      	movs	r2, #32
 800f370:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2203      	movs	r2, #3
 800f376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800f382:	2303      	movs	r3, #3
 800f384:	e015      	b.n	800f3b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f003 0301 	and.w	r3, r3, #1
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1e4      	bne.n	800f35e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f398:	223f      	movs	r2, #63	@ 0x3f
 800f39a:	409a      	lsls	r2, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3710      	adds	r7, #16
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f3ba:	b480      	push	{r7}
 800f3bc:	b083      	sub	sp, #12
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b02      	cmp	r3, #2
 800f3cc:	d004      	beq.n	800f3d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2280      	movs	r2, #128	@ 0x80
 800f3d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e00c      	b.n	800f3f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2205      	movs	r2, #5
 800f3dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f022 0201 	bic.w	r2, r2, #1
 800f3ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f3f0:	2300      	movs	r3, #0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	370c      	adds	r7, #12
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr
	...

0800f400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f400:	b480      	push	{r7}
 800f402:	b089      	sub	sp, #36	@ 0x24
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f40a:	2300      	movs	r3, #0
 800f40c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f40e:	2300      	movs	r3, #0
 800f410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f412:	2300      	movs	r3, #0
 800f414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f416:	2300      	movs	r3, #0
 800f418:	61fb      	str	r3, [r7, #28]
 800f41a:	e165      	b.n	800f6e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f41c:	2201      	movs	r2, #1
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	fa02 f303 	lsl.w	r3, r2, r3
 800f424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	697a      	ldr	r2, [r7, #20]
 800f42c:	4013      	ands	r3, r2
 800f42e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f430:	693a      	ldr	r2, [r7, #16]
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	429a      	cmp	r2, r3
 800f436:	f040 8154 	bne.w	800f6e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	f003 0303 	and.w	r3, r3, #3
 800f442:	2b01      	cmp	r3, #1
 800f444:	d005      	beq.n	800f452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f44e:	2b02      	cmp	r3, #2
 800f450:	d130      	bne.n	800f4b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	005b      	lsls	r3, r3, #1
 800f45c:	2203      	movs	r2, #3
 800f45e:	fa02 f303 	lsl.w	r3, r2, r3
 800f462:	43db      	mvns	r3, r3
 800f464:	69ba      	ldr	r2, [r7, #24]
 800f466:	4013      	ands	r3, r2
 800f468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	68da      	ldr	r2, [r3, #12]
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	005b      	lsls	r3, r3, #1
 800f472:	fa02 f303 	lsl.w	r3, r2, r3
 800f476:	69ba      	ldr	r2, [r7, #24]
 800f478:	4313      	orrs	r3, r2
 800f47a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	69ba      	ldr	r2, [r7, #24]
 800f480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f488:	2201      	movs	r2, #1
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	fa02 f303 	lsl.w	r3, r2, r3
 800f490:	43db      	mvns	r3, r3
 800f492:	69ba      	ldr	r2, [r7, #24]
 800f494:	4013      	ands	r3, r2
 800f496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	091b      	lsrs	r3, r3, #4
 800f49e:	f003 0201 	and.w	r2, r3, #1
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f4a8:	69ba      	ldr	r2, [r7, #24]
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	69ba      	ldr	r2, [r7, #24]
 800f4b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	f003 0303 	and.w	r3, r3, #3
 800f4bc:	2b03      	cmp	r3, #3
 800f4be:	d017      	beq.n	800f4f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	005b      	lsls	r3, r3, #1
 800f4ca:	2203      	movs	r2, #3
 800f4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d0:	43db      	mvns	r3, r3
 800f4d2:	69ba      	ldr	r2, [r7, #24]
 800f4d4:	4013      	ands	r3, r2
 800f4d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	689a      	ldr	r2, [r3, #8]
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	005b      	lsls	r3, r3, #1
 800f4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f4e4:	69ba      	ldr	r2, [r7, #24]
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	69ba      	ldr	r2, [r7, #24]
 800f4ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	f003 0303 	and.w	r3, r3, #3
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d123      	bne.n	800f544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	08da      	lsrs	r2, r3, #3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	3208      	adds	r2, #8
 800f504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	f003 0307 	and.w	r3, r3, #7
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	220f      	movs	r2, #15
 800f514:	fa02 f303 	lsl.w	r3, r2, r3
 800f518:	43db      	mvns	r3, r3
 800f51a:	69ba      	ldr	r2, [r7, #24]
 800f51c:	4013      	ands	r3, r2
 800f51e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	691a      	ldr	r2, [r3, #16]
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	f003 0307 	and.w	r3, r3, #7
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	fa02 f303 	lsl.w	r3, r2, r3
 800f530:	69ba      	ldr	r2, [r7, #24]
 800f532:	4313      	orrs	r3, r2
 800f534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f536:	69fb      	ldr	r3, [r7, #28]
 800f538:	08da      	lsrs	r2, r3, #3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	3208      	adds	r2, #8
 800f53e:	69b9      	ldr	r1, [r7, #24]
 800f540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	2203      	movs	r2, #3
 800f550:	fa02 f303 	lsl.w	r3, r2, r3
 800f554:	43db      	mvns	r3, r3
 800f556:	69ba      	ldr	r2, [r7, #24]
 800f558:	4013      	ands	r3, r2
 800f55a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f003 0203 	and.w	r2, r3, #3
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	005b      	lsls	r3, r3, #1
 800f568:	fa02 f303 	lsl.w	r3, r2, r3
 800f56c:	69ba      	ldr	r2, [r7, #24]
 800f56e:	4313      	orrs	r3, r2
 800f570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	69ba      	ldr	r2, [r7, #24]
 800f576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 80ae 	beq.w	800f6e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f586:	2300      	movs	r3, #0
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	4b5d      	ldr	r3, [pc, #372]	@ (800f700 <HAL_GPIO_Init+0x300>)
 800f58c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f58e:	4a5c      	ldr	r2, [pc, #368]	@ (800f700 <HAL_GPIO_Init+0x300>)
 800f590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f594:	6453      	str	r3, [r2, #68]	@ 0x44
 800f596:	4b5a      	ldr	r3, [pc, #360]	@ (800f700 <HAL_GPIO_Init+0x300>)
 800f598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f59a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f59e:	60fb      	str	r3, [r7, #12]
 800f5a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f5a2:	4a58      	ldr	r2, [pc, #352]	@ (800f704 <HAL_GPIO_Init+0x304>)
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	089b      	lsrs	r3, r3, #2
 800f5a8:	3302      	adds	r3, #2
 800f5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	f003 0303 	and.w	r3, r3, #3
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	220f      	movs	r2, #15
 800f5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f5be:	43db      	mvns	r3, r3
 800f5c0:	69ba      	ldr	r2, [r7, #24]
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a4f      	ldr	r2, [pc, #316]	@ (800f708 <HAL_GPIO_Init+0x308>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d025      	beq.n	800f61a <HAL_GPIO_Init+0x21a>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a4e      	ldr	r2, [pc, #312]	@ (800f70c <HAL_GPIO_Init+0x30c>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d01f      	beq.n	800f616 <HAL_GPIO_Init+0x216>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a4d      	ldr	r2, [pc, #308]	@ (800f710 <HAL_GPIO_Init+0x310>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d019      	beq.n	800f612 <HAL_GPIO_Init+0x212>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4a4c      	ldr	r2, [pc, #304]	@ (800f714 <HAL_GPIO_Init+0x314>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d013      	beq.n	800f60e <HAL_GPIO_Init+0x20e>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a4b      	ldr	r2, [pc, #300]	@ (800f718 <HAL_GPIO_Init+0x318>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d00d      	beq.n	800f60a <HAL_GPIO_Init+0x20a>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a4a      	ldr	r2, [pc, #296]	@ (800f71c <HAL_GPIO_Init+0x31c>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d007      	beq.n	800f606 <HAL_GPIO_Init+0x206>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a49      	ldr	r2, [pc, #292]	@ (800f720 <HAL_GPIO_Init+0x320>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d101      	bne.n	800f602 <HAL_GPIO_Init+0x202>
 800f5fe:	2306      	movs	r3, #6
 800f600:	e00c      	b.n	800f61c <HAL_GPIO_Init+0x21c>
 800f602:	2307      	movs	r3, #7
 800f604:	e00a      	b.n	800f61c <HAL_GPIO_Init+0x21c>
 800f606:	2305      	movs	r3, #5
 800f608:	e008      	b.n	800f61c <HAL_GPIO_Init+0x21c>
 800f60a:	2304      	movs	r3, #4
 800f60c:	e006      	b.n	800f61c <HAL_GPIO_Init+0x21c>
 800f60e:	2303      	movs	r3, #3
 800f610:	e004      	b.n	800f61c <HAL_GPIO_Init+0x21c>
 800f612:	2302      	movs	r3, #2
 800f614:	e002      	b.n	800f61c <HAL_GPIO_Init+0x21c>
 800f616:	2301      	movs	r3, #1
 800f618:	e000      	b.n	800f61c <HAL_GPIO_Init+0x21c>
 800f61a:	2300      	movs	r3, #0
 800f61c:	69fa      	ldr	r2, [r7, #28]
 800f61e:	f002 0203 	and.w	r2, r2, #3
 800f622:	0092      	lsls	r2, r2, #2
 800f624:	4093      	lsls	r3, r2
 800f626:	69ba      	ldr	r2, [r7, #24]
 800f628:	4313      	orrs	r3, r2
 800f62a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f62c:	4935      	ldr	r1, [pc, #212]	@ (800f704 <HAL_GPIO_Init+0x304>)
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	089b      	lsrs	r3, r3, #2
 800f632:	3302      	adds	r3, #2
 800f634:	69ba      	ldr	r2, [r7, #24]
 800f636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f63a:	4b3a      	ldr	r3, [pc, #232]	@ (800f724 <HAL_GPIO_Init+0x324>)
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	43db      	mvns	r3, r3
 800f644:	69ba      	ldr	r2, [r7, #24]
 800f646:	4013      	ands	r3, r2
 800f648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f652:	2b00      	cmp	r3, #0
 800f654:	d003      	beq.n	800f65e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800f656:	69ba      	ldr	r2, [r7, #24]
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f65e:	4a31      	ldr	r2, [pc, #196]	@ (800f724 <HAL_GPIO_Init+0x324>)
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f664:	4b2f      	ldr	r3, [pc, #188]	@ (800f724 <HAL_GPIO_Init+0x324>)
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	43db      	mvns	r3, r3
 800f66e:	69ba      	ldr	r2, [r7, #24]
 800f670:	4013      	ands	r3, r2
 800f672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d003      	beq.n	800f688 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800f680:	69ba      	ldr	r2, [r7, #24]
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	4313      	orrs	r3, r2
 800f686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f688:	4a26      	ldr	r2, [pc, #152]	@ (800f724 <HAL_GPIO_Init+0x324>)
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800f68e:	4b25      	ldr	r3, [pc, #148]	@ (800f724 <HAL_GPIO_Init+0x324>)
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	43db      	mvns	r3, r3
 800f698:	69ba      	ldr	r2, [r7, #24]
 800f69a:	4013      	ands	r3, r2
 800f69c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d003      	beq.n	800f6b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800f6aa:	69ba      	ldr	r2, [r7, #24]
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f6b2:	4a1c      	ldr	r2, [pc, #112]	@ (800f724 <HAL_GPIO_Init+0x324>)
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f6b8:	4b1a      	ldr	r3, [pc, #104]	@ (800f724 <HAL_GPIO_Init+0x324>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	43db      	mvns	r3, r3
 800f6c2:	69ba      	ldr	r2, [r7, #24]
 800f6c4:	4013      	ands	r3, r2
 800f6c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d003      	beq.n	800f6dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f6d4:	69ba      	ldr	r2, [r7, #24]
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f6dc:	4a11      	ldr	r2, [pc, #68]	@ (800f724 <HAL_GPIO_Init+0x324>)
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	61fb      	str	r3, [r7, #28]
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	2b0f      	cmp	r3, #15
 800f6ec:	f67f ae96 	bls.w	800f41c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f6f0:	bf00      	nop
 800f6f2:	bf00      	nop
 800f6f4:	3724      	adds	r7, #36	@ 0x24
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	40023800 	.word	0x40023800
 800f704:	40013800 	.word	0x40013800
 800f708:	40020000 	.word	0x40020000
 800f70c:	40020400 	.word	0x40020400
 800f710:	40020800 	.word	0x40020800
 800f714:	40020c00 	.word	0x40020c00
 800f718:	40021000 	.word	0x40021000
 800f71c:	40021400 	.word	0x40021400
 800f720:	40021800 	.word	0x40021800
 800f724:	40013c00 	.word	0x40013c00

0800f728 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f728:	b480      	push	{r7}
 800f72a:	b087      	sub	sp, #28
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f732:	2300      	movs	r3, #0
 800f734:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800f736:	2300      	movs	r3, #0
 800f738:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800f73a:	2300      	movs	r3, #0
 800f73c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f73e:	2300      	movs	r3, #0
 800f740:	617b      	str	r3, [r7, #20]
 800f742:	e0c7      	b.n	800f8d4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f744:	2201      	movs	r2, #1
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	fa02 f303 	lsl.w	r3, r2, r3
 800f74c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	4013      	ands	r3, r2
 800f754:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800f756:	68fa      	ldr	r2, [r7, #12]
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	f040 80b7 	bne.w	800f8ce <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800f760:	4a62      	ldr	r2, [pc, #392]	@ (800f8ec <HAL_GPIO_DeInit+0x1c4>)
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	089b      	lsrs	r3, r3, #2
 800f766:	3302      	adds	r3, #2
 800f768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f76c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	f003 0303 	and.w	r3, r3, #3
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	220f      	movs	r2, #15
 800f778:	fa02 f303 	lsl.w	r3, r2, r3
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	4013      	ands	r3, r2
 800f780:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4a5a      	ldr	r2, [pc, #360]	@ (800f8f0 <HAL_GPIO_DeInit+0x1c8>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d025      	beq.n	800f7d6 <HAL_GPIO_DeInit+0xae>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4a59      	ldr	r2, [pc, #356]	@ (800f8f4 <HAL_GPIO_DeInit+0x1cc>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d01f      	beq.n	800f7d2 <HAL_GPIO_DeInit+0xaa>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a58      	ldr	r2, [pc, #352]	@ (800f8f8 <HAL_GPIO_DeInit+0x1d0>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d019      	beq.n	800f7ce <HAL_GPIO_DeInit+0xa6>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a57      	ldr	r2, [pc, #348]	@ (800f8fc <HAL_GPIO_DeInit+0x1d4>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d013      	beq.n	800f7ca <HAL_GPIO_DeInit+0xa2>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4a56      	ldr	r2, [pc, #344]	@ (800f900 <HAL_GPIO_DeInit+0x1d8>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d00d      	beq.n	800f7c6 <HAL_GPIO_DeInit+0x9e>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4a55      	ldr	r2, [pc, #340]	@ (800f904 <HAL_GPIO_DeInit+0x1dc>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d007      	beq.n	800f7c2 <HAL_GPIO_DeInit+0x9a>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	4a54      	ldr	r2, [pc, #336]	@ (800f908 <HAL_GPIO_DeInit+0x1e0>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d101      	bne.n	800f7be <HAL_GPIO_DeInit+0x96>
 800f7ba:	2306      	movs	r3, #6
 800f7bc:	e00c      	b.n	800f7d8 <HAL_GPIO_DeInit+0xb0>
 800f7be:	2307      	movs	r3, #7
 800f7c0:	e00a      	b.n	800f7d8 <HAL_GPIO_DeInit+0xb0>
 800f7c2:	2305      	movs	r3, #5
 800f7c4:	e008      	b.n	800f7d8 <HAL_GPIO_DeInit+0xb0>
 800f7c6:	2304      	movs	r3, #4
 800f7c8:	e006      	b.n	800f7d8 <HAL_GPIO_DeInit+0xb0>
 800f7ca:	2303      	movs	r3, #3
 800f7cc:	e004      	b.n	800f7d8 <HAL_GPIO_DeInit+0xb0>
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	e002      	b.n	800f7d8 <HAL_GPIO_DeInit+0xb0>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e000      	b.n	800f7d8 <HAL_GPIO_DeInit+0xb0>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	f002 0203 	and.w	r2, r2, #3
 800f7de:	0092      	lsls	r2, r2, #2
 800f7e0:	4093      	lsls	r3, r2
 800f7e2:	68ba      	ldr	r2, [r7, #8]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d132      	bne.n	800f84e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800f7e8:	4b48      	ldr	r3, [pc, #288]	@ (800f90c <HAL_GPIO_DeInit+0x1e4>)
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	43db      	mvns	r3, r3
 800f7f0:	4946      	ldr	r1, [pc, #280]	@ (800f90c <HAL_GPIO_DeInit+0x1e4>)
 800f7f2:	4013      	ands	r3, r2
 800f7f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800f7f6:	4b45      	ldr	r3, [pc, #276]	@ (800f90c <HAL_GPIO_DeInit+0x1e4>)
 800f7f8:	685a      	ldr	r2, [r3, #4]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	43db      	mvns	r3, r3
 800f7fe:	4943      	ldr	r1, [pc, #268]	@ (800f90c <HAL_GPIO_DeInit+0x1e4>)
 800f800:	4013      	ands	r3, r2
 800f802:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800f804:	4b41      	ldr	r3, [pc, #260]	@ (800f90c <HAL_GPIO_DeInit+0x1e4>)
 800f806:	68da      	ldr	r2, [r3, #12]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	43db      	mvns	r3, r3
 800f80c:	493f      	ldr	r1, [pc, #252]	@ (800f90c <HAL_GPIO_DeInit+0x1e4>)
 800f80e:	4013      	ands	r3, r2
 800f810:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800f812:	4b3e      	ldr	r3, [pc, #248]	@ (800f90c <HAL_GPIO_DeInit+0x1e4>)
 800f814:	689a      	ldr	r2, [r3, #8]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	43db      	mvns	r3, r3
 800f81a:	493c      	ldr	r1, [pc, #240]	@ (800f90c <HAL_GPIO_DeInit+0x1e4>)
 800f81c:	4013      	ands	r3, r2
 800f81e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	f003 0303 	and.w	r3, r3, #3
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	220f      	movs	r2, #15
 800f82a:	fa02 f303 	lsl.w	r3, r2, r3
 800f82e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800f830:	4a2e      	ldr	r2, [pc, #184]	@ (800f8ec <HAL_GPIO_DeInit+0x1c4>)
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	089b      	lsrs	r3, r3, #2
 800f836:	3302      	adds	r3, #2
 800f838:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	43da      	mvns	r2, r3
 800f840:	482a      	ldr	r0, [pc, #168]	@ (800f8ec <HAL_GPIO_DeInit+0x1c4>)
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	089b      	lsrs	r3, r3, #2
 800f846:	400a      	ands	r2, r1
 800f848:	3302      	adds	r3, #2
 800f84a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	2103      	movs	r1, #3
 800f858:	fa01 f303 	lsl.w	r3, r1, r3
 800f85c:	43db      	mvns	r3, r3
 800f85e:	401a      	ands	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	08da      	lsrs	r2, r3, #3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	3208      	adds	r2, #8
 800f86c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	f003 0307 	and.w	r3, r3, #7
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	220f      	movs	r2, #15
 800f87a:	fa02 f303 	lsl.w	r3, r2, r3
 800f87e:	43db      	mvns	r3, r3
 800f880:	697a      	ldr	r2, [r7, #20]
 800f882:	08d2      	lsrs	r2, r2, #3
 800f884:	4019      	ands	r1, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	3208      	adds	r2, #8
 800f88a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	68da      	ldr	r2, [r3, #12]
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	2103      	movs	r1, #3
 800f898:	fa01 f303 	lsl.w	r3, r1, r3
 800f89c:	43db      	mvns	r3, r3
 800f89e:	401a      	ands	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	685a      	ldr	r2, [r3, #4]
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	fa01 f303 	lsl.w	r3, r1, r3
 800f8b0:	43db      	mvns	r3, r3
 800f8b2:	401a      	ands	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	689a      	ldr	r2, [r3, #8]
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	005b      	lsls	r3, r3, #1
 800f8c0:	2103      	movs	r1, #3
 800f8c2:	fa01 f303 	lsl.w	r3, r1, r3
 800f8c6:	43db      	mvns	r3, r3
 800f8c8:	401a      	ands	r2, r3
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	617b      	str	r3, [r7, #20]
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	2b0f      	cmp	r3, #15
 800f8d8:	f67f af34 	bls.w	800f744 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800f8dc:	bf00      	nop
 800f8de:	bf00      	nop
 800f8e0:	371c      	adds	r7, #28
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop
 800f8ec:	40013800 	.word	0x40013800
 800f8f0:	40020000 	.word	0x40020000
 800f8f4:	40020400 	.word	0x40020400
 800f8f8:	40020800 	.word	0x40020800
 800f8fc:	40020c00 	.word	0x40020c00
 800f900:	40021000 	.word	0x40021000
 800f904:	40021400 	.word	0x40021400
 800f908:	40021800 	.word	0x40021800
 800f90c:	40013c00 	.word	0x40013c00

0800f910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	460b      	mov	r3, r1
 800f91a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	691a      	ldr	r2, [r3, #16]
 800f920:	887b      	ldrh	r3, [r7, #2]
 800f922:	4013      	ands	r3, r2
 800f924:	2b00      	cmp	r3, #0
 800f926:	d002      	beq.n	800f92e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f928:	2301      	movs	r3, #1
 800f92a:	73fb      	strb	r3, [r7, #15]
 800f92c:	e001      	b.n	800f932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f92e:	2300      	movs	r3, #0
 800f930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f932:	7bfb      	ldrb	r3, [r7, #15]
}
 800f934:	4618      	mov	r0, r3
 800f936:	3714      	adds	r7, #20
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	807b      	strh	r3, [r7, #2]
 800f94c:	4613      	mov	r3, r2
 800f94e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f950:	787b      	ldrb	r3, [r7, #1]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d003      	beq.n	800f95e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f956:	887a      	ldrh	r2, [r7, #2]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f95c:	e003      	b.n	800f966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f95e:	887b      	ldrh	r3, [r7, #2]
 800f960:	041a      	lsls	r2, r3, #16
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	619a      	str	r2, [r3, #24]
}
 800f966:	bf00      	nop
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
	...

0800f974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b082      	sub	sp, #8
 800f978:	af00      	add	r7, sp, #0
 800f97a:	4603      	mov	r3, r0
 800f97c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f97e:	4b08      	ldr	r3, [pc, #32]	@ (800f9a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f980:	695a      	ldr	r2, [r3, #20]
 800f982:	88fb      	ldrh	r3, [r7, #6]
 800f984:	4013      	ands	r3, r2
 800f986:	2b00      	cmp	r3, #0
 800f988:	d006      	beq.n	800f998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f98a:	4a05      	ldr	r2, [pc, #20]	@ (800f9a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f98c:	88fb      	ldrh	r3, [r7, #6]
 800f98e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f990:	88fb      	ldrh	r3, [r7, #6]
 800f992:	4618      	mov	r0, r3
 800f994:	f000 f806 	bl	800f9a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800f998:	bf00      	nop
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	40013c00 	.word	0x40013c00

0800f9a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800f9ae:	bf00      	nop
 800f9b0:	370c      	adds	r7, #12
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr
	...

0800f9bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e12b      	b.n	800fc26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d106      	bne.n	800f9e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7fd facc 	bl	800cf80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2224      	movs	r2, #36	@ 0x24
 800f9ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f022 0201 	bic.w	r2, r2, #1
 800f9fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fa0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fa1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800fa20:	f001 fa16 	bl	8010e50 <HAL_RCC_GetPCLK1Freq>
 800fa24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	4a81      	ldr	r2, [pc, #516]	@ (800fc30 <HAL_I2C_Init+0x274>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d807      	bhi.n	800fa40 <HAL_I2C_Init+0x84>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	4a80      	ldr	r2, [pc, #512]	@ (800fc34 <HAL_I2C_Init+0x278>)
 800fa34:	4293      	cmp	r3, r2
 800fa36:	bf94      	ite	ls
 800fa38:	2301      	movls	r3, #1
 800fa3a:	2300      	movhi	r3, #0
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	e006      	b.n	800fa4e <HAL_I2C_Init+0x92>
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	4a7d      	ldr	r2, [pc, #500]	@ (800fc38 <HAL_I2C_Init+0x27c>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	bf94      	ite	ls
 800fa48:	2301      	movls	r3, #1
 800fa4a:	2300      	movhi	r3, #0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d001      	beq.n	800fa56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800fa52:	2301      	movs	r3, #1
 800fa54:	e0e7      	b.n	800fc26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	4a78      	ldr	r2, [pc, #480]	@ (800fc3c <HAL_I2C_Init+0x280>)
 800fa5a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa5e:	0c9b      	lsrs	r3, r3, #18
 800fa60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	68ba      	ldr	r2, [r7, #8]
 800fa72:	430a      	orrs	r2, r1
 800fa74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6a1b      	ldr	r3, [r3, #32]
 800fa7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	4a6a      	ldr	r2, [pc, #424]	@ (800fc30 <HAL_I2C_Init+0x274>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d802      	bhi.n	800fa90 <HAL_I2C_Init+0xd4>
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	e009      	b.n	800faa4 <HAL_I2C_Init+0xe8>
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800fa96:	fb02 f303 	mul.w	r3, r2, r3
 800fa9a:	4a69      	ldr	r2, [pc, #420]	@ (800fc40 <HAL_I2C_Init+0x284>)
 800fa9c:	fba2 2303 	umull	r2, r3, r2, r3
 800faa0:	099b      	lsrs	r3, r3, #6
 800faa2:	3301      	adds	r3, #1
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	6812      	ldr	r2, [r2, #0]
 800faa8:	430b      	orrs	r3, r1
 800faaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	69db      	ldr	r3, [r3, #28]
 800fab2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800fab6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	495c      	ldr	r1, [pc, #368]	@ (800fc30 <HAL_I2C_Init+0x274>)
 800fac0:	428b      	cmp	r3, r1
 800fac2:	d819      	bhi.n	800faf8 <HAL_I2C_Init+0x13c>
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	1e59      	subs	r1, r3, #1
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	005b      	lsls	r3, r3, #1
 800face:	fbb1 f3f3 	udiv	r3, r1, r3
 800fad2:	1c59      	adds	r1, r3, #1
 800fad4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800fad8:	400b      	ands	r3, r1
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00a      	beq.n	800faf4 <HAL_I2C_Init+0x138>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	1e59      	subs	r1, r3, #1
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	005b      	lsls	r3, r3, #1
 800fae8:	fbb1 f3f3 	udiv	r3, r1, r3
 800faec:	3301      	adds	r3, #1
 800faee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800faf2:	e051      	b.n	800fb98 <HAL_I2C_Init+0x1dc>
 800faf4:	2304      	movs	r3, #4
 800faf6:	e04f      	b.n	800fb98 <HAL_I2C_Init+0x1dc>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d111      	bne.n	800fb24 <HAL_I2C_Init+0x168>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	1e58      	subs	r0, r3, #1
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6859      	ldr	r1, [r3, #4]
 800fb08:	460b      	mov	r3, r1
 800fb0a:	005b      	lsls	r3, r3, #1
 800fb0c:	440b      	add	r3, r1
 800fb0e:	fbb0 f3f3 	udiv	r3, r0, r3
 800fb12:	3301      	adds	r3, #1
 800fb14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	bf0c      	ite	eq
 800fb1c:	2301      	moveq	r3, #1
 800fb1e:	2300      	movne	r3, #0
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	e012      	b.n	800fb4a <HAL_I2C_Init+0x18e>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	1e58      	subs	r0, r3, #1
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6859      	ldr	r1, [r3, #4]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	440b      	add	r3, r1
 800fb32:	0099      	lsls	r1, r3, #2
 800fb34:	440b      	add	r3, r1
 800fb36:	fbb0 f3f3 	udiv	r3, r0, r3
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	bf0c      	ite	eq
 800fb44:	2301      	moveq	r3, #1
 800fb46:	2300      	movne	r3, #0
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d001      	beq.n	800fb52 <HAL_I2C_Init+0x196>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e022      	b.n	800fb98 <HAL_I2C_Init+0x1dc>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10e      	bne.n	800fb78 <HAL_I2C_Init+0x1bc>
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	1e58      	subs	r0, r3, #1
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6859      	ldr	r1, [r3, #4]
 800fb62:	460b      	mov	r3, r1
 800fb64:	005b      	lsls	r3, r3, #1
 800fb66:	440b      	add	r3, r1
 800fb68:	fbb0 f3f3 	udiv	r3, r0, r3
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb76:	e00f      	b.n	800fb98 <HAL_I2C_Init+0x1dc>
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	1e58      	subs	r0, r3, #1
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6859      	ldr	r1, [r3, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	440b      	add	r3, r1
 800fb86:	0099      	lsls	r1, r3, #2
 800fb88:	440b      	add	r3, r1
 800fb8a:	fbb0 f3f3 	udiv	r3, r0, r3
 800fb8e:	3301      	adds	r3, #1
 800fb90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fb98:	6879      	ldr	r1, [r7, #4]
 800fb9a:	6809      	ldr	r1, [r1, #0]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	69da      	ldr	r2, [r3, #28]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a1b      	ldr	r3, [r3, #32]
 800fbb2:	431a      	orrs	r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	430a      	orrs	r2, r1
 800fbba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800fbc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	6911      	ldr	r1, [r2, #16]
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	68d2      	ldr	r2, [r2, #12]
 800fbd2:	4311      	orrs	r1, r2
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	6812      	ldr	r2, [r2, #0]
 800fbd8:	430b      	orrs	r3, r1
 800fbda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	695a      	ldr	r2, [r3, #20]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	699b      	ldr	r3, [r3, #24]
 800fbee:	431a      	orrs	r2, r3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	430a      	orrs	r2, r1
 800fbf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f042 0201 	orr.w	r2, r2, #1
 800fc06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2220      	movs	r2, #32
 800fc12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	000186a0 	.word	0x000186a0
 800fc34:	001e847f 	.word	0x001e847f
 800fc38:	003d08ff 	.word	0x003d08ff
 800fc3c:	431bde83 	.word	0x431bde83
 800fc40:	10624dd3 	.word	0x10624dd3

0800fc44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d101      	bne.n	800fc56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800fc52:	2301      	movs	r3, #1
 800fc54:	e021      	b.n	800fc9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2224      	movs	r2, #36	@ 0x24
 800fc5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f022 0201 	bic.w	r2, r2, #1
 800fc6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7fd f9f0 	bl	800d054 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b088      	sub	sp, #32
 800fca8:	af02      	add	r7, sp, #8
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	607a      	str	r2, [r7, #4]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	817b      	strh	r3, [r7, #10]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800fcb8:	f7ff f9ce 	bl	800f058 <HAL_GetTick>
 800fcbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	2b20      	cmp	r3, #32
 800fcc8:	f040 80e0 	bne.w	800fe8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	2319      	movs	r3, #25
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	4970      	ldr	r1, [pc, #448]	@ (800fe98 <HAL_I2C_Master_Transmit+0x1f4>)
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f000 fd92 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d001      	beq.n	800fce6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800fce2:	2302      	movs	r3, #2
 800fce4:	e0d3      	b.n	800fe8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d101      	bne.n	800fcf4 <HAL_I2C_Master_Transmit+0x50>
 800fcf0:	2302      	movs	r3, #2
 800fcf2:	e0cc      	b.n	800fe8e <HAL_I2C_Master_Transmit+0x1ea>
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d007      	beq.n	800fd1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f042 0201 	orr.w	r2, r2, #1
 800fd18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fd28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2221      	movs	r2, #33	@ 0x21
 800fd2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2210      	movs	r2, #16
 800fd36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	893a      	ldrh	r2, [r7, #8]
 800fd4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	4a50      	ldr	r2, [pc, #320]	@ (800fe9c <HAL_I2C_Master_Transmit+0x1f8>)
 800fd5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800fd5c:	8979      	ldrh	r1, [r7, #10]
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	6a3a      	ldr	r2, [r7, #32]
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f000 fbfc 	bl	8010560 <I2C_MasterRequestWrite>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d001      	beq.n	800fd72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e08d      	b.n	800fe8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fd72:	2300      	movs	r3, #0
 800fd74:	613b      	str	r3, [r7, #16]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	695b      	ldr	r3, [r3, #20]
 800fd7c:	613b      	str	r3, [r7, #16]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	699b      	ldr	r3, [r3, #24]
 800fd84:	613b      	str	r3, [r7, #16]
 800fd86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800fd88:	e066      	b.n	800fe58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	6a39      	ldr	r1, [r7, #32]
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	f000 fe50 	bl	8010a34 <I2C_WaitOnTXEFlagUntilTimeout>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00d      	beq.n	800fdb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd9e:	2b04      	cmp	r3, #4
 800fda0:	d107      	bne.n	800fdb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fdb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e06b      	b.n	800fe8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdba:	781a      	ldrb	r2, [r3, #0]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdc6:	1c5a      	adds	r2, r3, #1
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	3b01      	subs	r3, #1
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdde:	3b01      	subs	r3, #1
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	695b      	ldr	r3, [r3, #20]
 800fdec:	f003 0304 	and.w	r3, r3, #4
 800fdf0:	2b04      	cmp	r3, #4
 800fdf2:	d11b      	bne.n	800fe2c <HAL_I2C_Master_Transmit+0x188>
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d017      	beq.n	800fe2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe00:	781a      	ldrb	r2, [r3, #0]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe0c:	1c5a      	adds	r2, r3, #1
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe16:	b29b      	uxth	r3, r3
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	b29a      	uxth	r2, r3
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe24:	3b01      	subs	r3, #1
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fe2c:	697a      	ldr	r2, [r7, #20]
 800fe2e:	6a39      	ldr	r1, [r7, #32]
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f000 fe47 	bl	8010ac4 <I2C_WaitOnBTFFlagUntilTimeout>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00d      	beq.n	800fe58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe40:	2b04      	cmp	r3, #4
 800fe42:	d107      	bne.n	800fe54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fe52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800fe54:	2301      	movs	r3, #1
 800fe56:	e01a      	b.n	800fe8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d194      	bne.n	800fd8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fe6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2220      	movs	r2, #32
 800fe74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	e000      	b.n	800fe8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800fe8c:	2302      	movs	r3, #2
  }
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3718      	adds	r7, #24
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	00100002 	.word	0x00100002
 800fe9c:	ffff0000 	.word	0xffff0000

0800fea0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b08c      	sub	sp, #48	@ 0x30
 800fea4:	af02      	add	r7, sp, #8
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	607a      	str	r2, [r7, #4]
 800feaa:	461a      	mov	r2, r3
 800feac:	460b      	mov	r3, r1
 800feae:	817b      	strh	r3, [r7, #10]
 800feb0:	4613      	mov	r3, r2
 800feb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800feb4:	f7ff f8d0 	bl	800f058 <HAL_GetTick>
 800feb8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fec0:	b2db      	uxtb	r3, r3
 800fec2:	2b20      	cmp	r3, #32
 800fec4:	f040 8217 	bne.w	80102f6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800fec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	2319      	movs	r3, #25
 800fece:	2201      	movs	r2, #1
 800fed0:	497c      	ldr	r1, [pc, #496]	@ (80100c4 <HAL_I2C_Master_Receive+0x224>)
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f000 fc94 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d001      	beq.n	800fee2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800fede:	2302      	movs	r3, #2
 800fee0:	e20a      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d101      	bne.n	800fef0 <HAL_I2C_Master_Receive+0x50>
 800feec:	2302      	movs	r3, #2
 800feee:	e203      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f003 0301 	and.w	r3, r3, #1
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d007      	beq.n	800ff16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f042 0201 	orr.w	r2, r2, #1
 800ff14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ff24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	2222      	movs	r2, #34	@ 0x22
 800ff2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	2210      	movs	r2, #16
 800ff32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	893a      	ldrh	r2, [r7, #8]
 800ff46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	4a5c      	ldr	r2, [pc, #368]	@ (80100c8 <HAL_I2C_Master_Receive+0x228>)
 800ff56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ff58:	8979      	ldrh	r1, [r7, #10]
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f000 fb80 	bl	8010664 <I2C_MasterRequestRead>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d001      	beq.n	800ff6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	e1c4      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d113      	bne.n	800ff9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ff76:	2300      	movs	r3, #0
 800ff78:	623b      	str	r3, [r7, #32]
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	695b      	ldr	r3, [r3, #20]
 800ff80:	623b      	str	r3, [r7, #32]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	699b      	ldr	r3, [r3, #24]
 800ff88:	623b      	str	r3, [r7, #32]
 800ff8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	e198      	b.n	80102d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d11b      	bne.n	800ffde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ffb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	61fb      	str	r3, [r7, #28]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	695b      	ldr	r3, [r3, #20]
 800ffc0:	61fb      	str	r3, [r7, #28]
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	61fb      	str	r3, [r7, #28]
 800ffca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ffda:	601a      	str	r2, [r3, #0]
 800ffdc:	e178      	b.n	80102d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ffe2:	2b02      	cmp	r3, #2
 800ffe4:	d11b      	bne.n	801001e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010006:	2300      	movs	r3, #0
 8010008:	61bb      	str	r3, [r7, #24]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	695b      	ldr	r3, [r3, #20]
 8010010:	61bb      	str	r3, [r7, #24]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	699b      	ldr	r3, [r3, #24]
 8010018:	61bb      	str	r3, [r7, #24]
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	e158      	b.n	80102d0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801002c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801002e:	2300      	movs	r3, #0
 8010030:	617b      	str	r3, [r7, #20]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	695b      	ldr	r3, [r3, #20]
 8010038:	617b      	str	r3, [r7, #20]
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	617b      	str	r3, [r7, #20]
 8010042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8010044:	e144      	b.n	80102d0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801004a:	2b03      	cmp	r3, #3
 801004c:	f200 80f1 	bhi.w	8010232 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010054:	2b01      	cmp	r3, #1
 8010056:	d123      	bne.n	80100a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801005a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f000 fd79 	bl	8010b54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8010068:	2301      	movs	r3, #1
 801006a:	e145      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	691a      	ldr	r2, [r3, #16]
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010076:	b2d2      	uxtb	r2, r2
 8010078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801007e:	1c5a      	adds	r2, r3, #1
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010088:	3b01      	subs	r3, #1
 801008a:	b29a      	uxth	r2, r3
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010094:	b29b      	uxth	r3, r3
 8010096:	3b01      	subs	r3, #1
 8010098:	b29a      	uxth	r2, r3
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801009e:	e117      	b.n	80102d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d14e      	bne.n	8010146 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80100a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ae:	2200      	movs	r2, #0
 80100b0:	4906      	ldr	r1, [pc, #24]	@ (80100cc <HAL_I2C_Master_Receive+0x22c>)
 80100b2:	68f8      	ldr	r0, [r7, #12]
 80100b4:	f000 fba4 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d008      	beq.n	80100d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80100be:	2301      	movs	r3, #1
 80100c0:	e11a      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
 80100c2:	bf00      	nop
 80100c4:	00100002 	.word	0x00100002
 80100c8:	ffff0000 	.word	0xffff0000
 80100cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80100de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	691a      	ldr	r2, [r3, #16]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ea:	b2d2      	uxtb	r2, r2
 80100ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100f2:	1c5a      	adds	r2, r3, #1
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100fc:	3b01      	subs	r3, #1
 80100fe:	b29a      	uxth	r2, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010108:	b29b      	uxth	r3, r3
 801010a:	3b01      	subs	r3, #1
 801010c:	b29a      	uxth	r2, r3
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	691a      	ldr	r2, [r3, #16]
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801011c:	b2d2      	uxtb	r2, r2
 801011e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010124:	1c5a      	adds	r2, r3, #1
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801012e:	3b01      	subs	r3, #1
 8010130:	b29a      	uxth	r2, r3
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801013a:	b29b      	uxth	r3, r3
 801013c:	3b01      	subs	r3, #1
 801013e:	b29a      	uxth	r2, r3
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010144:	e0c4      	b.n	80102d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801014c:	2200      	movs	r2, #0
 801014e:	496c      	ldr	r1, [pc, #432]	@ (8010300 <HAL_I2C_Master_Receive+0x460>)
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f000 fb55 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 801015c:	2301      	movs	r3, #1
 801015e:	e0cb      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801016e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	691a      	ldr	r2, [r3, #16]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801017a:	b2d2      	uxtb	r2, r2
 801017c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010182:	1c5a      	adds	r2, r3, #1
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801018c:	3b01      	subs	r3, #1
 801018e:	b29a      	uxth	r2, r3
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010198:	b29b      	uxth	r3, r3
 801019a:	3b01      	subs	r3, #1
 801019c:	b29a      	uxth	r2, r3
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80101a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a8:	2200      	movs	r2, #0
 80101aa:	4955      	ldr	r1, [pc, #340]	@ (8010300 <HAL_I2C_Master_Receive+0x460>)
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f000 fb27 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d001      	beq.n	80101bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80101b8:	2301      	movs	r3, #1
 80101ba:	e09d      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80101ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	691a      	ldr	r2, [r3, #16]
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d6:	b2d2      	uxtb	r2, r2
 80101d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101de:	1c5a      	adds	r2, r3, #1
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101e8:	3b01      	subs	r3, #1
 80101ea:	b29a      	uxth	r2, r3
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	3b01      	subs	r3, #1
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	691a      	ldr	r2, [r3, #16]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010208:	b2d2      	uxtb	r2, r2
 801020a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010210:	1c5a      	adds	r2, r3, #1
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801021a:	3b01      	subs	r3, #1
 801021c:	b29a      	uxth	r2, r3
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010226:	b29b      	uxth	r3, r3
 8010228:	3b01      	subs	r3, #1
 801022a:	b29a      	uxth	r2, r3
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010230:	e04e      	b.n	80102d0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010234:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010236:	68f8      	ldr	r0, [r7, #12]
 8010238:	f000 fc8c 	bl	8010b54 <I2C_WaitOnRXNEFlagUntilTimeout>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d001      	beq.n	8010246 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8010242:	2301      	movs	r3, #1
 8010244:	e058      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	691a      	ldr	r2, [r3, #16]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010250:	b2d2      	uxtb	r2, r2
 8010252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010258:	1c5a      	adds	r2, r3, #1
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010262:	3b01      	subs	r3, #1
 8010264:	b29a      	uxth	r2, r3
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801026e:	b29b      	uxth	r3, r3
 8010270:	3b01      	subs	r3, #1
 8010272:	b29a      	uxth	r2, r3
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	695b      	ldr	r3, [r3, #20]
 801027e:	f003 0304 	and.w	r3, r3, #4
 8010282:	2b04      	cmp	r3, #4
 8010284:	d124      	bne.n	80102d0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801028a:	2b03      	cmp	r3, #3
 801028c:	d107      	bne.n	801029e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801029c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	691a      	ldr	r2, [r3, #16]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102a8:	b2d2      	uxtb	r2, r2
 80102aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102b0:	1c5a      	adds	r2, r3, #1
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102ba:	3b01      	subs	r3, #1
 80102bc:	b29a      	uxth	r2, r3
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	3b01      	subs	r3, #1
 80102ca:	b29a      	uxth	r2, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f47f aeb6 	bne.w	8010046 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2220      	movs	r2, #32
 80102de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80102f2:	2300      	movs	r3, #0
 80102f4:	e000      	b.n	80102f8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80102f6:	2302      	movs	r3, #2
  }
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3728      	adds	r7, #40	@ 0x28
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	00010004 	.word	0x00010004

08010304 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b08a      	sub	sp, #40	@ 0x28
 8010308:	af02      	add	r7, sp, #8
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	607a      	str	r2, [r7, #4]
 801030e:	603b      	str	r3, [r7, #0]
 8010310:	460b      	mov	r3, r1
 8010312:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8010314:	f7fe fea0 	bl	800f058 <HAL_GetTick>
 8010318:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 801031a:	2300      	movs	r3, #0
 801031c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010324:	b2db      	uxtb	r3, r3
 8010326:	2b20      	cmp	r3, #32
 8010328:	f040 8111 	bne.w	801054e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	2319      	movs	r3, #25
 8010332:	2201      	movs	r2, #1
 8010334:	4988      	ldr	r1, [pc, #544]	@ (8010558 <HAL_I2C_IsDeviceReady+0x254>)
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f000 fa62 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d001      	beq.n	8010346 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8010342:	2302      	movs	r3, #2
 8010344:	e104      	b.n	8010550 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801034c:	2b01      	cmp	r3, #1
 801034e:	d101      	bne.n	8010354 <HAL_I2C_IsDeviceReady+0x50>
 8010350:	2302      	movs	r3, #2
 8010352:	e0fd      	b.n	8010550 <HAL_I2C_IsDeviceReady+0x24c>
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2201      	movs	r2, #1
 8010358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f003 0301 	and.w	r3, r3, #1
 8010366:	2b01      	cmp	r3, #1
 8010368:	d007      	beq.n	801037a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f042 0201 	orr.w	r2, r2, #1
 8010378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010388:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2224      	movs	r2, #36	@ 0x24
 801038e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	2200      	movs	r2, #0
 8010396:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	4a70      	ldr	r2, [pc, #448]	@ (801055c <HAL_I2C_IsDeviceReady+0x258>)
 801039c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80103ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80103ae:	69fb      	ldr	r3, [r7, #28]
 80103b0:	9300      	str	r3, [sp, #0]
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	2200      	movs	r2, #0
 80103b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	f000 fa20 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00d      	beq.n	80103e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80103d4:	d103      	bne.n	80103de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80103dc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80103de:	2303      	movs	r3, #3
 80103e0:	e0b6      	b.n	8010550 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80103e2:	897b      	ldrh	r3, [r7, #10]
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	461a      	mov	r2, r3
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80103f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80103f2:	f7fe fe31 	bl	800f058 <HAL_GetTick>
 80103f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	695b      	ldr	r3, [r3, #20]
 80103fe:	f003 0302 	and.w	r3, r3, #2
 8010402:	2b02      	cmp	r3, #2
 8010404:	bf0c      	ite	eq
 8010406:	2301      	moveq	r3, #1
 8010408:	2300      	movne	r3, #0
 801040a:	b2db      	uxtb	r3, r3
 801040c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801041c:	bf0c      	ite	eq
 801041e:	2301      	moveq	r3, #1
 8010420:	2300      	movne	r3, #0
 8010422:	b2db      	uxtb	r3, r3
 8010424:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8010426:	e025      	b.n	8010474 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010428:	f7fe fe16 	bl	800f058 <HAL_GetTick>
 801042c:	4602      	mov	r2, r0
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	1ad3      	subs	r3, r2, r3
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	429a      	cmp	r2, r3
 8010436:	d302      	bcc.n	801043e <HAL_I2C_IsDeviceReady+0x13a>
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d103      	bne.n	8010446 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	22a0      	movs	r2, #160	@ 0xa0
 8010442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	695b      	ldr	r3, [r3, #20]
 801044c:	f003 0302 	and.w	r3, r3, #2
 8010450:	2b02      	cmp	r3, #2
 8010452:	bf0c      	ite	eq
 8010454:	2301      	moveq	r3, #1
 8010456:	2300      	movne	r3, #0
 8010458:	b2db      	uxtb	r3, r3
 801045a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	695b      	ldr	r3, [r3, #20]
 8010462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801046a:	bf0c      	ite	eq
 801046c:	2301      	moveq	r3, #1
 801046e:	2300      	movne	r3, #0
 8010470:	b2db      	uxtb	r3, r3
 8010472:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801047a:	b2db      	uxtb	r3, r3
 801047c:	2ba0      	cmp	r3, #160	@ 0xa0
 801047e:	d005      	beq.n	801048c <HAL_I2C_IsDeviceReady+0x188>
 8010480:	7dfb      	ldrb	r3, [r7, #23]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d102      	bne.n	801048c <HAL_I2C_IsDeviceReady+0x188>
 8010486:	7dbb      	ldrb	r3, [r7, #22]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d0cd      	beq.n	8010428 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2220      	movs	r2, #32
 8010490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	695b      	ldr	r3, [r3, #20]
 801049a:	f003 0302 	and.w	r3, r3, #2
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d129      	bne.n	80104f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80104b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80104b2:	2300      	movs	r3, #0
 80104b4:	613b      	str	r3, [r7, #16]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	695b      	ldr	r3, [r3, #20]
 80104bc:	613b      	str	r3, [r7, #16]
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	699b      	ldr	r3, [r3, #24]
 80104c4:	613b      	str	r3, [r7, #16]
 80104c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	2319      	movs	r3, #25
 80104ce:	2201      	movs	r2, #1
 80104d0:	4921      	ldr	r1, [pc, #132]	@ (8010558 <HAL_I2C_IsDeviceReady+0x254>)
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	f000 f994 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 80104d8:	4603      	mov	r3, r0
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d001      	beq.n	80104e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	e036      	b.n	8010550 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2220      	movs	r2, #32
 80104e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2200      	movs	r2, #0
 80104ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80104f2:	2300      	movs	r3, #0
 80104f4:	e02c      	b.n	8010550 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010504:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801050e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	9300      	str	r3, [sp, #0]
 8010514:	2319      	movs	r3, #25
 8010516:	2201      	movs	r2, #1
 8010518:	490f      	ldr	r1, [pc, #60]	@ (8010558 <HAL_I2C_IsDeviceReady+0x254>)
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f000 f970 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d001      	beq.n	801052a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8010526:	2301      	movs	r3, #1
 8010528:	e012      	b.n	8010550 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	3301      	adds	r3, #1
 801052e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8010530:	69ba      	ldr	r2, [r7, #24]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	429a      	cmp	r2, r3
 8010536:	f4ff af32 	bcc.w	801039e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2220      	movs	r2, #32
 801053e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2200      	movs	r2, #0
 8010546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 801054a:	2301      	movs	r3, #1
 801054c:	e000      	b.n	8010550 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 801054e:	2302      	movs	r3, #2
  }
}
 8010550:	4618      	mov	r0, r3
 8010552:	3720      	adds	r7, #32
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	00100002 	.word	0x00100002
 801055c:	ffff0000 	.word	0xffff0000

08010560 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af02      	add	r7, sp, #8
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	607a      	str	r2, [r7, #4]
 801056a:	603b      	str	r3, [r7, #0]
 801056c:	460b      	mov	r3, r1
 801056e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010574:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	2b08      	cmp	r3, #8
 801057a:	d006      	beq.n	801058a <I2C_MasterRequestWrite+0x2a>
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d003      	beq.n	801058a <I2C_MasterRequestWrite+0x2a>
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010588:	d108      	bne.n	801059c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	e00b      	b.n	80105b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105a0:	2b12      	cmp	r3, #18
 80105a2:	d107      	bne.n	80105b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80105b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	9300      	str	r3, [sp, #0]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80105c0:	68f8      	ldr	r0, [r7, #12]
 80105c2:	f000 f91d 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00d      	beq.n	80105e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80105d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105da:	d103      	bne.n	80105e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80105e4:	2303      	movs	r3, #3
 80105e6:	e035      	b.n	8010654 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	691b      	ldr	r3, [r3, #16]
 80105ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80105f0:	d108      	bne.n	8010604 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80105f2:	897b      	ldrh	r3, [r7, #10]
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	461a      	mov	r2, r3
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8010600:	611a      	str	r2, [r3, #16]
 8010602:	e01b      	b.n	801063c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010604:	897b      	ldrh	r3, [r7, #10]
 8010606:	11db      	asrs	r3, r3, #7
 8010608:	b2db      	uxtb	r3, r3
 801060a:	f003 0306 	and.w	r3, r3, #6
 801060e:	b2db      	uxtb	r3, r3
 8010610:	f063 030f 	orn	r3, r3, #15
 8010614:	b2da      	uxtb	r2, r3
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	490e      	ldr	r1, [pc, #56]	@ (801065c <I2C_MasterRequestWrite+0xfc>)
 8010622:	68f8      	ldr	r0, [r7, #12]
 8010624:	f000 f966 	bl	80108f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d001      	beq.n	8010632 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801062e:	2301      	movs	r3, #1
 8010630:	e010      	b.n	8010654 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010632:	897b      	ldrh	r3, [r7, #10]
 8010634:	b2da      	uxtb	r2, r3
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	4907      	ldr	r1, [pc, #28]	@ (8010660 <I2C_MasterRequestWrite+0x100>)
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	f000 f956 	bl	80108f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d001      	beq.n	8010652 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801064e:	2301      	movs	r3, #1
 8010650:	e000      	b.n	8010654 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010652:	2300      	movs	r3, #0
}
 8010654:	4618      	mov	r0, r3
 8010656:	3718      	adds	r7, #24
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	00010008 	.word	0x00010008
 8010660:	00010002 	.word	0x00010002

08010664 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b088      	sub	sp, #32
 8010668:	af02      	add	r7, sp, #8
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	607a      	str	r2, [r7, #4]
 801066e:	603b      	str	r3, [r7, #0]
 8010670:	460b      	mov	r3, r1
 8010672:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010678:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010688:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	2b08      	cmp	r3, #8
 801068e:	d006      	beq.n	801069e <I2C_MasterRequestRead+0x3a>
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	2b01      	cmp	r3, #1
 8010694:	d003      	beq.n	801069e <I2C_MasterRequestRead+0x3a>
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801069c:	d108      	bne.n	80106b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80106ac:	601a      	str	r2, [r3, #0]
 80106ae:	e00b      	b.n	80106c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106b4:	2b11      	cmp	r3, #17
 80106b6:	d107      	bne.n	80106c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80106c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f000 f893 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00d      	beq.n	80106fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106ee:	d103      	bne.n	80106f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80106f8:	2303      	movs	r3, #3
 80106fa:	e079      	b.n	80107f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	691b      	ldr	r3, [r3, #16]
 8010700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010704:	d108      	bne.n	8010718 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010706:	897b      	ldrh	r3, [r7, #10]
 8010708:	b2db      	uxtb	r3, r3
 801070a:	f043 0301 	orr.w	r3, r3, #1
 801070e:	b2da      	uxtb	r2, r3
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	611a      	str	r2, [r3, #16]
 8010716:	e05f      	b.n	80107d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010718:	897b      	ldrh	r3, [r7, #10]
 801071a:	11db      	asrs	r3, r3, #7
 801071c:	b2db      	uxtb	r3, r3
 801071e:	f003 0306 	and.w	r3, r3, #6
 8010722:	b2db      	uxtb	r3, r3
 8010724:	f063 030f 	orn	r3, r3, #15
 8010728:	b2da      	uxtb	r2, r3
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	4930      	ldr	r1, [pc, #192]	@ (80107f8 <I2C_MasterRequestRead+0x194>)
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	f000 f8dc 	bl	80108f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d001      	beq.n	8010746 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8010742:	2301      	movs	r3, #1
 8010744:	e054      	b.n	80107f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010746:	897b      	ldrh	r3, [r7, #10]
 8010748:	b2da      	uxtb	r2, r3
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	4929      	ldr	r1, [pc, #164]	@ (80107fc <I2C_MasterRequestRead+0x198>)
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f000 f8cc 	bl	80108f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d001      	beq.n	8010766 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e044      	b.n	80107f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010766:	2300      	movs	r3, #0
 8010768:	613b      	str	r3, [r7, #16]
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	695b      	ldr	r3, [r3, #20]
 8010770:	613b      	str	r3, [r7, #16]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	699b      	ldr	r3, [r3, #24]
 8010778:	613b      	str	r3, [r7, #16]
 801077a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801078a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f000 f831 	bl	8010800 <I2C_WaitOnFlagUntilTimeout>
 801079e:	4603      	mov	r3, r0
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d00d      	beq.n	80107c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80107ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107b2:	d103      	bne.n	80107bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80107bc:	2303      	movs	r3, #3
 80107be:	e017      	b.n	80107f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80107c0:	897b      	ldrh	r3, [r7, #10]
 80107c2:	11db      	asrs	r3, r3, #7
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	f003 0306 	and.w	r3, r3, #6
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	f063 030e 	orn	r3, r3, #14
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	687a      	ldr	r2, [r7, #4]
 80107dc:	4907      	ldr	r1, [pc, #28]	@ (80107fc <I2C_MasterRequestRead+0x198>)
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	f000 f888 	bl	80108f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d001      	beq.n	80107ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80107ea:	2301      	movs	r3, #1
 80107ec:	e000      	b.n	80107f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80107ee:	2300      	movs	r3, #0
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3718      	adds	r7, #24
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	00010008 	.word	0x00010008
 80107fc:	00010002 	.word	0x00010002

08010800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	603b      	str	r3, [r7, #0]
 801080c:	4613      	mov	r3, r2
 801080e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010810:	e048      	b.n	80108a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010818:	d044      	beq.n	80108a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801081a:	f7fe fc1d 	bl	800f058 <HAL_GetTick>
 801081e:	4602      	mov	r2, r0
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	683a      	ldr	r2, [r7, #0]
 8010826:	429a      	cmp	r2, r3
 8010828:	d302      	bcc.n	8010830 <I2C_WaitOnFlagUntilTimeout+0x30>
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d139      	bne.n	80108a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	0c1b      	lsrs	r3, r3, #16
 8010834:	b2db      	uxtb	r3, r3
 8010836:	2b01      	cmp	r3, #1
 8010838:	d10d      	bne.n	8010856 <I2C_WaitOnFlagUntilTimeout+0x56>
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	695b      	ldr	r3, [r3, #20]
 8010840:	43da      	mvns	r2, r3
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	4013      	ands	r3, r2
 8010846:	b29b      	uxth	r3, r3
 8010848:	2b00      	cmp	r3, #0
 801084a:	bf0c      	ite	eq
 801084c:	2301      	moveq	r3, #1
 801084e:	2300      	movne	r3, #0
 8010850:	b2db      	uxtb	r3, r3
 8010852:	461a      	mov	r2, r3
 8010854:	e00c      	b.n	8010870 <I2C_WaitOnFlagUntilTimeout+0x70>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	699b      	ldr	r3, [r3, #24]
 801085c:	43da      	mvns	r2, r3
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	4013      	ands	r3, r2
 8010862:	b29b      	uxth	r3, r3
 8010864:	2b00      	cmp	r3, #0
 8010866:	bf0c      	ite	eq
 8010868:	2301      	moveq	r3, #1
 801086a:	2300      	movne	r3, #0
 801086c:	b2db      	uxtb	r3, r3
 801086e:	461a      	mov	r2, r3
 8010870:	79fb      	ldrb	r3, [r7, #7]
 8010872:	429a      	cmp	r2, r3
 8010874:	d116      	bne.n	80108a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2200      	movs	r2, #0
 801087a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2220      	movs	r2, #32
 8010880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2200      	movs	r2, #0
 8010888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010890:	f043 0220 	orr.w	r2, r3, #32
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2200      	movs	r2, #0
 801089c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80108a0:	2301      	movs	r3, #1
 80108a2:	e023      	b.n	80108ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	0c1b      	lsrs	r3, r3, #16
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d10d      	bne.n	80108ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	695b      	ldr	r3, [r3, #20]
 80108b4:	43da      	mvns	r2, r3
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	4013      	ands	r3, r2
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	2b00      	cmp	r3, #0
 80108be:	bf0c      	ite	eq
 80108c0:	2301      	moveq	r3, #1
 80108c2:	2300      	movne	r3, #0
 80108c4:	b2db      	uxtb	r3, r3
 80108c6:	461a      	mov	r2, r3
 80108c8:	e00c      	b.n	80108e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	699b      	ldr	r3, [r3, #24]
 80108d0:	43da      	mvns	r2, r3
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	4013      	ands	r3, r2
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	2b00      	cmp	r3, #0
 80108da:	bf0c      	ite	eq
 80108dc:	2301      	moveq	r3, #1
 80108de:	2300      	movne	r3, #0
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	461a      	mov	r2, r3
 80108e4:	79fb      	ldrb	r3, [r7, #7]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d093      	beq.n	8010812 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	60f8      	str	r0, [r7, #12]
 80108fc:	60b9      	str	r1, [r7, #8]
 80108fe:	607a      	str	r2, [r7, #4]
 8010900:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010902:	e071      	b.n	80109e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801090e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010912:	d123      	bne.n	801095c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010922:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801092c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	2200      	movs	r2, #0
 8010932:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2220      	movs	r2, #32
 8010938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2200      	movs	r2, #0
 8010940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010948:	f043 0204 	orr.w	r2, r3, #4
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2200      	movs	r2, #0
 8010954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8010958:	2301      	movs	r3, #1
 801095a:	e067      	b.n	8010a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010962:	d041      	beq.n	80109e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010964:	f7fe fb78 	bl	800f058 <HAL_GetTick>
 8010968:	4602      	mov	r2, r0
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	429a      	cmp	r2, r3
 8010972:	d302      	bcc.n	801097a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d136      	bne.n	80109e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	0c1b      	lsrs	r3, r3, #16
 801097e:	b2db      	uxtb	r3, r3
 8010980:	2b01      	cmp	r3, #1
 8010982:	d10c      	bne.n	801099e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	695b      	ldr	r3, [r3, #20]
 801098a:	43da      	mvns	r2, r3
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	4013      	ands	r3, r2
 8010990:	b29b      	uxth	r3, r3
 8010992:	2b00      	cmp	r3, #0
 8010994:	bf14      	ite	ne
 8010996:	2301      	movne	r3, #1
 8010998:	2300      	moveq	r3, #0
 801099a:	b2db      	uxtb	r3, r3
 801099c:	e00b      	b.n	80109b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	699b      	ldr	r3, [r3, #24]
 80109a4:	43da      	mvns	r2, r3
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	4013      	ands	r3, r2
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	bf14      	ite	ne
 80109b0:	2301      	movne	r3, #1
 80109b2:	2300      	moveq	r3, #0
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d016      	beq.n	80109e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2200      	movs	r2, #0
 80109be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2220      	movs	r2, #32
 80109c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109d4:	f043 0220 	orr.w	r2, r3, #32
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2200      	movs	r2, #0
 80109e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80109e4:	2301      	movs	r3, #1
 80109e6:	e021      	b.n	8010a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	0c1b      	lsrs	r3, r3, #16
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d10c      	bne.n	8010a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	695b      	ldr	r3, [r3, #20]
 80109f8:	43da      	mvns	r2, r3
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	4013      	ands	r3, r2
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	bf14      	ite	ne
 8010a04:	2301      	movne	r3, #1
 8010a06:	2300      	moveq	r3, #0
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	e00b      	b.n	8010a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	699b      	ldr	r3, [r3, #24]
 8010a12:	43da      	mvns	r2, r3
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	4013      	ands	r3, r2
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	bf14      	ite	ne
 8010a1e:	2301      	movne	r3, #1
 8010a20:	2300      	moveq	r3, #0
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f47f af6d 	bne.w	8010904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010a40:	e034      	b.n	8010aac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f000 f8e3 	bl	8010c0e <I2C_IsAcknowledgeFailed>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d001      	beq.n	8010a52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010a4e:	2301      	movs	r3, #1
 8010a50:	e034      	b.n	8010abc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a58:	d028      	beq.n	8010aac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a5a:	f7fe fafd 	bl	800f058 <HAL_GetTick>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	1ad3      	subs	r3, r2, r3
 8010a64:	68ba      	ldr	r2, [r7, #8]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d302      	bcc.n	8010a70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d11d      	bne.n	8010aac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	695b      	ldr	r3, [r3, #20]
 8010a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a7a:	2b80      	cmp	r3, #128	@ 0x80
 8010a7c:	d016      	beq.n	8010aac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2200      	movs	r2, #0
 8010a82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2220      	movs	r2, #32
 8010a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a98:	f043 0220 	orr.w	r2, r3, #32
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	e007      	b.n	8010abc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	695b      	ldr	r3, [r3, #20]
 8010ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ab6:	2b80      	cmp	r3, #128	@ 0x80
 8010ab8:	d1c3      	bne.n	8010a42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010aba:	2300      	movs	r3, #0
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3710      	adds	r7, #16
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010ad0:	e034      	b.n	8010b3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	f000 f89b 	bl	8010c0e <I2C_IsAcknowledgeFailed>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d001      	beq.n	8010ae2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	e034      	b.n	8010b4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae8:	d028      	beq.n	8010b3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010aea:	f7fe fab5 	bl	800f058 <HAL_GetTick>
 8010aee:	4602      	mov	r2, r0
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	1ad3      	subs	r3, r2, r3
 8010af4:	68ba      	ldr	r2, [r7, #8]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d302      	bcc.n	8010b00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d11d      	bne.n	8010b3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	695b      	ldr	r3, [r3, #20]
 8010b06:	f003 0304 	and.w	r3, r3, #4
 8010b0a:	2b04      	cmp	r3, #4
 8010b0c:	d016      	beq.n	8010b3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	2200      	movs	r2, #0
 8010b12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2220      	movs	r2, #32
 8010b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b28:	f043 0220 	orr.w	r2, r3, #32
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	e007      	b.n	8010b4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	695b      	ldr	r3, [r3, #20]
 8010b42:	f003 0304 	and.w	r3, r3, #4
 8010b46:	2b04      	cmp	r3, #4
 8010b48:	d1c3      	bne.n	8010ad2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010b4a:	2300      	movs	r3, #0
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3710      	adds	r7, #16
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010b60:	e049      	b.n	8010bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	695b      	ldr	r3, [r3, #20]
 8010b68:	f003 0310 	and.w	r3, r3, #16
 8010b6c:	2b10      	cmp	r3, #16
 8010b6e:	d119      	bne.n	8010ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f06f 0210 	mvn.w	r2, #16
 8010b78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2220      	movs	r2, #32
 8010b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e030      	b.n	8010c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ba4:	f7fe fa58 	bl	800f058 <HAL_GetTick>
 8010ba8:	4602      	mov	r2, r0
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d302      	bcc.n	8010bba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d11d      	bne.n	8010bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	695b      	ldr	r3, [r3, #20]
 8010bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bc4:	2b40      	cmp	r3, #64	@ 0x40
 8010bc6:	d016      	beq.n	8010bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2220      	movs	r2, #32
 8010bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010be2:	f043 0220 	orr.w	r2, r3, #32
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2200      	movs	r2, #0
 8010bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e007      	b.n	8010c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	695b      	ldr	r3, [r3, #20]
 8010bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c00:	2b40      	cmp	r3, #64	@ 0x40
 8010c02:	d1ae      	bne.n	8010b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010c04:	2300      	movs	r3, #0
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}

08010c0e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8010c0e:	b480      	push	{r7}
 8010c10:	b083      	sub	sp, #12
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	695b      	ldr	r3, [r3, #20]
 8010c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c24:	d11b      	bne.n	8010c5e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8010c2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2220      	movs	r2, #32
 8010c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c4a:	f043 0204 	orr.w	r2, r3, #4
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e000      	b.n	8010c60 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8010c5e:	2300      	movs	r3, #0
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr

08010c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d101      	bne.n	8010c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	e0cc      	b.n	8010e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010c80:	4b68      	ldr	r3, [pc, #416]	@ (8010e24 <HAL_RCC_ClockConfig+0x1b8>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f003 030f 	and.w	r3, r3, #15
 8010c88:	683a      	ldr	r2, [r7, #0]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d90c      	bls.n	8010ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010c8e:	4b65      	ldr	r3, [pc, #404]	@ (8010e24 <HAL_RCC_ClockConfig+0x1b8>)
 8010c90:	683a      	ldr	r2, [r7, #0]
 8010c92:	b2d2      	uxtb	r2, r2
 8010c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010c96:	4b63      	ldr	r3, [pc, #396]	@ (8010e24 <HAL_RCC_ClockConfig+0x1b8>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f003 030f 	and.w	r3, r3, #15
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d001      	beq.n	8010ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e0b8      	b.n	8010e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f003 0302 	and.w	r3, r3, #2
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d020      	beq.n	8010cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f003 0304 	and.w	r3, r3, #4
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d005      	beq.n	8010ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010cc0:	4b59      	ldr	r3, [pc, #356]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010cc2:	689b      	ldr	r3, [r3, #8]
 8010cc4:	4a58      	ldr	r2, [pc, #352]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010cc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8010cca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f003 0308 	and.w	r3, r3, #8
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d005      	beq.n	8010ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010cd8:	4b53      	ldr	r3, [pc, #332]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010cda:	689b      	ldr	r3, [r3, #8]
 8010cdc:	4a52      	ldr	r2, [pc, #328]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010cde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8010ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010ce4:	4b50      	ldr	r3, [pc, #320]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010ce6:	689b      	ldr	r3, [r3, #8]
 8010ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	689b      	ldr	r3, [r3, #8]
 8010cf0:	494d      	ldr	r1, [pc, #308]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f003 0301 	and.w	r3, r3, #1
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d044      	beq.n	8010d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d107      	bne.n	8010d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d0a:	4b47      	ldr	r3, [pc, #284]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d119      	bne.n	8010d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010d16:	2301      	movs	r3, #1
 8010d18:	e07f      	b.n	8010e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	d003      	beq.n	8010d2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010d26:	2b03      	cmp	r3, #3
 8010d28:	d107      	bne.n	8010d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d109      	bne.n	8010d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010d36:	2301      	movs	r3, #1
 8010d38:	e06f      	b.n	8010e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f003 0302 	and.w	r3, r3, #2
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d101      	bne.n	8010d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010d46:	2301      	movs	r3, #1
 8010d48:	e067      	b.n	8010e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010d4a:	4b37      	ldr	r3, [pc, #220]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010d4c:	689b      	ldr	r3, [r3, #8]
 8010d4e:	f023 0203 	bic.w	r2, r3, #3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	4934      	ldr	r1, [pc, #208]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010d5c:	f7fe f97c 	bl	800f058 <HAL_GetTick>
 8010d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010d62:	e00a      	b.n	8010d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010d64:	f7fe f978 	bl	800f058 <HAL_GetTick>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d901      	bls.n	8010d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010d76:	2303      	movs	r3, #3
 8010d78:	e04f      	b.n	8010e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010d7c:	689b      	ldr	r3, [r3, #8]
 8010d7e:	f003 020c 	and.w	r2, r3, #12
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d1eb      	bne.n	8010d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010d8c:	4b25      	ldr	r3, [pc, #148]	@ (8010e24 <HAL_RCC_ClockConfig+0x1b8>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f003 030f 	and.w	r3, r3, #15
 8010d94:	683a      	ldr	r2, [r7, #0]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d20c      	bcs.n	8010db4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010d9a:	4b22      	ldr	r3, [pc, #136]	@ (8010e24 <HAL_RCC_ClockConfig+0x1b8>)
 8010d9c:	683a      	ldr	r2, [r7, #0]
 8010d9e:	b2d2      	uxtb	r2, r2
 8010da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010da2:	4b20      	ldr	r3, [pc, #128]	@ (8010e24 <HAL_RCC_ClockConfig+0x1b8>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f003 030f 	and.w	r3, r3, #15
 8010daa:	683a      	ldr	r2, [r7, #0]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d001      	beq.n	8010db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010db0:	2301      	movs	r3, #1
 8010db2:	e032      	b.n	8010e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	f003 0304 	and.w	r3, r3, #4
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d008      	beq.n	8010dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010dc0:	4b19      	ldr	r3, [pc, #100]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010dc2:	689b      	ldr	r3, [r3, #8]
 8010dc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	68db      	ldr	r3, [r3, #12]
 8010dcc:	4916      	ldr	r1, [pc, #88]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f003 0308 	and.w	r3, r3, #8
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d009      	beq.n	8010df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010dde:	4b12      	ldr	r3, [pc, #72]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010de0:	689b      	ldr	r3, [r3, #8]
 8010de2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	691b      	ldr	r3, [r3, #16]
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	490e      	ldr	r1, [pc, #56]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010dee:	4313      	orrs	r3, r2
 8010df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8010df2:	f000 f855 	bl	8010ea0 <HAL_RCC_GetSysClockFreq>
 8010df6:	4602      	mov	r2, r0
 8010df8:	4b0b      	ldr	r3, [pc, #44]	@ (8010e28 <HAL_RCC_ClockConfig+0x1bc>)
 8010dfa:	689b      	ldr	r3, [r3, #8]
 8010dfc:	091b      	lsrs	r3, r3, #4
 8010dfe:	f003 030f 	and.w	r3, r3, #15
 8010e02:	490a      	ldr	r1, [pc, #40]	@ (8010e2c <HAL_RCC_ClockConfig+0x1c0>)
 8010e04:	5ccb      	ldrb	r3, [r1, r3]
 8010e06:	fa22 f303 	lsr.w	r3, r2, r3
 8010e0a:	4a09      	ldr	r2, [pc, #36]	@ (8010e30 <HAL_RCC_ClockConfig+0x1c4>)
 8010e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8010e0e:	4b09      	ldr	r3, [pc, #36]	@ (8010e34 <HAL_RCC_ClockConfig+0x1c8>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fe f8dc 	bl	800efd0 <HAL_InitTick>

  return HAL_OK;
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3710      	adds	r7, #16
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	40023c00 	.word	0x40023c00
 8010e28:	40023800 	.word	0x40023800
 8010e2c:	08019114 	.word	0x08019114
 8010e30:	200002ec 	.word	0x200002ec
 8010e34:	200002f0 	.word	0x200002f0

08010e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010e3c:	4b03      	ldr	r3, [pc, #12]	@ (8010e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop
 8010e4c:	200002ec 	.word	0x200002ec

08010e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010e54:	f7ff fff0 	bl	8010e38 <HAL_RCC_GetHCLKFreq>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	4b05      	ldr	r3, [pc, #20]	@ (8010e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	0a9b      	lsrs	r3, r3, #10
 8010e60:	f003 0307 	and.w	r3, r3, #7
 8010e64:	4903      	ldr	r1, [pc, #12]	@ (8010e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010e66:	5ccb      	ldrb	r3, [r1, r3]
 8010e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	40023800 	.word	0x40023800
 8010e74:	08019124 	.word	0x08019124

08010e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010e7c:	f7ff ffdc 	bl	8010e38 <HAL_RCC_GetHCLKFreq>
 8010e80:	4602      	mov	r2, r0
 8010e82:	4b05      	ldr	r3, [pc, #20]	@ (8010e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	0b5b      	lsrs	r3, r3, #13
 8010e88:	f003 0307 	and.w	r3, r3, #7
 8010e8c:	4903      	ldr	r1, [pc, #12]	@ (8010e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010e8e:	5ccb      	ldrb	r3, [r1, r3]
 8010e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	40023800 	.word	0x40023800
 8010e9c:	08019124 	.word	0x08019124

08010ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ea4:	b0a6      	sub	sp, #152	@ 0x98
 8010ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010ec6:	4bc8      	ldr	r3, [pc, #800]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	f003 030c 	and.w	r3, r3, #12
 8010ece:	2b0c      	cmp	r3, #12
 8010ed0:	f200 817e 	bhi.w	80111d0 <HAL_RCC_GetSysClockFreq+0x330>
 8010ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8010edc <HAL_RCC_GetSysClockFreq+0x3c>)
 8010ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eda:	bf00      	nop
 8010edc:	08010f11 	.word	0x08010f11
 8010ee0:	080111d1 	.word	0x080111d1
 8010ee4:	080111d1 	.word	0x080111d1
 8010ee8:	080111d1 	.word	0x080111d1
 8010eec:	08010f19 	.word	0x08010f19
 8010ef0:	080111d1 	.word	0x080111d1
 8010ef4:	080111d1 	.word	0x080111d1
 8010ef8:	080111d1 	.word	0x080111d1
 8010efc:	08010f21 	.word	0x08010f21
 8010f00:	080111d1 	.word	0x080111d1
 8010f04:	080111d1 	.word	0x080111d1
 8010f08:	080111d1 	.word	0x080111d1
 8010f0c:	0801108b 	.word	0x0801108b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010f10:	4bb6      	ldr	r3, [pc, #728]	@ (80111ec <HAL_RCC_GetSysClockFreq+0x34c>)
 8010f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010f16:	e15f      	b.n	80111d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010f18:	4bb5      	ldr	r3, [pc, #724]	@ (80111f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8010f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010f1e:	e15b      	b.n	80111d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010f20:	4bb1      	ldr	r3, [pc, #708]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010f2c:	4bae      	ldr	r3, [pc, #696]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d031      	beq.n	8010f9c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010f38:	4bab      	ldr	r3, [pc, #684]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	099b      	lsrs	r3, r3, #6
 8010f3e:	2200      	movs	r2, #0
 8010f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010f50:	4ba7      	ldr	r3, [pc, #668]	@ (80111f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8010f52:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8010f56:	462a      	mov	r2, r5
 8010f58:	fb03 f202 	mul.w	r2, r3, r2
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	4621      	mov	r1, r4
 8010f60:	fb01 f303 	mul.w	r3, r1, r3
 8010f64:	4413      	add	r3, r2
 8010f66:	4aa2      	ldr	r2, [pc, #648]	@ (80111f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8010f68:	4621      	mov	r1, r4
 8010f6a:	fba1 1202 	umull	r1, r2, r1, r2
 8010f6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010f70:	460a      	mov	r2, r1
 8010f72:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010f74:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010f76:	4413      	add	r3, r2
 8010f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010f7e:	2200      	movs	r2, #0
 8010f80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f82:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010f84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010f88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010f8c:	f7f7 feac 	bl	8008ce8 <__aeabi_uldivmod>
 8010f90:	4602      	mov	r2, r0
 8010f92:	460b      	mov	r3, r1
 8010f94:	4613      	mov	r3, r2
 8010f96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010f9a:	e064      	b.n	8011066 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010f9c:	4b92      	ldr	r3, [pc, #584]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	099b      	lsrs	r3, r3, #6
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8010fa6:	657a      	str	r2, [r7, #84]	@ 0x54
 8010fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010fb4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010fb8:	4622      	mov	r2, r4
 8010fba:	462b      	mov	r3, r5
 8010fbc:	f04f 0000 	mov.w	r0, #0
 8010fc0:	f04f 0100 	mov.w	r1, #0
 8010fc4:	0159      	lsls	r1, r3, #5
 8010fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010fca:	0150      	lsls	r0, r2, #5
 8010fcc:	4602      	mov	r2, r0
 8010fce:	460b      	mov	r3, r1
 8010fd0:	4621      	mov	r1, r4
 8010fd2:	1a51      	subs	r1, r2, r1
 8010fd4:	6139      	str	r1, [r7, #16]
 8010fd6:	4629      	mov	r1, r5
 8010fd8:	eb63 0301 	sbc.w	r3, r3, r1
 8010fdc:	617b      	str	r3, [r7, #20]
 8010fde:	f04f 0200 	mov.w	r2, #0
 8010fe2:	f04f 0300 	mov.w	r3, #0
 8010fe6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010fea:	4659      	mov	r1, fp
 8010fec:	018b      	lsls	r3, r1, #6
 8010fee:	4651      	mov	r1, sl
 8010ff0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010ff4:	4651      	mov	r1, sl
 8010ff6:	018a      	lsls	r2, r1, #6
 8010ff8:	4651      	mov	r1, sl
 8010ffa:	ebb2 0801 	subs.w	r8, r2, r1
 8010ffe:	4659      	mov	r1, fp
 8011000:	eb63 0901 	sbc.w	r9, r3, r1
 8011004:	f04f 0200 	mov.w	r2, #0
 8011008:	f04f 0300 	mov.w	r3, #0
 801100c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011010:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011014:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011018:	4690      	mov	r8, r2
 801101a:	4699      	mov	r9, r3
 801101c:	4623      	mov	r3, r4
 801101e:	eb18 0303 	adds.w	r3, r8, r3
 8011022:	60bb      	str	r3, [r7, #8]
 8011024:	462b      	mov	r3, r5
 8011026:	eb49 0303 	adc.w	r3, r9, r3
 801102a:	60fb      	str	r3, [r7, #12]
 801102c:	f04f 0200 	mov.w	r2, #0
 8011030:	f04f 0300 	mov.w	r3, #0
 8011034:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011038:	4629      	mov	r1, r5
 801103a:	028b      	lsls	r3, r1, #10
 801103c:	4621      	mov	r1, r4
 801103e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011042:	4621      	mov	r1, r4
 8011044:	028a      	lsls	r2, r1, #10
 8011046:	4610      	mov	r0, r2
 8011048:	4619      	mov	r1, r3
 801104a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801104e:	2200      	movs	r2, #0
 8011050:	643b      	str	r3, [r7, #64]	@ 0x40
 8011052:	647a      	str	r2, [r7, #68]	@ 0x44
 8011054:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011058:	f7f7 fe46 	bl	8008ce8 <__aeabi_uldivmod>
 801105c:	4602      	mov	r2, r0
 801105e:	460b      	mov	r3, r1
 8011060:	4613      	mov	r3, r2
 8011062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8011066:	4b60      	ldr	r3, [pc, #384]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	0c1b      	lsrs	r3, r3, #16
 801106c:	f003 0303 	and.w	r3, r3, #3
 8011070:	3301      	adds	r3, #1
 8011072:	005b      	lsls	r3, r3, #1
 8011074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8011078:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801107c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011080:	fbb2 f3f3 	udiv	r3, r2, r3
 8011084:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011088:	e0a6      	b.n	80111d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801108a:	4b57      	ldr	r3, [pc, #348]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011096:	4b54      	ldr	r3, [pc, #336]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d02a      	beq.n	80110f8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80110a2:	4b51      	ldr	r3, [pc, #324]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	099b      	lsrs	r3, r3, #6
 80110a8:	2200      	movs	r2, #0
 80110aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80110ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80110ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80110b4:	2100      	movs	r1, #0
 80110b6:	4b4e      	ldr	r3, [pc, #312]	@ (80111f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80110b8:	fb03 f201 	mul.w	r2, r3, r1
 80110bc:	2300      	movs	r3, #0
 80110be:	fb00 f303 	mul.w	r3, r0, r3
 80110c2:	4413      	add	r3, r2
 80110c4:	4a4a      	ldr	r2, [pc, #296]	@ (80111f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80110c6:	fba0 1202 	umull	r1, r2, r0, r2
 80110ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80110cc:	460a      	mov	r2, r1
 80110ce:	673a      	str	r2, [r7, #112]	@ 0x70
 80110d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80110d2:	4413      	add	r3, r2
 80110d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80110d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80110da:	2200      	movs	r2, #0
 80110dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80110de:	637a      	str	r2, [r7, #52]	@ 0x34
 80110e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80110e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80110e8:	f7f7 fdfe 	bl	8008ce8 <__aeabi_uldivmod>
 80110ec:	4602      	mov	r2, r0
 80110ee:	460b      	mov	r3, r1
 80110f0:	4613      	mov	r3, r2
 80110f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80110f6:	e05b      	b.n	80111b0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80110f8:	4b3b      	ldr	r3, [pc, #236]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	099b      	lsrs	r3, r3, #6
 80110fe:	2200      	movs	r2, #0
 8011100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011102:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801110a:	623b      	str	r3, [r7, #32]
 801110c:	2300      	movs	r3, #0
 801110e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011110:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011114:	4642      	mov	r2, r8
 8011116:	464b      	mov	r3, r9
 8011118:	f04f 0000 	mov.w	r0, #0
 801111c:	f04f 0100 	mov.w	r1, #0
 8011120:	0159      	lsls	r1, r3, #5
 8011122:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011126:	0150      	lsls	r0, r2, #5
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	4641      	mov	r1, r8
 801112e:	ebb2 0a01 	subs.w	sl, r2, r1
 8011132:	4649      	mov	r1, r9
 8011134:	eb63 0b01 	sbc.w	fp, r3, r1
 8011138:	f04f 0200 	mov.w	r2, #0
 801113c:	f04f 0300 	mov.w	r3, #0
 8011140:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8011144:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8011148:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801114c:	ebb2 040a 	subs.w	r4, r2, sl
 8011150:	eb63 050b 	sbc.w	r5, r3, fp
 8011154:	f04f 0200 	mov.w	r2, #0
 8011158:	f04f 0300 	mov.w	r3, #0
 801115c:	00eb      	lsls	r3, r5, #3
 801115e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011162:	00e2      	lsls	r2, r4, #3
 8011164:	4614      	mov	r4, r2
 8011166:	461d      	mov	r5, r3
 8011168:	4643      	mov	r3, r8
 801116a:	18e3      	adds	r3, r4, r3
 801116c:	603b      	str	r3, [r7, #0]
 801116e:	464b      	mov	r3, r9
 8011170:	eb45 0303 	adc.w	r3, r5, r3
 8011174:	607b      	str	r3, [r7, #4]
 8011176:	f04f 0200 	mov.w	r2, #0
 801117a:	f04f 0300 	mov.w	r3, #0
 801117e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011182:	4629      	mov	r1, r5
 8011184:	028b      	lsls	r3, r1, #10
 8011186:	4621      	mov	r1, r4
 8011188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801118c:	4621      	mov	r1, r4
 801118e:	028a      	lsls	r2, r1, #10
 8011190:	4610      	mov	r0, r2
 8011192:	4619      	mov	r1, r3
 8011194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011198:	2200      	movs	r2, #0
 801119a:	61bb      	str	r3, [r7, #24]
 801119c:	61fa      	str	r2, [r7, #28]
 801119e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80111a2:	f7f7 fda1 	bl	8008ce8 <__aeabi_uldivmod>
 80111a6:	4602      	mov	r2, r0
 80111a8:	460b      	mov	r3, r1
 80111aa:	4613      	mov	r3, r2
 80111ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80111b0:	4b0d      	ldr	r3, [pc, #52]	@ (80111e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	0f1b      	lsrs	r3, r3, #28
 80111b6:	f003 0307 	and.w	r3, r3, #7
 80111ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80111be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80111c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80111c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80111ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80111ce:	e003      	b.n	80111d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80111d0:	4b06      	ldr	r3, [pc, #24]	@ (80111ec <HAL_RCC_GetSysClockFreq+0x34c>)
 80111d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80111d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80111d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3798      	adds	r7, #152	@ 0x98
 80111e0:	46bd      	mov	sp, r7
 80111e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80111e6:	bf00      	nop
 80111e8:	40023800 	.word	0x40023800
 80111ec:	00f42400 	.word	0x00f42400
 80111f0:	017d7840 	.word	0x017d7840

080111f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b086      	sub	sp, #24
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d101      	bne.n	8011206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	e28d      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f003 0301 	and.w	r3, r3, #1
 801120e:	2b00      	cmp	r3, #0
 8011210:	f000 8083 	beq.w	801131a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8011214:	4b94      	ldr	r3, [pc, #592]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011216:	689b      	ldr	r3, [r3, #8]
 8011218:	f003 030c 	and.w	r3, r3, #12
 801121c:	2b04      	cmp	r3, #4
 801121e:	d019      	beq.n	8011254 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8011220:	4b91      	ldr	r3, [pc, #580]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	f003 030c 	and.w	r3, r3, #12
        || \
 8011228:	2b08      	cmp	r3, #8
 801122a:	d106      	bne.n	801123a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 801122c:	4b8e      	ldr	r3, [pc, #568]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011238:	d00c      	beq.n	8011254 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801123a:	4b8b      	ldr	r3, [pc, #556]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8011242:	2b0c      	cmp	r3, #12
 8011244:	d112      	bne.n	801126c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011246:	4b88      	ldr	r3, [pc, #544]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801124e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011252:	d10b      	bne.n	801126c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011254:	4b84      	ldr	r3, [pc, #528]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801125c:	2b00      	cmp	r3, #0
 801125e:	d05b      	beq.n	8011318 <HAL_RCC_OscConfig+0x124>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d157      	bne.n	8011318 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8011268:	2301      	movs	r3, #1
 801126a:	e25a      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011274:	d106      	bne.n	8011284 <HAL_RCC_OscConfig+0x90>
 8011276:	4b7c      	ldr	r3, [pc, #496]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4a7b      	ldr	r2, [pc, #492]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801127c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011280:	6013      	str	r3, [r2, #0]
 8011282:	e01d      	b.n	80112c0 <HAL_RCC_OscConfig+0xcc>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801128c:	d10c      	bne.n	80112a8 <HAL_RCC_OscConfig+0xb4>
 801128e:	4b76      	ldr	r3, [pc, #472]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4a75      	ldr	r2, [pc, #468]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011298:	6013      	str	r3, [r2, #0]
 801129a:	4b73      	ldr	r3, [pc, #460]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	4a72      	ldr	r2, [pc, #456]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80112a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80112a4:	6013      	str	r3, [r2, #0]
 80112a6:	e00b      	b.n	80112c0 <HAL_RCC_OscConfig+0xcc>
 80112a8:	4b6f      	ldr	r3, [pc, #444]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a6e      	ldr	r2, [pc, #440]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80112ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80112b2:	6013      	str	r3, [r2, #0]
 80112b4:	4b6c      	ldr	r3, [pc, #432]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	4a6b      	ldr	r2, [pc, #428]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80112ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80112be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d013      	beq.n	80112f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112c8:	f7fd fec6 	bl	800f058 <HAL_GetTick>
 80112cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80112ce:	e008      	b.n	80112e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112d0:	f7fd fec2 	bl	800f058 <HAL_GetTick>
 80112d4:	4602      	mov	r2, r0
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	1ad3      	subs	r3, r2, r3
 80112da:	2b64      	cmp	r3, #100	@ 0x64
 80112dc:	d901      	bls.n	80112e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80112de:	2303      	movs	r3, #3
 80112e0:	e21f      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80112e2:	4b61      	ldr	r3, [pc, #388]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d0f0      	beq.n	80112d0 <HAL_RCC_OscConfig+0xdc>
 80112ee:	e014      	b.n	801131a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112f0:	f7fd feb2 	bl	800f058 <HAL_GetTick>
 80112f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80112f6:	e008      	b.n	801130a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112f8:	f7fd feae 	bl	800f058 <HAL_GetTick>
 80112fc:	4602      	mov	r2, r0
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	2b64      	cmp	r3, #100	@ 0x64
 8011304:	d901      	bls.n	801130a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8011306:	2303      	movs	r3, #3
 8011308:	e20b      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801130a:	4b57      	ldr	r3, [pc, #348]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1f0      	bne.n	80112f8 <HAL_RCC_OscConfig+0x104>
 8011316:	e000      	b.n	801131a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f003 0302 	and.w	r3, r3, #2
 8011322:	2b00      	cmp	r3, #0
 8011324:	d06f      	beq.n	8011406 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8011326:	4b50      	ldr	r3, [pc, #320]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	f003 030c 	and.w	r3, r3, #12
 801132e:	2b00      	cmp	r3, #0
 8011330:	d017      	beq.n	8011362 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011332:	4b4d      	ldr	r3, [pc, #308]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	f003 030c 	and.w	r3, r3, #12
        || \
 801133a:	2b08      	cmp	r3, #8
 801133c:	d105      	bne.n	801134a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 801133e:	4b4a      	ldr	r3, [pc, #296]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00b      	beq.n	8011362 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801134a:	4b47      	ldr	r3, [pc, #284]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801134c:	689b      	ldr	r3, [r3, #8]
 801134e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011352:	2b0c      	cmp	r3, #12
 8011354:	d11c      	bne.n	8011390 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011356:	4b44      	ldr	r3, [pc, #272]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801135e:	2b00      	cmp	r3, #0
 8011360:	d116      	bne.n	8011390 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011362:	4b41      	ldr	r3, [pc, #260]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f003 0302 	and.w	r3, r3, #2
 801136a:	2b00      	cmp	r3, #0
 801136c:	d005      	beq.n	801137a <HAL_RCC_OscConfig+0x186>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	2b01      	cmp	r3, #1
 8011374:	d001      	beq.n	801137a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8011376:	2301      	movs	r3, #1
 8011378:	e1d3      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801137a:	4b3b      	ldr	r3, [pc, #236]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	691b      	ldr	r3, [r3, #16]
 8011386:	00db      	lsls	r3, r3, #3
 8011388:	4937      	ldr	r1, [pc, #220]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801138a:	4313      	orrs	r3, r2
 801138c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801138e:	e03a      	b.n	8011406 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d020      	beq.n	80113da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011398:	4b34      	ldr	r3, [pc, #208]	@ (801146c <HAL_RCC_OscConfig+0x278>)
 801139a:	2201      	movs	r2, #1
 801139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801139e:	f7fd fe5b 	bl	800f058 <HAL_GetTick>
 80113a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80113a4:	e008      	b.n	80113b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80113a6:	f7fd fe57 	bl	800f058 <HAL_GetTick>
 80113aa:	4602      	mov	r2, r0
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	2b02      	cmp	r3, #2
 80113b2:	d901      	bls.n	80113b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80113b4:	2303      	movs	r3, #3
 80113b6:	e1b4      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80113b8:	4b2b      	ldr	r3, [pc, #172]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f003 0302 	and.w	r3, r3, #2
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d0f0      	beq.n	80113a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113c4:	4b28      	ldr	r3, [pc, #160]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	4925      	ldr	r1, [pc, #148]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80113d4:	4313      	orrs	r3, r2
 80113d6:	600b      	str	r3, [r1, #0]
 80113d8:	e015      	b.n	8011406 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80113da:	4b24      	ldr	r3, [pc, #144]	@ (801146c <HAL_RCC_OscConfig+0x278>)
 80113dc:	2200      	movs	r2, #0
 80113de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113e0:	f7fd fe3a 	bl	800f058 <HAL_GetTick>
 80113e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80113e6:	e008      	b.n	80113fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80113e8:	f7fd fe36 	bl	800f058 <HAL_GetTick>
 80113ec:	4602      	mov	r2, r0
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	d901      	bls.n	80113fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80113f6:	2303      	movs	r3, #3
 80113f8:	e193      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80113fa:	4b1b      	ldr	r3, [pc, #108]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f003 0302 	and.w	r3, r3, #2
 8011402:	2b00      	cmp	r3, #0
 8011404:	d1f0      	bne.n	80113e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f003 0308 	and.w	r3, r3, #8
 801140e:	2b00      	cmp	r3, #0
 8011410:	d036      	beq.n	8011480 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	695b      	ldr	r3, [r3, #20]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d016      	beq.n	8011448 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801141a:	4b15      	ldr	r3, [pc, #84]	@ (8011470 <HAL_RCC_OscConfig+0x27c>)
 801141c:	2201      	movs	r2, #1
 801141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011420:	f7fd fe1a 	bl	800f058 <HAL_GetTick>
 8011424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011426:	e008      	b.n	801143a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011428:	f7fd fe16 	bl	800f058 <HAL_GetTick>
 801142c:	4602      	mov	r2, r0
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	2b02      	cmp	r3, #2
 8011434:	d901      	bls.n	801143a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8011436:	2303      	movs	r3, #3
 8011438:	e173      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801143a:	4b0b      	ldr	r3, [pc, #44]	@ (8011468 <HAL_RCC_OscConfig+0x274>)
 801143c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801143e:	f003 0302 	and.w	r3, r3, #2
 8011442:	2b00      	cmp	r3, #0
 8011444:	d0f0      	beq.n	8011428 <HAL_RCC_OscConfig+0x234>
 8011446:	e01b      	b.n	8011480 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011448:	4b09      	ldr	r3, [pc, #36]	@ (8011470 <HAL_RCC_OscConfig+0x27c>)
 801144a:	2200      	movs	r2, #0
 801144c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801144e:	f7fd fe03 	bl	800f058 <HAL_GetTick>
 8011452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011454:	e00e      	b.n	8011474 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011456:	f7fd fdff 	bl	800f058 <HAL_GetTick>
 801145a:	4602      	mov	r2, r0
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	1ad3      	subs	r3, r2, r3
 8011460:	2b02      	cmp	r3, #2
 8011462:	d907      	bls.n	8011474 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8011464:	2303      	movs	r3, #3
 8011466:	e15c      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
 8011468:	40023800 	.word	0x40023800
 801146c:	42470000 	.word	0x42470000
 8011470:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011474:	4b8a      	ldr	r3, [pc, #552]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011478:	f003 0302 	and.w	r3, r3, #2
 801147c:	2b00      	cmp	r3, #0
 801147e:	d1ea      	bne.n	8011456 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f003 0304 	and.w	r3, r3, #4
 8011488:	2b00      	cmp	r3, #0
 801148a:	f000 8097 	beq.w	80115bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801148e:	2300      	movs	r3, #0
 8011490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011492:	4b83      	ldr	r3, [pc, #524]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801149a:	2b00      	cmp	r3, #0
 801149c:	d10f      	bne.n	80114be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801149e:	2300      	movs	r3, #0
 80114a0:	60bb      	str	r3, [r7, #8]
 80114a2:	4b7f      	ldr	r3, [pc, #508]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 80114a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114a6:	4a7e      	ldr	r2, [pc, #504]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 80114a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80114ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80114ae:	4b7c      	ldr	r3, [pc, #496]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 80114b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80114b6:	60bb      	str	r3, [r7, #8]
 80114b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80114ba:	2301      	movs	r3, #1
 80114bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80114be:	4b79      	ldr	r3, [pc, #484]	@ (80116a4 <HAL_RCC_OscConfig+0x4b0>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d118      	bne.n	80114fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80114ca:	4b76      	ldr	r3, [pc, #472]	@ (80116a4 <HAL_RCC_OscConfig+0x4b0>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4a75      	ldr	r2, [pc, #468]	@ (80116a4 <HAL_RCC_OscConfig+0x4b0>)
 80114d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80114d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80114d6:	f7fd fdbf 	bl	800f058 <HAL_GetTick>
 80114da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80114dc:	e008      	b.n	80114f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80114de:	f7fd fdbb 	bl	800f058 <HAL_GetTick>
 80114e2:	4602      	mov	r2, r0
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d901      	bls.n	80114f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80114ec:	2303      	movs	r3, #3
 80114ee:	e118      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80114f0:	4b6c      	ldr	r3, [pc, #432]	@ (80116a4 <HAL_RCC_OscConfig+0x4b0>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d0f0      	beq.n	80114de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	689b      	ldr	r3, [r3, #8]
 8011500:	2b01      	cmp	r3, #1
 8011502:	d106      	bne.n	8011512 <HAL_RCC_OscConfig+0x31e>
 8011504:	4b66      	ldr	r3, [pc, #408]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011508:	4a65      	ldr	r2, [pc, #404]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 801150a:	f043 0301 	orr.w	r3, r3, #1
 801150e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011510:	e01c      	b.n	801154c <HAL_RCC_OscConfig+0x358>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	689b      	ldr	r3, [r3, #8]
 8011516:	2b05      	cmp	r3, #5
 8011518:	d10c      	bne.n	8011534 <HAL_RCC_OscConfig+0x340>
 801151a:	4b61      	ldr	r3, [pc, #388]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 801151c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801151e:	4a60      	ldr	r2, [pc, #384]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011520:	f043 0304 	orr.w	r3, r3, #4
 8011524:	6713      	str	r3, [r2, #112]	@ 0x70
 8011526:	4b5e      	ldr	r3, [pc, #376]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801152a:	4a5d      	ldr	r2, [pc, #372]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 801152c:	f043 0301 	orr.w	r3, r3, #1
 8011530:	6713      	str	r3, [r2, #112]	@ 0x70
 8011532:	e00b      	b.n	801154c <HAL_RCC_OscConfig+0x358>
 8011534:	4b5a      	ldr	r3, [pc, #360]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011538:	4a59      	ldr	r2, [pc, #356]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 801153a:	f023 0301 	bic.w	r3, r3, #1
 801153e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011540:	4b57      	ldr	r3, [pc, #348]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011544:	4a56      	ldr	r2, [pc, #344]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011546:	f023 0304 	bic.w	r3, r3, #4
 801154a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d015      	beq.n	8011580 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011554:	f7fd fd80 	bl	800f058 <HAL_GetTick>
 8011558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801155a:	e00a      	b.n	8011572 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801155c:	f7fd fd7c 	bl	800f058 <HAL_GetTick>
 8011560:	4602      	mov	r2, r0
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	1ad3      	subs	r3, r2, r3
 8011566:	f241 3288 	movw	r2, #5000	@ 0x1388
 801156a:	4293      	cmp	r3, r2
 801156c:	d901      	bls.n	8011572 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801156e:	2303      	movs	r3, #3
 8011570:	e0d7      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011572:	4b4b      	ldr	r3, [pc, #300]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011576:	f003 0302 	and.w	r3, r3, #2
 801157a:	2b00      	cmp	r3, #0
 801157c:	d0ee      	beq.n	801155c <HAL_RCC_OscConfig+0x368>
 801157e:	e014      	b.n	80115aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011580:	f7fd fd6a 	bl	800f058 <HAL_GetTick>
 8011584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011586:	e00a      	b.n	801159e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011588:	f7fd fd66 	bl	800f058 <HAL_GetTick>
 801158c:	4602      	mov	r2, r0
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011596:	4293      	cmp	r3, r2
 8011598:	d901      	bls.n	801159e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801159a:	2303      	movs	r3, #3
 801159c:	e0c1      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801159e:	4b40      	ldr	r3, [pc, #256]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 80115a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115a2:	f003 0302 	and.w	r3, r3, #2
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d1ee      	bne.n	8011588 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80115aa:	7dfb      	ldrb	r3, [r7, #23]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d105      	bne.n	80115bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80115b0:	4b3b      	ldr	r3, [pc, #236]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 80115b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115b4:	4a3a      	ldr	r2, [pc, #232]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 80115b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80115ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	699b      	ldr	r3, [r3, #24]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	f000 80ad 	beq.w	8011720 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80115c6:	4b36      	ldr	r3, [pc, #216]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	f003 030c 	and.w	r3, r3, #12
 80115ce:	2b08      	cmp	r3, #8
 80115d0:	d060      	beq.n	8011694 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	699b      	ldr	r3, [r3, #24]
 80115d6:	2b02      	cmp	r3, #2
 80115d8:	d145      	bne.n	8011666 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80115da:	4b33      	ldr	r3, [pc, #204]	@ (80116a8 <HAL_RCC_OscConfig+0x4b4>)
 80115dc:	2200      	movs	r2, #0
 80115de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80115e0:	f7fd fd3a 	bl	800f058 <HAL_GetTick>
 80115e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80115e6:	e008      	b.n	80115fa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80115e8:	f7fd fd36 	bl	800f058 <HAL_GetTick>
 80115ec:	4602      	mov	r2, r0
 80115ee:	693b      	ldr	r3, [r7, #16]
 80115f0:	1ad3      	subs	r3, r2, r3
 80115f2:	2b02      	cmp	r3, #2
 80115f4:	d901      	bls.n	80115fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80115f6:	2303      	movs	r3, #3
 80115f8:	e093      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80115fa:	4b29      	ldr	r3, [pc, #164]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1f0      	bne.n	80115e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	69da      	ldr	r2, [r3, #28]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6a1b      	ldr	r3, [r3, #32]
 801160e:	431a      	orrs	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011614:	019b      	lsls	r3, r3, #6
 8011616:	431a      	orrs	r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801161c:	085b      	lsrs	r3, r3, #1
 801161e:	3b01      	subs	r3, #1
 8011620:	041b      	lsls	r3, r3, #16
 8011622:	431a      	orrs	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011628:	061b      	lsls	r3, r3, #24
 801162a:	431a      	orrs	r2, r3
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011630:	071b      	lsls	r3, r3, #28
 8011632:	491b      	ldr	r1, [pc, #108]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011634:	4313      	orrs	r3, r2
 8011636:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011638:	4b1b      	ldr	r3, [pc, #108]	@ (80116a8 <HAL_RCC_OscConfig+0x4b4>)
 801163a:	2201      	movs	r2, #1
 801163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801163e:	f7fd fd0b 	bl	800f058 <HAL_GetTick>
 8011642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011644:	e008      	b.n	8011658 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011646:	f7fd fd07 	bl	800f058 <HAL_GetTick>
 801164a:	4602      	mov	r2, r0
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	2b02      	cmp	r3, #2
 8011652:	d901      	bls.n	8011658 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8011654:	2303      	movs	r3, #3
 8011656:	e064      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011658:	4b11      	ldr	r3, [pc, #68]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011660:	2b00      	cmp	r3, #0
 8011662:	d0f0      	beq.n	8011646 <HAL_RCC_OscConfig+0x452>
 8011664:	e05c      	b.n	8011720 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011666:	4b10      	ldr	r3, [pc, #64]	@ (80116a8 <HAL_RCC_OscConfig+0x4b4>)
 8011668:	2200      	movs	r2, #0
 801166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801166c:	f7fd fcf4 	bl	800f058 <HAL_GetTick>
 8011670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011672:	e008      	b.n	8011686 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011674:	f7fd fcf0 	bl	800f058 <HAL_GetTick>
 8011678:	4602      	mov	r2, r0
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	2b02      	cmp	r3, #2
 8011680:	d901      	bls.n	8011686 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8011682:	2303      	movs	r3, #3
 8011684:	e04d      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011686:	4b06      	ldr	r3, [pc, #24]	@ (80116a0 <HAL_RCC_OscConfig+0x4ac>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801168e:	2b00      	cmp	r3, #0
 8011690:	d1f0      	bne.n	8011674 <HAL_RCC_OscConfig+0x480>
 8011692:	e045      	b.n	8011720 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	699b      	ldr	r3, [r3, #24]
 8011698:	2b01      	cmp	r3, #1
 801169a:	d107      	bne.n	80116ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801169c:	2301      	movs	r3, #1
 801169e:	e040      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
 80116a0:	40023800 	.word	0x40023800
 80116a4:	40007000 	.word	0x40007000
 80116a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80116ac:	4b1f      	ldr	r3, [pc, #124]	@ (801172c <HAL_RCC_OscConfig+0x538>)
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	699b      	ldr	r3, [r3, #24]
 80116b6:	2b01      	cmp	r3, #1
 80116b8:	d030      	beq.n	801171c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d129      	bne.n	801171c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d122      	bne.n	801171c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80116d6:	68fa      	ldr	r2, [r7, #12]
 80116d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80116dc:	4013      	ands	r3, r2
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80116e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d119      	bne.n	801171c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116f2:	085b      	lsrs	r3, r3, #1
 80116f4:	3b01      	subs	r3, #1
 80116f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d10f      	bne.n	801171c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011708:	429a      	cmp	r2, r3
 801170a:	d107      	bne.n	801171c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011716:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011718:	429a      	cmp	r2, r3
 801171a:	d001      	beq.n	8011720 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 801171c:	2301      	movs	r3, #1
 801171e:	e000      	b.n	8011722 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8011720:	2300      	movs	r3, #0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3718      	adds	r7, #24
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	40023800 	.word	0x40023800

08011730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b082      	sub	sp, #8
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d101      	bne.n	8011742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801173e:	2301      	movs	r3, #1
 8011740:	e041      	b.n	80117c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011748:	b2db      	uxtb	r3, r3
 801174a:	2b00      	cmp	r3, #0
 801174c:	d106      	bne.n	801175c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2200      	movs	r2, #0
 8011752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7fc fdf8 	bl	800e34c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2202      	movs	r2, #2
 8011760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	3304      	adds	r3, #4
 801176c:	4619      	mov	r1, r3
 801176e:	4610      	mov	r0, r2
 8011770:	f000 fde4 	bl	801233c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2201      	movs	r2, #1
 8011778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2201      	movs	r2, #1
 8011780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2201      	movs	r2, #1
 8011788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2201      	movs	r2, #1
 8011790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2201      	movs	r2, #1
 8011798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2201      	movs	r2, #1
 80117a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2201      	movs	r2, #1
 80117a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2201      	movs	r2, #1
 80117b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2201      	movs	r2, #1
 80117b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2201      	movs	r2, #1
 80117c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80117c4:	2300      	movs	r3, #0
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
	...

080117d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b085      	sub	sp, #20
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d001      	beq.n	80117e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80117e4:	2301      	movs	r3, #1
 80117e6:	e046      	b.n	8011876 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2202      	movs	r2, #2
 80117ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	4a23      	ldr	r2, [pc, #140]	@ (8011884 <HAL_TIM_Base_Start+0xb4>)
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d022      	beq.n	8011840 <HAL_TIM_Base_Start+0x70>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011802:	d01d      	beq.n	8011840 <HAL_TIM_Base_Start+0x70>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a1f      	ldr	r2, [pc, #124]	@ (8011888 <HAL_TIM_Base_Start+0xb8>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d018      	beq.n	8011840 <HAL_TIM_Base_Start+0x70>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	4a1e      	ldr	r2, [pc, #120]	@ (801188c <HAL_TIM_Base_Start+0xbc>)
 8011814:	4293      	cmp	r3, r2
 8011816:	d013      	beq.n	8011840 <HAL_TIM_Base_Start+0x70>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	4a1c      	ldr	r2, [pc, #112]	@ (8011890 <HAL_TIM_Base_Start+0xc0>)
 801181e:	4293      	cmp	r3, r2
 8011820:	d00e      	beq.n	8011840 <HAL_TIM_Base_Start+0x70>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	4a1b      	ldr	r2, [pc, #108]	@ (8011894 <HAL_TIM_Base_Start+0xc4>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d009      	beq.n	8011840 <HAL_TIM_Base_Start+0x70>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a19      	ldr	r2, [pc, #100]	@ (8011898 <HAL_TIM_Base_Start+0xc8>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d004      	beq.n	8011840 <HAL_TIM_Base_Start+0x70>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a18      	ldr	r2, [pc, #96]	@ (801189c <HAL_TIM_Base_Start+0xcc>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d111      	bne.n	8011864 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	689b      	ldr	r3, [r3, #8]
 8011846:	f003 0307 	and.w	r3, r3, #7
 801184a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2b06      	cmp	r3, #6
 8011850:	d010      	beq.n	8011874 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	681a      	ldr	r2, [r3, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	f042 0201 	orr.w	r2, r2, #1
 8011860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011862:	e007      	b.n	8011874 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	681a      	ldr	r2, [r3, #0]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	f042 0201 	orr.w	r2, r2, #1
 8011872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011874:	2300      	movs	r3, #0
}
 8011876:	4618      	mov	r0, r3
 8011878:	3714      	adds	r7, #20
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	40010000 	.word	0x40010000
 8011888:	40000400 	.word	0x40000400
 801188c:	40000800 	.word	0x40000800
 8011890:	40000c00 	.word	0x40000c00
 8011894:	40010400 	.word	0x40010400
 8011898:	40014000 	.word	0x40014000
 801189c:	40001800 	.word	0x40001800

080118a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b085      	sub	sp, #20
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d001      	beq.n	80118b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80118b4:	2301      	movs	r3, #1
 80118b6:	e04e      	b.n	8011956 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2202      	movs	r2, #2
 80118bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	68da      	ldr	r2, [r3, #12]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f042 0201 	orr.w	r2, r2, #1
 80118ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4a23      	ldr	r2, [pc, #140]	@ (8011964 <HAL_TIM_Base_Start_IT+0xc4>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d022      	beq.n	8011920 <HAL_TIM_Base_Start_IT+0x80>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80118e2:	d01d      	beq.n	8011920 <HAL_TIM_Base_Start_IT+0x80>
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4a1f      	ldr	r2, [pc, #124]	@ (8011968 <HAL_TIM_Base_Start_IT+0xc8>)
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d018      	beq.n	8011920 <HAL_TIM_Base_Start_IT+0x80>
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	4a1e      	ldr	r2, [pc, #120]	@ (801196c <HAL_TIM_Base_Start_IT+0xcc>)
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d013      	beq.n	8011920 <HAL_TIM_Base_Start_IT+0x80>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4a1c      	ldr	r2, [pc, #112]	@ (8011970 <HAL_TIM_Base_Start_IT+0xd0>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d00e      	beq.n	8011920 <HAL_TIM_Base_Start_IT+0x80>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	4a1b      	ldr	r2, [pc, #108]	@ (8011974 <HAL_TIM_Base_Start_IT+0xd4>)
 8011908:	4293      	cmp	r3, r2
 801190a:	d009      	beq.n	8011920 <HAL_TIM_Base_Start_IT+0x80>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	4a19      	ldr	r2, [pc, #100]	@ (8011978 <HAL_TIM_Base_Start_IT+0xd8>)
 8011912:	4293      	cmp	r3, r2
 8011914:	d004      	beq.n	8011920 <HAL_TIM_Base_Start_IT+0x80>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	4a18      	ldr	r2, [pc, #96]	@ (801197c <HAL_TIM_Base_Start_IT+0xdc>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d111      	bne.n	8011944 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	689b      	ldr	r3, [r3, #8]
 8011926:	f003 0307 	and.w	r3, r3, #7
 801192a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	2b06      	cmp	r3, #6
 8011930:	d010      	beq.n	8011954 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f042 0201 	orr.w	r2, r2, #1
 8011940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011942:	e007      	b.n	8011954 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f042 0201 	orr.w	r2, r2, #1
 8011952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011954:	2300      	movs	r3, #0
}
 8011956:	4618      	mov	r0, r3
 8011958:	3714      	adds	r7, #20
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	40010000 	.word	0x40010000
 8011968:	40000400 	.word	0x40000400
 801196c:	40000800 	.word	0x40000800
 8011970:	40000c00 	.word	0x40000c00
 8011974:	40010400 	.word	0x40010400
 8011978:	40014000 	.word	0x40014000
 801197c:	40001800 	.word	0x40001800

08011980 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	68da      	ldr	r2, [r3, #12]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f022 0201 	bic.w	r2, r2, #1
 8011996:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	6a1a      	ldr	r2, [r3, #32]
 801199e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80119a2:	4013      	ands	r3, r2
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d10f      	bne.n	80119c8 <HAL_TIM_Base_Stop_IT+0x48>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	6a1a      	ldr	r2, [r3, #32]
 80119ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80119b2:	4013      	ands	r3, r2
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d107      	bne.n	80119c8 <HAL_TIM_Base_Stop_IT+0x48>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f022 0201 	bic.w	r2, r2, #1
 80119c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2201      	movs	r2, #1
 80119cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80119d0:	2300      	movs	r3, #0
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	370c      	adds	r7, #12
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr

080119de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80119de:	b580      	push	{r7, lr}
 80119e0:	b082      	sub	sp, #8
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d101      	bne.n	80119f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80119ec:	2301      	movs	r3, #1
 80119ee:	e041      	b.n	8011a74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d106      	bne.n	8011a0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 f839 	bl	8011a7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2202      	movs	r2, #2
 8011a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681a      	ldr	r2, [r3, #0]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	3304      	adds	r3, #4
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	4610      	mov	r0, r2
 8011a1e:	f000 fc8d 	bl	801233c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2201      	movs	r2, #1
 8011a26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2201      	movs	r2, #1
 8011a36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2201      	movs	r2, #1
 8011a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2201      	movs	r2, #1
 8011a56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2201      	movs	r2, #1
 8011a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011a84:	bf00      	nop
 8011a86:	370c      	adds	r7, #12
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr

08011a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d109      	bne.n	8011ab4 <HAL_TIM_PWM_Start+0x24>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b01      	cmp	r3, #1
 8011aaa:	bf14      	ite	ne
 8011aac:	2301      	movne	r3, #1
 8011aae:	2300      	moveq	r3, #0
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	e022      	b.n	8011afa <HAL_TIM_PWM_Start+0x6a>
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	2b04      	cmp	r3, #4
 8011ab8:	d109      	bne.n	8011ace <HAL_TIM_PWM_Start+0x3e>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011ac0:	b2db      	uxtb	r3, r3
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	bf14      	ite	ne
 8011ac6:	2301      	movne	r3, #1
 8011ac8:	2300      	moveq	r3, #0
 8011aca:	b2db      	uxtb	r3, r3
 8011acc:	e015      	b.n	8011afa <HAL_TIM_PWM_Start+0x6a>
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	2b08      	cmp	r3, #8
 8011ad2:	d109      	bne.n	8011ae8 <HAL_TIM_PWM_Start+0x58>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	bf14      	ite	ne
 8011ae0:	2301      	movne	r3, #1
 8011ae2:	2300      	moveq	r3, #0
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	e008      	b.n	8011afa <HAL_TIM_PWM_Start+0x6a>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011aee:	b2db      	uxtb	r3, r3
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	bf14      	ite	ne
 8011af4:	2301      	movne	r3, #1
 8011af6:	2300      	moveq	r3, #0
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d001      	beq.n	8011b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8011afe:	2301      	movs	r3, #1
 8011b00:	e07c      	b.n	8011bfc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d104      	bne.n	8011b12 <HAL_TIM_PWM_Start+0x82>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2202      	movs	r2, #2
 8011b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011b10:	e013      	b.n	8011b3a <HAL_TIM_PWM_Start+0xaa>
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	2b04      	cmp	r3, #4
 8011b16:	d104      	bne.n	8011b22 <HAL_TIM_PWM_Start+0x92>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2202      	movs	r2, #2
 8011b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011b20:	e00b      	b.n	8011b3a <HAL_TIM_PWM_Start+0xaa>
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b08      	cmp	r3, #8
 8011b26:	d104      	bne.n	8011b32 <HAL_TIM_PWM_Start+0xa2>
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2202      	movs	r2, #2
 8011b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011b30:	e003      	b.n	8011b3a <HAL_TIM_PWM_Start+0xaa>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2202      	movs	r2, #2
 8011b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2201      	movs	r2, #1
 8011b40:	6839      	ldr	r1, [r7, #0]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f000 ff7b 	bl	8012a3e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8011c04 <HAL_TIM_PWM_Start+0x174>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d004      	beq.n	8011b5c <HAL_TIM_PWM_Start+0xcc>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	4a2c      	ldr	r2, [pc, #176]	@ (8011c08 <HAL_TIM_PWM_Start+0x178>)
 8011b58:	4293      	cmp	r3, r2
 8011b5a:	d101      	bne.n	8011b60 <HAL_TIM_PWM_Start+0xd0>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e000      	b.n	8011b62 <HAL_TIM_PWM_Start+0xd2>
 8011b60:	2300      	movs	r3, #0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d007      	beq.n	8011b76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011b74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4a22      	ldr	r2, [pc, #136]	@ (8011c04 <HAL_TIM_PWM_Start+0x174>)
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d022      	beq.n	8011bc6 <HAL_TIM_PWM_Start+0x136>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b88:	d01d      	beq.n	8011bc6 <HAL_TIM_PWM_Start+0x136>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8011c0c <HAL_TIM_PWM_Start+0x17c>)
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d018      	beq.n	8011bc6 <HAL_TIM_PWM_Start+0x136>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	4a1d      	ldr	r2, [pc, #116]	@ (8011c10 <HAL_TIM_PWM_Start+0x180>)
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	d013      	beq.n	8011bc6 <HAL_TIM_PWM_Start+0x136>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8011c14 <HAL_TIM_PWM_Start+0x184>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d00e      	beq.n	8011bc6 <HAL_TIM_PWM_Start+0x136>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a16      	ldr	r2, [pc, #88]	@ (8011c08 <HAL_TIM_PWM_Start+0x178>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d009      	beq.n	8011bc6 <HAL_TIM_PWM_Start+0x136>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	4a18      	ldr	r2, [pc, #96]	@ (8011c18 <HAL_TIM_PWM_Start+0x188>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d004      	beq.n	8011bc6 <HAL_TIM_PWM_Start+0x136>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a16      	ldr	r2, [pc, #88]	@ (8011c1c <HAL_TIM_PWM_Start+0x18c>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d111      	bne.n	8011bea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	689b      	ldr	r3, [r3, #8]
 8011bcc:	f003 0307 	and.w	r3, r3, #7
 8011bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2b06      	cmp	r3, #6
 8011bd6:	d010      	beq.n	8011bfa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	f042 0201 	orr.w	r2, r2, #1
 8011be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011be8:	e007      	b.n	8011bfa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f042 0201 	orr.w	r2, r2, #1
 8011bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	40010000 	.word	0x40010000
 8011c08:	40010400 	.word	0x40010400
 8011c0c:	40000400 	.word	0x40000400
 8011c10:	40000800 	.word	0x40000800
 8011c14:	40000c00 	.word	0x40000c00
 8011c18:	40014000 	.word	0x40014000
 8011c1c:	40001800 	.word	0x40001800

08011c20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	6839      	ldr	r1, [r7, #0]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f000 ff03 	bl	8012a3e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8011cf8 <HAL_TIM_PWM_Stop+0xd8>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d004      	beq.n	8011c4c <HAL_TIM_PWM_Stop+0x2c>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4a2d      	ldr	r2, [pc, #180]	@ (8011cfc <HAL_TIM_PWM_Stop+0xdc>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d101      	bne.n	8011c50 <HAL_TIM_PWM_Stop+0x30>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e000      	b.n	8011c52 <HAL_TIM_PWM_Stop+0x32>
 8011c50:	2300      	movs	r3, #0
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d017      	beq.n	8011c86 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	6a1a      	ldr	r2, [r3, #32]
 8011c5c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011c60:	4013      	ands	r3, r2
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d10f      	bne.n	8011c86 <HAL_TIM_PWM_Stop+0x66>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	6a1a      	ldr	r2, [r3, #32]
 8011c6c:	f240 4344 	movw	r3, #1092	@ 0x444
 8011c70:	4013      	ands	r3, r2
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d107      	bne.n	8011c86 <HAL_TIM_PWM_Stop+0x66>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011c84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	6a1a      	ldr	r2, [r3, #32]
 8011c8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011c90:	4013      	ands	r3, r2
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d10f      	bne.n	8011cb6 <HAL_TIM_PWM_Stop+0x96>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	6a1a      	ldr	r2, [r3, #32]
 8011c9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8011ca0:	4013      	ands	r3, r2
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d107      	bne.n	8011cb6 <HAL_TIM_PWM_Stop+0x96>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f022 0201 	bic.w	r2, r2, #1
 8011cb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d104      	bne.n	8011cc6 <HAL_TIM_PWM_Stop+0xa6>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011cc4:	e013      	b.n	8011cee <HAL_TIM_PWM_Stop+0xce>
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	2b04      	cmp	r3, #4
 8011cca:	d104      	bne.n	8011cd6 <HAL_TIM_PWM_Stop+0xb6>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2201      	movs	r2, #1
 8011cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011cd4:	e00b      	b.n	8011cee <HAL_TIM_PWM_Stop+0xce>
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	2b08      	cmp	r3, #8
 8011cda:	d104      	bne.n	8011ce6 <HAL_TIM_PWM_Stop+0xc6>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2201      	movs	r2, #1
 8011ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011ce4:	e003      	b.n	8011cee <HAL_TIM_PWM_Stop+0xce>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8011cee:	2300      	movs	r3, #0
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	40010000 	.word	0x40010000
 8011cfc:	40010400 	.word	0x40010400

08011d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	691b      	ldr	r3, [r3, #16]
 8011d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	f003 0302 	and.w	r3, r3, #2
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d020      	beq.n	8011d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	f003 0302 	and.w	r3, r3, #2
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d01b      	beq.n	8011d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f06f 0202 	mvn.w	r2, #2
 8011d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2201      	movs	r2, #1
 8011d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	699b      	ldr	r3, [r3, #24]
 8011d42:	f003 0303 	and.w	r3, r3, #3
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d003      	beq.n	8011d52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f7fc fe0a 	bl	800e964 <HAL_TIM_IC_CaptureCallback>
 8011d50:	e005      	b.n	8011d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 fad4 	bl	8012300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 fadb 	bl	8012314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2200      	movs	r2, #0
 8011d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	f003 0304 	and.w	r3, r3, #4
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d020      	beq.n	8011db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f003 0304 	and.w	r3, r3, #4
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d01b      	beq.n	8011db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f06f 0204 	mvn.w	r2, #4
 8011d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2202      	movs	r2, #2
 8011d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	699b      	ldr	r3, [r3, #24]
 8011d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d003      	beq.n	8011d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f7fc fde4 	bl	800e964 <HAL_TIM_IC_CaptureCallback>
 8011d9c:	e005      	b.n	8011daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 faae 	bl	8012300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f000 fab5 	bl	8012314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	f003 0308 	and.w	r3, r3, #8
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d020      	beq.n	8011dfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f003 0308 	and.w	r3, r3, #8
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d01b      	beq.n	8011dfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f06f 0208 	mvn.w	r2, #8
 8011dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2204      	movs	r2, #4
 8011dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	69db      	ldr	r3, [r3, #28]
 8011dda:	f003 0303 	and.w	r3, r3, #3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d003      	beq.n	8011dea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7fc fdbe 	bl	800e964 <HAL_TIM_IC_CaptureCallback>
 8011de8:	e005      	b.n	8011df6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 fa88 	bl	8012300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f000 fa8f 	bl	8012314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	f003 0310 	and.w	r3, r3, #16
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d020      	beq.n	8011e48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f003 0310 	and.w	r3, r3, #16
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d01b      	beq.n	8011e48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f06f 0210 	mvn.w	r2, #16
 8011e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2208      	movs	r2, #8
 8011e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	69db      	ldr	r3, [r3, #28]
 8011e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d003      	beq.n	8011e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f7fc fd98 	bl	800e964 <HAL_TIM_IC_CaptureCallback>
 8011e34:	e005      	b.n	8011e42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 fa62 	bl	8012300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 fa69 	bl	8012314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2200      	movs	r2, #0
 8011e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	f003 0301 	and.w	r3, r3, #1
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d00c      	beq.n	8011e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	f003 0301 	and.w	r3, r3, #1
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d007      	beq.n	8011e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f06f 0201 	mvn.w	r2, #1
 8011e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7fc fcd6 	bl	800e818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00c      	beq.n	8011e90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d007      	beq.n	8011e90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8011e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 fe82 	bl	8012b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00c      	beq.n	8011eb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d007      	beq.n	8011eb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 fa3a 	bl	8012328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	f003 0320 	and.w	r3, r3, #32
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00c      	beq.n	8011ed8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f003 0320 	and.w	r3, r3, #32
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d007      	beq.n	8011ed8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f06f 0220 	mvn.w	r2, #32
 8011ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 fe54 	bl	8012b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011ed8:	bf00      	nop
 8011eda:	3710      	adds	r7, #16
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011eec:	2300      	movs	r3, #0
 8011eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011ef6:	2b01      	cmp	r3, #1
 8011ef8:	d101      	bne.n	8011efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011efa:	2302      	movs	r3, #2
 8011efc:	e0ae      	b.n	801205c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2201      	movs	r2, #1
 8011f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2b0c      	cmp	r3, #12
 8011f0a:	f200 809f 	bhi.w	801204c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8011f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8011f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f14:	08011f49 	.word	0x08011f49
 8011f18:	0801204d 	.word	0x0801204d
 8011f1c:	0801204d 	.word	0x0801204d
 8011f20:	0801204d 	.word	0x0801204d
 8011f24:	08011f89 	.word	0x08011f89
 8011f28:	0801204d 	.word	0x0801204d
 8011f2c:	0801204d 	.word	0x0801204d
 8011f30:	0801204d 	.word	0x0801204d
 8011f34:	08011fcb 	.word	0x08011fcb
 8011f38:	0801204d 	.word	0x0801204d
 8011f3c:	0801204d 	.word	0x0801204d
 8011f40:	0801204d 	.word	0x0801204d
 8011f44:	0801200b 	.word	0x0801200b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	68b9      	ldr	r1, [r7, #8]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f000 fa9a 	bl	8012488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	699a      	ldr	r2, [r3, #24]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f042 0208 	orr.w	r2, r2, #8
 8011f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	699a      	ldr	r2, [r3, #24]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f022 0204 	bic.w	r2, r2, #4
 8011f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	6999      	ldr	r1, [r3, #24]
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	691a      	ldr	r2, [r3, #16]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	430a      	orrs	r2, r1
 8011f84:	619a      	str	r2, [r3, #24]
      break;
 8011f86:	e064      	b.n	8012052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	68b9      	ldr	r1, [r7, #8]
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f000 faea 	bl	8012568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	699a      	ldr	r2, [r3, #24]
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	699a      	ldr	r2, [r3, #24]
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	6999      	ldr	r1, [r3, #24]
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	691b      	ldr	r3, [r3, #16]
 8011fbe:	021a      	lsls	r2, r3, #8
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	430a      	orrs	r2, r1
 8011fc6:	619a      	str	r2, [r3, #24]
      break;
 8011fc8:	e043      	b.n	8012052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	68b9      	ldr	r1, [r7, #8]
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f000 fb3f 	bl	8012654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	69da      	ldr	r2, [r3, #28]
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	f042 0208 	orr.w	r2, r2, #8
 8011fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	69da      	ldr	r2, [r3, #28]
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f022 0204 	bic.w	r2, r2, #4
 8011ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	69d9      	ldr	r1, [r3, #28]
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	691a      	ldr	r2, [r3, #16]
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	430a      	orrs	r2, r1
 8012006:	61da      	str	r2, [r3, #28]
      break;
 8012008:	e023      	b.n	8012052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	68b9      	ldr	r1, [r7, #8]
 8012010:	4618      	mov	r0, r3
 8012012:	f000 fb93 	bl	801273c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	69da      	ldr	r2, [r3, #28]
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	69da      	ldr	r2, [r3, #28]
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	69d9      	ldr	r1, [r3, #28]
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	691b      	ldr	r3, [r3, #16]
 8012040:	021a      	lsls	r2, r3, #8
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	430a      	orrs	r2, r1
 8012048:	61da      	str	r2, [r3, #28]
      break;
 801204a:	e002      	b.n	8012052 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801204c:	2301      	movs	r3, #1
 801204e:	75fb      	strb	r3, [r7, #23]
      break;
 8012050:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2200      	movs	r2, #0
 8012056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801205a:	7dfb      	ldrb	r3, [r7, #23]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3718      	adds	r7, #24
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801206e:	2300      	movs	r3, #0
 8012070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012078:	2b01      	cmp	r3, #1
 801207a:	d101      	bne.n	8012080 <HAL_TIM_ConfigClockSource+0x1c>
 801207c:	2302      	movs	r3, #2
 801207e:	e0b4      	b.n	80121ea <HAL_TIM_ConfigClockSource+0x186>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2201      	movs	r2, #1
 8012084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2202      	movs	r2, #2
 801208c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801209e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80120a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	68ba      	ldr	r2, [r7, #8]
 80120ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80120b8:	d03e      	beq.n	8012138 <HAL_TIM_ConfigClockSource+0xd4>
 80120ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80120be:	f200 8087 	bhi.w	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
 80120c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80120c6:	f000 8086 	beq.w	80121d6 <HAL_TIM_ConfigClockSource+0x172>
 80120ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80120ce:	d87f      	bhi.n	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
 80120d0:	2b70      	cmp	r3, #112	@ 0x70
 80120d2:	d01a      	beq.n	801210a <HAL_TIM_ConfigClockSource+0xa6>
 80120d4:	2b70      	cmp	r3, #112	@ 0x70
 80120d6:	d87b      	bhi.n	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
 80120d8:	2b60      	cmp	r3, #96	@ 0x60
 80120da:	d050      	beq.n	801217e <HAL_TIM_ConfigClockSource+0x11a>
 80120dc:	2b60      	cmp	r3, #96	@ 0x60
 80120de:	d877      	bhi.n	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
 80120e0:	2b50      	cmp	r3, #80	@ 0x50
 80120e2:	d03c      	beq.n	801215e <HAL_TIM_ConfigClockSource+0xfa>
 80120e4:	2b50      	cmp	r3, #80	@ 0x50
 80120e6:	d873      	bhi.n	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
 80120e8:	2b40      	cmp	r3, #64	@ 0x40
 80120ea:	d058      	beq.n	801219e <HAL_TIM_ConfigClockSource+0x13a>
 80120ec:	2b40      	cmp	r3, #64	@ 0x40
 80120ee:	d86f      	bhi.n	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
 80120f0:	2b30      	cmp	r3, #48	@ 0x30
 80120f2:	d064      	beq.n	80121be <HAL_TIM_ConfigClockSource+0x15a>
 80120f4:	2b30      	cmp	r3, #48	@ 0x30
 80120f6:	d86b      	bhi.n	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
 80120f8:	2b20      	cmp	r3, #32
 80120fa:	d060      	beq.n	80121be <HAL_TIM_ConfigClockSource+0x15a>
 80120fc:	2b20      	cmp	r3, #32
 80120fe:	d867      	bhi.n	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
 8012100:	2b00      	cmp	r3, #0
 8012102:	d05c      	beq.n	80121be <HAL_TIM_ConfigClockSource+0x15a>
 8012104:	2b10      	cmp	r3, #16
 8012106:	d05a      	beq.n	80121be <HAL_TIM_ConfigClockSource+0x15a>
 8012108:	e062      	b.n	80121d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801211a:	f000 fc70 	bl	80129fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801212c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	68ba      	ldr	r2, [r7, #8]
 8012134:	609a      	str	r2, [r3, #8]
      break;
 8012136:	e04f      	b.n	80121d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012148:	f000 fc59 	bl	80129fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	689a      	ldr	r2, [r3, #8]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801215a:	609a      	str	r2, [r3, #8]
      break;
 801215c:	e03c      	b.n	80121d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801216a:	461a      	mov	r2, r3
 801216c:	f000 fbcd 	bl	801290a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2150      	movs	r1, #80	@ 0x50
 8012176:	4618      	mov	r0, r3
 8012178:	f000 fc26 	bl	80129c8 <TIM_ITRx_SetConfig>
      break;
 801217c:	e02c      	b.n	80121d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801218a:	461a      	mov	r2, r3
 801218c:	f000 fbec 	bl	8012968 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2160      	movs	r1, #96	@ 0x60
 8012196:	4618      	mov	r0, r3
 8012198:	f000 fc16 	bl	80129c8 <TIM_ITRx_SetConfig>
      break;
 801219c:	e01c      	b.n	80121d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80121aa:	461a      	mov	r2, r3
 80121ac:	f000 fbad 	bl	801290a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2140      	movs	r1, #64	@ 0x40
 80121b6:	4618      	mov	r0, r3
 80121b8:	f000 fc06 	bl	80129c8 <TIM_ITRx_SetConfig>
      break;
 80121bc:	e00c      	b.n	80121d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4619      	mov	r1, r3
 80121c8:	4610      	mov	r0, r2
 80121ca:	f000 fbfd 	bl	80129c8 <TIM_ITRx_SetConfig>
      break;
 80121ce:	e003      	b.n	80121d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80121d0:	2301      	movs	r3, #1
 80121d2:	73fb      	strb	r3, [r7, #15]
      break;
 80121d4:	e000      	b.n	80121d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80121d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2201      	movs	r2, #1
 80121dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2200      	movs	r2, #0
 80121e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80121e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}

080121f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b082      	sub	sp, #8
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
 80121fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012202:	2b01      	cmp	r3, #1
 8012204:	d101      	bne.n	801220a <HAL_TIM_SlaveConfigSynchro+0x18>
 8012206:	2302      	movs	r3, #2
 8012208:	e031      	b.n	801226e <HAL_TIM_SlaveConfigSynchro+0x7c>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2201      	movs	r2, #1
 801220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2202      	movs	r2, #2
 8012216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801221a:	6839      	ldr	r1, [r7, #0]
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f000 fae3 	bl	80127e8 <TIM_SlaveTimer_SetConfig>
 8012222:	4603      	mov	r3, r0
 8012224:	2b00      	cmp	r3, #0
 8012226:	d009      	beq.n	801223c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8012238:	2301      	movs	r3, #1
 801223a:	e018      	b.n	801226e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	68da      	ldr	r2, [r3, #12]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801224a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	68da      	ldr	r2, [r3, #12]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801225a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2201      	movs	r2, #1
 8012260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2200      	movs	r2, #0
 8012268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801226c:	2300      	movs	r3, #0
}
 801226e:	4618      	mov	r0, r3
 8012270:	3708      	adds	r7, #8
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
	...

08012278 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012278:	b480      	push	{r7}
 801227a:	b085      	sub	sp, #20
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8012282:	2300      	movs	r3, #0
 8012284:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	2b0c      	cmp	r3, #12
 801228a:	d831      	bhi.n	80122f0 <HAL_TIM_ReadCapturedValue+0x78>
 801228c:	a201      	add	r2, pc, #4	@ (adr r2, 8012294 <HAL_TIM_ReadCapturedValue+0x1c>)
 801228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012292:	bf00      	nop
 8012294:	080122c9 	.word	0x080122c9
 8012298:	080122f1 	.word	0x080122f1
 801229c:	080122f1 	.word	0x080122f1
 80122a0:	080122f1 	.word	0x080122f1
 80122a4:	080122d3 	.word	0x080122d3
 80122a8:	080122f1 	.word	0x080122f1
 80122ac:	080122f1 	.word	0x080122f1
 80122b0:	080122f1 	.word	0x080122f1
 80122b4:	080122dd 	.word	0x080122dd
 80122b8:	080122f1 	.word	0x080122f1
 80122bc:	080122f1 	.word	0x080122f1
 80122c0:	080122f1 	.word	0x080122f1
 80122c4:	080122e7 	.word	0x080122e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122ce:	60fb      	str	r3, [r7, #12]

      break;
 80122d0:	e00f      	b.n	80122f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122d8:	60fb      	str	r3, [r7, #12]

      break;
 80122da:	e00a      	b.n	80122f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122e2:	60fb      	str	r3, [r7, #12]

      break;
 80122e4:	e005      	b.n	80122f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122ec:	60fb      	str	r3, [r7, #12]

      break;
 80122ee:	e000      	b.n	80122f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80122f0:	bf00      	nop
  }

  return tmpreg;
 80122f2:	68fb      	ldr	r3, [r7, #12]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3714      	adds	r7, #20
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012308:	bf00      	nop
 801230a:	370c      	adds	r7, #12
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr

08012314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801231c:	bf00      	nop
 801231e:	370c      	adds	r7, #12
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr

08012328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012330:	bf00      	nop
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801233c:	b480      	push	{r7}
 801233e:	b085      	sub	sp, #20
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	4a43      	ldr	r2, [pc, #268]	@ (801245c <TIM_Base_SetConfig+0x120>)
 8012350:	4293      	cmp	r3, r2
 8012352:	d013      	beq.n	801237c <TIM_Base_SetConfig+0x40>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801235a:	d00f      	beq.n	801237c <TIM_Base_SetConfig+0x40>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	4a40      	ldr	r2, [pc, #256]	@ (8012460 <TIM_Base_SetConfig+0x124>)
 8012360:	4293      	cmp	r3, r2
 8012362:	d00b      	beq.n	801237c <TIM_Base_SetConfig+0x40>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	4a3f      	ldr	r2, [pc, #252]	@ (8012464 <TIM_Base_SetConfig+0x128>)
 8012368:	4293      	cmp	r3, r2
 801236a:	d007      	beq.n	801237c <TIM_Base_SetConfig+0x40>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4a3e      	ldr	r2, [pc, #248]	@ (8012468 <TIM_Base_SetConfig+0x12c>)
 8012370:	4293      	cmp	r3, r2
 8012372:	d003      	beq.n	801237c <TIM_Base_SetConfig+0x40>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	4a3d      	ldr	r2, [pc, #244]	@ (801246c <TIM_Base_SetConfig+0x130>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d108      	bne.n	801238e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	68fa      	ldr	r2, [r7, #12]
 801238a:	4313      	orrs	r3, r2
 801238c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4a32      	ldr	r2, [pc, #200]	@ (801245c <TIM_Base_SetConfig+0x120>)
 8012392:	4293      	cmp	r3, r2
 8012394:	d02b      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801239c:	d027      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4a2f      	ldr	r2, [pc, #188]	@ (8012460 <TIM_Base_SetConfig+0x124>)
 80123a2:	4293      	cmp	r3, r2
 80123a4:	d023      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4a2e      	ldr	r2, [pc, #184]	@ (8012464 <TIM_Base_SetConfig+0x128>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d01f      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4a2d      	ldr	r2, [pc, #180]	@ (8012468 <TIM_Base_SetConfig+0x12c>)
 80123b2:	4293      	cmp	r3, r2
 80123b4:	d01b      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4a2c      	ldr	r2, [pc, #176]	@ (801246c <TIM_Base_SetConfig+0x130>)
 80123ba:	4293      	cmp	r3, r2
 80123bc:	d017      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	4a2b      	ldr	r2, [pc, #172]	@ (8012470 <TIM_Base_SetConfig+0x134>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d013      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4a2a      	ldr	r2, [pc, #168]	@ (8012474 <TIM_Base_SetConfig+0x138>)
 80123ca:	4293      	cmp	r3, r2
 80123cc:	d00f      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	4a29      	ldr	r2, [pc, #164]	@ (8012478 <TIM_Base_SetConfig+0x13c>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d00b      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	4a28      	ldr	r2, [pc, #160]	@ (801247c <TIM_Base_SetConfig+0x140>)
 80123da:	4293      	cmp	r3, r2
 80123dc:	d007      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4a27      	ldr	r2, [pc, #156]	@ (8012480 <TIM_Base_SetConfig+0x144>)
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d003      	beq.n	80123ee <TIM_Base_SetConfig+0xb2>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4a26      	ldr	r2, [pc, #152]	@ (8012484 <TIM_Base_SetConfig+0x148>)
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d108      	bne.n	8012400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80123f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	4313      	orrs	r3, r2
 80123fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	695b      	ldr	r3, [r3, #20]
 801240a:	4313      	orrs	r3, r2
 801240c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	689a      	ldr	r2, [r3, #8]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	4a0e      	ldr	r2, [pc, #56]	@ (801245c <TIM_Base_SetConfig+0x120>)
 8012422:	4293      	cmp	r3, r2
 8012424:	d003      	beq.n	801242e <TIM_Base_SetConfig+0xf2>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	4a10      	ldr	r2, [pc, #64]	@ (801246c <TIM_Base_SetConfig+0x130>)
 801242a:	4293      	cmp	r3, r2
 801242c:	d103      	bne.n	8012436 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	691a      	ldr	r2, [r3, #16]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f043 0204 	orr.w	r2, r3, #4
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2201      	movs	r2, #1
 8012446:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	601a      	str	r2, [r3, #0]
}
 801244e:	bf00      	nop
 8012450:	3714      	adds	r7, #20
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr
 801245a:	bf00      	nop
 801245c:	40010000 	.word	0x40010000
 8012460:	40000400 	.word	0x40000400
 8012464:	40000800 	.word	0x40000800
 8012468:	40000c00 	.word	0x40000c00
 801246c:	40010400 	.word	0x40010400
 8012470:	40014000 	.word	0x40014000
 8012474:	40014400 	.word	0x40014400
 8012478:	40014800 	.word	0x40014800
 801247c:	40001800 	.word	0x40001800
 8012480:	40001c00 	.word	0x40001c00
 8012484:	40002000 	.word	0x40002000

08012488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012488:	b480      	push	{r7}
 801248a:	b087      	sub	sp, #28
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6a1b      	ldr	r3, [r3, #32]
 8012496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6a1b      	ldr	r3, [r3, #32]
 801249c:	f023 0201 	bic.w	r2, r3, #1
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	699b      	ldr	r3, [r3, #24]
 80124ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80124b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f023 0303 	bic.w	r3, r3, #3
 80124be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68fa      	ldr	r2, [r7, #12]
 80124c6:	4313      	orrs	r3, r2
 80124c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	f023 0302 	bic.w	r3, r3, #2
 80124d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	689b      	ldr	r3, [r3, #8]
 80124d6:	697a      	ldr	r2, [r7, #20]
 80124d8:	4313      	orrs	r3, r2
 80124da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	4a20      	ldr	r2, [pc, #128]	@ (8012560 <TIM_OC1_SetConfig+0xd8>)
 80124e0:	4293      	cmp	r3, r2
 80124e2:	d003      	beq.n	80124ec <TIM_OC1_SetConfig+0x64>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	4a1f      	ldr	r2, [pc, #124]	@ (8012564 <TIM_OC1_SetConfig+0xdc>)
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d10c      	bne.n	8012506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	f023 0308 	bic.w	r3, r3, #8
 80124f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	697a      	ldr	r2, [r7, #20]
 80124fa:	4313      	orrs	r3, r2
 80124fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	f023 0304 	bic.w	r3, r3, #4
 8012504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4a15      	ldr	r2, [pc, #84]	@ (8012560 <TIM_OC1_SetConfig+0xd8>)
 801250a:	4293      	cmp	r3, r2
 801250c:	d003      	beq.n	8012516 <TIM_OC1_SetConfig+0x8e>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	4a14      	ldr	r2, [pc, #80]	@ (8012564 <TIM_OC1_SetConfig+0xdc>)
 8012512:	4293      	cmp	r3, r2
 8012514:	d111      	bne.n	801253a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801251c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	695b      	ldr	r3, [r3, #20]
 801252a:	693a      	ldr	r2, [r7, #16]
 801252c:	4313      	orrs	r3, r2
 801252e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	699b      	ldr	r3, [r3, #24]
 8012534:	693a      	ldr	r2, [r7, #16]
 8012536:	4313      	orrs	r3, r2
 8012538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	693a      	ldr	r2, [r7, #16]
 801253e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	68fa      	ldr	r2, [r7, #12]
 8012544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	685a      	ldr	r2, [r3, #4]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	621a      	str	r2, [r3, #32]
}
 8012554:	bf00      	nop
 8012556:	371c      	adds	r7, #28
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr
 8012560:	40010000 	.word	0x40010000
 8012564:	40010400 	.word	0x40010400

08012568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012568:	b480      	push	{r7}
 801256a:	b087      	sub	sp, #28
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6a1b      	ldr	r3, [r3, #32]
 8012576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6a1b      	ldr	r3, [r3, #32]
 801257c:	f023 0210 	bic.w	r2, r3, #16
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	699b      	ldr	r3, [r3, #24]
 801258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801259e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	021b      	lsls	r3, r3, #8
 80125a6:	68fa      	ldr	r2, [r7, #12]
 80125a8:	4313      	orrs	r3, r2
 80125aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	f023 0320 	bic.w	r3, r3, #32
 80125b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	689b      	ldr	r3, [r3, #8]
 80125b8:	011b      	lsls	r3, r3, #4
 80125ba:	697a      	ldr	r2, [r7, #20]
 80125bc:	4313      	orrs	r3, r2
 80125be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	4a22      	ldr	r2, [pc, #136]	@ (801264c <TIM_OC2_SetConfig+0xe4>)
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d003      	beq.n	80125d0 <TIM_OC2_SetConfig+0x68>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	4a21      	ldr	r2, [pc, #132]	@ (8012650 <TIM_OC2_SetConfig+0xe8>)
 80125cc:	4293      	cmp	r3, r2
 80125ce:	d10d      	bne.n	80125ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80125d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	68db      	ldr	r3, [r3, #12]
 80125dc:	011b      	lsls	r3, r3, #4
 80125de:	697a      	ldr	r2, [r7, #20]
 80125e0:	4313      	orrs	r3, r2
 80125e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80125ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	4a17      	ldr	r2, [pc, #92]	@ (801264c <TIM_OC2_SetConfig+0xe4>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d003      	beq.n	80125fc <TIM_OC2_SetConfig+0x94>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	4a16      	ldr	r2, [pc, #88]	@ (8012650 <TIM_OC2_SetConfig+0xe8>)
 80125f8:	4293      	cmp	r3, r2
 80125fa:	d113      	bne.n	8012624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801260a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	695b      	ldr	r3, [r3, #20]
 8012610:	009b      	lsls	r3, r3, #2
 8012612:	693a      	ldr	r2, [r7, #16]
 8012614:	4313      	orrs	r3, r2
 8012616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	699b      	ldr	r3, [r3, #24]
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	693a      	ldr	r2, [r7, #16]
 8012620:	4313      	orrs	r3, r2
 8012622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	693a      	ldr	r2, [r7, #16]
 8012628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	685a      	ldr	r2, [r3, #4]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	697a      	ldr	r2, [r7, #20]
 801263c:	621a      	str	r2, [r3, #32]
}
 801263e:	bf00      	nop
 8012640:	371c      	adds	r7, #28
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	40010000 	.word	0x40010000
 8012650:	40010400 	.word	0x40010400

08012654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012654:	b480      	push	{r7}
 8012656:	b087      	sub	sp, #28
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a1b      	ldr	r3, [r3, #32]
 8012662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6a1b      	ldr	r3, [r3, #32]
 8012668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	69db      	ldr	r3, [r3, #28]
 801267a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	f023 0303 	bic.w	r3, r3, #3
 801268a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	4313      	orrs	r3, r2
 8012694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801269c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	689b      	ldr	r3, [r3, #8]
 80126a2:	021b      	lsls	r3, r3, #8
 80126a4:	697a      	ldr	r2, [r7, #20]
 80126a6:	4313      	orrs	r3, r2
 80126a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4a21      	ldr	r2, [pc, #132]	@ (8012734 <TIM_OC3_SetConfig+0xe0>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d003      	beq.n	80126ba <TIM_OC3_SetConfig+0x66>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4a20      	ldr	r2, [pc, #128]	@ (8012738 <TIM_OC3_SetConfig+0xe4>)
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d10d      	bne.n	80126d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80126c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	021b      	lsls	r3, r3, #8
 80126c8:	697a      	ldr	r2, [r7, #20]
 80126ca:	4313      	orrs	r3, r2
 80126cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80126d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	4a16      	ldr	r2, [pc, #88]	@ (8012734 <TIM_OC3_SetConfig+0xe0>)
 80126da:	4293      	cmp	r3, r2
 80126dc:	d003      	beq.n	80126e6 <TIM_OC3_SetConfig+0x92>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4a15      	ldr	r2, [pc, #84]	@ (8012738 <TIM_OC3_SetConfig+0xe4>)
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d113      	bne.n	801270e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80126ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80126f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	695b      	ldr	r3, [r3, #20]
 80126fa:	011b      	lsls	r3, r3, #4
 80126fc:	693a      	ldr	r2, [r7, #16]
 80126fe:	4313      	orrs	r3, r2
 8012700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	699b      	ldr	r3, [r3, #24]
 8012706:	011b      	lsls	r3, r3, #4
 8012708:	693a      	ldr	r2, [r7, #16]
 801270a:	4313      	orrs	r3, r2
 801270c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	693a      	ldr	r2, [r7, #16]
 8012712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	68fa      	ldr	r2, [r7, #12]
 8012718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	685a      	ldr	r2, [r3, #4]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	697a      	ldr	r2, [r7, #20]
 8012726:	621a      	str	r2, [r3, #32]
}
 8012728:	bf00      	nop
 801272a:	371c      	adds	r7, #28
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr
 8012734:	40010000 	.word	0x40010000
 8012738:	40010400 	.word	0x40010400

0801273c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801273c:	b480      	push	{r7}
 801273e:	b087      	sub	sp, #28
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6a1b      	ldr	r3, [r3, #32]
 801274a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6a1b      	ldr	r3, [r3, #32]
 8012750:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	69db      	ldr	r3, [r3, #28]
 8012762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801276a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	021b      	lsls	r3, r3, #8
 801277a:	68fa      	ldr	r2, [r7, #12]
 801277c:	4313      	orrs	r3, r2
 801277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	689b      	ldr	r3, [r3, #8]
 801278c:	031b      	lsls	r3, r3, #12
 801278e:	693a      	ldr	r2, [r7, #16]
 8012790:	4313      	orrs	r3, r2
 8012792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	4a12      	ldr	r2, [pc, #72]	@ (80127e0 <TIM_OC4_SetConfig+0xa4>)
 8012798:	4293      	cmp	r3, r2
 801279a:	d003      	beq.n	80127a4 <TIM_OC4_SetConfig+0x68>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4a11      	ldr	r2, [pc, #68]	@ (80127e4 <TIM_OC4_SetConfig+0xa8>)
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d109      	bne.n	80127b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80127aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	695b      	ldr	r3, [r3, #20]
 80127b0:	019b      	lsls	r3, r3, #6
 80127b2:	697a      	ldr	r2, [r7, #20]
 80127b4:	4313      	orrs	r3, r2
 80127b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	697a      	ldr	r2, [r7, #20]
 80127bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	68fa      	ldr	r2, [r7, #12]
 80127c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	685a      	ldr	r2, [r3, #4]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	693a      	ldr	r2, [r7, #16]
 80127d0:	621a      	str	r2, [r3, #32]
}
 80127d2:	bf00      	nop
 80127d4:	371c      	adds	r7, #28
 80127d6:	46bd      	mov	sp, r7
 80127d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127dc:	4770      	bx	lr
 80127de:	bf00      	nop
 80127e0:	40010000 	.word	0x40010000
 80127e4:	40010400 	.word	0x40010400

080127e8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b086      	sub	sp, #24
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80127f2:	2300      	movs	r3, #0
 80127f4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	689b      	ldr	r3, [r3, #8]
 80127fc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012804:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	693a      	ldr	r2, [r7, #16]
 801280c:	4313      	orrs	r3, r2
 801280e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	f023 0307 	bic.w	r3, r3, #7
 8012816:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	693a      	ldr	r2, [r7, #16]
 801281e:	4313      	orrs	r3, r2
 8012820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	693a      	ldr	r2, [r7, #16]
 8012828:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	2b70      	cmp	r3, #112	@ 0x70
 8012830:	d01a      	beq.n	8012868 <TIM_SlaveTimer_SetConfig+0x80>
 8012832:	2b70      	cmp	r3, #112	@ 0x70
 8012834:	d860      	bhi.n	80128f8 <TIM_SlaveTimer_SetConfig+0x110>
 8012836:	2b60      	cmp	r3, #96	@ 0x60
 8012838:	d054      	beq.n	80128e4 <TIM_SlaveTimer_SetConfig+0xfc>
 801283a:	2b60      	cmp	r3, #96	@ 0x60
 801283c:	d85c      	bhi.n	80128f8 <TIM_SlaveTimer_SetConfig+0x110>
 801283e:	2b50      	cmp	r3, #80	@ 0x50
 8012840:	d046      	beq.n	80128d0 <TIM_SlaveTimer_SetConfig+0xe8>
 8012842:	2b50      	cmp	r3, #80	@ 0x50
 8012844:	d858      	bhi.n	80128f8 <TIM_SlaveTimer_SetConfig+0x110>
 8012846:	2b40      	cmp	r3, #64	@ 0x40
 8012848:	d019      	beq.n	801287e <TIM_SlaveTimer_SetConfig+0x96>
 801284a:	2b40      	cmp	r3, #64	@ 0x40
 801284c:	d854      	bhi.n	80128f8 <TIM_SlaveTimer_SetConfig+0x110>
 801284e:	2b30      	cmp	r3, #48	@ 0x30
 8012850:	d055      	beq.n	80128fe <TIM_SlaveTimer_SetConfig+0x116>
 8012852:	2b30      	cmp	r3, #48	@ 0x30
 8012854:	d850      	bhi.n	80128f8 <TIM_SlaveTimer_SetConfig+0x110>
 8012856:	2b20      	cmp	r3, #32
 8012858:	d051      	beq.n	80128fe <TIM_SlaveTimer_SetConfig+0x116>
 801285a:	2b20      	cmp	r3, #32
 801285c:	d84c      	bhi.n	80128f8 <TIM_SlaveTimer_SetConfig+0x110>
 801285e:	2b00      	cmp	r3, #0
 8012860:	d04d      	beq.n	80128fe <TIM_SlaveTimer_SetConfig+0x116>
 8012862:	2b10      	cmp	r3, #16
 8012864:	d04b      	beq.n	80128fe <TIM_SlaveTimer_SetConfig+0x116>
 8012866:	e047      	b.n	80128f8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8012878:	f000 f8c1 	bl	80129fe <TIM_ETR_SetConfig>
      break;
 801287c:	e040      	b.n	8012900 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	2b05      	cmp	r3, #5
 8012884:	d101      	bne.n	801288a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8012886:	2301      	movs	r3, #1
 8012888:	e03b      	b.n	8012902 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	6a1b      	ldr	r3, [r3, #32]
 8012890:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	6a1a      	ldr	r2, [r3, #32]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f022 0201 	bic.w	r2, r2, #1
 80128a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80128b0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	691b      	ldr	r3, [r3, #16]
 80128b6:	011b      	lsls	r3, r3, #4
 80128b8:	68ba      	ldr	r2, [r7, #8]
 80128ba:	4313      	orrs	r3, r2
 80128bc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	68ba      	ldr	r2, [r7, #8]
 80128c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	621a      	str	r2, [r3, #32]
      break;
 80128ce:	e017      	b.n	8012900 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80128dc:	461a      	mov	r2, r3
 80128de:	f000 f814 	bl	801290a <TIM_TI1_ConfigInputStage>
      break;
 80128e2:	e00d      	b.n	8012900 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80128f0:	461a      	mov	r2, r3
 80128f2:	f000 f839 	bl	8012968 <TIM_TI2_ConfigInputStage>
      break;
 80128f6:	e003      	b.n	8012900 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80128f8:	2301      	movs	r3, #1
 80128fa:	75fb      	strb	r3, [r7, #23]
      break;
 80128fc:	e000      	b.n	8012900 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80128fe:	bf00      	nop
  }

  return status;
 8012900:	7dfb      	ldrb	r3, [r7, #23]
}
 8012902:	4618      	mov	r0, r3
 8012904:	3718      	adds	r7, #24
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801290a:	b480      	push	{r7}
 801290c:	b087      	sub	sp, #28
 801290e:	af00      	add	r7, sp, #0
 8012910:	60f8      	str	r0, [r7, #12]
 8012912:	60b9      	str	r1, [r7, #8]
 8012914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	6a1b      	ldr	r3, [r3, #32]
 801291a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	6a1b      	ldr	r3, [r3, #32]
 8012920:	f023 0201 	bic.w	r2, r3, #1
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	699b      	ldr	r3, [r3, #24]
 801292c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	011b      	lsls	r3, r3, #4
 801293a:	693a      	ldr	r2, [r7, #16]
 801293c:	4313      	orrs	r3, r2
 801293e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	f023 030a 	bic.w	r3, r3, #10
 8012946:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012948:	697a      	ldr	r2, [r7, #20]
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	4313      	orrs	r3, r2
 801294e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	693a      	ldr	r2, [r7, #16]
 8012954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	697a      	ldr	r2, [r7, #20]
 801295a:	621a      	str	r2, [r3, #32]
}
 801295c:	bf00      	nop
 801295e:	371c      	adds	r7, #28
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr

08012968 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012968:	b480      	push	{r7}
 801296a:	b087      	sub	sp, #28
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	6a1b      	ldr	r3, [r3, #32]
 8012978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	6a1b      	ldr	r3, [r3, #32]
 801297e:	f023 0210 	bic.w	r2, r3, #16
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	699b      	ldr	r3, [r3, #24]
 801298a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	031b      	lsls	r3, r3, #12
 8012998:	693a      	ldr	r2, [r7, #16]
 801299a:	4313      	orrs	r3, r2
 801299c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80129a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	011b      	lsls	r3, r3, #4
 80129aa:	697a      	ldr	r2, [r7, #20]
 80129ac:	4313      	orrs	r3, r2
 80129ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	693a      	ldr	r2, [r7, #16]
 80129b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	697a      	ldr	r2, [r7, #20]
 80129ba:	621a      	str	r2, [r3, #32]
}
 80129bc:	bf00      	nop
 80129be:	371c      	adds	r7, #28
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr

080129c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	689b      	ldr	r3, [r3, #8]
 80129d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80129de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80129e0:	683a      	ldr	r2, [r7, #0]
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	4313      	orrs	r3, r2
 80129e6:	f043 0307 	orr.w	r3, r3, #7
 80129ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	68fa      	ldr	r2, [r7, #12]
 80129f0:	609a      	str	r2, [r3, #8]
}
 80129f2:	bf00      	nop
 80129f4:	3714      	adds	r7, #20
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr

080129fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80129fe:	b480      	push	{r7}
 8012a00:	b087      	sub	sp, #28
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	60f8      	str	r0, [r7, #12]
 8012a06:	60b9      	str	r1, [r7, #8]
 8012a08:	607a      	str	r2, [r7, #4]
 8012a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	689b      	ldr	r3, [r3, #8]
 8012a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	021a      	lsls	r2, r3, #8
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	431a      	orrs	r2, r3
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	4313      	orrs	r3, r2
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	4313      	orrs	r3, r2
 8012a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	697a      	ldr	r2, [r7, #20]
 8012a30:	609a      	str	r2, [r3, #8]
}
 8012a32:	bf00      	nop
 8012a34:	371c      	adds	r7, #28
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr

08012a3e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012a3e:	b480      	push	{r7}
 8012a40:	b087      	sub	sp, #28
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	60f8      	str	r0, [r7, #12]
 8012a46:	60b9      	str	r1, [r7, #8]
 8012a48:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	f003 031f 	and.w	r3, r3, #31
 8012a50:	2201      	movs	r2, #1
 8012a52:	fa02 f303 	lsl.w	r3, r2, r3
 8012a56:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	6a1a      	ldr	r2, [r3, #32]
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	43db      	mvns	r3, r3
 8012a60:	401a      	ands	r2, r3
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	6a1a      	ldr	r2, [r3, #32]
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	f003 031f 	and.w	r3, r3, #31
 8012a70:	6879      	ldr	r1, [r7, #4]
 8012a72:	fa01 f303 	lsl.w	r3, r1, r3
 8012a76:	431a      	orrs	r2, r3
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	621a      	str	r2, [r3, #32]
}
 8012a7c:	bf00      	nop
 8012a7e:	371c      	adds	r7, #28
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr

08012a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d101      	bne.n	8012aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012a9c:	2302      	movs	r3, #2
 8012a9e:	e05a      	b.n	8012b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2202      	movs	r2, #2
 8012aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	689b      	ldr	r3, [r3, #8]
 8012abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	68fa      	ldr	r2, [r7, #12]
 8012ace:	4313      	orrs	r3, r2
 8012ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	68fa      	ldr	r2, [r7, #12]
 8012ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	4a21      	ldr	r2, [pc, #132]	@ (8012b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	d022      	beq.n	8012b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012aec:	d01d      	beq.n	8012b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4a1d      	ldr	r2, [pc, #116]	@ (8012b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012af4:	4293      	cmp	r3, r2
 8012af6:	d018      	beq.n	8012b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4a1b      	ldr	r2, [pc, #108]	@ (8012b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d013      	beq.n	8012b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	4a1a      	ldr	r2, [pc, #104]	@ (8012b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d00e      	beq.n	8012b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	4a18      	ldr	r2, [pc, #96]	@ (8012b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d009      	beq.n	8012b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	4a17      	ldr	r2, [pc, #92]	@ (8012b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012b1c:	4293      	cmp	r3, r2
 8012b1e:	d004      	beq.n	8012b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	4a15      	ldr	r2, [pc, #84]	@ (8012b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d10c      	bne.n	8012b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	68ba      	ldr	r2, [r7, #8]
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	68ba      	ldr	r2, [r7, #8]
 8012b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2201      	movs	r2, #1
 8012b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3714      	adds	r7, #20
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	40010000 	.word	0x40010000
 8012b68:	40000400 	.word	0x40000400
 8012b6c:	40000800 	.word	0x40000800
 8012b70:	40000c00 	.word	0x40000c00
 8012b74:	40010400 	.word	0x40010400
 8012b78:	40014000 	.word	0x40014000
 8012b7c:	40001800 	.word	0x40001800

08012b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012b80:	b480      	push	{r7}
 8012b82:	b083      	sub	sp, #12
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012b88:	bf00      	nop
 8012b8a:	370c      	adds	r7, #12
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b92:	4770      	bx	lr

08012b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012b94:	b480      	push	{r7}
 8012b96:	b083      	sub	sp, #12
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012b9c:	bf00      	nop
 8012b9e:	370c      	adds	r7, #12
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr

08012ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d101      	bne.n	8012bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e042      	b.n	8012c40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d106      	bne.n	8012bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7fb ff8a 	bl	800eae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2224      	movs	r2, #36	@ 0x24
 8012bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	68da      	ldr	r2, [r3, #12]
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 fea7 	bl	8013940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	691a      	ldr	r2, [r3, #16]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	695a      	ldr	r2, [r3, #20]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	68da      	ldr	r2, [r3, #12]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2220      	movs	r2, #32
 8012c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2220      	movs	r2, #32
 8012c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8012c3e:	2300      	movs	r3, #0
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b08a      	sub	sp, #40	@ 0x28
 8012c4c:	af02      	add	r7, sp, #8
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	60b9      	str	r1, [r7, #8]
 8012c52:	603b      	str	r3, [r7, #0]
 8012c54:	4613      	mov	r3, r2
 8012c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	2b20      	cmp	r3, #32
 8012c66:	d175      	bne.n	8012d54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d002      	beq.n	8012c74 <HAL_UART_Transmit+0x2c>
 8012c6e:	88fb      	ldrh	r3, [r7, #6]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d101      	bne.n	8012c78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8012c74:	2301      	movs	r3, #1
 8012c76:	e06e      	b.n	8012d56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	2221      	movs	r2, #33	@ 0x21
 8012c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012c86:	f7fc f9e7 	bl	800f058 <HAL_GetTick>
 8012c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	88fa      	ldrh	r2, [r7, #6]
 8012c90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	88fa      	ldrh	r2, [r7, #6]
 8012c96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	689b      	ldr	r3, [r3, #8]
 8012c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ca0:	d108      	bne.n	8012cb4 <HAL_UART_Transmit+0x6c>
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	691b      	ldr	r3, [r3, #16]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d104      	bne.n	8012cb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012caa:	2300      	movs	r3, #0
 8012cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	61bb      	str	r3, [r7, #24]
 8012cb2:	e003      	b.n	8012cbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012cbc:	e02e      	b.n	8012d1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	2180      	movs	r1, #128	@ 0x80
 8012cc8:	68f8      	ldr	r0, [r7, #12]
 8012cca:	f000 fbf3 	bl	80134b4 <UART_WaitOnFlagUntilTimeout>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d005      	beq.n	8012ce0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	2220      	movs	r2, #32
 8012cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8012cdc:	2303      	movs	r3, #3
 8012cde:	e03a      	b.n	8012d56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d10b      	bne.n	8012cfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012ce6:	69bb      	ldr	r3, [r7, #24]
 8012ce8:	881b      	ldrh	r3, [r3, #0]
 8012cea:	461a      	mov	r2, r3
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	3302      	adds	r3, #2
 8012cfa:	61bb      	str	r3, [r7, #24]
 8012cfc:	e007      	b.n	8012d0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	781a      	ldrb	r2, [r3, #0]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8012d08:	69fb      	ldr	r3, [r7, #28]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	3b01      	subs	r3, #1
 8012d16:	b29a      	uxth	r2, r3
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d1cb      	bne.n	8012cbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	9300      	str	r3, [sp, #0]
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	2140      	movs	r1, #64	@ 0x40
 8012d30:	68f8      	ldr	r0, [r7, #12]
 8012d32:	f000 fbbf 	bl	80134b4 <UART_WaitOnFlagUntilTimeout>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d005      	beq.n	8012d48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2220      	movs	r2, #32
 8012d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8012d44:	2303      	movs	r3, #3
 8012d46:	e006      	b.n	8012d56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2220      	movs	r2, #32
 8012d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8012d50:	2300      	movs	r3, #0
 8012d52:	e000      	b.n	8012d56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8012d54:	2302      	movs	r3, #2
  }
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3720      	adds	r7, #32
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b084      	sub	sp, #16
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	60f8      	str	r0, [r7, #12]
 8012d66:	60b9      	str	r1, [r7, #8]
 8012d68:	4613      	mov	r3, r2
 8012d6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	2b20      	cmp	r3, #32
 8012d76:	d112      	bne.n	8012d9e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d002      	beq.n	8012d84 <HAL_UART_Receive_IT+0x26>
 8012d7e:	88fb      	ldrh	r3, [r7, #6]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d101      	bne.n	8012d88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8012d84:	2301      	movs	r3, #1
 8012d86:	e00b      	b.n	8012da0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012d8e:	88fb      	ldrh	r3, [r7, #6]
 8012d90:	461a      	mov	r2, r3
 8012d92:	68b9      	ldr	r1, [r7, #8]
 8012d94:	68f8      	ldr	r0, [r7, #12]
 8012d96:	f000 fbe6 	bl	8013566 <UART_Start_Receive_IT>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	e000      	b.n	8012da0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8012d9e:	2302      	movs	r3, #2
  }
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3710      	adds	r7, #16
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b09a      	sub	sp, #104	@ 0x68
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	330c      	adds	r3, #12
 8012db6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012db8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012dba:	e853 3f00 	ldrex	r3, [r3]
 8012dbe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012dc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012dc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	330c      	adds	r3, #12
 8012dce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012dd0:	657a      	str	r2, [r7, #84]	@ 0x54
 8012dd2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012dd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012dd8:	e841 2300 	strex	r3, r2, [r1]
 8012ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d1e5      	bne.n	8012db0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	3314      	adds	r3, #20
 8012dea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dee:	e853 3f00 	ldrex	r3, [r3]
 8012df2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012df6:	f023 0301 	bic.w	r3, r3, #1
 8012dfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	3314      	adds	r3, #20
 8012e02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012e04:	643a      	str	r2, [r7, #64]	@ 0x40
 8012e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012e0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012e0c:	e841 2300 	strex	r3, r2, [r1]
 8012e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d1e5      	bne.n	8012de4 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d119      	bne.n	8012e54 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	330c      	adds	r3, #12
 8012e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e28:	6a3b      	ldr	r3, [r7, #32]
 8012e2a:	e853 3f00 	ldrex	r3, [r3]
 8012e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	f023 0310 	bic.w	r3, r3, #16
 8012e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	330c      	adds	r3, #12
 8012e3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012e48:	e841 2300 	strex	r3, r2, [r1]
 8012e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d1e5      	bne.n	8012e20 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	695b      	ldr	r3, [r3, #20]
 8012e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e5e:	2b40      	cmp	r3, #64	@ 0x40
 8012e60:	d13f      	bne.n	8012ee2 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	3314      	adds	r3, #20
 8012e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	e853 3f00 	ldrex	r3, [r3]
 8012e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012e78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	3314      	adds	r3, #20
 8012e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012e82:	61ba      	str	r2, [r7, #24]
 8012e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e86:	6979      	ldr	r1, [r7, #20]
 8012e88:	69ba      	ldr	r2, [r7, #24]
 8012e8a:	e841 2300 	strex	r3, r2, [r1]
 8012e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d1e5      	bne.n	8012e62 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d013      	beq.n	8012ec6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ea2:	4a19      	ldr	r2, [pc, #100]	@ (8012f08 <HAL_UART_AbortReceive_IT+0x160>)
 8012ea4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7fc fa85 	bl	800f3ba <HAL_DMA_Abort_IT>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d022      	beq.n	8012efc <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012ec0:	4610      	mov	r0, r2
 8012ec2:	4798      	blx	r3
 8012ec4:	e01a      	b.n	8012efc <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2220      	movs	r2, #32
 8012ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f000 fad4 	bl	8013488 <HAL_UART_AbortReceiveCpltCallback>
 8012ee0:	e00c      	b.n	8012efc <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2220      	movs	r2, #32
 8012eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f000 fac6 	bl	8013488 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8012efc:	2300      	movs	r3, #0
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3768      	adds	r7, #104	@ 0x68
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	080136c3 	.word	0x080136c3

08012f0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b0ba      	sub	sp, #232	@ 0xe8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	695b      	ldr	r3, [r3, #20]
 8012f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8012f32:	2300      	movs	r3, #0
 8012f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012f42:	f003 030f 	and.w	r3, r3, #15
 8012f46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8012f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d10f      	bne.n	8012f72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012f56:	f003 0320 	and.w	r3, r3, #32
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d009      	beq.n	8012f72 <HAL_UART_IRQHandler+0x66>
 8012f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012f62:	f003 0320 	and.w	r3, r3, #32
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d003      	beq.n	8012f72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 fc29 	bl	80137c2 <UART_Receive_IT>
      return;
 8012f70:	e273      	b.n	801345a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8012f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	f000 80de 	beq.w	8013138 <HAL_UART_IRQHandler+0x22c>
 8012f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012f80:	f003 0301 	and.w	r3, r3, #1
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d106      	bne.n	8012f96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012f8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f000 80d1 	beq.w	8013138 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012f9a:	f003 0301 	and.w	r3, r3, #1
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00b      	beq.n	8012fba <HAL_UART_IRQHandler+0xae>
 8012fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d005      	beq.n	8012fba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fb2:	f043 0201 	orr.w	r2, r3, #1
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012fbe:	f003 0304 	and.w	r3, r3, #4
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d00b      	beq.n	8012fde <HAL_UART_IRQHandler+0xd2>
 8012fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012fca:	f003 0301 	and.w	r3, r3, #1
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d005      	beq.n	8012fde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fd6:	f043 0202 	orr.w	r2, r3, #2
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012fe2:	f003 0302 	and.w	r3, r3, #2
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d00b      	beq.n	8013002 <HAL_UART_IRQHandler+0xf6>
 8012fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012fee:	f003 0301 	and.w	r3, r3, #1
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d005      	beq.n	8013002 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ffa:	f043 0204 	orr.w	r2, r3, #4
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8013002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013006:	f003 0308 	and.w	r3, r3, #8
 801300a:	2b00      	cmp	r3, #0
 801300c:	d011      	beq.n	8013032 <HAL_UART_IRQHandler+0x126>
 801300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013012:	f003 0320 	and.w	r3, r3, #32
 8013016:	2b00      	cmp	r3, #0
 8013018:	d105      	bne.n	8013026 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801301e:	f003 0301 	and.w	r3, r3, #1
 8013022:	2b00      	cmp	r3, #0
 8013024:	d005      	beq.n	8013032 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801302a:	f043 0208 	orr.w	r2, r3, #8
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 820a 	beq.w	8013450 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801303c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013040:	f003 0320 	and.w	r3, r3, #32
 8013044:	2b00      	cmp	r3, #0
 8013046:	d008      	beq.n	801305a <HAL_UART_IRQHandler+0x14e>
 8013048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801304c:	f003 0320 	and.w	r3, r3, #32
 8013050:	2b00      	cmp	r3, #0
 8013052:	d002      	beq.n	801305a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f000 fbb4 	bl	80137c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	695b      	ldr	r3, [r3, #20]
 8013060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013064:	2b40      	cmp	r3, #64	@ 0x40
 8013066:	bf0c      	ite	eq
 8013068:	2301      	moveq	r3, #1
 801306a:	2300      	movne	r3, #0
 801306c:	b2db      	uxtb	r3, r3
 801306e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013076:	f003 0308 	and.w	r3, r3, #8
 801307a:	2b00      	cmp	r3, #0
 801307c:	d103      	bne.n	8013086 <HAL_UART_IRQHandler+0x17a>
 801307e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013082:	2b00      	cmp	r3, #0
 8013084:	d04f      	beq.n	8013126 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f000 faa7 	bl	80135da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	695b      	ldr	r3, [r3, #20]
 8013092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013096:	2b40      	cmp	r3, #64	@ 0x40
 8013098:	d141      	bne.n	801311e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	3314      	adds	r3, #20
 80130a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80130a8:	e853 3f00 	ldrex	r3, [r3]
 80130ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80130b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80130b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80130b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	3314      	adds	r3, #20
 80130c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80130c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80130ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80130d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80130d6:	e841 2300 	strex	r3, r2, [r1]
 80130da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80130de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d1d9      	bne.n	801309a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d013      	beq.n	8013116 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130f2:	4a8a      	ldr	r2, [pc, #552]	@ (801331c <HAL_UART_IRQHandler+0x410>)
 80130f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7fc f95d 	bl	800f3ba <HAL_DMA_Abort_IT>
 8013100:	4603      	mov	r3, r0
 8013102:	2b00      	cmp	r3, #0
 8013104:	d016      	beq.n	8013134 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801310a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8013110:	4610      	mov	r0, r2
 8013112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013114:	e00e      	b.n	8013134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f000 f9ac 	bl	8013474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801311c:	e00a      	b.n	8013134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f000 f9a8 	bl	8013474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013124:	e006      	b.n	8013134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f000 f9a4 	bl	8013474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8013132:	e18d      	b.n	8013450 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013134:	bf00      	nop
    return;
 8013136:	e18b      	b.n	8013450 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801313c:	2b01      	cmp	r3, #1
 801313e:	f040 8167 	bne.w	8013410 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8013142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013146:	f003 0310 	and.w	r3, r3, #16
 801314a:	2b00      	cmp	r3, #0
 801314c:	f000 8160 	beq.w	8013410 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8013150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013154:	f003 0310 	and.w	r3, r3, #16
 8013158:	2b00      	cmp	r3, #0
 801315a:	f000 8159 	beq.w	8013410 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801315e:	2300      	movs	r3, #0
 8013160:	60bb      	str	r3, [r7, #8]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	60bb      	str	r3, [r7, #8]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	60bb      	str	r3, [r7, #8]
 8013172:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	695b      	ldr	r3, [r3, #20]
 801317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801317e:	2b40      	cmp	r3, #64	@ 0x40
 8013180:	f040 80ce 	bne.w	8013320 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013190:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8013194:	2b00      	cmp	r3, #0
 8013196:	f000 80a9 	beq.w	80132ec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801319e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80131a2:	429a      	cmp	r2, r3
 80131a4:	f080 80a2 	bcs.w	80132ec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80131ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80131b4:	69db      	ldr	r3, [r3, #28]
 80131b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80131ba:	f000 8088 	beq.w	80132ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	330c      	adds	r3, #12
 80131c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80131cc:	e853 3f00 	ldrex	r3, [r3]
 80131d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80131d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80131d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80131dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	330c      	adds	r3, #12
 80131e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80131ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80131ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80131f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80131fa:	e841 2300 	strex	r3, r2, [r1]
 80131fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8013202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013206:	2b00      	cmp	r3, #0
 8013208:	d1d9      	bne.n	80131be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	3314      	adds	r3, #20
 8013210:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013214:	e853 3f00 	ldrex	r3, [r3]
 8013218:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801321a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801321c:	f023 0301 	bic.w	r3, r3, #1
 8013220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	3314      	adds	r3, #20
 801322a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801322e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8013232:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013234:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013236:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801323a:	e841 2300 	strex	r3, r2, [r1]
 801323e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8013240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013242:	2b00      	cmp	r3, #0
 8013244:	d1e1      	bne.n	801320a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	3314      	adds	r3, #20
 801324c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801324e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013250:	e853 3f00 	ldrex	r3, [r3]
 8013254:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8013256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801325c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	3314      	adds	r3, #20
 8013266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801326a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801326c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801326e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013270:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013272:	e841 2300 	strex	r3, r2, [r1]
 8013276:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8013278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801327a:	2b00      	cmp	r3, #0
 801327c:	d1e3      	bne.n	8013246 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2220      	movs	r2, #32
 8013282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2200      	movs	r2, #0
 801328a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	330c      	adds	r3, #12
 8013292:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013296:	e853 3f00 	ldrex	r3, [r3]
 801329a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801329c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801329e:	f023 0310 	bic.w	r3, r3, #16
 80132a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	330c      	adds	r3, #12
 80132ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80132b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80132b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80132b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80132b8:	e841 2300 	strex	r3, r2, [r1]
 80132bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80132be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d1e3      	bne.n	801328c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fc f806 	bl	800f2da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2202      	movs	r2, #2
 80132d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80132dc:	b29b      	uxth	r3, r3
 80132de:	1ad3      	subs	r3, r2, r3
 80132e0:	b29b      	uxth	r3, r3
 80132e2:	4619      	mov	r1, r3
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f000 f8d9 	bl	801349c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80132ea:	e0b3      	b.n	8013454 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80132f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80132f4:	429a      	cmp	r2, r3
 80132f6:	f040 80ad 	bne.w	8013454 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132fe:	69db      	ldr	r3, [r3, #28]
 8013300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013304:	f040 80a6 	bne.w	8013454 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2202      	movs	r2, #2
 801330c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013312:	4619      	mov	r1, r3
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f000 f8c1 	bl	801349c <HAL_UARTEx_RxEventCallback>
      return;
 801331a:	e09b      	b.n	8013454 <HAL_UART_IRQHandler+0x548>
 801331c:	080136a1 	.word	0x080136a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8013328:	b29b      	uxth	r3, r3
 801332a:	1ad3      	subs	r3, r2, r3
 801332c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8013334:	b29b      	uxth	r3, r3
 8013336:	2b00      	cmp	r3, #0
 8013338:	f000 808e 	beq.w	8013458 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 801333c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8013340:	2b00      	cmp	r3, #0
 8013342:	f000 8089 	beq.w	8013458 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	330c      	adds	r3, #12
 801334c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801334e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013350:	e853 3f00 	ldrex	r3, [r3]
 8013354:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801335c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	330c      	adds	r3, #12
 8013366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801336a:	647a      	str	r2, [r7, #68]	@ 0x44
 801336c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801336e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013370:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013372:	e841 2300 	strex	r3, r2, [r1]
 8013376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801337a:	2b00      	cmp	r3, #0
 801337c:	d1e3      	bne.n	8013346 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	3314      	adds	r3, #20
 8013384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013388:	e853 3f00 	ldrex	r3, [r3]
 801338c:	623b      	str	r3, [r7, #32]
   return(result);
 801338e:	6a3b      	ldr	r3, [r7, #32]
 8013390:	f023 0301 	bic.w	r3, r3, #1
 8013394:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	3314      	adds	r3, #20
 801339e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80133a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80133a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80133a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133aa:	e841 2300 	strex	r3, r2, [r1]
 80133ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80133b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d1e3      	bne.n	801337e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2220      	movs	r2, #32
 80133ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2200      	movs	r2, #0
 80133c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	330c      	adds	r3, #12
 80133ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	e853 3f00 	ldrex	r3, [r3]
 80133d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f023 0310 	bic.w	r3, r3, #16
 80133da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	330c      	adds	r3, #12
 80133e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80133e8:	61fa      	str	r2, [r7, #28]
 80133ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133ec:	69b9      	ldr	r1, [r7, #24]
 80133ee:	69fa      	ldr	r2, [r7, #28]
 80133f0:	e841 2300 	strex	r3, r2, [r1]
 80133f4:	617b      	str	r3, [r7, #20]
   return(result);
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d1e3      	bne.n	80133c4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2202      	movs	r2, #2
 8013400:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8013406:	4619      	mov	r1, r3
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f000 f847 	bl	801349c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801340e:	e023      	b.n	8013458 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8013410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013418:	2b00      	cmp	r3, #0
 801341a:	d009      	beq.n	8013430 <HAL_UART_IRQHandler+0x524>
 801341c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013424:	2b00      	cmp	r3, #0
 8013426:	d003      	beq.n	8013430 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f000 f962 	bl	80136f2 <UART_Transmit_IT>
    return;
 801342e:	e014      	b.n	801345a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013438:	2b00      	cmp	r3, #0
 801343a:	d00e      	beq.n	801345a <HAL_UART_IRQHandler+0x54e>
 801343c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013444:	2b00      	cmp	r3, #0
 8013446:	d008      	beq.n	801345a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f000 f9a2 	bl	8013792 <UART_EndTransmit_IT>
    return;
 801344e:	e004      	b.n	801345a <HAL_UART_IRQHandler+0x54e>
    return;
 8013450:	bf00      	nop
 8013452:	e002      	b.n	801345a <HAL_UART_IRQHandler+0x54e>
      return;
 8013454:	bf00      	nop
 8013456:	e000      	b.n	801345a <HAL_UART_IRQHandler+0x54e>
      return;
 8013458:	bf00      	nop
  }
}
 801345a:	37e8      	adds	r7, #232	@ 0xe8
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}

08013460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8013468:	bf00      	nop
 801346a:	370c      	adds	r7, #12
 801346c:	46bd      	mov	sp, r7
 801346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013472:	4770      	bx	lr

08013474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013474:	b480      	push	{r7}
 8013476:	b083      	sub	sp, #12
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801347c:	bf00      	nop
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8013490:	bf00      	nop
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	460b      	mov	r3, r1
 80134a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80134a8:	bf00      	nop
 80134aa:	370c      	adds	r7, #12
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b086      	sub	sp, #24
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	603b      	str	r3, [r7, #0]
 80134c0:	4613      	mov	r3, r2
 80134c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80134c4:	e03b      	b.n	801353e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80134c6:	6a3b      	ldr	r3, [r7, #32]
 80134c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134cc:	d037      	beq.n	801353e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80134ce:	f7fb fdc3 	bl	800f058 <HAL_GetTick>
 80134d2:	4602      	mov	r2, r0
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	1ad3      	subs	r3, r2, r3
 80134d8:	6a3a      	ldr	r2, [r7, #32]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d302      	bcc.n	80134e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80134de:	6a3b      	ldr	r3, [r7, #32]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d101      	bne.n	80134e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80134e4:	2303      	movs	r3, #3
 80134e6:	e03a      	b.n	801355e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	68db      	ldr	r3, [r3, #12]
 80134ee:	f003 0304 	and.w	r3, r3, #4
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d023      	beq.n	801353e <UART_WaitOnFlagUntilTimeout+0x8a>
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	2b80      	cmp	r3, #128	@ 0x80
 80134fa:	d020      	beq.n	801353e <UART_WaitOnFlagUntilTimeout+0x8a>
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2b40      	cmp	r3, #64	@ 0x40
 8013500:	d01d      	beq.n	801353e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	f003 0308 	and.w	r3, r3, #8
 801350c:	2b08      	cmp	r3, #8
 801350e:	d116      	bne.n	801353e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8013510:	2300      	movs	r3, #0
 8013512:	617b      	str	r3, [r7, #20]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	617b      	str	r3, [r7, #20]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	617b      	str	r3, [r7, #20]
 8013524:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013526:	68f8      	ldr	r0, [r7, #12]
 8013528:	f000 f857 	bl	80135da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	2208      	movs	r2, #8
 8013530:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	2200      	movs	r2, #0
 8013536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801353a:	2301      	movs	r3, #1
 801353c:	e00f      	b.n	801355e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	681a      	ldr	r2, [r3, #0]
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	4013      	ands	r3, r2
 8013548:	68ba      	ldr	r2, [r7, #8]
 801354a:	429a      	cmp	r2, r3
 801354c:	bf0c      	ite	eq
 801354e:	2301      	moveq	r3, #1
 8013550:	2300      	movne	r3, #0
 8013552:	b2db      	uxtb	r3, r3
 8013554:	461a      	mov	r2, r3
 8013556:	79fb      	ldrb	r3, [r7, #7]
 8013558:	429a      	cmp	r2, r3
 801355a:	d0b4      	beq.n	80134c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	3718      	adds	r7, #24
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}

08013566 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013566:	b480      	push	{r7}
 8013568:	b085      	sub	sp, #20
 801356a:	af00      	add	r7, sp, #0
 801356c:	60f8      	str	r0, [r7, #12]
 801356e:	60b9      	str	r1, [r7, #8]
 8013570:	4613      	mov	r3, r2
 8013572:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	68ba      	ldr	r2, [r7, #8]
 8013578:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	88fa      	ldrh	r2, [r7, #6]
 801357e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	88fa      	ldrh	r2, [r7, #6]
 8013584:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	2200      	movs	r2, #0
 801358a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2222      	movs	r2, #34	@ 0x22
 8013590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	691b      	ldr	r3, [r3, #16]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d007      	beq.n	80135ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	68da      	ldr	r2, [r3, #12]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80135aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	695a      	ldr	r2, [r3, #20]
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	f042 0201 	orr.w	r2, r2, #1
 80135ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	68da      	ldr	r2, [r3, #12]
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	f042 0220 	orr.w	r2, r2, #32
 80135ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80135cc:	2300      	movs	r3, #0
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3714      	adds	r7, #20
 80135d2:	46bd      	mov	sp, r7
 80135d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d8:	4770      	bx	lr

080135da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80135da:	b480      	push	{r7}
 80135dc:	b095      	sub	sp, #84	@ 0x54
 80135de:	af00      	add	r7, sp, #0
 80135e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	330c      	adds	r3, #12
 80135e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135ec:	e853 3f00 	ldrex	r3, [r3]
 80135f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80135f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80135f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	330c      	adds	r3, #12
 8013600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013602:	643a      	str	r2, [r7, #64]	@ 0x40
 8013604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801360a:	e841 2300 	strex	r3, r2, [r1]
 801360e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013612:	2b00      	cmp	r3, #0
 8013614:	d1e5      	bne.n	80135e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	3314      	adds	r3, #20
 801361c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801361e:	6a3b      	ldr	r3, [r7, #32]
 8013620:	e853 3f00 	ldrex	r3, [r3]
 8013624:	61fb      	str	r3, [r7, #28]
   return(result);
 8013626:	69fb      	ldr	r3, [r7, #28]
 8013628:	f023 0301 	bic.w	r3, r3, #1
 801362c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	3314      	adds	r3, #20
 8013634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801363a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801363c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801363e:	e841 2300 	strex	r3, r2, [r1]
 8013642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013646:	2b00      	cmp	r3, #0
 8013648:	d1e5      	bne.n	8013616 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801364e:	2b01      	cmp	r3, #1
 8013650:	d119      	bne.n	8013686 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	330c      	adds	r3, #12
 8013658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	e853 3f00 	ldrex	r3, [r3]
 8013660:	60bb      	str	r3, [r7, #8]
   return(result);
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	f023 0310 	bic.w	r3, r3, #16
 8013668:	647b      	str	r3, [r7, #68]	@ 0x44
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	330c      	adds	r3, #12
 8013670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013672:	61ba      	str	r2, [r7, #24]
 8013674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013676:	6979      	ldr	r1, [r7, #20]
 8013678:	69ba      	ldr	r2, [r7, #24]
 801367a:	e841 2300 	strex	r3, r2, [r1]
 801367e:	613b      	str	r3, [r7, #16]
   return(result);
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d1e5      	bne.n	8013652 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2220      	movs	r2, #32
 801368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	2200      	movs	r2, #0
 8013692:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8013694:	bf00      	nop
 8013696:	3754      	adds	r7, #84	@ 0x54
 8013698:	46bd      	mov	sp, r7
 801369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369e:	4770      	bx	lr

080136a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b084      	sub	sp, #16
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	2200      	movs	r2, #0
 80136b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80136b4:	68f8      	ldr	r0, [r7, #12]
 80136b6:	f7ff fedd 	bl	8013474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80136ba:	bf00      	nop
 80136bc:	3710      	adds	r7, #16
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}

080136c2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80136c2:	b580      	push	{r7, lr}
 80136c4:	b084      	sub	sp, #16
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136ce:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2200      	movs	r2, #0
 80136d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2220      	movs	r2, #32
 80136da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	2200      	movs	r2, #0
 80136e2:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80136e4:	68f8      	ldr	r0, [r7, #12]
 80136e6:	f7ff fecf 	bl	8013488 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80136ea:	bf00      	nop
 80136ec:	3710      	adds	r7, #16
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}

080136f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80136f2:	b480      	push	{r7}
 80136f4:	b085      	sub	sp, #20
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013700:	b2db      	uxtb	r3, r3
 8013702:	2b21      	cmp	r3, #33	@ 0x21
 8013704:	d13e      	bne.n	8013784 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	689b      	ldr	r3, [r3, #8]
 801370a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801370e:	d114      	bne.n	801373a <UART_Transmit_IT+0x48>
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	691b      	ldr	r3, [r3, #16]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d110      	bne.n	801373a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6a1b      	ldr	r3, [r3, #32]
 801371c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	881b      	ldrh	r3, [r3, #0]
 8013722:	461a      	mov	r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801372c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	6a1b      	ldr	r3, [r3, #32]
 8013732:	1c9a      	adds	r2, r3, #2
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	621a      	str	r2, [r3, #32]
 8013738:	e008      	b.n	801374c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6a1b      	ldr	r3, [r3, #32]
 801373e:	1c59      	adds	r1, r3, #1
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	6211      	str	r1, [r2, #32]
 8013744:	781a      	ldrb	r2, [r3, #0]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013750:	b29b      	uxth	r3, r3
 8013752:	3b01      	subs	r3, #1
 8013754:	b29b      	uxth	r3, r3
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	4619      	mov	r1, r3
 801375a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10f      	bne.n	8013780 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	68da      	ldr	r2, [r3, #12]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801376e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	68da      	ldr	r2, [r3, #12]
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801377e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8013780:	2300      	movs	r3, #0
 8013782:	e000      	b.n	8013786 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8013784:	2302      	movs	r3, #2
  }
}
 8013786:	4618      	mov	r0, r3
 8013788:	3714      	adds	r7, #20
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr

08013792 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b082      	sub	sp, #8
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	68da      	ldr	r2, [r3, #12]
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80137a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2220      	movs	r2, #32
 80137ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f7ff fe54 	bl	8013460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80137b8:	2300      	movs	r3, #0
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3708      	adds	r7, #8
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80137c2:	b580      	push	{r7, lr}
 80137c4:	b08c      	sub	sp, #48	@ 0x30
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80137ca:	2300      	movs	r3, #0
 80137cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80137ce:	2300      	movs	r3, #0
 80137d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	2b22      	cmp	r3, #34	@ 0x22
 80137dc:	f040 80aa 	bne.w	8013934 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	689b      	ldr	r3, [r3, #8]
 80137e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80137e8:	d115      	bne.n	8013816 <UART_Receive_IT+0x54>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	691b      	ldr	r3, [r3, #16]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d111      	bne.n	8013816 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	b29b      	uxth	r3, r3
 8013800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013804:	b29a      	uxth	r2, r3
 8013806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013808:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801380e:	1c9a      	adds	r2, r3, #2
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	629a      	str	r2, [r3, #40]	@ 0x28
 8013814:	e024      	b.n	8013860 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	689b      	ldr	r3, [r3, #8]
 8013820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013824:	d007      	beq.n	8013836 <UART_Receive_IT+0x74>
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	689b      	ldr	r3, [r3, #8]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d10a      	bne.n	8013844 <UART_Receive_IT+0x82>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	691b      	ldr	r3, [r3, #16]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d106      	bne.n	8013844 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	b2da      	uxtb	r2, r3
 801383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013840:	701a      	strb	r2, [r3, #0]
 8013842:	e008      	b.n	8013856 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	b2db      	uxtb	r3, r3
 801384c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013850:	b2da      	uxtb	r2, r3
 8013852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013854:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801385a:	1c5a      	adds	r2, r3, #1
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8013864:	b29b      	uxth	r3, r3
 8013866:	3b01      	subs	r3, #1
 8013868:	b29b      	uxth	r3, r3
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	4619      	mov	r1, r3
 801386e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8013870:	2b00      	cmp	r3, #0
 8013872:	d15d      	bne.n	8013930 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	68da      	ldr	r2, [r3, #12]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	f022 0220 	bic.w	r2, r2, #32
 8013882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	68da      	ldr	r2, [r3, #12]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	695a      	ldr	r2, [r3, #20]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f022 0201 	bic.w	r2, r2, #1
 80138a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2220      	movs	r2, #32
 80138a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d135      	bne.n	8013926 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2200      	movs	r2, #0
 80138be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	330c      	adds	r3, #12
 80138c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	e853 3f00 	ldrex	r3, [r3]
 80138ce:	613b      	str	r3, [r7, #16]
   return(result);
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	f023 0310 	bic.w	r3, r3, #16
 80138d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	330c      	adds	r3, #12
 80138de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138e0:	623a      	str	r2, [r7, #32]
 80138e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138e4:	69f9      	ldr	r1, [r7, #28]
 80138e6:	6a3a      	ldr	r2, [r7, #32]
 80138e8:	e841 2300 	strex	r3, r2, [r1]
 80138ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d1e5      	bne.n	80138c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	f003 0310 	and.w	r3, r3, #16
 80138fe:	2b10      	cmp	r3, #16
 8013900:	d10a      	bne.n	8013918 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8013902:	2300      	movs	r3, #0
 8013904:	60fb      	str	r3, [r7, #12]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	60fb      	str	r3, [r7, #12]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	685b      	ldr	r3, [r3, #4]
 8013914:	60fb      	str	r3, [r7, #12]
 8013916:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801391c:	4619      	mov	r1, r3
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7ff fdbc 	bl	801349c <HAL_UARTEx_RxEventCallback>
 8013924:	e002      	b.n	801392c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7fb f9dc 	bl	800ece4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801392c:	2300      	movs	r3, #0
 801392e:	e002      	b.n	8013936 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8013930:	2300      	movs	r3, #0
 8013932:	e000      	b.n	8013936 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8013934:	2302      	movs	r3, #2
  }
}
 8013936:	4618      	mov	r0, r3
 8013938:	3730      	adds	r7, #48	@ 0x30
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
	...

08013940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013944:	b0c0      	sub	sp, #256	@ 0x100
 8013946:	af00      	add	r7, sp, #0
 8013948:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	691b      	ldr	r3, [r3, #16]
 8013954:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8013958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801395c:	68d9      	ldr	r1, [r3, #12]
 801395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	ea40 0301 	orr.w	r3, r0, r1
 8013968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801396e:	689a      	ldr	r2, [r3, #8]
 8013970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013974:	691b      	ldr	r3, [r3, #16]
 8013976:	431a      	orrs	r2, r3
 8013978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801397c:	695b      	ldr	r3, [r3, #20]
 801397e:	431a      	orrs	r2, r3
 8013980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013984:	69db      	ldr	r3, [r3, #28]
 8013986:	4313      	orrs	r3, r2
 8013988:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8013998:	f021 010c 	bic.w	r1, r1, #12
 801399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80139a6:	430b      	orrs	r3, r1
 80139a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80139aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	695b      	ldr	r3, [r3, #20]
 80139b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80139b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80139ba:	6999      	ldr	r1, [r3, #24]
 80139bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80139c0:	681a      	ldr	r2, [r3, #0]
 80139c2:	ea40 0301 	orr.w	r3, r0, r1
 80139c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80139c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	4b8f      	ldr	r3, [pc, #572]	@ (8013c0c <UART_SetConfig+0x2cc>)
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d005      	beq.n	80139e0 <UART_SetConfig+0xa0>
 80139d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80139d8:	681a      	ldr	r2, [r3, #0]
 80139da:	4b8d      	ldr	r3, [pc, #564]	@ (8013c10 <UART_SetConfig+0x2d0>)
 80139dc:	429a      	cmp	r2, r3
 80139de:	d104      	bne.n	80139ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80139e0:	f7fd fa4a 	bl	8010e78 <HAL_RCC_GetPCLK2Freq>
 80139e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80139e8:	e003      	b.n	80139f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80139ea:	f7fd fa31 	bl	8010e50 <HAL_RCC_GetPCLK1Freq>
 80139ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80139f6:	69db      	ldr	r3, [r3, #28]
 80139f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80139fc:	f040 810c 	bne.w	8013c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013a04:	2200      	movs	r2, #0
 8013a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8013a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8013a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8013a12:	4622      	mov	r2, r4
 8013a14:	462b      	mov	r3, r5
 8013a16:	1891      	adds	r1, r2, r2
 8013a18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8013a1a:	415b      	adcs	r3, r3
 8013a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8013a22:	4621      	mov	r1, r4
 8013a24:	eb12 0801 	adds.w	r8, r2, r1
 8013a28:	4629      	mov	r1, r5
 8013a2a:	eb43 0901 	adc.w	r9, r3, r1
 8013a2e:	f04f 0200 	mov.w	r2, #0
 8013a32:	f04f 0300 	mov.w	r3, #0
 8013a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013a42:	4690      	mov	r8, r2
 8013a44:	4699      	mov	r9, r3
 8013a46:	4623      	mov	r3, r4
 8013a48:	eb18 0303 	adds.w	r3, r8, r3
 8013a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8013a50:	462b      	mov	r3, r5
 8013a52:	eb49 0303 	adc.w	r3, r9, r3
 8013a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	2200      	movs	r2, #0
 8013a62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013a66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8013a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8013a6e:	460b      	mov	r3, r1
 8013a70:	18db      	adds	r3, r3, r3
 8013a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a74:	4613      	mov	r3, r2
 8013a76:	eb42 0303 	adc.w	r3, r2, r3
 8013a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8013a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8013a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8013a84:	f7f5 f930 	bl	8008ce8 <__aeabi_uldivmod>
 8013a88:	4602      	mov	r2, r0
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	4b61      	ldr	r3, [pc, #388]	@ (8013c14 <UART_SetConfig+0x2d4>)
 8013a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8013a92:	095b      	lsrs	r3, r3, #5
 8013a94:	011c      	lsls	r4, r3, #4
 8013a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8013aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8013aa8:	4642      	mov	r2, r8
 8013aaa:	464b      	mov	r3, r9
 8013aac:	1891      	adds	r1, r2, r2
 8013aae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8013ab0:	415b      	adcs	r3, r3
 8013ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8013ab8:	4641      	mov	r1, r8
 8013aba:	eb12 0a01 	adds.w	sl, r2, r1
 8013abe:	4649      	mov	r1, r9
 8013ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8013ac4:	f04f 0200 	mov.w	r2, #0
 8013ac8:	f04f 0300 	mov.w	r3, #0
 8013acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8013ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8013ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013ad8:	4692      	mov	sl, r2
 8013ada:	469b      	mov	fp, r3
 8013adc:	4643      	mov	r3, r8
 8013ade:	eb1a 0303 	adds.w	r3, sl, r3
 8013ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8013ae6:	464b      	mov	r3, r9
 8013ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8013aec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8013af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	2200      	movs	r2, #0
 8013af8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013afc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8013b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8013b04:	460b      	mov	r3, r1
 8013b06:	18db      	adds	r3, r3, r3
 8013b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8013b0a:	4613      	mov	r3, r2
 8013b0c:	eb42 0303 	adc.w	r3, r2, r3
 8013b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8013b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8013b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8013b1a:	f7f5 f8e5 	bl	8008ce8 <__aeabi_uldivmod>
 8013b1e:	4602      	mov	r2, r0
 8013b20:	460b      	mov	r3, r1
 8013b22:	4611      	mov	r1, r2
 8013b24:	4b3b      	ldr	r3, [pc, #236]	@ (8013c14 <UART_SetConfig+0x2d4>)
 8013b26:	fba3 2301 	umull	r2, r3, r3, r1
 8013b2a:	095b      	lsrs	r3, r3, #5
 8013b2c:	2264      	movs	r2, #100	@ 0x64
 8013b2e:	fb02 f303 	mul.w	r3, r2, r3
 8013b32:	1acb      	subs	r3, r1, r3
 8013b34:	00db      	lsls	r3, r3, #3
 8013b36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8013b3a:	4b36      	ldr	r3, [pc, #216]	@ (8013c14 <UART_SetConfig+0x2d4>)
 8013b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8013b40:	095b      	lsrs	r3, r3, #5
 8013b42:	005b      	lsls	r3, r3, #1
 8013b44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8013b48:	441c      	add	r4, r3
 8013b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013b54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8013b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8013b5c:	4642      	mov	r2, r8
 8013b5e:	464b      	mov	r3, r9
 8013b60:	1891      	adds	r1, r2, r2
 8013b62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8013b64:	415b      	adcs	r3, r3
 8013b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8013b6c:	4641      	mov	r1, r8
 8013b6e:	1851      	adds	r1, r2, r1
 8013b70:	6339      	str	r1, [r7, #48]	@ 0x30
 8013b72:	4649      	mov	r1, r9
 8013b74:	414b      	adcs	r3, r1
 8013b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b78:	f04f 0200 	mov.w	r2, #0
 8013b7c:	f04f 0300 	mov.w	r3, #0
 8013b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8013b84:	4659      	mov	r1, fp
 8013b86:	00cb      	lsls	r3, r1, #3
 8013b88:	4651      	mov	r1, sl
 8013b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013b8e:	4651      	mov	r1, sl
 8013b90:	00ca      	lsls	r2, r1, #3
 8013b92:	4610      	mov	r0, r2
 8013b94:	4619      	mov	r1, r3
 8013b96:	4603      	mov	r3, r0
 8013b98:	4642      	mov	r2, r8
 8013b9a:	189b      	adds	r3, r3, r2
 8013b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013ba0:	464b      	mov	r3, r9
 8013ba2:	460a      	mov	r2, r1
 8013ba4:	eb42 0303 	adc.w	r3, r2, r3
 8013ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8013bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8013bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	18db      	adds	r3, r3, r3
 8013bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	eb42 0303 	adc.w	r3, r2, r3
 8013bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8013bd6:	f7f5 f887 	bl	8008ce8 <__aeabi_uldivmod>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	460b      	mov	r3, r1
 8013bde:	4b0d      	ldr	r3, [pc, #52]	@ (8013c14 <UART_SetConfig+0x2d4>)
 8013be0:	fba3 1302 	umull	r1, r3, r3, r2
 8013be4:	095b      	lsrs	r3, r3, #5
 8013be6:	2164      	movs	r1, #100	@ 0x64
 8013be8:	fb01 f303 	mul.w	r3, r1, r3
 8013bec:	1ad3      	subs	r3, r2, r3
 8013bee:	00db      	lsls	r3, r3, #3
 8013bf0:	3332      	adds	r3, #50	@ 0x32
 8013bf2:	4a08      	ldr	r2, [pc, #32]	@ (8013c14 <UART_SetConfig+0x2d4>)
 8013bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8013bf8:	095b      	lsrs	r3, r3, #5
 8013bfa:	f003 0207 	and.w	r2, r3, #7
 8013bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	4422      	add	r2, r4
 8013c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013c08:	e106      	b.n	8013e18 <UART_SetConfig+0x4d8>
 8013c0a:	bf00      	nop
 8013c0c:	40011000 	.word	0x40011000
 8013c10:	40011400 	.word	0x40011400
 8013c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013c22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8013c2a:	4642      	mov	r2, r8
 8013c2c:	464b      	mov	r3, r9
 8013c2e:	1891      	adds	r1, r2, r2
 8013c30:	6239      	str	r1, [r7, #32]
 8013c32:	415b      	adcs	r3, r3
 8013c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013c3a:	4641      	mov	r1, r8
 8013c3c:	1854      	adds	r4, r2, r1
 8013c3e:	4649      	mov	r1, r9
 8013c40:	eb43 0501 	adc.w	r5, r3, r1
 8013c44:	f04f 0200 	mov.w	r2, #0
 8013c48:	f04f 0300 	mov.w	r3, #0
 8013c4c:	00eb      	lsls	r3, r5, #3
 8013c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013c52:	00e2      	lsls	r2, r4, #3
 8013c54:	4614      	mov	r4, r2
 8013c56:	461d      	mov	r5, r3
 8013c58:	4643      	mov	r3, r8
 8013c5a:	18e3      	adds	r3, r4, r3
 8013c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013c60:	464b      	mov	r3, r9
 8013c62:	eb45 0303 	adc.w	r3, r5, r3
 8013c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	2200      	movs	r2, #0
 8013c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013c76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8013c7a:	f04f 0200 	mov.w	r2, #0
 8013c7e:	f04f 0300 	mov.w	r3, #0
 8013c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8013c86:	4629      	mov	r1, r5
 8013c88:	008b      	lsls	r3, r1, #2
 8013c8a:	4621      	mov	r1, r4
 8013c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013c90:	4621      	mov	r1, r4
 8013c92:	008a      	lsls	r2, r1, #2
 8013c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8013c98:	f7f5 f826 	bl	8008ce8 <__aeabi_uldivmod>
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	4b60      	ldr	r3, [pc, #384]	@ (8013e24 <UART_SetConfig+0x4e4>)
 8013ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8013ca6:	095b      	lsrs	r3, r3, #5
 8013ca8:	011c      	lsls	r4, r3, #4
 8013caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013cae:	2200      	movs	r2, #0
 8013cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013cb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8013cbc:	4642      	mov	r2, r8
 8013cbe:	464b      	mov	r3, r9
 8013cc0:	1891      	adds	r1, r2, r2
 8013cc2:	61b9      	str	r1, [r7, #24]
 8013cc4:	415b      	adcs	r3, r3
 8013cc6:	61fb      	str	r3, [r7, #28]
 8013cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013ccc:	4641      	mov	r1, r8
 8013cce:	1851      	adds	r1, r2, r1
 8013cd0:	6139      	str	r1, [r7, #16]
 8013cd2:	4649      	mov	r1, r9
 8013cd4:	414b      	adcs	r3, r1
 8013cd6:	617b      	str	r3, [r7, #20]
 8013cd8:	f04f 0200 	mov.w	r2, #0
 8013cdc:	f04f 0300 	mov.w	r3, #0
 8013ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013ce4:	4659      	mov	r1, fp
 8013ce6:	00cb      	lsls	r3, r1, #3
 8013ce8:	4651      	mov	r1, sl
 8013cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013cee:	4651      	mov	r1, sl
 8013cf0:	00ca      	lsls	r2, r1, #3
 8013cf2:	4610      	mov	r0, r2
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	4642      	mov	r2, r8
 8013cfa:	189b      	adds	r3, r3, r2
 8013cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013d00:	464b      	mov	r3, r9
 8013d02:	460a      	mov	r2, r1
 8013d04:	eb42 0303 	adc.w	r3, r2, r3
 8013d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	2200      	movs	r2, #0
 8013d14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013d16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8013d18:	f04f 0200 	mov.w	r2, #0
 8013d1c:	f04f 0300 	mov.w	r3, #0
 8013d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8013d24:	4649      	mov	r1, r9
 8013d26:	008b      	lsls	r3, r1, #2
 8013d28:	4641      	mov	r1, r8
 8013d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013d2e:	4641      	mov	r1, r8
 8013d30:	008a      	lsls	r2, r1, #2
 8013d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8013d36:	f7f4 ffd7 	bl	8008ce8 <__aeabi_uldivmod>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	4611      	mov	r1, r2
 8013d40:	4b38      	ldr	r3, [pc, #224]	@ (8013e24 <UART_SetConfig+0x4e4>)
 8013d42:	fba3 2301 	umull	r2, r3, r3, r1
 8013d46:	095b      	lsrs	r3, r3, #5
 8013d48:	2264      	movs	r2, #100	@ 0x64
 8013d4a:	fb02 f303 	mul.w	r3, r2, r3
 8013d4e:	1acb      	subs	r3, r1, r3
 8013d50:	011b      	lsls	r3, r3, #4
 8013d52:	3332      	adds	r3, #50	@ 0x32
 8013d54:	4a33      	ldr	r2, [pc, #204]	@ (8013e24 <UART_SetConfig+0x4e4>)
 8013d56:	fba2 2303 	umull	r2, r3, r2, r3
 8013d5a:	095b      	lsrs	r3, r3, #5
 8013d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013d60:	441c      	add	r4, r3
 8013d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013d66:	2200      	movs	r2, #0
 8013d68:	673b      	str	r3, [r7, #112]	@ 0x70
 8013d6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8013d6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8013d70:	4642      	mov	r2, r8
 8013d72:	464b      	mov	r3, r9
 8013d74:	1891      	adds	r1, r2, r2
 8013d76:	60b9      	str	r1, [r7, #8]
 8013d78:	415b      	adcs	r3, r3
 8013d7a:	60fb      	str	r3, [r7, #12]
 8013d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013d80:	4641      	mov	r1, r8
 8013d82:	1851      	adds	r1, r2, r1
 8013d84:	6039      	str	r1, [r7, #0]
 8013d86:	4649      	mov	r1, r9
 8013d88:	414b      	adcs	r3, r1
 8013d8a:	607b      	str	r3, [r7, #4]
 8013d8c:	f04f 0200 	mov.w	r2, #0
 8013d90:	f04f 0300 	mov.w	r3, #0
 8013d94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013d98:	4659      	mov	r1, fp
 8013d9a:	00cb      	lsls	r3, r1, #3
 8013d9c:	4651      	mov	r1, sl
 8013d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013da2:	4651      	mov	r1, sl
 8013da4:	00ca      	lsls	r2, r1, #3
 8013da6:	4610      	mov	r0, r2
 8013da8:	4619      	mov	r1, r3
 8013daa:	4603      	mov	r3, r0
 8013dac:	4642      	mov	r2, r8
 8013dae:	189b      	adds	r3, r3, r2
 8013db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013db2:	464b      	mov	r3, r9
 8013db4:	460a      	mov	r2, r1
 8013db6:	eb42 0303 	adc.w	r3, r2, r3
 8013dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8013dc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8013dc8:	f04f 0200 	mov.w	r2, #0
 8013dcc:	f04f 0300 	mov.w	r3, #0
 8013dd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8013dd4:	4649      	mov	r1, r9
 8013dd6:	008b      	lsls	r3, r1, #2
 8013dd8:	4641      	mov	r1, r8
 8013dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013dde:	4641      	mov	r1, r8
 8013de0:	008a      	lsls	r2, r1, #2
 8013de2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8013de6:	f7f4 ff7f 	bl	8008ce8 <__aeabi_uldivmod>
 8013dea:	4602      	mov	r2, r0
 8013dec:	460b      	mov	r3, r1
 8013dee:	4b0d      	ldr	r3, [pc, #52]	@ (8013e24 <UART_SetConfig+0x4e4>)
 8013df0:	fba3 1302 	umull	r1, r3, r3, r2
 8013df4:	095b      	lsrs	r3, r3, #5
 8013df6:	2164      	movs	r1, #100	@ 0x64
 8013df8:	fb01 f303 	mul.w	r3, r1, r3
 8013dfc:	1ad3      	subs	r3, r2, r3
 8013dfe:	011b      	lsls	r3, r3, #4
 8013e00:	3332      	adds	r3, #50	@ 0x32
 8013e02:	4a08      	ldr	r2, [pc, #32]	@ (8013e24 <UART_SetConfig+0x4e4>)
 8013e04:	fba2 2303 	umull	r2, r3, r2, r3
 8013e08:	095b      	lsrs	r3, r3, #5
 8013e0a:	f003 020f 	and.w	r2, r3, #15
 8013e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	4422      	add	r2, r4
 8013e16:	609a      	str	r2, [r3, #8]
}
 8013e18:	bf00      	nop
 8013e1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013e24:	51eb851f 	.word	0x51eb851f

08013e28 <malloc>:
 8013e28:	4b02      	ldr	r3, [pc, #8]	@ (8013e34 <malloc+0xc>)
 8013e2a:	4601      	mov	r1, r0
 8013e2c:	6818      	ldr	r0, [r3, #0]
 8013e2e:	f000 b82d 	b.w	8013e8c <_malloc_r>
 8013e32:	bf00      	nop
 8013e34:	20000304 	.word	0x20000304

08013e38 <free>:
 8013e38:	4b02      	ldr	r3, [pc, #8]	@ (8013e44 <free+0xc>)
 8013e3a:	4601      	mov	r1, r0
 8013e3c:	6818      	ldr	r0, [r3, #0]
 8013e3e:	f002 b84b 	b.w	8015ed8 <_free_r>
 8013e42:	bf00      	nop
 8013e44:	20000304 	.word	0x20000304

08013e48 <sbrk_aligned>:
 8013e48:	b570      	push	{r4, r5, r6, lr}
 8013e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8013e88 <sbrk_aligned+0x40>)
 8013e4c:	460c      	mov	r4, r1
 8013e4e:	6831      	ldr	r1, [r6, #0]
 8013e50:	4605      	mov	r5, r0
 8013e52:	b911      	cbnz	r1, 8013e5a <sbrk_aligned+0x12>
 8013e54:	f001 f98a 	bl	801516c <_sbrk_r>
 8013e58:	6030      	str	r0, [r6, #0]
 8013e5a:	4621      	mov	r1, r4
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	f001 f985 	bl	801516c <_sbrk_r>
 8013e62:	1c43      	adds	r3, r0, #1
 8013e64:	d103      	bne.n	8013e6e <sbrk_aligned+0x26>
 8013e66:	f04f 34ff 	mov.w	r4, #4294967295
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	bd70      	pop	{r4, r5, r6, pc}
 8013e6e:	1cc4      	adds	r4, r0, #3
 8013e70:	f024 0403 	bic.w	r4, r4, #3
 8013e74:	42a0      	cmp	r0, r4
 8013e76:	d0f8      	beq.n	8013e6a <sbrk_aligned+0x22>
 8013e78:	1a21      	subs	r1, r4, r0
 8013e7a:	4628      	mov	r0, r5
 8013e7c:	f001 f976 	bl	801516c <_sbrk_r>
 8013e80:	3001      	adds	r0, #1
 8013e82:	d1f2      	bne.n	8013e6a <sbrk_aligned+0x22>
 8013e84:	e7ef      	b.n	8013e66 <sbrk_aligned+0x1e>
 8013e86:	bf00      	nop
 8013e88:	200008f4 	.word	0x200008f4

08013e8c <_malloc_r>:
 8013e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e90:	1ccd      	adds	r5, r1, #3
 8013e92:	f025 0503 	bic.w	r5, r5, #3
 8013e96:	3508      	adds	r5, #8
 8013e98:	2d0c      	cmp	r5, #12
 8013e9a:	bf38      	it	cc
 8013e9c:	250c      	movcc	r5, #12
 8013e9e:	2d00      	cmp	r5, #0
 8013ea0:	4606      	mov	r6, r0
 8013ea2:	db01      	blt.n	8013ea8 <_malloc_r+0x1c>
 8013ea4:	42a9      	cmp	r1, r5
 8013ea6:	d904      	bls.n	8013eb2 <_malloc_r+0x26>
 8013ea8:	230c      	movs	r3, #12
 8013eaa:	6033      	str	r3, [r6, #0]
 8013eac:	2000      	movs	r0, #0
 8013eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013f88 <_malloc_r+0xfc>
 8013eb6:	f000 f869 	bl	8013f8c <__malloc_lock>
 8013eba:	f8d8 3000 	ldr.w	r3, [r8]
 8013ebe:	461c      	mov	r4, r3
 8013ec0:	bb44      	cbnz	r4, 8013f14 <_malloc_r+0x88>
 8013ec2:	4629      	mov	r1, r5
 8013ec4:	4630      	mov	r0, r6
 8013ec6:	f7ff ffbf 	bl	8013e48 <sbrk_aligned>
 8013eca:	1c43      	adds	r3, r0, #1
 8013ecc:	4604      	mov	r4, r0
 8013ece:	d158      	bne.n	8013f82 <_malloc_r+0xf6>
 8013ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8013ed4:	4627      	mov	r7, r4
 8013ed6:	2f00      	cmp	r7, #0
 8013ed8:	d143      	bne.n	8013f62 <_malloc_r+0xd6>
 8013eda:	2c00      	cmp	r4, #0
 8013edc:	d04b      	beq.n	8013f76 <_malloc_r+0xea>
 8013ede:	6823      	ldr	r3, [r4, #0]
 8013ee0:	4639      	mov	r1, r7
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	eb04 0903 	add.w	r9, r4, r3
 8013ee8:	f001 f940 	bl	801516c <_sbrk_r>
 8013eec:	4581      	cmp	r9, r0
 8013eee:	d142      	bne.n	8013f76 <_malloc_r+0xea>
 8013ef0:	6821      	ldr	r1, [r4, #0]
 8013ef2:	1a6d      	subs	r5, r5, r1
 8013ef4:	4629      	mov	r1, r5
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	f7ff ffa6 	bl	8013e48 <sbrk_aligned>
 8013efc:	3001      	adds	r0, #1
 8013efe:	d03a      	beq.n	8013f76 <_malloc_r+0xea>
 8013f00:	6823      	ldr	r3, [r4, #0]
 8013f02:	442b      	add	r3, r5
 8013f04:	6023      	str	r3, [r4, #0]
 8013f06:	f8d8 3000 	ldr.w	r3, [r8]
 8013f0a:	685a      	ldr	r2, [r3, #4]
 8013f0c:	bb62      	cbnz	r2, 8013f68 <_malloc_r+0xdc>
 8013f0e:	f8c8 7000 	str.w	r7, [r8]
 8013f12:	e00f      	b.n	8013f34 <_malloc_r+0xa8>
 8013f14:	6822      	ldr	r2, [r4, #0]
 8013f16:	1b52      	subs	r2, r2, r5
 8013f18:	d420      	bmi.n	8013f5c <_malloc_r+0xd0>
 8013f1a:	2a0b      	cmp	r2, #11
 8013f1c:	d917      	bls.n	8013f4e <_malloc_r+0xc2>
 8013f1e:	1961      	adds	r1, r4, r5
 8013f20:	42a3      	cmp	r3, r4
 8013f22:	6025      	str	r5, [r4, #0]
 8013f24:	bf18      	it	ne
 8013f26:	6059      	strne	r1, [r3, #4]
 8013f28:	6863      	ldr	r3, [r4, #4]
 8013f2a:	bf08      	it	eq
 8013f2c:	f8c8 1000 	streq.w	r1, [r8]
 8013f30:	5162      	str	r2, [r4, r5]
 8013f32:	604b      	str	r3, [r1, #4]
 8013f34:	4630      	mov	r0, r6
 8013f36:	f000 f82f 	bl	8013f98 <__malloc_unlock>
 8013f3a:	f104 000b 	add.w	r0, r4, #11
 8013f3e:	1d23      	adds	r3, r4, #4
 8013f40:	f020 0007 	bic.w	r0, r0, #7
 8013f44:	1ac2      	subs	r2, r0, r3
 8013f46:	bf1c      	itt	ne
 8013f48:	1a1b      	subne	r3, r3, r0
 8013f4a:	50a3      	strne	r3, [r4, r2]
 8013f4c:	e7af      	b.n	8013eae <_malloc_r+0x22>
 8013f4e:	6862      	ldr	r2, [r4, #4]
 8013f50:	42a3      	cmp	r3, r4
 8013f52:	bf0c      	ite	eq
 8013f54:	f8c8 2000 	streq.w	r2, [r8]
 8013f58:	605a      	strne	r2, [r3, #4]
 8013f5a:	e7eb      	b.n	8013f34 <_malloc_r+0xa8>
 8013f5c:	4623      	mov	r3, r4
 8013f5e:	6864      	ldr	r4, [r4, #4]
 8013f60:	e7ae      	b.n	8013ec0 <_malloc_r+0x34>
 8013f62:	463c      	mov	r4, r7
 8013f64:	687f      	ldr	r7, [r7, #4]
 8013f66:	e7b6      	b.n	8013ed6 <_malloc_r+0x4a>
 8013f68:	461a      	mov	r2, r3
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	42a3      	cmp	r3, r4
 8013f6e:	d1fb      	bne.n	8013f68 <_malloc_r+0xdc>
 8013f70:	2300      	movs	r3, #0
 8013f72:	6053      	str	r3, [r2, #4]
 8013f74:	e7de      	b.n	8013f34 <_malloc_r+0xa8>
 8013f76:	230c      	movs	r3, #12
 8013f78:	6033      	str	r3, [r6, #0]
 8013f7a:	4630      	mov	r0, r6
 8013f7c:	f000 f80c 	bl	8013f98 <__malloc_unlock>
 8013f80:	e794      	b.n	8013eac <_malloc_r+0x20>
 8013f82:	6005      	str	r5, [r0, #0]
 8013f84:	e7d6      	b.n	8013f34 <_malloc_r+0xa8>
 8013f86:	bf00      	nop
 8013f88:	200008f8 	.word	0x200008f8

08013f8c <__malloc_lock>:
 8013f8c:	4801      	ldr	r0, [pc, #4]	@ (8013f94 <__malloc_lock+0x8>)
 8013f8e:	f001 b93a 	b.w	8015206 <__retarget_lock_acquire_recursive>
 8013f92:	bf00      	nop
 8013f94:	20000a3c 	.word	0x20000a3c

08013f98 <__malloc_unlock>:
 8013f98:	4801      	ldr	r0, [pc, #4]	@ (8013fa0 <__malloc_unlock+0x8>)
 8013f9a:	f001 b935 	b.w	8015208 <__retarget_lock_release_recursive>
 8013f9e:	bf00      	nop
 8013fa0:	20000a3c 	.word	0x20000a3c

08013fa4 <__cvt>:
 8013fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fa8:	ec57 6b10 	vmov	r6, r7, d0
 8013fac:	2f00      	cmp	r7, #0
 8013fae:	460c      	mov	r4, r1
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	463b      	mov	r3, r7
 8013fb4:	bfbb      	ittet	lt
 8013fb6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013fba:	461f      	movlt	r7, r3
 8013fbc:	2300      	movge	r3, #0
 8013fbe:	232d      	movlt	r3, #45	@ 0x2d
 8013fc0:	700b      	strb	r3, [r1, #0]
 8013fc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013fc4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013fc8:	4691      	mov	r9, r2
 8013fca:	f023 0820 	bic.w	r8, r3, #32
 8013fce:	bfbc      	itt	lt
 8013fd0:	4632      	movlt	r2, r6
 8013fd2:	4616      	movlt	r6, r2
 8013fd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013fd8:	d005      	beq.n	8013fe6 <__cvt+0x42>
 8013fda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013fde:	d100      	bne.n	8013fe2 <__cvt+0x3e>
 8013fe0:	3401      	adds	r4, #1
 8013fe2:	2102      	movs	r1, #2
 8013fe4:	e000      	b.n	8013fe8 <__cvt+0x44>
 8013fe6:	2103      	movs	r1, #3
 8013fe8:	ab03      	add	r3, sp, #12
 8013fea:	9301      	str	r3, [sp, #4]
 8013fec:	ab02      	add	r3, sp, #8
 8013fee:	9300      	str	r3, [sp, #0]
 8013ff0:	ec47 6b10 	vmov	d0, r6, r7
 8013ff4:	4653      	mov	r3, sl
 8013ff6:	4622      	mov	r2, r4
 8013ff8:	f001 f99e 	bl	8015338 <_dtoa_r>
 8013ffc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014000:	4605      	mov	r5, r0
 8014002:	d119      	bne.n	8014038 <__cvt+0x94>
 8014004:	f019 0f01 	tst.w	r9, #1
 8014008:	d00e      	beq.n	8014028 <__cvt+0x84>
 801400a:	eb00 0904 	add.w	r9, r0, r4
 801400e:	2200      	movs	r2, #0
 8014010:	2300      	movs	r3, #0
 8014012:	4630      	mov	r0, r6
 8014014:	4639      	mov	r1, r7
 8014016:	f7f4 fd87 	bl	8008b28 <__aeabi_dcmpeq>
 801401a:	b108      	cbz	r0, 8014020 <__cvt+0x7c>
 801401c:	f8cd 900c 	str.w	r9, [sp, #12]
 8014020:	2230      	movs	r2, #48	@ 0x30
 8014022:	9b03      	ldr	r3, [sp, #12]
 8014024:	454b      	cmp	r3, r9
 8014026:	d31e      	bcc.n	8014066 <__cvt+0xc2>
 8014028:	9b03      	ldr	r3, [sp, #12]
 801402a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801402c:	1b5b      	subs	r3, r3, r5
 801402e:	4628      	mov	r0, r5
 8014030:	6013      	str	r3, [r2, #0]
 8014032:	b004      	add	sp, #16
 8014034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801403c:	eb00 0904 	add.w	r9, r0, r4
 8014040:	d1e5      	bne.n	801400e <__cvt+0x6a>
 8014042:	7803      	ldrb	r3, [r0, #0]
 8014044:	2b30      	cmp	r3, #48	@ 0x30
 8014046:	d10a      	bne.n	801405e <__cvt+0xba>
 8014048:	2200      	movs	r2, #0
 801404a:	2300      	movs	r3, #0
 801404c:	4630      	mov	r0, r6
 801404e:	4639      	mov	r1, r7
 8014050:	f7f4 fd6a 	bl	8008b28 <__aeabi_dcmpeq>
 8014054:	b918      	cbnz	r0, 801405e <__cvt+0xba>
 8014056:	f1c4 0401 	rsb	r4, r4, #1
 801405a:	f8ca 4000 	str.w	r4, [sl]
 801405e:	f8da 3000 	ldr.w	r3, [sl]
 8014062:	4499      	add	r9, r3
 8014064:	e7d3      	b.n	801400e <__cvt+0x6a>
 8014066:	1c59      	adds	r1, r3, #1
 8014068:	9103      	str	r1, [sp, #12]
 801406a:	701a      	strb	r2, [r3, #0]
 801406c:	e7d9      	b.n	8014022 <__cvt+0x7e>

0801406e <__exponent>:
 801406e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014070:	2900      	cmp	r1, #0
 8014072:	bfba      	itte	lt
 8014074:	4249      	neglt	r1, r1
 8014076:	232d      	movlt	r3, #45	@ 0x2d
 8014078:	232b      	movge	r3, #43	@ 0x2b
 801407a:	2909      	cmp	r1, #9
 801407c:	7002      	strb	r2, [r0, #0]
 801407e:	7043      	strb	r3, [r0, #1]
 8014080:	dd29      	ble.n	80140d6 <__exponent+0x68>
 8014082:	f10d 0307 	add.w	r3, sp, #7
 8014086:	461d      	mov	r5, r3
 8014088:	270a      	movs	r7, #10
 801408a:	461a      	mov	r2, r3
 801408c:	fbb1 f6f7 	udiv	r6, r1, r7
 8014090:	fb07 1416 	mls	r4, r7, r6, r1
 8014094:	3430      	adds	r4, #48	@ 0x30
 8014096:	f802 4c01 	strb.w	r4, [r2, #-1]
 801409a:	460c      	mov	r4, r1
 801409c:	2c63      	cmp	r4, #99	@ 0x63
 801409e:	f103 33ff 	add.w	r3, r3, #4294967295
 80140a2:	4631      	mov	r1, r6
 80140a4:	dcf1      	bgt.n	801408a <__exponent+0x1c>
 80140a6:	3130      	adds	r1, #48	@ 0x30
 80140a8:	1e94      	subs	r4, r2, #2
 80140aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80140ae:	1c41      	adds	r1, r0, #1
 80140b0:	4623      	mov	r3, r4
 80140b2:	42ab      	cmp	r3, r5
 80140b4:	d30a      	bcc.n	80140cc <__exponent+0x5e>
 80140b6:	f10d 0309 	add.w	r3, sp, #9
 80140ba:	1a9b      	subs	r3, r3, r2
 80140bc:	42ac      	cmp	r4, r5
 80140be:	bf88      	it	hi
 80140c0:	2300      	movhi	r3, #0
 80140c2:	3302      	adds	r3, #2
 80140c4:	4403      	add	r3, r0
 80140c6:	1a18      	subs	r0, r3, r0
 80140c8:	b003      	add	sp, #12
 80140ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80140d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80140d4:	e7ed      	b.n	80140b2 <__exponent+0x44>
 80140d6:	2330      	movs	r3, #48	@ 0x30
 80140d8:	3130      	adds	r1, #48	@ 0x30
 80140da:	7083      	strb	r3, [r0, #2]
 80140dc:	70c1      	strb	r1, [r0, #3]
 80140de:	1d03      	adds	r3, r0, #4
 80140e0:	e7f1      	b.n	80140c6 <__exponent+0x58>
	...

080140e4 <_printf_float>:
 80140e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e8:	b08d      	sub	sp, #52	@ 0x34
 80140ea:	460c      	mov	r4, r1
 80140ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80140f0:	4616      	mov	r6, r2
 80140f2:	461f      	mov	r7, r3
 80140f4:	4605      	mov	r5, r0
 80140f6:	f001 f801 	bl	80150fc <_localeconv_r>
 80140fa:	6803      	ldr	r3, [r0, #0]
 80140fc:	9304      	str	r3, [sp, #16]
 80140fe:	4618      	mov	r0, r3
 8014100:	f7f4 f8e6 	bl	80082d0 <strlen>
 8014104:	2300      	movs	r3, #0
 8014106:	930a      	str	r3, [sp, #40]	@ 0x28
 8014108:	f8d8 3000 	ldr.w	r3, [r8]
 801410c:	9005      	str	r0, [sp, #20]
 801410e:	3307      	adds	r3, #7
 8014110:	f023 0307 	bic.w	r3, r3, #7
 8014114:	f103 0208 	add.w	r2, r3, #8
 8014118:	f894 a018 	ldrb.w	sl, [r4, #24]
 801411c:	f8d4 b000 	ldr.w	fp, [r4]
 8014120:	f8c8 2000 	str.w	r2, [r8]
 8014124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014128:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801412c:	9307      	str	r3, [sp, #28]
 801412e:	f8cd 8018 	str.w	r8, [sp, #24]
 8014132:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801413a:	4b9c      	ldr	r3, [pc, #624]	@ (80143ac <_printf_float+0x2c8>)
 801413c:	f04f 32ff 	mov.w	r2, #4294967295
 8014140:	f7f4 fd24 	bl	8008b8c <__aeabi_dcmpun>
 8014144:	bb70      	cbnz	r0, 80141a4 <_printf_float+0xc0>
 8014146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801414a:	4b98      	ldr	r3, [pc, #608]	@ (80143ac <_printf_float+0x2c8>)
 801414c:	f04f 32ff 	mov.w	r2, #4294967295
 8014150:	f7f4 fcfe 	bl	8008b50 <__aeabi_dcmple>
 8014154:	bb30      	cbnz	r0, 80141a4 <_printf_float+0xc0>
 8014156:	2200      	movs	r2, #0
 8014158:	2300      	movs	r3, #0
 801415a:	4640      	mov	r0, r8
 801415c:	4649      	mov	r1, r9
 801415e:	f7f4 fced 	bl	8008b3c <__aeabi_dcmplt>
 8014162:	b110      	cbz	r0, 801416a <_printf_float+0x86>
 8014164:	232d      	movs	r3, #45	@ 0x2d
 8014166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801416a:	4a91      	ldr	r2, [pc, #580]	@ (80143b0 <_printf_float+0x2cc>)
 801416c:	4b91      	ldr	r3, [pc, #580]	@ (80143b4 <_printf_float+0x2d0>)
 801416e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014172:	bf8c      	ite	hi
 8014174:	4690      	movhi	r8, r2
 8014176:	4698      	movls	r8, r3
 8014178:	2303      	movs	r3, #3
 801417a:	6123      	str	r3, [r4, #16]
 801417c:	f02b 0304 	bic.w	r3, fp, #4
 8014180:	6023      	str	r3, [r4, #0]
 8014182:	f04f 0900 	mov.w	r9, #0
 8014186:	9700      	str	r7, [sp, #0]
 8014188:	4633      	mov	r3, r6
 801418a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801418c:	4621      	mov	r1, r4
 801418e:	4628      	mov	r0, r5
 8014190:	f000 f9d2 	bl	8014538 <_printf_common>
 8014194:	3001      	adds	r0, #1
 8014196:	f040 808d 	bne.w	80142b4 <_printf_float+0x1d0>
 801419a:	f04f 30ff 	mov.w	r0, #4294967295
 801419e:	b00d      	add	sp, #52	@ 0x34
 80141a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a4:	4642      	mov	r2, r8
 80141a6:	464b      	mov	r3, r9
 80141a8:	4640      	mov	r0, r8
 80141aa:	4649      	mov	r1, r9
 80141ac:	f7f4 fcee 	bl	8008b8c <__aeabi_dcmpun>
 80141b0:	b140      	cbz	r0, 80141c4 <_printf_float+0xe0>
 80141b2:	464b      	mov	r3, r9
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	bfbc      	itt	lt
 80141b8:	232d      	movlt	r3, #45	@ 0x2d
 80141ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80141be:	4a7e      	ldr	r2, [pc, #504]	@ (80143b8 <_printf_float+0x2d4>)
 80141c0:	4b7e      	ldr	r3, [pc, #504]	@ (80143bc <_printf_float+0x2d8>)
 80141c2:	e7d4      	b.n	801416e <_printf_float+0x8a>
 80141c4:	6863      	ldr	r3, [r4, #4]
 80141c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80141ca:	9206      	str	r2, [sp, #24]
 80141cc:	1c5a      	adds	r2, r3, #1
 80141ce:	d13b      	bne.n	8014248 <_printf_float+0x164>
 80141d0:	2306      	movs	r3, #6
 80141d2:	6063      	str	r3, [r4, #4]
 80141d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80141d8:	2300      	movs	r3, #0
 80141da:	6022      	str	r2, [r4, #0]
 80141dc:	9303      	str	r3, [sp, #12]
 80141de:	ab0a      	add	r3, sp, #40	@ 0x28
 80141e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80141e4:	ab09      	add	r3, sp, #36	@ 0x24
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	6861      	ldr	r1, [r4, #4]
 80141ea:	ec49 8b10 	vmov	d0, r8, r9
 80141ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80141f2:	4628      	mov	r0, r5
 80141f4:	f7ff fed6 	bl	8013fa4 <__cvt>
 80141f8:	9b06      	ldr	r3, [sp, #24]
 80141fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80141fc:	2b47      	cmp	r3, #71	@ 0x47
 80141fe:	4680      	mov	r8, r0
 8014200:	d129      	bne.n	8014256 <_printf_float+0x172>
 8014202:	1cc8      	adds	r0, r1, #3
 8014204:	db02      	blt.n	801420c <_printf_float+0x128>
 8014206:	6863      	ldr	r3, [r4, #4]
 8014208:	4299      	cmp	r1, r3
 801420a:	dd41      	ble.n	8014290 <_printf_float+0x1ac>
 801420c:	f1aa 0a02 	sub.w	sl, sl, #2
 8014210:	fa5f fa8a 	uxtb.w	sl, sl
 8014214:	3901      	subs	r1, #1
 8014216:	4652      	mov	r2, sl
 8014218:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801421c:	9109      	str	r1, [sp, #36]	@ 0x24
 801421e:	f7ff ff26 	bl	801406e <__exponent>
 8014222:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014224:	1813      	adds	r3, r2, r0
 8014226:	2a01      	cmp	r2, #1
 8014228:	4681      	mov	r9, r0
 801422a:	6123      	str	r3, [r4, #16]
 801422c:	dc02      	bgt.n	8014234 <_printf_float+0x150>
 801422e:	6822      	ldr	r2, [r4, #0]
 8014230:	07d2      	lsls	r2, r2, #31
 8014232:	d501      	bpl.n	8014238 <_printf_float+0x154>
 8014234:	3301      	adds	r3, #1
 8014236:	6123      	str	r3, [r4, #16]
 8014238:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801423c:	2b00      	cmp	r3, #0
 801423e:	d0a2      	beq.n	8014186 <_printf_float+0xa2>
 8014240:	232d      	movs	r3, #45	@ 0x2d
 8014242:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014246:	e79e      	b.n	8014186 <_printf_float+0xa2>
 8014248:	9a06      	ldr	r2, [sp, #24]
 801424a:	2a47      	cmp	r2, #71	@ 0x47
 801424c:	d1c2      	bne.n	80141d4 <_printf_float+0xf0>
 801424e:	2b00      	cmp	r3, #0
 8014250:	d1c0      	bne.n	80141d4 <_printf_float+0xf0>
 8014252:	2301      	movs	r3, #1
 8014254:	e7bd      	b.n	80141d2 <_printf_float+0xee>
 8014256:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801425a:	d9db      	bls.n	8014214 <_printf_float+0x130>
 801425c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014260:	d118      	bne.n	8014294 <_printf_float+0x1b0>
 8014262:	2900      	cmp	r1, #0
 8014264:	6863      	ldr	r3, [r4, #4]
 8014266:	dd0b      	ble.n	8014280 <_printf_float+0x19c>
 8014268:	6121      	str	r1, [r4, #16]
 801426a:	b913      	cbnz	r3, 8014272 <_printf_float+0x18e>
 801426c:	6822      	ldr	r2, [r4, #0]
 801426e:	07d0      	lsls	r0, r2, #31
 8014270:	d502      	bpl.n	8014278 <_printf_float+0x194>
 8014272:	3301      	adds	r3, #1
 8014274:	440b      	add	r3, r1
 8014276:	6123      	str	r3, [r4, #16]
 8014278:	65a1      	str	r1, [r4, #88]	@ 0x58
 801427a:	f04f 0900 	mov.w	r9, #0
 801427e:	e7db      	b.n	8014238 <_printf_float+0x154>
 8014280:	b913      	cbnz	r3, 8014288 <_printf_float+0x1a4>
 8014282:	6822      	ldr	r2, [r4, #0]
 8014284:	07d2      	lsls	r2, r2, #31
 8014286:	d501      	bpl.n	801428c <_printf_float+0x1a8>
 8014288:	3302      	adds	r3, #2
 801428a:	e7f4      	b.n	8014276 <_printf_float+0x192>
 801428c:	2301      	movs	r3, #1
 801428e:	e7f2      	b.n	8014276 <_printf_float+0x192>
 8014290:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014296:	4299      	cmp	r1, r3
 8014298:	db05      	blt.n	80142a6 <_printf_float+0x1c2>
 801429a:	6823      	ldr	r3, [r4, #0]
 801429c:	6121      	str	r1, [r4, #16]
 801429e:	07d8      	lsls	r0, r3, #31
 80142a0:	d5ea      	bpl.n	8014278 <_printf_float+0x194>
 80142a2:	1c4b      	adds	r3, r1, #1
 80142a4:	e7e7      	b.n	8014276 <_printf_float+0x192>
 80142a6:	2900      	cmp	r1, #0
 80142a8:	bfd4      	ite	le
 80142aa:	f1c1 0202 	rsble	r2, r1, #2
 80142ae:	2201      	movgt	r2, #1
 80142b0:	4413      	add	r3, r2
 80142b2:	e7e0      	b.n	8014276 <_printf_float+0x192>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	055a      	lsls	r2, r3, #21
 80142b8:	d407      	bmi.n	80142ca <_printf_float+0x1e6>
 80142ba:	6923      	ldr	r3, [r4, #16]
 80142bc:	4642      	mov	r2, r8
 80142be:	4631      	mov	r1, r6
 80142c0:	4628      	mov	r0, r5
 80142c2:	47b8      	blx	r7
 80142c4:	3001      	adds	r0, #1
 80142c6:	d12b      	bne.n	8014320 <_printf_float+0x23c>
 80142c8:	e767      	b.n	801419a <_printf_float+0xb6>
 80142ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80142ce:	f240 80dd 	bls.w	801448c <_printf_float+0x3a8>
 80142d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80142d6:	2200      	movs	r2, #0
 80142d8:	2300      	movs	r3, #0
 80142da:	f7f4 fc25 	bl	8008b28 <__aeabi_dcmpeq>
 80142de:	2800      	cmp	r0, #0
 80142e0:	d033      	beq.n	801434a <_printf_float+0x266>
 80142e2:	4a37      	ldr	r2, [pc, #220]	@ (80143c0 <_printf_float+0x2dc>)
 80142e4:	2301      	movs	r3, #1
 80142e6:	4631      	mov	r1, r6
 80142e8:	4628      	mov	r0, r5
 80142ea:	47b8      	blx	r7
 80142ec:	3001      	adds	r0, #1
 80142ee:	f43f af54 	beq.w	801419a <_printf_float+0xb6>
 80142f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80142f6:	4543      	cmp	r3, r8
 80142f8:	db02      	blt.n	8014300 <_printf_float+0x21c>
 80142fa:	6823      	ldr	r3, [r4, #0]
 80142fc:	07d8      	lsls	r0, r3, #31
 80142fe:	d50f      	bpl.n	8014320 <_printf_float+0x23c>
 8014300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014304:	4631      	mov	r1, r6
 8014306:	4628      	mov	r0, r5
 8014308:	47b8      	blx	r7
 801430a:	3001      	adds	r0, #1
 801430c:	f43f af45 	beq.w	801419a <_printf_float+0xb6>
 8014310:	f04f 0900 	mov.w	r9, #0
 8014314:	f108 38ff 	add.w	r8, r8, #4294967295
 8014318:	f104 0a1a 	add.w	sl, r4, #26
 801431c:	45c8      	cmp	r8, r9
 801431e:	dc09      	bgt.n	8014334 <_printf_float+0x250>
 8014320:	6823      	ldr	r3, [r4, #0]
 8014322:	079b      	lsls	r3, r3, #30
 8014324:	f100 8103 	bmi.w	801452e <_printf_float+0x44a>
 8014328:	68e0      	ldr	r0, [r4, #12]
 801432a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801432c:	4298      	cmp	r0, r3
 801432e:	bfb8      	it	lt
 8014330:	4618      	movlt	r0, r3
 8014332:	e734      	b.n	801419e <_printf_float+0xba>
 8014334:	2301      	movs	r3, #1
 8014336:	4652      	mov	r2, sl
 8014338:	4631      	mov	r1, r6
 801433a:	4628      	mov	r0, r5
 801433c:	47b8      	blx	r7
 801433e:	3001      	adds	r0, #1
 8014340:	f43f af2b 	beq.w	801419a <_printf_float+0xb6>
 8014344:	f109 0901 	add.w	r9, r9, #1
 8014348:	e7e8      	b.n	801431c <_printf_float+0x238>
 801434a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801434c:	2b00      	cmp	r3, #0
 801434e:	dc39      	bgt.n	80143c4 <_printf_float+0x2e0>
 8014350:	4a1b      	ldr	r2, [pc, #108]	@ (80143c0 <_printf_float+0x2dc>)
 8014352:	2301      	movs	r3, #1
 8014354:	4631      	mov	r1, r6
 8014356:	4628      	mov	r0, r5
 8014358:	47b8      	blx	r7
 801435a:	3001      	adds	r0, #1
 801435c:	f43f af1d 	beq.w	801419a <_printf_float+0xb6>
 8014360:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014364:	ea59 0303 	orrs.w	r3, r9, r3
 8014368:	d102      	bne.n	8014370 <_printf_float+0x28c>
 801436a:	6823      	ldr	r3, [r4, #0]
 801436c:	07d9      	lsls	r1, r3, #31
 801436e:	d5d7      	bpl.n	8014320 <_printf_float+0x23c>
 8014370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014374:	4631      	mov	r1, r6
 8014376:	4628      	mov	r0, r5
 8014378:	47b8      	blx	r7
 801437a:	3001      	adds	r0, #1
 801437c:	f43f af0d 	beq.w	801419a <_printf_float+0xb6>
 8014380:	f04f 0a00 	mov.w	sl, #0
 8014384:	f104 0b1a 	add.w	fp, r4, #26
 8014388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801438a:	425b      	negs	r3, r3
 801438c:	4553      	cmp	r3, sl
 801438e:	dc01      	bgt.n	8014394 <_printf_float+0x2b0>
 8014390:	464b      	mov	r3, r9
 8014392:	e793      	b.n	80142bc <_printf_float+0x1d8>
 8014394:	2301      	movs	r3, #1
 8014396:	465a      	mov	r2, fp
 8014398:	4631      	mov	r1, r6
 801439a:	4628      	mov	r0, r5
 801439c:	47b8      	blx	r7
 801439e:	3001      	adds	r0, #1
 80143a0:	f43f aefb 	beq.w	801419a <_printf_float+0xb6>
 80143a4:	f10a 0a01 	add.w	sl, sl, #1
 80143a8:	e7ee      	b.n	8014388 <_printf_float+0x2a4>
 80143aa:	bf00      	nop
 80143ac:	7fefffff 	.word	0x7fefffff
 80143b0:	08019130 	.word	0x08019130
 80143b4:	0801912c 	.word	0x0801912c
 80143b8:	08019138 	.word	0x08019138
 80143bc:	08019134 	.word	0x08019134
 80143c0:	08019272 	.word	0x08019272
 80143c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80143c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80143ca:	4553      	cmp	r3, sl
 80143cc:	bfa8      	it	ge
 80143ce:	4653      	movge	r3, sl
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	4699      	mov	r9, r3
 80143d4:	dc36      	bgt.n	8014444 <_printf_float+0x360>
 80143d6:	f04f 0b00 	mov.w	fp, #0
 80143da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80143de:	f104 021a 	add.w	r2, r4, #26
 80143e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80143e4:	9306      	str	r3, [sp, #24]
 80143e6:	eba3 0309 	sub.w	r3, r3, r9
 80143ea:	455b      	cmp	r3, fp
 80143ec:	dc31      	bgt.n	8014452 <_printf_float+0x36e>
 80143ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143f0:	459a      	cmp	sl, r3
 80143f2:	dc3a      	bgt.n	801446a <_printf_float+0x386>
 80143f4:	6823      	ldr	r3, [r4, #0]
 80143f6:	07da      	lsls	r2, r3, #31
 80143f8:	d437      	bmi.n	801446a <_printf_float+0x386>
 80143fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143fc:	ebaa 0903 	sub.w	r9, sl, r3
 8014400:	9b06      	ldr	r3, [sp, #24]
 8014402:	ebaa 0303 	sub.w	r3, sl, r3
 8014406:	4599      	cmp	r9, r3
 8014408:	bfa8      	it	ge
 801440a:	4699      	movge	r9, r3
 801440c:	f1b9 0f00 	cmp.w	r9, #0
 8014410:	dc33      	bgt.n	801447a <_printf_float+0x396>
 8014412:	f04f 0800 	mov.w	r8, #0
 8014416:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801441a:	f104 0b1a 	add.w	fp, r4, #26
 801441e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014420:	ebaa 0303 	sub.w	r3, sl, r3
 8014424:	eba3 0309 	sub.w	r3, r3, r9
 8014428:	4543      	cmp	r3, r8
 801442a:	f77f af79 	ble.w	8014320 <_printf_float+0x23c>
 801442e:	2301      	movs	r3, #1
 8014430:	465a      	mov	r2, fp
 8014432:	4631      	mov	r1, r6
 8014434:	4628      	mov	r0, r5
 8014436:	47b8      	blx	r7
 8014438:	3001      	adds	r0, #1
 801443a:	f43f aeae 	beq.w	801419a <_printf_float+0xb6>
 801443e:	f108 0801 	add.w	r8, r8, #1
 8014442:	e7ec      	b.n	801441e <_printf_float+0x33a>
 8014444:	4642      	mov	r2, r8
 8014446:	4631      	mov	r1, r6
 8014448:	4628      	mov	r0, r5
 801444a:	47b8      	blx	r7
 801444c:	3001      	adds	r0, #1
 801444e:	d1c2      	bne.n	80143d6 <_printf_float+0x2f2>
 8014450:	e6a3      	b.n	801419a <_printf_float+0xb6>
 8014452:	2301      	movs	r3, #1
 8014454:	4631      	mov	r1, r6
 8014456:	4628      	mov	r0, r5
 8014458:	9206      	str	r2, [sp, #24]
 801445a:	47b8      	blx	r7
 801445c:	3001      	adds	r0, #1
 801445e:	f43f ae9c 	beq.w	801419a <_printf_float+0xb6>
 8014462:	9a06      	ldr	r2, [sp, #24]
 8014464:	f10b 0b01 	add.w	fp, fp, #1
 8014468:	e7bb      	b.n	80143e2 <_printf_float+0x2fe>
 801446a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801446e:	4631      	mov	r1, r6
 8014470:	4628      	mov	r0, r5
 8014472:	47b8      	blx	r7
 8014474:	3001      	adds	r0, #1
 8014476:	d1c0      	bne.n	80143fa <_printf_float+0x316>
 8014478:	e68f      	b.n	801419a <_printf_float+0xb6>
 801447a:	9a06      	ldr	r2, [sp, #24]
 801447c:	464b      	mov	r3, r9
 801447e:	4442      	add	r2, r8
 8014480:	4631      	mov	r1, r6
 8014482:	4628      	mov	r0, r5
 8014484:	47b8      	blx	r7
 8014486:	3001      	adds	r0, #1
 8014488:	d1c3      	bne.n	8014412 <_printf_float+0x32e>
 801448a:	e686      	b.n	801419a <_printf_float+0xb6>
 801448c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014490:	f1ba 0f01 	cmp.w	sl, #1
 8014494:	dc01      	bgt.n	801449a <_printf_float+0x3b6>
 8014496:	07db      	lsls	r3, r3, #31
 8014498:	d536      	bpl.n	8014508 <_printf_float+0x424>
 801449a:	2301      	movs	r3, #1
 801449c:	4642      	mov	r2, r8
 801449e:	4631      	mov	r1, r6
 80144a0:	4628      	mov	r0, r5
 80144a2:	47b8      	blx	r7
 80144a4:	3001      	adds	r0, #1
 80144a6:	f43f ae78 	beq.w	801419a <_printf_float+0xb6>
 80144aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144ae:	4631      	mov	r1, r6
 80144b0:	4628      	mov	r0, r5
 80144b2:	47b8      	blx	r7
 80144b4:	3001      	adds	r0, #1
 80144b6:	f43f ae70 	beq.w	801419a <_printf_float+0xb6>
 80144ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80144be:	2200      	movs	r2, #0
 80144c0:	2300      	movs	r3, #0
 80144c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144c6:	f7f4 fb2f 	bl	8008b28 <__aeabi_dcmpeq>
 80144ca:	b9c0      	cbnz	r0, 80144fe <_printf_float+0x41a>
 80144cc:	4653      	mov	r3, sl
 80144ce:	f108 0201 	add.w	r2, r8, #1
 80144d2:	4631      	mov	r1, r6
 80144d4:	4628      	mov	r0, r5
 80144d6:	47b8      	blx	r7
 80144d8:	3001      	adds	r0, #1
 80144da:	d10c      	bne.n	80144f6 <_printf_float+0x412>
 80144dc:	e65d      	b.n	801419a <_printf_float+0xb6>
 80144de:	2301      	movs	r3, #1
 80144e0:	465a      	mov	r2, fp
 80144e2:	4631      	mov	r1, r6
 80144e4:	4628      	mov	r0, r5
 80144e6:	47b8      	blx	r7
 80144e8:	3001      	adds	r0, #1
 80144ea:	f43f ae56 	beq.w	801419a <_printf_float+0xb6>
 80144ee:	f108 0801 	add.w	r8, r8, #1
 80144f2:	45d0      	cmp	r8, sl
 80144f4:	dbf3      	blt.n	80144de <_printf_float+0x3fa>
 80144f6:	464b      	mov	r3, r9
 80144f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80144fc:	e6df      	b.n	80142be <_printf_float+0x1da>
 80144fe:	f04f 0800 	mov.w	r8, #0
 8014502:	f104 0b1a 	add.w	fp, r4, #26
 8014506:	e7f4      	b.n	80144f2 <_printf_float+0x40e>
 8014508:	2301      	movs	r3, #1
 801450a:	4642      	mov	r2, r8
 801450c:	e7e1      	b.n	80144d2 <_printf_float+0x3ee>
 801450e:	2301      	movs	r3, #1
 8014510:	464a      	mov	r2, r9
 8014512:	4631      	mov	r1, r6
 8014514:	4628      	mov	r0, r5
 8014516:	47b8      	blx	r7
 8014518:	3001      	adds	r0, #1
 801451a:	f43f ae3e 	beq.w	801419a <_printf_float+0xb6>
 801451e:	f108 0801 	add.w	r8, r8, #1
 8014522:	68e3      	ldr	r3, [r4, #12]
 8014524:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014526:	1a5b      	subs	r3, r3, r1
 8014528:	4543      	cmp	r3, r8
 801452a:	dcf0      	bgt.n	801450e <_printf_float+0x42a>
 801452c:	e6fc      	b.n	8014328 <_printf_float+0x244>
 801452e:	f04f 0800 	mov.w	r8, #0
 8014532:	f104 0919 	add.w	r9, r4, #25
 8014536:	e7f4      	b.n	8014522 <_printf_float+0x43e>

08014538 <_printf_common>:
 8014538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801453c:	4616      	mov	r6, r2
 801453e:	4698      	mov	r8, r3
 8014540:	688a      	ldr	r2, [r1, #8]
 8014542:	690b      	ldr	r3, [r1, #16]
 8014544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014548:	4293      	cmp	r3, r2
 801454a:	bfb8      	it	lt
 801454c:	4613      	movlt	r3, r2
 801454e:	6033      	str	r3, [r6, #0]
 8014550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014554:	4607      	mov	r7, r0
 8014556:	460c      	mov	r4, r1
 8014558:	b10a      	cbz	r2, 801455e <_printf_common+0x26>
 801455a:	3301      	adds	r3, #1
 801455c:	6033      	str	r3, [r6, #0]
 801455e:	6823      	ldr	r3, [r4, #0]
 8014560:	0699      	lsls	r1, r3, #26
 8014562:	bf42      	ittt	mi
 8014564:	6833      	ldrmi	r3, [r6, #0]
 8014566:	3302      	addmi	r3, #2
 8014568:	6033      	strmi	r3, [r6, #0]
 801456a:	6825      	ldr	r5, [r4, #0]
 801456c:	f015 0506 	ands.w	r5, r5, #6
 8014570:	d106      	bne.n	8014580 <_printf_common+0x48>
 8014572:	f104 0a19 	add.w	sl, r4, #25
 8014576:	68e3      	ldr	r3, [r4, #12]
 8014578:	6832      	ldr	r2, [r6, #0]
 801457a:	1a9b      	subs	r3, r3, r2
 801457c:	42ab      	cmp	r3, r5
 801457e:	dc26      	bgt.n	80145ce <_printf_common+0x96>
 8014580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014584:	6822      	ldr	r2, [r4, #0]
 8014586:	3b00      	subs	r3, #0
 8014588:	bf18      	it	ne
 801458a:	2301      	movne	r3, #1
 801458c:	0692      	lsls	r2, r2, #26
 801458e:	d42b      	bmi.n	80145e8 <_printf_common+0xb0>
 8014590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014594:	4641      	mov	r1, r8
 8014596:	4638      	mov	r0, r7
 8014598:	47c8      	blx	r9
 801459a:	3001      	adds	r0, #1
 801459c:	d01e      	beq.n	80145dc <_printf_common+0xa4>
 801459e:	6823      	ldr	r3, [r4, #0]
 80145a0:	6922      	ldr	r2, [r4, #16]
 80145a2:	f003 0306 	and.w	r3, r3, #6
 80145a6:	2b04      	cmp	r3, #4
 80145a8:	bf02      	ittt	eq
 80145aa:	68e5      	ldreq	r5, [r4, #12]
 80145ac:	6833      	ldreq	r3, [r6, #0]
 80145ae:	1aed      	subeq	r5, r5, r3
 80145b0:	68a3      	ldr	r3, [r4, #8]
 80145b2:	bf0c      	ite	eq
 80145b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80145b8:	2500      	movne	r5, #0
 80145ba:	4293      	cmp	r3, r2
 80145bc:	bfc4      	itt	gt
 80145be:	1a9b      	subgt	r3, r3, r2
 80145c0:	18ed      	addgt	r5, r5, r3
 80145c2:	2600      	movs	r6, #0
 80145c4:	341a      	adds	r4, #26
 80145c6:	42b5      	cmp	r5, r6
 80145c8:	d11a      	bne.n	8014600 <_printf_common+0xc8>
 80145ca:	2000      	movs	r0, #0
 80145cc:	e008      	b.n	80145e0 <_printf_common+0xa8>
 80145ce:	2301      	movs	r3, #1
 80145d0:	4652      	mov	r2, sl
 80145d2:	4641      	mov	r1, r8
 80145d4:	4638      	mov	r0, r7
 80145d6:	47c8      	blx	r9
 80145d8:	3001      	adds	r0, #1
 80145da:	d103      	bne.n	80145e4 <_printf_common+0xac>
 80145dc:	f04f 30ff 	mov.w	r0, #4294967295
 80145e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e4:	3501      	adds	r5, #1
 80145e6:	e7c6      	b.n	8014576 <_printf_common+0x3e>
 80145e8:	18e1      	adds	r1, r4, r3
 80145ea:	1c5a      	adds	r2, r3, #1
 80145ec:	2030      	movs	r0, #48	@ 0x30
 80145ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80145f2:	4422      	add	r2, r4
 80145f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80145f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80145fc:	3302      	adds	r3, #2
 80145fe:	e7c7      	b.n	8014590 <_printf_common+0x58>
 8014600:	2301      	movs	r3, #1
 8014602:	4622      	mov	r2, r4
 8014604:	4641      	mov	r1, r8
 8014606:	4638      	mov	r0, r7
 8014608:	47c8      	blx	r9
 801460a:	3001      	adds	r0, #1
 801460c:	d0e6      	beq.n	80145dc <_printf_common+0xa4>
 801460e:	3601      	adds	r6, #1
 8014610:	e7d9      	b.n	80145c6 <_printf_common+0x8e>
	...

08014614 <_printf_i>:
 8014614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014618:	7e0f      	ldrb	r7, [r1, #24]
 801461a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801461c:	2f78      	cmp	r7, #120	@ 0x78
 801461e:	4691      	mov	r9, r2
 8014620:	4680      	mov	r8, r0
 8014622:	460c      	mov	r4, r1
 8014624:	469a      	mov	sl, r3
 8014626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801462a:	d807      	bhi.n	801463c <_printf_i+0x28>
 801462c:	2f62      	cmp	r7, #98	@ 0x62
 801462e:	d80a      	bhi.n	8014646 <_printf_i+0x32>
 8014630:	2f00      	cmp	r7, #0
 8014632:	f000 80d1 	beq.w	80147d8 <_printf_i+0x1c4>
 8014636:	2f58      	cmp	r7, #88	@ 0x58
 8014638:	f000 80b8 	beq.w	80147ac <_printf_i+0x198>
 801463c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014644:	e03a      	b.n	80146bc <_printf_i+0xa8>
 8014646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801464a:	2b15      	cmp	r3, #21
 801464c:	d8f6      	bhi.n	801463c <_printf_i+0x28>
 801464e:	a101      	add	r1, pc, #4	@ (adr r1, 8014654 <_printf_i+0x40>)
 8014650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014654:	080146ad 	.word	0x080146ad
 8014658:	080146c1 	.word	0x080146c1
 801465c:	0801463d 	.word	0x0801463d
 8014660:	0801463d 	.word	0x0801463d
 8014664:	0801463d 	.word	0x0801463d
 8014668:	0801463d 	.word	0x0801463d
 801466c:	080146c1 	.word	0x080146c1
 8014670:	0801463d 	.word	0x0801463d
 8014674:	0801463d 	.word	0x0801463d
 8014678:	0801463d 	.word	0x0801463d
 801467c:	0801463d 	.word	0x0801463d
 8014680:	080147bf 	.word	0x080147bf
 8014684:	080146eb 	.word	0x080146eb
 8014688:	08014779 	.word	0x08014779
 801468c:	0801463d 	.word	0x0801463d
 8014690:	0801463d 	.word	0x0801463d
 8014694:	080147e1 	.word	0x080147e1
 8014698:	0801463d 	.word	0x0801463d
 801469c:	080146eb 	.word	0x080146eb
 80146a0:	0801463d 	.word	0x0801463d
 80146a4:	0801463d 	.word	0x0801463d
 80146a8:	08014781 	.word	0x08014781
 80146ac:	6833      	ldr	r3, [r6, #0]
 80146ae:	1d1a      	adds	r2, r3, #4
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	6032      	str	r2, [r6, #0]
 80146b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80146b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80146bc:	2301      	movs	r3, #1
 80146be:	e09c      	b.n	80147fa <_printf_i+0x1e6>
 80146c0:	6833      	ldr	r3, [r6, #0]
 80146c2:	6820      	ldr	r0, [r4, #0]
 80146c4:	1d19      	adds	r1, r3, #4
 80146c6:	6031      	str	r1, [r6, #0]
 80146c8:	0606      	lsls	r6, r0, #24
 80146ca:	d501      	bpl.n	80146d0 <_printf_i+0xbc>
 80146cc:	681d      	ldr	r5, [r3, #0]
 80146ce:	e003      	b.n	80146d8 <_printf_i+0xc4>
 80146d0:	0645      	lsls	r5, r0, #25
 80146d2:	d5fb      	bpl.n	80146cc <_printf_i+0xb8>
 80146d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80146d8:	2d00      	cmp	r5, #0
 80146da:	da03      	bge.n	80146e4 <_printf_i+0xd0>
 80146dc:	232d      	movs	r3, #45	@ 0x2d
 80146de:	426d      	negs	r5, r5
 80146e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146e4:	4858      	ldr	r0, [pc, #352]	@ (8014848 <_printf_i+0x234>)
 80146e6:	230a      	movs	r3, #10
 80146e8:	e011      	b.n	801470e <_printf_i+0xfa>
 80146ea:	6821      	ldr	r1, [r4, #0]
 80146ec:	6833      	ldr	r3, [r6, #0]
 80146ee:	0608      	lsls	r0, r1, #24
 80146f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80146f4:	d402      	bmi.n	80146fc <_printf_i+0xe8>
 80146f6:	0649      	lsls	r1, r1, #25
 80146f8:	bf48      	it	mi
 80146fa:	b2ad      	uxthmi	r5, r5
 80146fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80146fe:	4852      	ldr	r0, [pc, #328]	@ (8014848 <_printf_i+0x234>)
 8014700:	6033      	str	r3, [r6, #0]
 8014702:	bf14      	ite	ne
 8014704:	230a      	movne	r3, #10
 8014706:	2308      	moveq	r3, #8
 8014708:	2100      	movs	r1, #0
 801470a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801470e:	6866      	ldr	r6, [r4, #4]
 8014710:	60a6      	str	r6, [r4, #8]
 8014712:	2e00      	cmp	r6, #0
 8014714:	db05      	blt.n	8014722 <_printf_i+0x10e>
 8014716:	6821      	ldr	r1, [r4, #0]
 8014718:	432e      	orrs	r6, r5
 801471a:	f021 0104 	bic.w	r1, r1, #4
 801471e:	6021      	str	r1, [r4, #0]
 8014720:	d04b      	beq.n	80147ba <_printf_i+0x1a6>
 8014722:	4616      	mov	r6, r2
 8014724:	fbb5 f1f3 	udiv	r1, r5, r3
 8014728:	fb03 5711 	mls	r7, r3, r1, r5
 801472c:	5dc7      	ldrb	r7, [r0, r7]
 801472e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014732:	462f      	mov	r7, r5
 8014734:	42bb      	cmp	r3, r7
 8014736:	460d      	mov	r5, r1
 8014738:	d9f4      	bls.n	8014724 <_printf_i+0x110>
 801473a:	2b08      	cmp	r3, #8
 801473c:	d10b      	bne.n	8014756 <_printf_i+0x142>
 801473e:	6823      	ldr	r3, [r4, #0]
 8014740:	07df      	lsls	r7, r3, #31
 8014742:	d508      	bpl.n	8014756 <_printf_i+0x142>
 8014744:	6923      	ldr	r3, [r4, #16]
 8014746:	6861      	ldr	r1, [r4, #4]
 8014748:	4299      	cmp	r1, r3
 801474a:	bfde      	ittt	le
 801474c:	2330      	movle	r3, #48	@ 0x30
 801474e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014752:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014756:	1b92      	subs	r2, r2, r6
 8014758:	6122      	str	r2, [r4, #16]
 801475a:	f8cd a000 	str.w	sl, [sp]
 801475e:	464b      	mov	r3, r9
 8014760:	aa03      	add	r2, sp, #12
 8014762:	4621      	mov	r1, r4
 8014764:	4640      	mov	r0, r8
 8014766:	f7ff fee7 	bl	8014538 <_printf_common>
 801476a:	3001      	adds	r0, #1
 801476c:	d14a      	bne.n	8014804 <_printf_i+0x1f0>
 801476e:	f04f 30ff 	mov.w	r0, #4294967295
 8014772:	b004      	add	sp, #16
 8014774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014778:	6823      	ldr	r3, [r4, #0]
 801477a:	f043 0320 	orr.w	r3, r3, #32
 801477e:	6023      	str	r3, [r4, #0]
 8014780:	4832      	ldr	r0, [pc, #200]	@ (801484c <_printf_i+0x238>)
 8014782:	2778      	movs	r7, #120	@ 0x78
 8014784:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014788:	6823      	ldr	r3, [r4, #0]
 801478a:	6831      	ldr	r1, [r6, #0]
 801478c:	061f      	lsls	r7, r3, #24
 801478e:	f851 5b04 	ldr.w	r5, [r1], #4
 8014792:	d402      	bmi.n	801479a <_printf_i+0x186>
 8014794:	065f      	lsls	r7, r3, #25
 8014796:	bf48      	it	mi
 8014798:	b2ad      	uxthmi	r5, r5
 801479a:	6031      	str	r1, [r6, #0]
 801479c:	07d9      	lsls	r1, r3, #31
 801479e:	bf44      	itt	mi
 80147a0:	f043 0320 	orrmi.w	r3, r3, #32
 80147a4:	6023      	strmi	r3, [r4, #0]
 80147a6:	b11d      	cbz	r5, 80147b0 <_printf_i+0x19c>
 80147a8:	2310      	movs	r3, #16
 80147aa:	e7ad      	b.n	8014708 <_printf_i+0xf4>
 80147ac:	4826      	ldr	r0, [pc, #152]	@ (8014848 <_printf_i+0x234>)
 80147ae:	e7e9      	b.n	8014784 <_printf_i+0x170>
 80147b0:	6823      	ldr	r3, [r4, #0]
 80147b2:	f023 0320 	bic.w	r3, r3, #32
 80147b6:	6023      	str	r3, [r4, #0]
 80147b8:	e7f6      	b.n	80147a8 <_printf_i+0x194>
 80147ba:	4616      	mov	r6, r2
 80147bc:	e7bd      	b.n	801473a <_printf_i+0x126>
 80147be:	6833      	ldr	r3, [r6, #0]
 80147c0:	6825      	ldr	r5, [r4, #0]
 80147c2:	6961      	ldr	r1, [r4, #20]
 80147c4:	1d18      	adds	r0, r3, #4
 80147c6:	6030      	str	r0, [r6, #0]
 80147c8:	062e      	lsls	r6, r5, #24
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	d501      	bpl.n	80147d2 <_printf_i+0x1be>
 80147ce:	6019      	str	r1, [r3, #0]
 80147d0:	e002      	b.n	80147d8 <_printf_i+0x1c4>
 80147d2:	0668      	lsls	r0, r5, #25
 80147d4:	d5fb      	bpl.n	80147ce <_printf_i+0x1ba>
 80147d6:	8019      	strh	r1, [r3, #0]
 80147d8:	2300      	movs	r3, #0
 80147da:	6123      	str	r3, [r4, #16]
 80147dc:	4616      	mov	r6, r2
 80147de:	e7bc      	b.n	801475a <_printf_i+0x146>
 80147e0:	6833      	ldr	r3, [r6, #0]
 80147e2:	1d1a      	adds	r2, r3, #4
 80147e4:	6032      	str	r2, [r6, #0]
 80147e6:	681e      	ldr	r6, [r3, #0]
 80147e8:	6862      	ldr	r2, [r4, #4]
 80147ea:	2100      	movs	r1, #0
 80147ec:	4630      	mov	r0, r6
 80147ee:	f7f3 fd1f 	bl	8008230 <memchr>
 80147f2:	b108      	cbz	r0, 80147f8 <_printf_i+0x1e4>
 80147f4:	1b80      	subs	r0, r0, r6
 80147f6:	6060      	str	r0, [r4, #4]
 80147f8:	6863      	ldr	r3, [r4, #4]
 80147fa:	6123      	str	r3, [r4, #16]
 80147fc:	2300      	movs	r3, #0
 80147fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014802:	e7aa      	b.n	801475a <_printf_i+0x146>
 8014804:	6923      	ldr	r3, [r4, #16]
 8014806:	4632      	mov	r2, r6
 8014808:	4649      	mov	r1, r9
 801480a:	4640      	mov	r0, r8
 801480c:	47d0      	blx	sl
 801480e:	3001      	adds	r0, #1
 8014810:	d0ad      	beq.n	801476e <_printf_i+0x15a>
 8014812:	6823      	ldr	r3, [r4, #0]
 8014814:	079b      	lsls	r3, r3, #30
 8014816:	d413      	bmi.n	8014840 <_printf_i+0x22c>
 8014818:	68e0      	ldr	r0, [r4, #12]
 801481a:	9b03      	ldr	r3, [sp, #12]
 801481c:	4298      	cmp	r0, r3
 801481e:	bfb8      	it	lt
 8014820:	4618      	movlt	r0, r3
 8014822:	e7a6      	b.n	8014772 <_printf_i+0x15e>
 8014824:	2301      	movs	r3, #1
 8014826:	4632      	mov	r2, r6
 8014828:	4649      	mov	r1, r9
 801482a:	4640      	mov	r0, r8
 801482c:	47d0      	blx	sl
 801482e:	3001      	adds	r0, #1
 8014830:	d09d      	beq.n	801476e <_printf_i+0x15a>
 8014832:	3501      	adds	r5, #1
 8014834:	68e3      	ldr	r3, [r4, #12]
 8014836:	9903      	ldr	r1, [sp, #12]
 8014838:	1a5b      	subs	r3, r3, r1
 801483a:	42ab      	cmp	r3, r5
 801483c:	dcf2      	bgt.n	8014824 <_printf_i+0x210>
 801483e:	e7eb      	b.n	8014818 <_printf_i+0x204>
 8014840:	2500      	movs	r5, #0
 8014842:	f104 0619 	add.w	r6, r4, #25
 8014846:	e7f5      	b.n	8014834 <_printf_i+0x220>
 8014848:	0801913c 	.word	0x0801913c
 801484c:	0801914d 	.word	0x0801914d

08014850 <_scanf_float>:
 8014850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014854:	b087      	sub	sp, #28
 8014856:	4691      	mov	r9, r2
 8014858:	9303      	str	r3, [sp, #12]
 801485a:	688b      	ldr	r3, [r1, #8]
 801485c:	1e5a      	subs	r2, r3, #1
 801485e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014862:	bf81      	itttt	hi
 8014864:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014868:	eb03 0b05 	addhi.w	fp, r3, r5
 801486c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014870:	608b      	strhi	r3, [r1, #8]
 8014872:	680b      	ldr	r3, [r1, #0]
 8014874:	460a      	mov	r2, r1
 8014876:	f04f 0500 	mov.w	r5, #0
 801487a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801487e:	f842 3b1c 	str.w	r3, [r2], #28
 8014882:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014886:	4680      	mov	r8, r0
 8014888:	460c      	mov	r4, r1
 801488a:	bf98      	it	ls
 801488c:	f04f 0b00 	movls.w	fp, #0
 8014890:	9201      	str	r2, [sp, #4]
 8014892:	4616      	mov	r6, r2
 8014894:	46aa      	mov	sl, r5
 8014896:	462f      	mov	r7, r5
 8014898:	9502      	str	r5, [sp, #8]
 801489a:	68a2      	ldr	r2, [r4, #8]
 801489c:	b15a      	cbz	r2, 80148b6 <_scanf_float+0x66>
 801489e:	f8d9 3000 	ldr.w	r3, [r9]
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	2b4e      	cmp	r3, #78	@ 0x4e
 80148a6:	d863      	bhi.n	8014970 <_scanf_float+0x120>
 80148a8:	2b40      	cmp	r3, #64	@ 0x40
 80148aa:	d83b      	bhi.n	8014924 <_scanf_float+0xd4>
 80148ac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80148b0:	b2c8      	uxtb	r0, r1
 80148b2:	280e      	cmp	r0, #14
 80148b4:	d939      	bls.n	801492a <_scanf_float+0xda>
 80148b6:	b11f      	cbz	r7, 80148c0 <_scanf_float+0x70>
 80148b8:	6823      	ldr	r3, [r4, #0]
 80148ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80148be:	6023      	str	r3, [r4, #0]
 80148c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80148c4:	f1ba 0f01 	cmp.w	sl, #1
 80148c8:	f200 8114 	bhi.w	8014af4 <_scanf_float+0x2a4>
 80148cc:	9b01      	ldr	r3, [sp, #4]
 80148ce:	429e      	cmp	r6, r3
 80148d0:	f200 8105 	bhi.w	8014ade <_scanf_float+0x28e>
 80148d4:	2001      	movs	r0, #1
 80148d6:	b007      	add	sp, #28
 80148d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148dc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80148e0:	2a0d      	cmp	r2, #13
 80148e2:	d8e8      	bhi.n	80148b6 <_scanf_float+0x66>
 80148e4:	a101      	add	r1, pc, #4	@ (adr r1, 80148ec <_scanf_float+0x9c>)
 80148e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80148ea:	bf00      	nop
 80148ec:	08014a35 	.word	0x08014a35
 80148f0:	080148b7 	.word	0x080148b7
 80148f4:	080148b7 	.word	0x080148b7
 80148f8:	080148b7 	.word	0x080148b7
 80148fc:	08014a91 	.word	0x08014a91
 8014900:	08014a6b 	.word	0x08014a6b
 8014904:	080148b7 	.word	0x080148b7
 8014908:	080148b7 	.word	0x080148b7
 801490c:	08014a43 	.word	0x08014a43
 8014910:	080148b7 	.word	0x080148b7
 8014914:	080148b7 	.word	0x080148b7
 8014918:	080148b7 	.word	0x080148b7
 801491c:	080148b7 	.word	0x080148b7
 8014920:	080149ff 	.word	0x080149ff
 8014924:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014928:	e7da      	b.n	80148e0 <_scanf_float+0x90>
 801492a:	290e      	cmp	r1, #14
 801492c:	d8c3      	bhi.n	80148b6 <_scanf_float+0x66>
 801492e:	a001      	add	r0, pc, #4	@ (adr r0, 8014934 <_scanf_float+0xe4>)
 8014930:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014934:	080149ef 	.word	0x080149ef
 8014938:	080148b7 	.word	0x080148b7
 801493c:	080149ef 	.word	0x080149ef
 8014940:	08014a7f 	.word	0x08014a7f
 8014944:	080148b7 	.word	0x080148b7
 8014948:	08014991 	.word	0x08014991
 801494c:	080149d5 	.word	0x080149d5
 8014950:	080149d5 	.word	0x080149d5
 8014954:	080149d5 	.word	0x080149d5
 8014958:	080149d5 	.word	0x080149d5
 801495c:	080149d5 	.word	0x080149d5
 8014960:	080149d5 	.word	0x080149d5
 8014964:	080149d5 	.word	0x080149d5
 8014968:	080149d5 	.word	0x080149d5
 801496c:	080149d5 	.word	0x080149d5
 8014970:	2b6e      	cmp	r3, #110	@ 0x6e
 8014972:	d809      	bhi.n	8014988 <_scanf_float+0x138>
 8014974:	2b60      	cmp	r3, #96	@ 0x60
 8014976:	d8b1      	bhi.n	80148dc <_scanf_float+0x8c>
 8014978:	2b54      	cmp	r3, #84	@ 0x54
 801497a:	d07b      	beq.n	8014a74 <_scanf_float+0x224>
 801497c:	2b59      	cmp	r3, #89	@ 0x59
 801497e:	d19a      	bne.n	80148b6 <_scanf_float+0x66>
 8014980:	2d07      	cmp	r5, #7
 8014982:	d198      	bne.n	80148b6 <_scanf_float+0x66>
 8014984:	2508      	movs	r5, #8
 8014986:	e02f      	b.n	80149e8 <_scanf_float+0x198>
 8014988:	2b74      	cmp	r3, #116	@ 0x74
 801498a:	d073      	beq.n	8014a74 <_scanf_float+0x224>
 801498c:	2b79      	cmp	r3, #121	@ 0x79
 801498e:	e7f6      	b.n	801497e <_scanf_float+0x12e>
 8014990:	6821      	ldr	r1, [r4, #0]
 8014992:	05c8      	lsls	r0, r1, #23
 8014994:	d51e      	bpl.n	80149d4 <_scanf_float+0x184>
 8014996:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801499a:	6021      	str	r1, [r4, #0]
 801499c:	3701      	adds	r7, #1
 801499e:	f1bb 0f00 	cmp.w	fp, #0
 80149a2:	d003      	beq.n	80149ac <_scanf_float+0x15c>
 80149a4:	3201      	adds	r2, #1
 80149a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80149aa:	60a2      	str	r2, [r4, #8]
 80149ac:	68a3      	ldr	r3, [r4, #8]
 80149ae:	3b01      	subs	r3, #1
 80149b0:	60a3      	str	r3, [r4, #8]
 80149b2:	6923      	ldr	r3, [r4, #16]
 80149b4:	3301      	adds	r3, #1
 80149b6:	6123      	str	r3, [r4, #16]
 80149b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80149bc:	3b01      	subs	r3, #1
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f8c9 3004 	str.w	r3, [r9, #4]
 80149c4:	f340 8082 	ble.w	8014acc <_scanf_float+0x27c>
 80149c8:	f8d9 3000 	ldr.w	r3, [r9]
 80149cc:	3301      	adds	r3, #1
 80149ce:	f8c9 3000 	str.w	r3, [r9]
 80149d2:	e762      	b.n	801489a <_scanf_float+0x4a>
 80149d4:	eb1a 0105 	adds.w	r1, sl, r5
 80149d8:	f47f af6d 	bne.w	80148b6 <_scanf_float+0x66>
 80149dc:	6822      	ldr	r2, [r4, #0]
 80149de:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80149e2:	6022      	str	r2, [r4, #0]
 80149e4:	460d      	mov	r5, r1
 80149e6:	468a      	mov	sl, r1
 80149e8:	f806 3b01 	strb.w	r3, [r6], #1
 80149ec:	e7de      	b.n	80149ac <_scanf_float+0x15c>
 80149ee:	6822      	ldr	r2, [r4, #0]
 80149f0:	0610      	lsls	r0, r2, #24
 80149f2:	f57f af60 	bpl.w	80148b6 <_scanf_float+0x66>
 80149f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80149fa:	6022      	str	r2, [r4, #0]
 80149fc:	e7f4      	b.n	80149e8 <_scanf_float+0x198>
 80149fe:	f1ba 0f00 	cmp.w	sl, #0
 8014a02:	d10c      	bne.n	8014a1e <_scanf_float+0x1ce>
 8014a04:	b977      	cbnz	r7, 8014a24 <_scanf_float+0x1d4>
 8014a06:	6822      	ldr	r2, [r4, #0]
 8014a08:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014a0c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014a10:	d108      	bne.n	8014a24 <_scanf_float+0x1d4>
 8014a12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014a16:	6022      	str	r2, [r4, #0]
 8014a18:	f04f 0a01 	mov.w	sl, #1
 8014a1c:	e7e4      	b.n	80149e8 <_scanf_float+0x198>
 8014a1e:	f1ba 0f02 	cmp.w	sl, #2
 8014a22:	d050      	beq.n	8014ac6 <_scanf_float+0x276>
 8014a24:	2d01      	cmp	r5, #1
 8014a26:	d002      	beq.n	8014a2e <_scanf_float+0x1de>
 8014a28:	2d04      	cmp	r5, #4
 8014a2a:	f47f af44 	bne.w	80148b6 <_scanf_float+0x66>
 8014a2e:	3501      	adds	r5, #1
 8014a30:	b2ed      	uxtb	r5, r5
 8014a32:	e7d9      	b.n	80149e8 <_scanf_float+0x198>
 8014a34:	f1ba 0f01 	cmp.w	sl, #1
 8014a38:	f47f af3d 	bne.w	80148b6 <_scanf_float+0x66>
 8014a3c:	f04f 0a02 	mov.w	sl, #2
 8014a40:	e7d2      	b.n	80149e8 <_scanf_float+0x198>
 8014a42:	b975      	cbnz	r5, 8014a62 <_scanf_float+0x212>
 8014a44:	2f00      	cmp	r7, #0
 8014a46:	f47f af37 	bne.w	80148b8 <_scanf_float+0x68>
 8014a4a:	6822      	ldr	r2, [r4, #0]
 8014a4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014a50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014a54:	f040 8103 	bne.w	8014c5e <_scanf_float+0x40e>
 8014a58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014a5c:	6022      	str	r2, [r4, #0]
 8014a5e:	2501      	movs	r5, #1
 8014a60:	e7c2      	b.n	80149e8 <_scanf_float+0x198>
 8014a62:	2d03      	cmp	r5, #3
 8014a64:	d0e3      	beq.n	8014a2e <_scanf_float+0x1de>
 8014a66:	2d05      	cmp	r5, #5
 8014a68:	e7df      	b.n	8014a2a <_scanf_float+0x1da>
 8014a6a:	2d02      	cmp	r5, #2
 8014a6c:	f47f af23 	bne.w	80148b6 <_scanf_float+0x66>
 8014a70:	2503      	movs	r5, #3
 8014a72:	e7b9      	b.n	80149e8 <_scanf_float+0x198>
 8014a74:	2d06      	cmp	r5, #6
 8014a76:	f47f af1e 	bne.w	80148b6 <_scanf_float+0x66>
 8014a7a:	2507      	movs	r5, #7
 8014a7c:	e7b4      	b.n	80149e8 <_scanf_float+0x198>
 8014a7e:	6822      	ldr	r2, [r4, #0]
 8014a80:	0591      	lsls	r1, r2, #22
 8014a82:	f57f af18 	bpl.w	80148b6 <_scanf_float+0x66>
 8014a86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014a8a:	6022      	str	r2, [r4, #0]
 8014a8c:	9702      	str	r7, [sp, #8]
 8014a8e:	e7ab      	b.n	80149e8 <_scanf_float+0x198>
 8014a90:	6822      	ldr	r2, [r4, #0]
 8014a92:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014a96:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014a9a:	d005      	beq.n	8014aa8 <_scanf_float+0x258>
 8014a9c:	0550      	lsls	r0, r2, #21
 8014a9e:	f57f af0a 	bpl.w	80148b6 <_scanf_float+0x66>
 8014aa2:	2f00      	cmp	r7, #0
 8014aa4:	f000 80db 	beq.w	8014c5e <_scanf_float+0x40e>
 8014aa8:	0591      	lsls	r1, r2, #22
 8014aaa:	bf58      	it	pl
 8014aac:	9902      	ldrpl	r1, [sp, #8]
 8014aae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014ab2:	bf58      	it	pl
 8014ab4:	1a79      	subpl	r1, r7, r1
 8014ab6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014aba:	bf58      	it	pl
 8014abc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014ac0:	6022      	str	r2, [r4, #0]
 8014ac2:	2700      	movs	r7, #0
 8014ac4:	e790      	b.n	80149e8 <_scanf_float+0x198>
 8014ac6:	f04f 0a03 	mov.w	sl, #3
 8014aca:	e78d      	b.n	80149e8 <_scanf_float+0x198>
 8014acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014ad0:	4649      	mov	r1, r9
 8014ad2:	4640      	mov	r0, r8
 8014ad4:	4798      	blx	r3
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	f43f aedf 	beq.w	801489a <_scanf_float+0x4a>
 8014adc:	e6eb      	b.n	80148b6 <_scanf_float+0x66>
 8014ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014ae2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014ae6:	464a      	mov	r2, r9
 8014ae8:	4640      	mov	r0, r8
 8014aea:	4798      	blx	r3
 8014aec:	6923      	ldr	r3, [r4, #16]
 8014aee:	3b01      	subs	r3, #1
 8014af0:	6123      	str	r3, [r4, #16]
 8014af2:	e6eb      	b.n	80148cc <_scanf_float+0x7c>
 8014af4:	1e6b      	subs	r3, r5, #1
 8014af6:	2b06      	cmp	r3, #6
 8014af8:	d824      	bhi.n	8014b44 <_scanf_float+0x2f4>
 8014afa:	2d02      	cmp	r5, #2
 8014afc:	d836      	bhi.n	8014b6c <_scanf_float+0x31c>
 8014afe:	9b01      	ldr	r3, [sp, #4]
 8014b00:	429e      	cmp	r6, r3
 8014b02:	f67f aee7 	bls.w	80148d4 <_scanf_float+0x84>
 8014b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014b0e:	464a      	mov	r2, r9
 8014b10:	4640      	mov	r0, r8
 8014b12:	4798      	blx	r3
 8014b14:	6923      	ldr	r3, [r4, #16]
 8014b16:	3b01      	subs	r3, #1
 8014b18:	6123      	str	r3, [r4, #16]
 8014b1a:	e7f0      	b.n	8014afe <_scanf_float+0x2ae>
 8014b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b20:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014b24:	464a      	mov	r2, r9
 8014b26:	4640      	mov	r0, r8
 8014b28:	4798      	blx	r3
 8014b2a:	6923      	ldr	r3, [r4, #16]
 8014b2c:	3b01      	subs	r3, #1
 8014b2e:	6123      	str	r3, [r4, #16]
 8014b30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b34:	fa5f fa8a 	uxtb.w	sl, sl
 8014b38:	f1ba 0f02 	cmp.w	sl, #2
 8014b3c:	d1ee      	bne.n	8014b1c <_scanf_float+0x2cc>
 8014b3e:	3d03      	subs	r5, #3
 8014b40:	b2ed      	uxtb	r5, r5
 8014b42:	1b76      	subs	r6, r6, r5
 8014b44:	6823      	ldr	r3, [r4, #0]
 8014b46:	05da      	lsls	r2, r3, #23
 8014b48:	d530      	bpl.n	8014bac <_scanf_float+0x35c>
 8014b4a:	055b      	lsls	r3, r3, #21
 8014b4c:	d511      	bpl.n	8014b72 <_scanf_float+0x322>
 8014b4e:	9b01      	ldr	r3, [sp, #4]
 8014b50:	429e      	cmp	r6, r3
 8014b52:	f67f aebf 	bls.w	80148d4 <_scanf_float+0x84>
 8014b56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014b5e:	464a      	mov	r2, r9
 8014b60:	4640      	mov	r0, r8
 8014b62:	4798      	blx	r3
 8014b64:	6923      	ldr	r3, [r4, #16]
 8014b66:	3b01      	subs	r3, #1
 8014b68:	6123      	str	r3, [r4, #16]
 8014b6a:	e7f0      	b.n	8014b4e <_scanf_float+0x2fe>
 8014b6c:	46aa      	mov	sl, r5
 8014b6e:	46b3      	mov	fp, r6
 8014b70:	e7de      	b.n	8014b30 <_scanf_float+0x2e0>
 8014b72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014b76:	6923      	ldr	r3, [r4, #16]
 8014b78:	2965      	cmp	r1, #101	@ 0x65
 8014b7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014b7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8014b82:	6123      	str	r3, [r4, #16]
 8014b84:	d00c      	beq.n	8014ba0 <_scanf_float+0x350>
 8014b86:	2945      	cmp	r1, #69	@ 0x45
 8014b88:	d00a      	beq.n	8014ba0 <_scanf_float+0x350>
 8014b8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b8e:	464a      	mov	r2, r9
 8014b90:	4640      	mov	r0, r8
 8014b92:	4798      	blx	r3
 8014b94:	6923      	ldr	r3, [r4, #16]
 8014b96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014b9a:	3b01      	subs	r3, #1
 8014b9c:	1eb5      	subs	r5, r6, #2
 8014b9e:	6123      	str	r3, [r4, #16]
 8014ba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014ba4:	464a      	mov	r2, r9
 8014ba6:	4640      	mov	r0, r8
 8014ba8:	4798      	blx	r3
 8014baa:	462e      	mov	r6, r5
 8014bac:	6822      	ldr	r2, [r4, #0]
 8014bae:	f012 0210 	ands.w	r2, r2, #16
 8014bb2:	d001      	beq.n	8014bb8 <_scanf_float+0x368>
 8014bb4:	2000      	movs	r0, #0
 8014bb6:	e68e      	b.n	80148d6 <_scanf_float+0x86>
 8014bb8:	7032      	strb	r2, [r6, #0]
 8014bba:	6823      	ldr	r3, [r4, #0]
 8014bbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014bc4:	d125      	bne.n	8014c12 <_scanf_float+0x3c2>
 8014bc6:	9b02      	ldr	r3, [sp, #8]
 8014bc8:	429f      	cmp	r7, r3
 8014bca:	d00a      	beq.n	8014be2 <_scanf_float+0x392>
 8014bcc:	1bda      	subs	r2, r3, r7
 8014bce:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014bd2:	429e      	cmp	r6, r3
 8014bd4:	bf28      	it	cs
 8014bd6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014bda:	4922      	ldr	r1, [pc, #136]	@ (8014c64 <_scanf_float+0x414>)
 8014bdc:	4630      	mov	r0, r6
 8014bde:	f000 f93d 	bl	8014e5c <siprintf>
 8014be2:	9901      	ldr	r1, [sp, #4]
 8014be4:	2200      	movs	r2, #0
 8014be6:	4640      	mov	r0, r8
 8014be8:	f002 fc6e 	bl	80174c8 <_strtod_r>
 8014bec:	9b03      	ldr	r3, [sp, #12]
 8014bee:	6821      	ldr	r1, [r4, #0]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	f011 0f02 	tst.w	r1, #2
 8014bf6:	ec57 6b10 	vmov	r6, r7, d0
 8014bfa:	f103 0204 	add.w	r2, r3, #4
 8014bfe:	d015      	beq.n	8014c2c <_scanf_float+0x3dc>
 8014c00:	9903      	ldr	r1, [sp, #12]
 8014c02:	600a      	str	r2, [r1, #0]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	e9c3 6700 	strd	r6, r7, [r3]
 8014c0a:	68e3      	ldr	r3, [r4, #12]
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	60e3      	str	r3, [r4, #12]
 8014c10:	e7d0      	b.n	8014bb4 <_scanf_float+0x364>
 8014c12:	9b04      	ldr	r3, [sp, #16]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d0e4      	beq.n	8014be2 <_scanf_float+0x392>
 8014c18:	9905      	ldr	r1, [sp, #20]
 8014c1a:	230a      	movs	r3, #10
 8014c1c:	3101      	adds	r1, #1
 8014c1e:	4640      	mov	r0, r8
 8014c20:	f002 fcd2 	bl	80175c8 <_strtol_r>
 8014c24:	9b04      	ldr	r3, [sp, #16]
 8014c26:	9e05      	ldr	r6, [sp, #20]
 8014c28:	1ac2      	subs	r2, r0, r3
 8014c2a:	e7d0      	b.n	8014bce <_scanf_float+0x37e>
 8014c2c:	f011 0f04 	tst.w	r1, #4
 8014c30:	9903      	ldr	r1, [sp, #12]
 8014c32:	600a      	str	r2, [r1, #0]
 8014c34:	d1e6      	bne.n	8014c04 <_scanf_float+0x3b4>
 8014c36:	681d      	ldr	r5, [r3, #0]
 8014c38:	4632      	mov	r2, r6
 8014c3a:	463b      	mov	r3, r7
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	4639      	mov	r1, r7
 8014c40:	f7f3 ffa4 	bl	8008b8c <__aeabi_dcmpun>
 8014c44:	b128      	cbz	r0, 8014c52 <_scanf_float+0x402>
 8014c46:	4808      	ldr	r0, [pc, #32]	@ (8014c68 <_scanf_float+0x418>)
 8014c48:	f000 fae8 	bl	801521c <nanf>
 8014c4c:	ed85 0a00 	vstr	s0, [r5]
 8014c50:	e7db      	b.n	8014c0a <_scanf_float+0x3ba>
 8014c52:	4630      	mov	r0, r6
 8014c54:	4639      	mov	r1, r7
 8014c56:	f7f3 fff7 	bl	8008c48 <__aeabi_d2f>
 8014c5a:	6028      	str	r0, [r5, #0]
 8014c5c:	e7d5      	b.n	8014c0a <_scanf_float+0x3ba>
 8014c5e:	2700      	movs	r7, #0
 8014c60:	e62e      	b.n	80148c0 <_scanf_float+0x70>
 8014c62:	bf00      	nop
 8014c64:	0801915e 	.word	0x0801915e
 8014c68:	080192ba 	.word	0x080192ba

08014c6c <std>:
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	b510      	push	{r4, lr}
 8014c70:	4604      	mov	r4, r0
 8014c72:	e9c0 3300 	strd	r3, r3, [r0]
 8014c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c7a:	6083      	str	r3, [r0, #8]
 8014c7c:	8181      	strh	r1, [r0, #12]
 8014c7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014c80:	81c2      	strh	r2, [r0, #14]
 8014c82:	6183      	str	r3, [r0, #24]
 8014c84:	4619      	mov	r1, r3
 8014c86:	2208      	movs	r2, #8
 8014c88:	305c      	adds	r0, #92	@ 0x5c
 8014c8a:	f000 fa0f 	bl	80150ac <memset>
 8014c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8014cc4 <std+0x58>)
 8014c90:	6263      	str	r3, [r4, #36]	@ 0x24
 8014c92:	4b0d      	ldr	r3, [pc, #52]	@ (8014cc8 <std+0x5c>)
 8014c94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014c96:	4b0d      	ldr	r3, [pc, #52]	@ (8014ccc <std+0x60>)
 8014c98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8014cd0 <std+0x64>)
 8014c9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8014c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8014cd4 <std+0x68>)
 8014ca0:	6224      	str	r4, [r4, #32]
 8014ca2:	429c      	cmp	r4, r3
 8014ca4:	d006      	beq.n	8014cb4 <std+0x48>
 8014ca6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014caa:	4294      	cmp	r4, r2
 8014cac:	d002      	beq.n	8014cb4 <std+0x48>
 8014cae:	33d0      	adds	r3, #208	@ 0xd0
 8014cb0:	429c      	cmp	r4, r3
 8014cb2:	d105      	bne.n	8014cc0 <std+0x54>
 8014cb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cbc:	f000 baa2 	b.w	8015204 <__retarget_lock_init_recursive>
 8014cc0:	bd10      	pop	{r4, pc}
 8014cc2:	bf00      	nop
 8014cc4:	08014ef9 	.word	0x08014ef9
 8014cc8:	08014f1f 	.word	0x08014f1f
 8014ccc:	08014f57 	.word	0x08014f57
 8014cd0:	08014f7b 	.word	0x08014f7b
 8014cd4:	200008fc 	.word	0x200008fc

08014cd8 <stdio_exit_handler>:
 8014cd8:	4a02      	ldr	r2, [pc, #8]	@ (8014ce4 <stdio_exit_handler+0xc>)
 8014cda:	4903      	ldr	r1, [pc, #12]	@ (8014ce8 <stdio_exit_handler+0x10>)
 8014cdc:	4803      	ldr	r0, [pc, #12]	@ (8014cec <stdio_exit_handler+0x14>)
 8014cde:	f000 b869 	b.w	8014db4 <_fwalk_sglue>
 8014ce2:	bf00      	nop
 8014ce4:	200002f8 	.word	0x200002f8
 8014ce8:	08017fc1 	.word	0x08017fc1
 8014cec:	20000308 	.word	0x20000308

08014cf0 <cleanup_stdio>:
 8014cf0:	6841      	ldr	r1, [r0, #4]
 8014cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8014d24 <cleanup_stdio+0x34>)
 8014cf4:	4299      	cmp	r1, r3
 8014cf6:	b510      	push	{r4, lr}
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	d001      	beq.n	8014d00 <cleanup_stdio+0x10>
 8014cfc:	f003 f960 	bl	8017fc0 <_fflush_r>
 8014d00:	68a1      	ldr	r1, [r4, #8]
 8014d02:	4b09      	ldr	r3, [pc, #36]	@ (8014d28 <cleanup_stdio+0x38>)
 8014d04:	4299      	cmp	r1, r3
 8014d06:	d002      	beq.n	8014d0e <cleanup_stdio+0x1e>
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f003 f959 	bl	8017fc0 <_fflush_r>
 8014d0e:	68e1      	ldr	r1, [r4, #12]
 8014d10:	4b06      	ldr	r3, [pc, #24]	@ (8014d2c <cleanup_stdio+0x3c>)
 8014d12:	4299      	cmp	r1, r3
 8014d14:	d004      	beq.n	8014d20 <cleanup_stdio+0x30>
 8014d16:	4620      	mov	r0, r4
 8014d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d1c:	f003 b950 	b.w	8017fc0 <_fflush_r>
 8014d20:	bd10      	pop	{r4, pc}
 8014d22:	bf00      	nop
 8014d24:	200008fc 	.word	0x200008fc
 8014d28:	20000964 	.word	0x20000964
 8014d2c:	200009cc 	.word	0x200009cc

08014d30 <global_stdio_init.part.0>:
 8014d30:	b510      	push	{r4, lr}
 8014d32:	4b0b      	ldr	r3, [pc, #44]	@ (8014d60 <global_stdio_init.part.0+0x30>)
 8014d34:	4c0b      	ldr	r4, [pc, #44]	@ (8014d64 <global_stdio_init.part.0+0x34>)
 8014d36:	4a0c      	ldr	r2, [pc, #48]	@ (8014d68 <global_stdio_init.part.0+0x38>)
 8014d38:	601a      	str	r2, [r3, #0]
 8014d3a:	4620      	mov	r0, r4
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	2104      	movs	r1, #4
 8014d40:	f7ff ff94 	bl	8014c6c <std>
 8014d44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014d48:	2201      	movs	r2, #1
 8014d4a:	2109      	movs	r1, #9
 8014d4c:	f7ff ff8e 	bl	8014c6c <std>
 8014d50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014d54:	2202      	movs	r2, #2
 8014d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d5a:	2112      	movs	r1, #18
 8014d5c:	f7ff bf86 	b.w	8014c6c <std>
 8014d60:	20000a34 	.word	0x20000a34
 8014d64:	200008fc 	.word	0x200008fc
 8014d68:	08014cd9 	.word	0x08014cd9

08014d6c <__sfp_lock_acquire>:
 8014d6c:	4801      	ldr	r0, [pc, #4]	@ (8014d74 <__sfp_lock_acquire+0x8>)
 8014d6e:	f000 ba4a 	b.w	8015206 <__retarget_lock_acquire_recursive>
 8014d72:	bf00      	nop
 8014d74:	20000a3d 	.word	0x20000a3d

08014d78 <__sfp_lock_release>:
 8014d78:	4801      	ldr	r0, [pc, #4]	@ (8014d80 <__sfp_lock_release+0x8>)
 8014d7a:	f000 ba45 	b.w	8015208 <__retarget_lock_release_recursive>
 8014d7e:	bf00      	nop
 8014d80:	20000a3d 	.word	0x20000a3d

08014d84 <__sinit>:
 8014d84:	b510      	push	{r4, lr}
 8014d86:	4604      	mov	r4, r0
 8014d88:	f7ff fff0 	bl	8014d6c <__sfp_lock_acquire>
 8014d8c:	6a23      	ldr	r3, [r4, #32]
 8014d8e:	b11b      	cbz	r3, 8014d98 <__sinit+0x14>
 8014d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d94:	f7ff bff0 	b.w	8014d78 <__sfp_lock_release>
 8014d98:	4b04      	ldr	r3, [pc, #16]	@ (8014dac <__sinit+0x28>)
 8014d9a:	6223      	str	r3, [r4, #32]
 8014d9c:	4b04      	ldr	r3, [pc, #16]	@ (8014db0 <__sinit+0x2c>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d1f5      	bne.n	8014d90 <__sinit+0xc>
 8014da4:	f7ff ffc4 	bl	8014d30 <global_stdio_init.part.0>
 8014da8:	e7f2      	b.n	8014d90 <__sinit+0xc>
 8014daa:	bf00      	nop
 8014dac:	08014cf1 	.word	0x08014cf1
 8014db0:	20000a34 	.word	0x20000a34

08014db4 <_fwalk_sglue>:
 8014db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014db8:	4607      	mov	r7, r0
 8014dba:	4688      	mov	r8, r1
 8014dbc:	4614      	mov	r4, r2
 8014dbe:	2600      	movs	r6, #0
 8014dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8014dc8:	d505      	bpl.n	8014dd6 <_fwalk_sglue+0x22>
 8014dca:	6824      	ldr	r4, [r4, #0]
 8014dcc:	2c00      	cmp	r4, #0
 8014dce:	d1f7      	bne.n	8014dc0 <_fwalk_sglue+0xc>
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dd6:	89ab      	ldrh	r3, [r5, #12]
 8014dd8:	2b01      	cmp	r3, #1
 8014dda:	d907      	bls.n	8014dec <_fwalk_sglue+0x38>
 8014ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014de0:	3301      	adds	r3, #1
 8014de2:	d003      	beq.n	8014dec <_fwalk_sglue+0x38>
 8014de4:	4629      	mov	r1, r5
 8014de6:	4638      	mov	r0, r7
 8014de8:	47c0      	blx	r8
 8014dea:	4306      	orrs	r6, r0
 8014dec:	3568      	adds	r5, #104	@ 0x68
 8014dee:	e7e9      	b.n	8014dc4 <_fwalk_sglue+0x10>

08014df0 <sniprintf>:
 8014df0:	b40c      	push	{r2, r3}
 8014df2:	b530      	push	{r4, r5, lr}
 8014df4:	4b18      	ldr	r3, [pc, #96]	@ (8014e58 <sniprintf+0x68>)
 8014df6:	1e0c      	subs	r4, r1, #0
 8014df8:	681d      	ldr	r5, [r3, #0]
 8014dfa:	b09d      	sub	sp, #116	@ 0x74
 8014dfc:	da08      	bge.n	8014e10 <sniprintf+0x20>
 8014dfe:	238b      	movs	r3, #139	@ 0x8b
 8014e00:	602b      	str	r3, [r5, #0]
 8014e02:	f04f 30ff 	mov.w	r0, #4294967295
 8014e06:	b01d      	add	sp, #116	@ 0x74
 8014e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e0c:	b002      	add	sp, #8
 8014e0e:	4770      	bx	lr
 8014e10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014e14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e18:	f04f 0300 	mov.w	r3, #0
 8014e1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014e1e:	bf14      	ite	ne
 8014e20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014e24:	4623      	moveq	r3, r4
 8014e26:	9304      	str	r3, [sp, #16]
 8014e28:	9307      	str	r3, [sp, #28]
 8014e2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e2e:	9002      	str	r0, [sp, #8]
 8014e30:	9006      	str	r0, [sp, #24]
 8014e32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014e36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014e38:	ab21      	add	r3, sp, #132	@ 0x84
 8014e3a:	a902      	add	r1, sp, #8
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	9301      	str	r3, [sp, #4]
 8014e40:	f002 fc20 	bl	8017684 <_svfiprintf_r>
 8014e44:	1c43      	adds	r3, r0, #1
 8014e46:	bfbc      	itt	lt
 8014e48:	238b      	movlt	r3, #139	@ 0x8b
 8014e4a:	602b      	strlt	r3, [r5, #0]
 8014e4c:	2c00      	cmp	r4, #0
 8014e4e:	d0da      	beq.n	8014e06 <sniprintf+0x16>
 8014e50:	9b02      	ldr	r3, [sp, #8]
 8014e52:	2200      	movs	r2, #0
 8014e54:	701a      	strb	r2, [r3, #0]
 8014e56:	e7d6      	b.n	8014e06 <sniprintf+0x16>
 8014e58:	20000304 	.word	0x20000304

08014e5c <siprintf>:
 8014e5c:	b40e      	push	{r1, r2, r3}
 8014e5e:	b510      	push	{r4, lr}
 8014e60:	b09d      	sub	sp, #116	@ 0x74
 8014e62:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014e64:	9002      	str	r0, [sp, #8]
 8014e66:	9006      	str	r0, [sp, #24]
 8014e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014e6c:	480a      	ldr	r0, [pc, #40]	@ (8014e98 <siprintf+0x3c>)
 8014e6e:	9107      	str	r1, [sp, #28]
 8014e70:	9104      	str	r1, [sp, #16]
 8014e72:	490a      	ldr	r1, [pc, #40]	@ (8014e9c <siprintf+0x40>)
 8014e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e78:	9105      	str	r1, [sp, #20]
 8014e7a:	2400      	movs	r4, #0
 8014e7c:	a902      	add	r1, sp, #8
 8014e7e:	6800      	ldr	r0, [r0, #0]
 8014e80:	9301      	str	r3, [sp, #4]
 8014e82:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014e84:	f002 fbfe 	bl	8017684 <_svfiprintf_r>
 8014e88:	9b02      	ldr	r3, [sp, #8]
 8014e8a:	701c      	strb	r4, [r3, #0]
 8014e8c:	b01d      	add	sp, #116	@ 0x74
 8014e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e92:	b003      	add	sp, #12
 8014e94:	4770      	bx	lr
 8014e96:	bf00      	nop
 8014e98:	20000304 	.word	0x20000304
 8014e9c:	ffff0208 	.word	0xffff0208

08014ea0 <siscanf>:
 8014ea0:	b40e      	push	{r1, r2, r3}
 8014ea2:	b570      	push	{r4, r5, r6, lr}
 8014ea4:	b09d      	sub	sp, #116	@ 0x74
 8014ea6:	ac21      	add	r4, sp, #132	@ 0x84
 8014ea8:	2500      	movs	r5, #0
 8014eaa:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8014eae:	f854 6b04 	ldr.w	r6, [r4], #4
 8014eb2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014eb6:	951b      	str	r5, [sp, #108]	@ 0x6c
 8014eb8:	9002      	str	r0, [sp, #8]
 8014eba:	9006      	str	r0, [sp, #24]
 8014ebc:	f7f3 fa08 	bl	80082d0 <strlen>
 8014ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8014ef0 <siscanf+0x50>)
 8014ec2:	9003      	str	r0, [sp, #12]
 8014ec4:	9007      	str	r0, [sp, #28]
 8014ec6:	480b      	ldr	r0, [pc, #44]	@ (8014ef4 <siscanf+0x54>)
 8014ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014eca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014ece:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ed2:	4632      	mov	r2, r6
 8014ed4:	4623      	mov	r3, r4
 8014ed6:	a902      	add	r1, sp, #8
 8014ed8:	6800      	ldr	r0, [r0, #0]
 8014eda:	950f      	str	r5, [sp, #60]	@ 0x3c
 8014edc:	9514      	str	r5, [sp, #80]	@ 0x50
 8014ede:	9401      	str	r4, [sp, #4]
 8014ee0:	f002 fd26 	bl	8017930 <__ssvfiscanf_r>
 8014ee4:	b01d      	add	sp, #116	@ 0x74
 8014ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eea:	b003      	add	sp, #12
 8014eec:	4770      	bx	lr
 8014eee:	bf00      	nop
 8014ef0:	08014f1b 	.word	0x08014f1b
 8014ef4:	20000304 	.word	0x20000304

08014ef8 <__sread>:
 8014ef8:	b510      	push	{r4, lr}
 8014efa:	460c      	mov	r4, r1
 8014efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f00:	f000 f922 	bl	8015148 <_read_r>
 8014f04:	2800      	cmp	r0, #0
 8014f06:	bfab      	itete	ge
 8014f08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8014f0c:	181b      	addge	r3, r3, r0
 8014f0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014f12:	bfac      	ite	ge
 8014f14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014f16:	81a3      	strhlt	r3, [r4, #12]
 8014f18:	bd10      	pop	{r4, pc}

08014f1a <__seofread>:
 8014f1a:	2000      	movs	r0, #0
 8014f1c:	4770      	bx	lr

08014f1e <__swrite>:
 8014f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f22:	461f      	mov	r7, r3
 8014f24:	898b      	ldrh	r3, [r1, #12]
 8014f26:	05db      	lsls	r3, r3, #23
 8014f28:	4605      	mov	r5, r0
 8014f2a:	460c      	mov	r4, r1
 8014f2c:	4616      	mov	r6, r2
 8014f2e:	d505      	bpl.n	8014f3c <__swrite+0x1e>
 8014f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f34:	2302      	movs	r3, #2
 8014f36:	2200      	movs	r2, #0
 8014f38:	f000 f8f4 	bl	8015124 <_lseek_r>
 8014f3c:	89a3      	ldrh	r3, [r4, #12]
 8014f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014f46:	81a3      	strh	r3, [r4, #12]
 8014f48:	4632      	mov	r2, r6
 8014f4a:	463b      	mov	r3, r7
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f52:	f000 b91b 	b.w	801518c <_write_r>

08014f56 <__sseek>:
 8014f56:	b510      	push	{r4, lr}
 8014f58:	460c      	mov	r4, r1
 8014f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f5e:	f000 f8e1 	bl	8015124 <_lseek_r>
 8014f62:	1c43      	adds	r3, r0, #1
 8014f64:	89a3      	ldrh	r3, [r4, #12]
 8014f66:	bf15      	itete	ne
 8014f68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014f6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014f6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014f72:	81a3      	strheq	r3, [r4, #12]
 8014f74:	bf18      	it	ne
 8014f76:	81a3      	strhne	r3, [r4, #12]
 8014f78:	bd10      	pop	{r4, pc}

08014f7a <__sclose>:
 8014f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f7e:	f000 b8c1 	b.w	8015104 <_close_r>

08014f82 <__swbuf_r>:
 8014f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f84:	460e      	mov	r6, r1
 8014f86:	4614      	mov	r4, r2
 8014f88:	4605      	mov	r5, r0
 8014f8a:	b118      	cbz	r0, 8014f94 <__swbuf_r+0x12>
 8014f8c:	6a03      	ldr	r3, [r0, #32]
 8014f8e:	b90b      	cbnz	r3, 8014f94 <__swbuf_r+0x12>
 8014f90:	f7ff fef8 	bl	8014d84 <__sinit>
 8014f94:	69a3      	ldr	r3, [r4, #24]
 8014f96:	60a3      	str	r3, [r4, #8]
 8014f98:	89a3      	ldrh	r3, [r4, #12]
 8014f9a:	071a      	lsls	r2, r3, #28
 8014f9c:	d501      	bpl.n	8014fa2 <__swbuf_r+0x20>
 8014f9e:	6923      	ldr	r3, [r4, #16]
 8014fa0:	b943      	cbnz	r3, 8014fb4 <__swbuf_r+0x32>
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	4628      	mov	r0, r5
 8014fa6:	f000 f82b 	bl	8015000 <__swsetup_r>
 8014faa:	b118      	cbz	r0, 8014fb4 <__swbuf_r+0x32>
 8014fac:	f04f 37ff 	mov.w	r7, #4294967295
 8014fb0:	4638      	mov	r0, r7
 8014fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fb4:	6823      	ldr	r3, [r4, #0]
 8014fb6:	6922      	ldr	r2, [r4, #16]
 8014fb8:	1a98      	subs	r0, r3, r2
 8014fba:	6963      	ldr	r3, [r4, #20]
 8014fbc:	b2f6      	uxtb	r6, r6
 8014fbe:	4283      	cmp	r3, r0
 8014fc0:	4637      	mov	r7, r6
 8014fc2:	dc05      	bgt.n	8014fd0 <__swbuf_r+0x4e>
 8014fc4:	4621      	mov	r1, r4
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	f002 fffa 	bl	8017fc0 <_fflush_r>
 8014fcc:	2800      	cmp	r0, #0
 8014fce:	d1ed      	bne.n	8014fac <__swbuf_r+0x2a>
 8014fd0:	68a3      	ldr	r3, [r4, #8]
 8014fd2:	3b01      	subs	r3, #1
 8014fd4:	60a3      	str	r3, [r4, #8]
 8014fd6:	6823      	ldr	r3, [r4, #0]
 8014fd8:	1c5a      	adds	r2, r3, #1
 8014fda:	6022      	str	r2, [r4, #0]
 8014fdc:	701e      	strb	r6, [r3, #0]
 8014fde:	6962      	ldr	r2, [r4, #20]
 8014fe0:	1c43      	adds	r3, r0, #1
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d004      	beq.n	8014ff0 <__swbuf_r+0x6e>
 8014fe6:	89a3      	ldrh	r3, [r4, #12]
 8014fe8:	07db      	lsls	r3, r3, #31
 8014fea:	d5e1      	bpl.n	8014fb0 <__swbuf_r+0x2e>
 8014fec:	2e0a      	cmp	r6, #10
 8014fee:	d1df      	bne.n	8014fb0 <__swbuf_r+0x2e>
 8014ff0:	4621      	mov	r1, r4
 8014ff2:	4628      	mov	r0, r5
 8014ff4:	f002 ffe4 	bl	8017fc0 <_fflush_r>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d0d9      	beq.n	8014fb0 <__swbuf_r+0x2e>
 8014ffc:	e7d6      	b.n	8014fac <__swbuf_r+0x2a>
	...

08015000 <__swsetup_r>:
 8015000:	b538      	push	{r3, r4, r5, lr}
 8015002:	4b29      	ldr	r3, [pc, #164]	@ (80150a8 <__swsetup_r+0xa8>)
 8015004:	4605      	mov	r5, r0
 8015006:	6818      	ldr	r0, [r3, #0]
 8015008:	460c      	mov	r4, r1
 801500a:	b118      	cbz	r0, 8015014 <__swsetup_r+0x14>
 801500c:	6a03      	ldr	r3, [r0, #32]
 801500e:	b90b      	cbnz	r3, 8015014 <__swsetup_r+0x14>
 8015010:	f7ff feb8 	bl	8014d84 <__sinit>
 8015014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015018:	0719      	lsls	r1, r3, #28
 801501a:	d422      	bmi.n	8015062 <__swsetup_r+0x62>
 801501c:	06da      	lsls	r2, r3, #27
 801501e:	d407      	bmi.n	8015030 <__swsetup_r+0x30>
 8015020:	2209      	movs	r2, #9
 8015022:	602a      	str	r2, [r5, #0]
 8015024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015028:	81a3      	strh	r3, [r4, #12]
 801502a:	f04f 30ff 	mov.w	r0, #4294967295
 801502e:	e033      	b.n	8015098 <__swsetup_r+0x98>
 8015030:	0758      	lsls	r0, r3, #29
 8015032:	d512      	bpl.n	801505a <__swsetup_r+0x5a>
 8015034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015036:	b141      	cbz	r1, 801504a <__swsetup_r+0x4a>
 8015038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801503c:	4299      	cmp	r1, r3
 801503e:	d002      	beq.n	8015046 <__swsetup_r+0x46>
 8015040:	4628      	mov	r0, r5
 8015042:	f000 ff49 	bl	8015ed8 <_free_r>
 8015046:	2300      	movs	r3, #0
 8015048:	6363      	str	r3, [r4, #52]	@ 0x34
 801504a:	89a3      	ldrh	r3, [r4, #12]
 801504c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015050:	81a3      	strh	r3, [r4, #12]
 8015052:	2300      	movs	r3, #0
 8015054:	6063      	str	r3, [r4, #4]
 8015056:	6923      	ldr	r3, [r4, #16]
 8015058:	6023      	str	r3, [r4, #0]
 801505a:	89a3      	ldrh	r3, [r4, #12]
 801505c:	f043 0308 	orr.w	r3, r3, #8
 8015060:	81a3      	strh	r3, [r4, #12]
 8015062:	6923      	ldr	r3, [r4, #16]
 8015064:	b94b      	cbnz	r3, 801507a <__swsetup_r+0x7a>
 8015066:	89a3      	ldrh	r3, [r4, #12]
 8015068:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801506c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015070:	d003      	beq.n	801507a <__swsetup_r+0x7a>
 8015072:	4621      	mov	r1, r4
 8015074:	4628      	mov	r0, r5
 8015076:	f002 fff1 	bl	801805c <__smakebuf_r>
 801507a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801507e:	f013 0201 	ands.w	r2, r3, #1
 8015082:	d00a      	beq.n	801509a <__swsetup_r+0x9a>
 8015084:	2200      	movs	r2, #0
 8015086:	60a2      	str	r2, [r4, #8]
 8015088:	6962      	ldr	r2, [r4, #20]
 801508a:	4252      	negs	r2, r2
 801508c:	61a2      	str	r2, [r4, #24]
 801508e:	6922      	ldr	r2, [r4, #16]
 8015090:	b942      	cbnz	r2, 80150a4 <__swsetup_r+0xa4>
 8015092:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015096:	d1c5      	bne.n	8015024 <__swsetup_r+0x24>
 8015098:	bd38      	pop	{r3, r4, r5, pc}
 801509a:	0799      	lsls	r1, r3, #30
 801509c:	bf58      	it	pl
 801509e:	6962      	ldrpl	r2, [r4, #20]
 80150a0:	60a2      	str	r2, [r4, #8]
 80150a2:	e7f4      	b.n	801508e <__swsetup_r+0x8e>
 80150a4:	2000      	movs	r0, #0
 80150a6:	e7f7      	b.n	8015098 <__swsetup_r+0x98>
 80150a8:	20000304 	.word	0x20000304

080150ac <memset>:
 80150ac:	4402      	add	r2, r0
 80150ae:	4603      	mov	r3, r0
 80150b0:	4293      	cmp	r3, r2
 80150b2:	d100      	bne.n	80150b6 <memset+0xa>
 80150b4:	4770      	bx	lr
 80150b6:	f803 1b01 	strb.w	r1, [r3], #1
 80150ba:	e7f9      	b.n	80150b0 <memset+0x4>

080150bc <strchr>:
 80150bc:	b2c9      	uxtb	r1, r1
 80150be:	4603      	mov	r3, r0
 80150c0:	4618      	mov	r0, r3
 80150c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150c6:	b112      	cbz	r2, 80150ce <strchr+0x12>
 80150c8:	428a      	cmp	r2, r1
 80150ca:	d1f9      	bne.n	80150c0 <strchr+0x4>
 80150cc:	4770      	bx	lr
 80150ce:	2900      	cmp	r1, #0
 80150d0:	bf18      	it	ne
 80150d2:	2000      	movne	r0, #0
 80150d4:	4770      	bx	lr

080150d6 <strncpy>:
 80150d6:	b510      	push	{r4, lr}
 80150d8:	3901      	subs	r1, #1
 80150da:	4603      	mov	r3, r0
 80150dc:	b132      	cbz	r2, 80150ec <strncpy+0x16>
 80150de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80150e2:	f803 4b01 	strb.w	r4, [r3], #1
 80150e6:	3a01      	subs	r2, #1
 80150e8:	2c00      	cmp	r4, #0
 80150ea:	d1f7      	bne.n	80150dc <strncpy+0x6>
 80150ec:	441a      	add	r2, r3
 80150ee:	2100      	movs	r1, #0
 80150f0:	4293      	cmp	r3, r2
 80150f2:	d100      	bne.n	80150f6 <strncpy+0x20>
 80150f4:	bd10      	pop	{r4, pc}
 80150f6:	f803 1b01 	strb.w	r1, [r3], #1
 80150fa:	e7f9      	b.n	80150f0 <strncpy+0x1a>

080150fc <_localeconv_r>:
 80150fc:	4800      	ldr	r0, [pc, #0]	@ (8015100 <_localeconv_r+0x4>)
 80150fe:	4770      	bx	lr
 8015100:	20000444 	.word	0x20000444

08015104 <_close_r>:
 8015104:	b538      	push	{r3, r4, r5, lr}
 8015106:	4d06      	ldr	r5, [pc, #24]	@ (8015120 <_close_r+0x1c>)
 8015108:	2300      	movs	r3, #0
 801510a:	4604      	mov	r4, r0
 801510c:	4608      	mov	r0, r1
 801510e:	602b      	str	r3, [r5, #0]
 8015110:	f7f8 fdf2 	bl	800dcf8 <_close>
 8015114:	1c43      	adds	r3, r0, #1
 8015116:	d102      	bne.n	801511e <_close_r+0x1a>
 8015118:	682b      	ldr	r3, [r5, #0]
 801511a:	b103      	cbz	r3, 801511e <_close_r+0x1a>
 801511c:	6023      	str	r3, [r4, #0]
 801511e:	bd38      	pop	{r3, r4, r5, pc}
 8015120:	20000a38 	.word	0x20000a38

08015124 <_lseek_r>:
 8015124:	b538      	push	{r3, r4, r5, lr}
 8015126:	4d07      	ldr	r5, [pc, #28]	@ (8015144 <_lseek_r+0x20>)
 8015128:	4604      	mov	r4, r0
 801512a:	4608      	mov	r0, r1
 801512c:	4611      	mov	r1, r2
 801512e:	2200      	movs	r2, #0
 8015130:	602a      	str	r2, [r5, #0]
 8015132:	461a      	mov	r2, r3
 8015134:	f7f8 fe07 	bl	800dd46 <_lseek>
 8015138:	1c43      	adds	r3, r0, #1
 801513a:	d102      	bne.n	8015142 <_lseek_r+0x1e>
 801513c:	682b      	ldr	r3, [r5, #0]
 801513e:	b103      	cbz	r3, 8015142 <_lseek_r+0x1e>
 8015140:	6023      	str	r3, [r4, #0]
 8015142:	bd38      	pop	{r3, r4, r5, pc}
 8015144:	20000a38 	.word	0x20000a38

08015148 <_read_r>:
 8015148:	b538      	push	{r3, r4, r5, lr}
 801514a:	4d07      	ldr	r5, [pc, #28]	@ (8015168 <_read_r+0x20>)
 801514c:	4604      	mov	r4, r0
 801514e:	4608      	mov	r0, r1
 8015150:	4611      	mov	r1, r2
 8015152:	2200      	movs	r2, #0
 8015154:	602a      	str	r2, [r5, #0]
 8015156:	461a      	mov	r2, r3
 8015158:	f7f8 fd95 	bl	800dc86 <_read>
 801515c:	1c43      	adds	r3, r0, #1
 801515e:	d102      	bne.n	8015166 <_read_r+0x1e>
 8015160:	682b      	ldr	r3, [r5, #0]
 8015162:	b103      	cbz	r3, 8015166 <_read_r+0x1e>
 8015164:	6023      	str	r3, [r4, #0]
 8015166:	bd38      	pop	{r3, r4, r5, pc}
 8015168:	20000a38 	.word	0x20000a38

0801516c <_sbrk_r>:
 801516c:	b538      	push	{r3, r4, r5, lr}
 801516e:	4d06      	ldr	r5, [pc, #24]	@ (8015188 <_sbrk_r+0x1c>)
 8015170:	2300      	movs	r3, #0
 8015172:	4604      	mov	r4, r0
 8015174:	4608      	mov	r0, r1
 8015176:	602b      	str	r3, [r5, #0]
 8015178:	f7f8 fdf2 	bl	800dd60 <_sbrk>
 801517c:	1c43      	adds	r3, r0, #1
 801517e:	d102      	bne.n	8015186 <_sbrk_r+0x1a>
 8015180:	682b      	ldr	r3, [r5, #0]
 8015182:	b103      	cbz	r3, 8015186 <_sbrk_r+0x1a>
 8015184:	6023      	str	r3, [r4, #0]
 8015186:	bd38      	pop	{r3, r4, r5, pc}
 8015188:	20000a38 	.word	0x20000a38

0801518c <_write_r>:
 801518c:	b538      	push	{r3, r4, r5, lr}
 801518e:	4d07      	ldr	r5, [pc, #28]	@ (80151ac <_write_r+0x20>)
 8015190:	4604      	mov	r4, r0
 8015192:	4608      	mov	r0, r1
 8015194:	4611      	mov	r1, r2
 8015196:	2200      	movs	r2, #0
 8015198:	602a      	str	r2, [r5, #0]
 801519a:	461a      	mov	r2, r3
 801519c:	f7f8 fd90 	bl	800dcc0 <_write>
 80151a0:	1c43      	adds	r3, r0, #1
 80151a2:	d102      	bne.n	80151aa <_write_r+0x1e>
 80151a4:	682b      	ldr	r3, [r5, #0]
 80151a6:	b103      	cbz	r3, 80151aa <_write_r+0x1e>
 80151a8:	6023      	str	r3, [r4, #0]
 80151aa:	bd38      	pop	{r3, r4, r5, pc}
 80151ac:	20000a38 	.word	0x20000a38

080151b0 <__errno>:
 80151b0:	4b01      	ldr	r3, [pc, #4]	@ (80151b8 <__errno+0x8>)
 80151b2:	6818      	ldr	r0, [r3, #0]
 80151b4:	4770      	bx	lr
 80151b6:	bf00      	nop
 80151b8:	20000304 	.word	0x20000304

080151bc <__libc_init_array>:
 80151bc:	b570      	push	{r4, r5, r6, lr}
 80151be:	4d0d      	ldr	r5, [pc, #52]	@ (80151f4 <__libc_init_array+0x38>)
 80151c0:	4c0d      	ldr	r4, [pc, #52]	@ (80151f8 <__libc_init_array+0x3c>)
 80151c2:	1b64      	subs	r4, r4, r5
 80151c4:	10a4      	asrs	r4, r4, #2
 80151c6:	2600      	movs	r6, #0
 80151c8:	42a6      	cmp	r6, r4
 80151ca:	d109      	bne.n	80151e0 <__libc_init_array+0x24>
 80151cc:	4d0b      	ldr	r5, [pc, #44]	@ (80151fc <__libc_init_array+0x40>)
 80151ce:	4c0c      	ldr	r4, [pc, #48]	@ (8015200 <__libc_init_array+0x44>)
 80151d0:	f003 fe4e 	bl	8018e70 <_init>
 80151d4:	1b64      	subs	r4, r4, r5
 80151d6:	10a4      	asrs	r4, r4, #2
 80151d8:	2600      	movs	r6, #0
 80151da:	42a6      	cmp	r6, r4
 80151dc:	d105      	bne.n	80151ea <__libc_init_array+0x2e>
 80151de:	bd70      	pop	{r4, r5, r6, pc}
 80151e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80151e4:	4798      	blx	r3
 80151e6:	3601      	adds	r6, #1
 80151e8:	e7ee      	b.n	80151c8 <__libc_init_array+0xc>
 80151ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80151ee:	4798      	blx	r3
 80151f0:	3601      	adds	r6, #1
 80151f2:	e7f2      	b.n	80151da <__libc_init_array+0x1e>
 80151f4:	08019574 	.word	0x08019574
 80151f8:	08019574 	.word	0x08019574
 80151fc:	08019574 	.word	0x08019574
 8015200:	08019578 	.word	0x08019578

08015204 <__retarget_lock_init_recursive>:
 8015204:	4770      	bx	lr

08015206 <__retarget_lock_acquire_recursive>:
 8015206:	4770      	bx	lr

08015208 <__retarget_lock_release_recursive>:
 8015208:	4770      	bx	lr

0801520a <strcpy>:
 801520a:	4603      	mov	r3, r0
 801520c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015210:	f803 2b01 	strb.w	r2, [r3], #1
 8015214:	2a00      	cmp	r2, #0
 8015216:	d1f9      	bne.n	801520c <strcpy+0x2>
 8015218:	4770      	bx	lr
	...

0801521c <nanf>:
 801521c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015224 <nanf+0x8>
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop
 8015224:	7fc00000 	.word	0x7fc00000

08015228 <quorem>:
 8015228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522c:	6903      	ldr	r3, [r0, #16]
 801522e:	690c      	ldr	r4, [r1, #16]
 8015230:	42a3      	cmp	r3, r4
 8015232:	4607      	mov	r7, r0
 8015234:	db7e      	blt.n	8015334 <quorem+0x10c>
 8015236:	3c01      	subs	r4, #1
 8015238:	f101 0814 	add.w	r8, r1, #20
 801523c:	00a3      	lsls	r3, r4, #2
 801523e:	f100 0514 	add.w	r5, r0, #20
 8015242:	9300      	str	r3, [sp, #0]
 8015244:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015248:	9301      	str	r3, [sp, #4]
 801524a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801524e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015252:	3301      	adds	r3, #1
 8015254:	429a      	cmp	r2, r3
 8015256:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801525a:	fbb2 f6f3 	udiv	r6, r2, r3
 801525e:	d32e      	bcc.n	80152be <quorem+0x96>
 8015260:	f04f 0a00 	mov.w	sl, #0
 8015264:	46c4      	mov	ip, r8
 8015266:	46ae      	mov	lr, r5
 8015268:	46d3      	mov	fp, sl
 801526a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801526e:	b298      	uxth	r0, r3
 8015270:	fb06 a000 	mla	r0, r6, r0, sl
 8015274:	0c02      	lsrs	r2, r0, #16
 8015276:	0c1b      	lsrs	r3, r3, #16
 8015278:	fb06 2303 	mla	r3, r6, r3, r2
 801527c:	f8de 2000 	ldr.w	r2, [lr]
 8015280:	b280      	uxth	r0, r0
 8015282:	b292      	uxth	r2, r2
 8015284:	1a12      	subs	r2, r2, r0
 8015286:	445a      	add	r2, fp
 8015288:	f8de 0000 	ldr.w	r0, [lr]
 801528c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015290:	b29b      	uxth	r3, r3
 8015292:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015296:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801529a:	b292      	uxth	r2, r2
 801529c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80152a0:	45e1      	cmp	r9, ip
 80152a2:	f84e 2b04 	str.w	r2, [lr], #4
 80152a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80152aa:	d2de      	bcs.n	801526a <quorem+0x42>
 80152ac:	9b00      	ldr	r3, [sp, #0]
 80152ae:	58eb      	ldr	r3, [r5, r3]
 80152b0:	b92b      	cbnz	r3, 80152be <quorem+0x96>
 80152b2:	9b01      	ldr	r3, [sp, #4]
 80152b4:	3b04      	subs	r3, #4
 80152b6:	429d      	cmp	r5, r3
 80152b8:	461a      	mov	r2, r3
 80152ba:	d32f      	bcc.n	801531c <quorem+0xf4>
 80152bc:	613c      	str	r4, [r7, #16]
 80152be:	4638      	mov	r0, r7
 80152c0:	f001 f910 	bl	80164e4 <__mcmp>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	db25      	blt.n	8015314 <quorem+0xec>
 80152c8:	4629      	mov	r1, r5
 80152ca:	2000      	movs	r0, #0
 80152cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80152d0:	f8d1 c000 	ldr.w	ip, [r1]
 80152d4:	fa1f fe82 	uxth.w	lr, r2
 80152d8:	fa1f f38c 	uxth.w	r3, ip
 80152dc:	eba3 030e 	sub.w	r3, r3, lr
 80152e0:	4403      	add	r3, r0
 80152e2:	0c12      	lsrs	r2, r2, #16
 80152e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80152e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80152f2:	45c1      	cmp	r9, r8
 80152f4:	f841 3b04 	str.w	r3, [r1], #4
 80152f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80152fc:	d2e6      	bcs.n	80152cc <quorem+0xa4>
 80152fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015306:	b922      	cbnz	r2, 8015312 <quorem+0xea>
 8015308:	3b04      	subs	r3, #4
 801530a:	429d      	cmp	r5, r3
 801530c:	461a      	mov	r2, r3
 801530e:	d30b      	bcc.n	8015328 <quorem+0x100>
 8015310:	613c      	str	r4, [r7, #16]
 8015312:	3601      	adds	r6, #1
 8015314:	4630      	mov	r0, r6
 8015316:	b003      	add	sp, #12
 8015318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801531c:	6812      	ldr	r2, [r2, #0]
 801531e:	3b04      	subs	r3, #4
 8015320:	2a00      	cmp	r2, #0
 8015322:	d1cb      	bne.n	80152bc <quorem+0x94>
 8015324:	3c01      	subs	r4, #1
 8015326:	e7c6      	b.n	80152b6 <quorem+0x8e>
 8015328:	6812      	ldr	r2, [r2, #0]
 801532a:	3b04      	subs	r3, #4
 801532c:	2a00      	cmp	r2, #0
 801532e:	d1ef      	bne.n	8015310 <quorem+0xe8>
 8015330:	3c01      	subs	r4, #1
 8015332:	e7ea      	b.n	801530a <quorem+0xe2>
 8015334:	2000      	movs	r0, #0
 8015336:	e7ee      	b.n	8015316 <quorem+0xee>

08015338 <_dtoa_r>:
 8015338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801533c:	69c7      	ldr	r7, [r0, #28]
 801533e:	b097      	sub	sp, #92	@ 0x5c
 8015340:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015344:	ec55 4b10 	vmov	r4, r5, d0
 8015348:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801534a:	9107      	str	r1, [sp, #28]
 801534c:	4681      	mov	r9, r0
 801534e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015350:	9311      	str	r3, [sp, #68]	@ 0x44
 8015352:	b97f      	cbnz	r7, 8015374 <_dtoa_r+0x3c>
 8015354:	2010      	movs	r0, #16
 8015356:	f7fe fd67 	bl	8013e28 <malloc>
 801535a:	4602      	mov	r2, r0
 801535c:	f8c9 001c 	str.w	r0, [r9, #28]
 8015360:	b920      	cbnz	r0, 801536c <_dtoa_r+0x34>
 8015362:	4ba9      	ldr	r3, [pc, #676]	@ (8015608 <_dtoa_r+0x2d0>)
 8015364:	21ef      	movs	r1, #239	@ 0xef
 8015366:	48a9      	ldr	r0, [pc, #676]	@ (801560c <_dtoa_r+0x2d4>)
 8015368:	f002 ff8e 	bl	8018288 <__assert_func>
 801536c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015370:	6007      	str	r7, [r0, #0]
 8015372:	60c7      	str	r7, [r0, #12]
 8015374:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015378:	6819      	ldr	r1, [r3, #0]
 801537a:	b159      	cbz	r1, 8015394 <_dtoa_r+0x5c>
 801537c:	685a      	ldr	r2, [r3, #4]
 801537e:	604a      	str	r2, [r1, #4]
 8015380:	2301      	movs	r3, #1
 8015382:	4093      	lsls	r3, r2
 8015384:	608b      	str	r3, [r1, #8]
 8015386:	4648      	mov	r0, r9
 8015388:	f000 fe30 	bl	8015fec <_Bfree>
 801538c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015390:	2200      	movs	r2, #0
 8015392:	601a      	str	r2, [r3, #0]
 8015394:	1e2b      	subs	r3, r5, #0
 8015396:	bfb9      	ittee	lt
 8015398:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801539c:	9305      	strlt	r3, [sp, #20]
 801539e:	2300      	movge	r3, #0
 80153a0:	6033      	strge	r3, [r6, #0]
 80153a2:	9f05      	ldr	r7, [sp, #20]
 80153a4:	4b9a      	ldr	r3, [pc, #616]	@ (8015610 <_dtoa_r+0x2d8>)
 80153a6:	bfbc      	itt	lt
 80153a8:	2201      	movlt	r2, #1
 80153aa:	6032      	strlt	r2, [r6, #0]
 80153ac:	43bb      	bics	r3, r7
 80153ae:	d112      	bne.n	80153d6 <_dtoa_r+0x9e>
 80153b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80153b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80153b6:	6013      	str	r3, [r2, #0]
 80153b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80153bc:	4323      	orrs	r3, r4
 80153be:	f000 855a 	beq.w	8015e76 <_dtoa_r+0xb3e>
 80153c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80153c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8015624 <_dtoa_r+0x2ec>
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f000 855c 	beq.w	8015e86 <_dtoa_r+0xb4e>
 80153ce:	f10a 0303 	add.w	r3, sl, #3
 80153d2:	f000 bd56 	b.w	8015e82 <_dtoa_r+0xb4a>
 80153d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80153da:	2200      	movs	r2, #0
 80153dc:	ec51 0b17 	vmov	r0, r1, d7
 80153e0:	2300      	movs	r3, #0
 80153e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80153e6:	f7f3 fb9f 	bl	8008b28 <__aeabi_dcmpeq>
 80153ea:	4680      	mov	r8, r0
 80153ec:	b158      	cbz	r0, 8015406 <_dtoa_r+0xce>
 80153ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80153f0:	2301      	movs	r3, #1
 80153f2:	6013      	str	r3, [r2, #0]
 80153f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80153f6:	b113      	cbz	r3, 80153fe <_dtoa_r+0xc6>
 80153f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80153fa:	4b86      	ldr	r3, [pc, #536]	@ (8015614 <_dtoa_r+0x2dc>)
 80153fc:	6013      	str	r3, [r2, #0]
 80153fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015628 <_dtoa_r+0x2f0>
 8015402:	f000 bd40 	b.w	8015e86 <_dtoa_r+0xb4e>
 8015406:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801540a:	aa14      	add	r2, sp, #80	@ 0x50
 801540c:	a915      	add	r1, sp, #84	@ 0x54
 801540e:	4648      	mov	r0, r9
 8015410:	f001 f988 	bl	8016724 <__d2b>
 8015414:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015418:	9002      	str	r0, [sp, #8]
 801541a:	2e00      	cmp	r6, #0
 801541c:	d078      	beq.n	8015510 <_dtoa_r+0x1d8>
 801541e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015420:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8015424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801542c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015430:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015434:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015438:	4619      	mov	r1, r3
 801543a:	2200      	movs	r2, #0
 801543c:	4b76      	ldr	r3, [pc, #472]	@ (8015618 <_dtoa_r+0x2e0>)
 801543e:	f7f2 ff53 	bl	80082e8 <__aeabi_dsub>
 8015442:	a36b      	add	r3, pc, #428	@ (adr r3, 80155f0 <_dtoa_r+0x2b8>)
 8015444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015448:	f7f3 f906 	bl	8008658 <__aeabi_dmul>
 801544c:	a36a      	add	r3, pc, #424	@ (adr r3, 80155f8 <_dtoa_r+0x2c0>)
 801544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015452:	f7f2 ff4b 	bl	80082ec <__adddf3>
 8015456:	4604      	mov	r4, r0
 8015458:	4630      	mov	r0, r6
 801545a:	460d      	mov	r5, r1
 801545c:	f7f3 f892 	bl	8008584 <__aeabi_i2d>
 8015460:	a367      	add	r3, pc, #412	@ (adr r3, 8015600 <_dtoa_r+0x2c8>)
 8015462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015466:	f7f3 f8f7 	bl	8008658 <__aeabi_dmul>
 801546a:	4602      	mov	r2, r0
 801546c:	460b      	mov	r3, r1
 801546e:	4620      	mov	r0, r4
 8015470:	4629      	mov	r1, r5
 8015472:	f7f2 ff3b 	bl	80082ec <__adddf3>
 8015476:	4604      	mov	r4, r0
 8015478:	460d      	mov	r5, r1
 801547a:	f7f3 fb9d 	bl	8008bb8 <__aeabi_d2iz>
 801547e:	2200      	movs	r2, #0
 8015480:	4607      	mov	r7, r0
 8015482:	2300      	movs	r3, #0
 8015484:	4620      	mov	r0, r4
 8015486:	4629      	mov	r1, r5
 8015488:	f7f3 fb58 	bl	8008b3c <__aeabi_dcmplt>
 801548c:	b140      	cbz	r0, 80154a0 <_dtoa_r+0x168>
 801548e:	4638      	mov	r0, r7
 8015490:	f7f3 f878 	bl	8008584 <__aeabi_i2d>
 8015494:	4622      	mov	r2, r4
 8015496:	462b      	mov	r3, r5
 8015498:	f7f3 fb46 	bl	8008b28 <__aeabi_dcmpeq>
 801549c:	b900      	cbnz	r0, 80154a0 <_dtoa_r+0x168>
 801549e:	3f01      	subs	r7, #1
 80154a0:	2f16      	cmp	r7, #22
 80154a2:	d852      	bhi.n	801554a <_dtoa_r+0x212>
 80154a4:	4b5d      	ldr	r3, [pc, #372]	@ (801561c <_dtoa_r+0x2e4>)
 80154a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80154aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80154b2:	f7f3 fb43 	bl	8008b3c <__aeabi_dcmplt>
 80154b6:	2800      	cmp	r0, #0
 80154b8:	d049      	beq.n	801554e <_dtoa_r+0x216>
 80154ba:	3f01      	subs	r7, #1
 80154bc:	2300      	movs	r3, #0
 80154be:	9310      	str	r3, [sp, #64]	@ 0x40
 80154c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80154c2:	1b9b      	subs	r3, r3, r6
 80154c4:	1e5a      	subs	r2, r3, #1
 80154c6:	bf45      	ittet	mi
 80154c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80154cc:	9300      	strmi	r3, [sp, #0]
 80154ce:	2300      	movpl	r3, #0
 80154d0:	2300      	movmi	r3, #0
 80154d2:	9206      	str	r2, [sp, #24]
 80154d4:	bf54      	ite	pl
 80154d6:	9300      	strpl	r3, [sp, #0]
 80154d8:	9306      	strmi	r3, [sp, #24]
 80154da:	2f00      	cmp	r7, #0
 80154dc:	db39      	blt.n	8015552 <_dtoa_r+0x21a>
 80154de:	9b06      	ldr	r3, [sp, #24]
 80154e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80154e2:	443b      	add	r3, r7
 80154e4:	9306      	str	r3, [sp, #24]
 80154e6:	2300      	movs	r3, #0
 80154e8:	9308      	str	r3, [sp, #32]
 80154ea:	9b07      	ldr	r3, [sp, #28]
 80154ec:	2b09      	cmp	r3, #9
 80154ee:	d863      	bhi.n	80155b8 <_dtoa_r+0x280>
 80154f0:	2b05      	cmp	r3, #5
 80154f2:	bfc4      	itt	gt
 80154f4:	3b04      	subgt	r3, #4
 80154f6:	9307      	strgt	r3, [sp, #28]
 80154f8:	9b07      	ldr	r3, [sp, #28]
 80154fa:	f1a3 0302 	sub.w	r3, r3, #2
 80154fe:	bfcc      	ite	gt
 8015500:	2400      	movgt	r4, #0
 8015502:	2401      	movle	r4, #1
 8015504:	2b03      	cmp	r3, #3
 8015506:	d863      	bhi.n	80155d0 <_dtoa_r+0x298>
 8015508:	e8df f003 	tbb	[pc, r3]
 801550c:	2b375452 	.word	0x2b375452
 8015510:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015514:	441e      	add	r6, r3
 8015516:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801551a:	2b20      	cmp	r3, #32
 801551c:	bfc1      	itttt	gt
 801551e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015522:	409f      	lslgt	r7, r3
 8015524:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015528:	fa24 f303 	lsrgt.w	r3, r4, r3
 801552c:	bfd6      	itet	le
 801552e:	f1c3 0320 	rsble	r3, r3, #32
 8015532:	ea47 0003 	orrgt.w	r0, r7, r3
 8015536:	fa04 f003 	lslle.w	r0, r4, r3
 801553a:	f7f3 f813 	bl	8008564 <__aeabi_ui2d>
 801553e:	2201      	movs	r2, #1
 8015540:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015544:	3e01      	subs	r6, #1
 8015546:	9212      	str	r2, [sp, #72]	@ 0x48
 8015548:	e776      	b.n	8015438 <_dtoa_r+0x100>
 801554a:	2301      	movs	r3, #1
 801554c:	e7b7      	b.n	80154be <_dtoa_r+0x186>
 801554e:	9010      	str	r0, [sp, #64]	@ 0x40
 8015550:	e7b6      	b.n	80154c0 <_dtoa_r+0x188>
 8015552:	9b00      	ldr	r3, [sp, #0]
 8015554:	1bdb      	subs	r3, r3, r7
 8015556:	9300      	str	r3, [sp, #0]
 8015558:	427b      	negs	r3, r7
 801555a:	9308      	str	r3, [sp, #32]
 801555c:	2300      	movs	r3, #0
 801555e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015560:	e7c3      	b.n	80154ea <_dtoa_r+0x1b2>
 8015562:	2301      	movs	r3, #1
 8015564:	9309      	str	r3, [sp, #36]	@ 0x24
 8015566:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015568:	eb07 0b03 	add.w	fp, r7, r3
 801556c:	f10b 0301 	add.w	r3, fp, #1
 8015570:	2b01      	cmp	r3, #1
 8015572:	9303      	str	r3, [sp, #12]
 8015574:	bfb8      	it	lt
 8015576:	2301      	movlt	r3, #1
 8015578:	e006      	b.n	8015588 <_dtoa_r+0x250>
 801557a:	2301      	movs	r3, #1
 801557c:	9309      	str	r3, [sp, #36]	@ 0x24
 801557e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015580:	2b00      	cmp	r3, #0
 8015582:	dd28      	ble.n	80155d6 <_dtoa_r+0x29e>
 8015584:	469b      	mov	fp, r3
 8015586:	9303      	str	r3, [sp, #12]
 8015588:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801558c:	2100      	movs	r1, #0
 801558e:	2204      	movs	r2, #4
 8015590:	f102 0514 	add.w	r5, r2, #20
 8015594:	429d      	cmp	r5, r3
 8015596:	d926      	bls.n	80155e6 <_dtoa_r+0x2ae>
 8015598:	6041      	str	r1, [r0, #4]
 801559a:	4648      	mov	r0, r9
 801559c:	f000 fce6 	bl	8015f6c <_Balloc>
 80155a0:	4682      	mov	sl, r0
 80155a2:	2800      	cmp	r0, #0
 80155a4:	d142      	bne.n	801562c <_dtoa_r+0x2f4>
 80155a6:	4b1e      	ldr	r3, [pc, #120]	@ (8015620 <_dtoa_r+0x2e8>)
 80155a8:	4602      	mov	r2, r0
 80155aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80155ae:	e6da      	b.n	8015366 <_dtoa_r+0x2e>
 80155b0:	2300      	movs	r3, #0
 80155b2:	e7e3      	b.n	801557c <_dtoa_r+0x244>
 80155b4:	2300      	movs	r3, #0
 80155b6:	e7d5      	b.n	8015564 <_dtoa_r+0x22c>
 80155b8:	2401      	movs	r4, #1
 80155ba:	2300      	movs	r3, #0
 80155bc:	9307      	str	r3, [sp, #28]
 80155be:	9409      	str	r4, [sp, #36]	@ 0x24
 80155c0:	f04f 3bff 	mov.w	fp, #4294967295
 80155c4:	2200      	movs	r2, #0
 80155c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80155ca:	2312      	movs	r3, #18
 80155cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80155ce:	e7db      	b.n	8015588 <_dtoa_r+0x250>
 80155d0:	2301      	movs	r3, #1
 80155d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80155d4:	e7f4      	b.n	80155c0 <_dtoa_r+0x288>
 80155d6:	f04f 0b01 	mov.w	fp, #1
 80155da:	f8cd b00c 	str.w	fp, [sp, #12]
 80155de:	465b      	mov	r3, fp
 80155e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80155e4:	e7d0      	b.n	8015588 <_dtoa_r+0x250>
 80155e6:	3101      	adds	r1, #1
 80155e8:	0052      	lsls	r2, r2, #1
 80155ea:	e7d1      	b.n	8015590 <_dtoa_r+0x258>
 80155ec:	f3af 8000 	nop.w
 80155f0:	636f4361 	.word	0x636f4361
 80155f4:	3fd287a7 	.word	0x3fd287a7
 80155f8:	8b60c8b3 	.word	0x8b60c8b3
 80155fc:	3fc68a28 	.word	0x3fc68a28
 8015600:	509f79fb 	.word	0x509f79fb
 8015604:	3fd34413 	.word	0x3fd34413
 8015608:	08019170 	.word	0x08019170
 801560c:	08019187 	.word	0x08019187
 8015610:	7ff00000 	.word	0x7ff00000
 8015614:	08019273 	.word	0x08019273
 8015618:	3ff80000 	.word	0x3ff80000
 801561c:	08019350 	.word	0x08019350
 8015620:	080191df 	.word	0x080191df
 8015624:	0801916c 	.word	0x0801916c
 8015628:	08019272 	.word	0x08019272
 801562c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015630:	6018      	str	r0, [r3, #0]
 8015632:	9b03      	ldr	r3, [sp, #12]
 8015634:	2b0e      	cmp	r3, #14
 8015636:	f200 80a1 	bhi.w	801577c <_dtoa_r+0x444>
 801563a:	2c00      	cmp	r4, #0
 801563c:	f000 809e 	beq.w	801577c <_dtoa_r+0x444>
 8015640:	2f00      	cmp	r7, #0
 8015642:	dd33      	ble.n	80156ac <_dtoa_r+0x374>
 8015644:	4b9c      	ldr	r3, [pc, #624]	@ (80158b8 <_dtoa_r+0x580>)
 8015646:	f007 020f 	and.w	r2, r7, #15
 801564a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801564e:	ed93 7b00 	vldr	d7, [r3]
 8015652:	05f8      	lsls	r0, r7, #23
 8015654:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015658:	ea4f 1427 	mov.w	r4, r7, asr #4
 801565c:	d516      	bpl.n	801568c <_dtoa_r+0x354>
 801565e:	4b97      	ldr	r3, [pc, #604]	@ (80158bc <_dtoa_r+0x584>)
 8015660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015668:	f7f3 f920 	bl	80088ac <__aeabi_ddiv>
 801566c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015670:	f004 040f 	and.w	r4, r4, #15
 8015674:	2603      	movs	r6, #3
 8015676:	4d91      	ldr	r5, [pc, #580]	@ (80158bc <_dtoa_r+0x584>)
 8015678:	b954      	cbnz	r4, 8015690 <_dtoa_r+0x358>
 801567a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801567e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015682:	f7f3 f913 	bl	80088ac <__aeabi_ddiv>
 8015686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801568a:	e028      	b.n	80156de <_dtoa_r+0x3a6>
 801568c:	2602      	movs	r6, #2
 801568e:	e7f2      	b.n	8015676 <_dtoa_r+0x33e>
 8015690:	07e1      	lsls	r1, r4, #31
 8015692:	d508      	bpl.n	80156a6 <_dtoa_r+0x36e>
 8015694:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015698:	e9d5 2300 	ldrd	r2, r3, [r5]
 801569c:	f7f2 ffdc 	bl	8008658 <__aeabi_dmul>
 80156a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80156a4:	3601      	adds	r6, #1
 80156a6:	1064      	asrs	r4, r4, #1
 80156a8:	3508      	adds	r5, #8
 80156aa:	e7e5      	b.n	8015678 <_dtoa_r+0x340>
 80156ac:	f000 80af 	beq.w	801580e <_dtoa_r+0x4d6>
 80156b0:	427c      	negs	r4, r7
 80156b2:	4b81      	ldr	r3, [pc, #516]	@ (80158b8 <_dtoa_r+0x580>)
 80156b4:	4d81      	ldr	r5, [pc, #516]	@ (80158bc <_dtoa_r+0x584>)
 80156b6:	f004 020f 	and.w	r2, r4, #15
 80156ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80156be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80156c6:	f7f2 ffc7 	bl	8008658 <__aeabi_dmul>
 80156ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80156ce:	1124      	asrs	r4, r4, #4
 80156d0:	2300      	movs	r3, #0
 80156d2:	2602      	movs	r6, #2
 80156d4:	2c00      	cmp	r4, #0
 80156d6:	f040 808f 	bne.w	80157f8 <_dtoa_r+0x4c0>
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d1d3      	bne.n	8015686 <_dtoa_r+0x34e>
 80156de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80156e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	f000 8094 	beq.w	8015812 <_dtoa_r+0x4da>
 80156ea:	4b75      	ldr	r3, [pc, #468]	@ (80158c0 <_dtoa_r+0x588>)
 80156ec:	2200      	movs	r2, #0
 80156ee:	4620      	mov	r0, r4
 80156f0:	4629      	mov	r1, r5
 80156f2:	f7f3 fa23 	bl	8008b3c <__aeabi_dcmplt>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	f000 808b 	beq.w	8015812 <_dtoa_r+0x4da>
 80156fc:	9b03      	ldr	r3, [sp, #12]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	f000 8087 	beq.w	8015812 <_dtoa_r+0x4da>
 8015704:	f1bb 0f00 	cmp.w	fp, #0
 8015708:	dd34      	ble.n	8015774 <_dtoa_r+0x43c>
 801570a:	4620      	mov	r0, r4
 801570c:	4b6d      	ldr	r3, [pc, #436]	@ (80158c4 <_dtoa_r+0x58c>)
 801570e:	2200      	movs	r2, #0
 8015710:	4629      	mov	r1, r5
 8015712:	f7f2 ffa1 	bl	8008658 <__aeabi_dmul>
 8015716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801571a:	f107 38ff 	add.w	r8, r7, #4294967295
 801571e:	3601      	adds	r6, #1
 8015720:	465c      	mov	r4, fp
 8015722:	4630      	mov	r0, r6
 8015724:	f7f2 ff2e 	bl	8008584 <__aeabi_i2d>
 8015728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801572c:	f7f2 ff94 	bl	8008658 <__aeabi_dmul>
 8015730:	4b65      	ldr	r3, [pc, #404]	@ (80158c8 <_dtoa_r+0x590>)
 8015732:	2200      	movs	r2, #0
 8015734:	f7f2 fdda 	bl	80082ec <__adddf3>
 8015738:	4605      	mov	r5, r0
 801573a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801573e:	2c00      	cmp	r4, #0
 8015740:	d16a      	bne.n	8015818 <_dtoa_r+0x4e0>
 8015742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015746:	4b61      	ldr	r3, [pc, #388]	@ (80158cc <_dtoa_r+0x594>)
 8015748:	2200      	movs	r2, #0
 801574a:	f7f2 fdcd 	bl	80082e8 <__aeabi_dsub>
 801574e:	4602      	mov	r2, r0
 8015750:	460b      	mov	r3, r1
 8015752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015756:	462a      	mov	r2, r5
 8015758:	4633      	mov	r3, r6
 801575a:	f7f3 fa0d 	bl	8008b78 <__aeabi_dcmpgt>
 801575e:	2800      	cmp	r0, #0
 8015760:	f040 8298 	bne.w	8015c94 <_dtoa_r+0x95c>
 8015764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015768:	462a      	mov	r2, r5
 801576a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801576e:	f7f3 f9e5 	bl	8008b3c <__aeabi_dcmplt>
 8015772:	bb38      	cbnz	r0, 80157c4 <_dtoa_r+0x48c>
 8015774:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015778:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801577c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801577e:	2b00      	cmp	r3, #0
 8015780:	f2c0 8157 	blt.w	8015a32 <_dtoa_r+0x6fa>
 8015784:	2f0e      	cmp	r7, #14
 8015786:	f300 8154 	bgt.w	8015a32 <_dtoa_r+0x6fa>
 801578a:	4b4b      	ldr	r3, [pc, #300]	@ (80158b8 <_dtoa_r+0x580>)
 801578c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015790:	ed93 7b00 	vldr	d7, [r3]
 8015794:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015796:	2b00      	cmp	r3, #0
 8015798:	ed8d 7b00 	vstr	d7, [sp]
 801579c:	f280 80e5 	bge.w	801596a <_dtoa_r+0x632>
 80157a0:	9b03      	ldr	r3, [sp, #12]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	f300 80e1 	bgt.w	801596a <_dtoa_r+0x632>
 80157a8:	d10c      	bne.n	80157c4 <_dtoa_r+0x48c>
 80157aa:	4b48      	ldr	r3, [pc, #288]	@ (80158cc <_dtoa_r+0x594>)
 80157ac:	2200      	movs	r2, #0
 80157ae:	ec51 0b17 	vmov	r0, r1, d7
 80157b2:	f7f2 ff51 	bl	8008658 <__aeabi_dmul>
 80157b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157ba:	f7f3 f9d3 	bl	8008b64 <__aeabi_dcmpge>
 80157be:	2800      	cmp	r0, #0
 80157c0:	f000 8266 	beq.w	8015c90 <_dtoa_r+0x958>
 80157c4:	2400      	movs	r4, #0
 80157c6:	4625      	mov	r5, r4
 80157c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80157ca:	4656      	mov	r6, sl
 80157cc:	ea6f 0803 	mvn.w	r8, r3
 80157d0:	2700      	movs	r7, #0
 80157d2:	4621      	mov	r1, r4
 80157d4:	4648      	mov	r0, r9
 80157d6:	f000 fc09 	bl	8015fec <_Bfree>
 80157da:	2d00      	cmp	r5, #0
 80157dc:	f000 80bd 	beq.w	801595a <_dtoa_r+0x622>
 80157e0:	b12f      	cbz	r7, 80157ee <_dtoa_r+0x4b6>
 80157e2:	42af      	cmp	r7, r5
 80157e4:	d003      	beq.n	80157ee <_dtoa_r+0x4b6>
 80157e6:	4639      	mov	r1, r7
 80157e8:	4648      	mov	r0, r9
 80157ea:	f000 fbff 	bl	8015fec <_Bfree>
 80157ee:	4629      	mov	r1, r5
 80157f0:	4648      	mov	r0, r9
 80157f2:	f000 fbfb 	bl	8015fec <_Bfree>
 80157f6:	e0b0      	b.n	801595a <_dtoa_r+0x622>
 80157f8:	07e2      	lsls	r2, r4, #31
 80157fa:	d505      	bpl.n	8015808 <_dtoa_r+0x4d0>
 80157fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015800:	f7f2 ff2a 	bl	8008658 <__aeabi_dmul>
 8015804:	3601      	adds	r6, #1
 8015806:	2301      	movs	r3, #1
 8015808:	1064      	asrs	r4, r4, #1
 801580a:	3508      	adds	r5, #8
 801580c:	e762      	b.n	80156d4 <_dtoa_r+0x39c>
 801580e:	2602      	movs	r6, #2
 8015810:	e765      	b.n	80156de <_dtoa_r+0x3a6>
 8015812:	9c03      	ldr	r4, [sp, #12]
 8015814:	46b8      	mov	r8, r7
 8015816:	e784      	b.n	8015722 <_dtoa_r+0x3ea>
 8015818:	4b27      	ldr	r3, [pc, #156]	@ (80158b8 <_dtoa_r+0x580>)
 801581a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801581c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015820:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015824:	4454      	add	r4, sl
 8015826:	2900      	cmp	r1, #0
 8015828:	d054      	beq.n	80158d4 <_dtoa_r+0x59c>
 801582a:	4929      	ldr	r1, [pc, #164]	@ (80158d0 <_dtoa_r+0x598>)
 801582c:	2000      	movs	r0, #0
 801582e:	f7f3 f83d 	bl	80088ac <__aeabi_ddiv>
 8015832:	4633      	mov	r3, r6
 8015834:	462a      	mov	r2, r5
 8015836:	f7f2 fd57 	bl	80082e8 <__aeabi_dsub>
 801583a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801583e:	4656      	mov	r6, sl
 8015840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015844:	f7f3 f9b8 	bl	8008bb8 <__aeabi_d2iz>
 8015848:	4605      	mov	r5, r0
 801584a:	f7f2 fe9b 	bl	8008584 <__aeabi_i2d>
 801584e:	4602      	mov	r2, r0
 8015850:	460b      	mov	r3, r1
 8015852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015856:	f7f2 fd47 	bl	80082e8 <__aeabi_dsub>
 801585a:	3530      	adds	r5, #48	@ 0x30
 801585c:	4602      	mov	r2, r0
 801585e:	460b      	mov	r3, r1
 8015860:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015864:	f806 5b01 	strb.w	r5, [r6], #1
 8015868:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801586c:	f7f3 f966 	bl	8008b3c <__aeabi_dcmplt>
 8015870:	2800      	cmp	r0, #0
 8015872:	d172      	bne.n	801595a <_dtoa_r+0x622>
 8015874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015878:	4911      	ldr	r1, [pc, #68]	@ (80158c0 <_dtoa_r+0x588>)
 801587a:	2000      	movs	r0, #0
 801587c:	f7f2 fd34 	bl	80082e8 <__aeabi_dsub>
 8015880:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015884:	f7f3 f95a 	bl	8008b3c <__aeabi_dcmplt>
 8015888:	2800      	cmp	r0, #0
 801588a:	f040 80b4 	bne.w	80159f6 <_dtoa_r+0x6be>
 801588e:	42a6      	cmp	r6, r4
 8015890:	f43f af70 	beq.w	8015774 <_dtoa_r+0x43c>
 8015894:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015898:	4b0a      	ldr	r3, [pc, #40]	@ (80158c4 <_dtoa_r+0x58c>)
 801589a:	2200      	movs	r2, #0
 801589c:	f7f2 fedc 	bl	8008658 <__aeabi_dmul>
 80158a0:	4b08      	ldr	r3, [pc, #32]	@ (80158c4 <_dtoa_r+0x58c>)
 80158a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80158a6:	2200      	movs	r2, #0
 80158a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80158ac:	f7f2 fed4 	bl	8008658 <__aeabi_dmul>
 80158b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158b4:	e7c4      	b.n	8015840 <_dtoa_r+0x508>
 80158b6:	bf00      	nop
 80158b8:	08019350 	.word	0x08019350
 80158bc:	08019328 	.word	0x08019328
 80158c0:	3ff00000 	.word	0x3ff00000
 80158c4:	40240000 	.word	0x40240000
 80158c8:	401c0000 	.word	0x401c0000
 80158cc:	40140000 	.word	0x40140000
 80158d0:	3fe00000 	.word	0x3fe00000
 80158d4:	4631      	mov	r1, r6
 80158d6:	4628      	mov	r0, r5
 80158d8:	f7f2 febe 	bl	8008658 <__aeabi_dmul>
 80158dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80158e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80158e2:	4656      	mov	r6, sl
 80158e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80158e8:	f7f3 f966 	bl	8008bb8 <__aeabi_d2iz>
 80158ec:	4605      	mov	r5, r0
 80158ee:	f7f2 fe49 	bl	8008584 <__aeabi_i2d>
 80158f2:	4602      	mov	r2, r0
 80158f4:	460b      	mov	r3, r1
 80158f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80158fa:	f7f2 fcf5 	bl	80082e8 <__aeabi_dsub>
 80158fe:	3530      	adds	r5, #48	@ 0x30
 8015900:	f806 5b01 	strb.w	r5, [r6], #1
 8015904:	4602      	mov	r2, r0
 8015906:	460b      	mov	r3, r1
 8015908:	42a6      	cmp	r6, r4
 801590a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801590e:	f04f 0200 	mov.w	r2, #0
 8015912:	d124      	bne.n	801595e <_dtoa_r+0x626>
 8015914:	4baf      	ldr	r3, [pc, #700]	@ (8015bd4 <_dtoa_r+0x89c>)
 8015916:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801591a:	f7f2 fce7 	bl	80082ec <__adddf3>
 801591e:	4602      	mov	r2, r0
 8015920:	460b      	mov	r3, r1
 8015922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015926:	f7f3 f927 	bl	8008b78 <__aeabi_dcmpgt>
 801592a:	2800      	cmp	r0, #0
 801592c:	d163      	bne.n	80159f6 <_dtoa_r+0x6be>
 801592e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015932:	49a8      	ldr	r1, [pc, #672]	@ (8015bd4 <_dtoa_r+0x89c>)
 8015934:	2000      	movs	r0, #0
 8015936:	f7f2 fcd7 	bl	80082e8 <__aeabi_dsub>
 801593a:	4602      	mov	r2, r0
 801593c:	460b      	mov	r3, r1
 801593e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015942:	f7f3 f8fb 	bl	8008b3c <__aeabi_dcmplt>
 8015946:	2800      	cmp	r0, #0
 8015948:	f43f af14 	beq.w	8015774 <_dtoa_r+0x43c>
 801594c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801594e:	1e73      	subs	r3, r6, #1
 8015950:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015952:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015956:	2b30      	cmp	r3, #48	@ 0x30
 8015958:	d0f8      	beq.n	801594c <_dtoa_r+0x614>
 801595a:	4647      	mov	r7, r8
 801595c:	e03b      	b.n	80159d6 <_dtoa_r+0x69e>
 801595e:	4b9e      	ldr	r3, [pc, #632]	@ (8015bd8 <_dtoa_r+0x8a0>)
 8015960:	f7f2 fe7a 	bl	8008658 <__aeabi_dmul>
 8015964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015968:	e7bc      	b.n	80158e4 <_dtoa_r+0x5ac>
 801596a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801596e:	4656      	mov	r6, sl
 8015970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015974:	4620      	mov	r0, r4
 8015976:	4629      	mov	r1, r5
 8015978:	f7f2 ff98 	bl	80088ac <__aeabi_ddiv>
 801597c:	f7f3 f91c 	bl	8008bb8 <__aeabi_d2iz>
 8015980:	4680      	mov	r8, r0
 8015982:	f7f2 fdff 	bl	8008584 <__aeabi_i2d>
 8015986:	e9dd 2300 	ldrd	r2, r3, [sp]
 801598a:	f7f2 fe65 	bl	8008658 <__aeabi_dmul>
 801598e:	4602      	mov	r2, r0
 8015990:	460b      	mov	r3, r1
 8015992:	4620      	mov	r0, r4
 8015994:	4629      	mov	r1, r5
 8015996:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801599a:	f7f2 fca5 	bl	80082e8 <__aeabi_dsub>
 801599e:	f806 4b01 	strb.w	r4, [r6], #1
 80159a2:	9d03      	ldr	r5, [sp, #12]
 80159a4:	eba6 040a 	sub.w	r4, r6, sl
 80159a8:	42a5      	cmp	r5, r4
 80159aa:	4602      	mov	r2, r0
 80159ac:	460b      	mov	r3, r1
 80159ae:	d133      	bne.n	8015a18 <_dtoa_r+0x6e0>
 80159b0:	f7f2 fc9c 	bl	80082ec <__adddf3>
 80159b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159b8:	4604      	mov	r4, r0
 80159ba:	460d      	mov	r5, r1
 80159bc:	f7f3 f8dc 	bl	8008b78 <__aeabi_dcmpgt>
 80159c0:	b9c0      	cbnz	r0, 80159f4 <_dtoa_r+0x6bc>
 80159c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159c6:	4620      	mov	r0, r4
 80159c8:	4629      	mov	r1, r5
 80159ca:	f7f3 f8ad 	bl	8008b28 <__aeabi_dcmpeq>
 80159ce:	b110      	cbz	r0, 80159d6 <_dtoa_r+0x69e>
 80159d0:	f018 0f01 	tst.w	r8, #1
 80159d4:	d10e      	bne.n	80159f4 <_dtoa_r+0x6bc>
 80159d6:	9902      	ldr	r1, [sp, #8]
 80159d8:	4648      	mov	r0, r9
 80159da:	f000 fb07 	bl	8015fec <_Bfree>
 80159de:	2300      	movs	r3, #0
 80159e0:	7033      	strb	r3, [r6, #0]
 80159e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80159e4:	3701      	adds	r7, #1
 80159e6:	601f      	str	r7, [r3, #0]
 80159e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	f000 824b 	beq.w	8015e86 <_dtoa_r+0xb4e>
 80159f0:	601e      	str	r6, [r3, #0]
 80159f2:	e248      	b.n	8015e86 <_dtoa_r+0xb4e>
 80159f4:	46b8      	mov	r8, r7
 80159f6:	4633      	mov	r3, r6
 80159f8:	461e      	mov	r6, r3
 80159fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80159fe:	2a39      	cmp	r2, #57	@ 0x39
 8015a00:	d106      	bne.n	8015a10 <_dtoa_r+0x6d8>
 8015a02:	459a      	cmp	sl, r3
 8015a04:	d1f8      	bne.n	80159f8 <_dtoa_r+0x6c0>
 8015a06:	2230      	movs	r2, #48	@ 0x30
 8015a08:	f108 0801 	add.w	r8, r8, #1
 8015a0c:	f88a 2000 	strb.w	r2, [sl]
 8015a10:	781a      	ldrb	r2, [r3, #0]
 8015a12:	3201      	adds	r2, #1
 8015a14:	701a      	strb	r2, [r3, #0]
 8015a16:	e7a0      	b.n	801595a <_dtoa_r+0x622>
 8015a18:	4b6f      	ldr	r3, [pc, #444]	@ (8015bd8 <_dtoa_r+0x8a0>)
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	f7f2 fe1c 	bl	8008658 <__aeabi_dmul>
 8015a20:	2200      	movs	r2, #0
 8015a22:	2300      	movs	r3, #0
 8015a24:	4604      	mov	r4, r0
 8015a26:	460d      	mov	r5, r1
 8015a28:	f7f3 f87e 	bl	8008b28 <__aeabi_dcmpeq>
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	d09f      	beq.n	8015970 <_dtoa_r+0x638>
 8015a30:	e7d1      	b.n	80159d6 <_dtoa_r+0x69e>
 8015a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015a34:	2a00      	cmp	r2, #0
 8015a36:	f000 80ea 	beq.w	8015c0e <_dtoa_r+0x8d6>
 8015a3a:	9a07      	ldr	r2, [sp, #28]
 8015a3c:	2a01      	cmp	r2, #1
 8015a3e:	f300 80cd 	bgt.w	8015bdc <_dtoa_r+0x8a4>
 8015a42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015a44:	2a00      	cmp	r2, #0
 8015a46:	f000 80c1 	beq.w	8015bcc <_dtoa_r+0x894>
 8015a4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015a4e:	9c08      	ldr	r4, [sp, #32]
 8015a50:	9e00      	ldr	r6, [sp, #0]
 8015a52:	9a00      	ldr	r2, [sp, #0]
 8015a54:	441a      	add	r2, r3
 8015a56:	9200      	str	r2, [sp, #0]
 8015a58:	9a06      	ldr	r2, [sp, #24]
 8015a5a:	2101      	movs	r1, #1
 8015a5c:	441a      	add	r2, r3
 8015a5e:	4648      	mov	r0, r9
 8015a60:	9206      	str	r2, [sp, #24]
 8015a62:	f000 fbc1 	bl	80161e8 <__i2b>
 8015a66:	4605      	mov	r5, r0
 8015a68:	b166      	cbz	r6, 8015a84 <_dtoa_r+0x74c>
 8015a6a:	9b06      	ldr	r3, [sp, #24]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	dd09      	ble.n	8015a84 <_dtoa_r+0x74c>
 8015a70:	42b3      	cmp	r3, r6
 8015a72:	9a00      	ldr	r2, [sp, #0]
 8015a74:	bfa8      	it	ge
 8015a76:	4633      	movge	r3, r6
 8015a78:	1ad2      	subs	r2, r2, r3
 8015a7a:	9200      	str	r2, [sp, #0]
 8015a7c:	9a06      	ldr	r2, [sp, #24]
 8015a7e:	1af6      	subs	r6, r6, r3
 8015a80:	1ad3      	subs	r3, r2, r3
 8015a82:	9306      	str	r3, [sp, #24]
 8015a84:	9b08      	ldr	r3, [sp, #32]
 8015a86:	b30b      	cbz	r3, 8015acc <_dtoa_r+0x794>
 8015a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	f000 80c6 	beq.w	8015c1c <_dtoa_r+0x8e4>
 8015a90:	2c00      	cmp	r4, #0
 8015a92:	f000 80c0 	beq.w	8015c16 <_dtoa_r+0x8de>
 8015a96:	4629      	mov	r1, r5
 8015a98:	4622      	mov	r2, r4
 8015a9a:	4648      	mov	r0, r9
 8015a9c:	f000 fc5c 	bl	8016358 <__pow5mult>
 8015aa0:	9a02      	ldr	r2, [sp, #8]
 8015aa2:	4601      	mov	r1, r0
 8015aa4:	4605      	mov	r5, r0
 8015aa6:	4648      	mov	r0, r9
 8015aa8:	f000 fbb4 	bl	8016214 <__multiply>
 8015aac:	9902      	ldr	r1, [sp, #8]
 8015aae:	4680      	mov	r8, r0
 8015ab0:	4648      	mov	r0, r9
 8015ab2:	f000 fa9b 	bl	8015fec <_Bfree>
 8015ab6:	9b08      	ldr	r3, [sp, #32]
 8015ab8:	1b1b      	subs	r3, r3, r4
 8015aba:	9308      	str	r3, [sp, #32]
 8015abc:	f000 80b1 	beq.w	8015c22 <_dtoa_r+0x8ea>
 8015ac0:	9a08      	ldr	r2, [sp, #32]
 8015ac2:	4641      	mov	r1, r8
 8015ac4:	4648      	mov	r0, r9
 8015ac6:	f000 fc47 	bl	8016358 <__pow5mult>
 8015aca:	9002      	str	r0, [sp, #8]
 8015acc:	2101      	movs	r1, #1
 8015ace:	4648      	mov	r0, r9
 8015ad0:	f000 fb8a 	bl	80161e8 <__i2b>
 8015ad4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ad6:	4604      	mov	r4, r0
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	f000 81d8 	beq.w	8015e8e <_dtoa_r+0xb56>
 8015ade:	461a      	mov	r2, r3
 8015ae0:	4601      	mov	r1, r0
 8015ae2:	4648      	mov	r0, r9
 8015ae4:	f000 fc38 	bl	8016358 <__pow5mult>
 8015ae8:	9b07      	ldr	r3, [sp, #28]
 8015aea:	2b01      	cmp	r3, #1
 8015aec:	4604      	mov	r4, r0
 8015aee:	f300 809f 	bgt.w	8015c30 <_dtoa_r+0x8f8>
 8015af2:	9b04      	ldr	r3, [sp, #16]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	f040 8097 	bne.w	8015c28 <_dtoa_r+0x8f0>
 8015afa:	9b05      	ldr	r3, [sp, #20]
 8015afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	f040 8093 	bne.w	8015c2c <_dtoa_r+0x8f4>
 8015b06:	9b05      	ldr	r3, [sp, #20]
 8015b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015b0c:	0d1b      	lsrs	r3, r3, #20
 8015b0e:	051b      	lsls	r3, r3, #20
 8015b10:	b133      	cbz	r3, 8015b20 <_dtoa_r+0x7e8>
 8015b12:	9b00      	ldr	r3, [sp, #0]
 8015b14:	3301      	adds	r3, #1
 8015b16:	9300      	str	r3, [sp, #0]
 8015b18:	9b06      	ldr	r3, [sp, #24]
 8015b1a:	3301      	adds	r3, #1
 8015b1c:	9306      	str	r3, [sp, #24]
 8015b1e:	2301      	movs	r3, #1
 8015b20:	9308      	str	r3, [sp, #32]
 8015b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f000 81b8 	beq.w	8015e9a <_dtoa_r+0xb62>
 8015b2a:	6923      	ldr	r3, [r4, #16]
 8015b2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015b30:	6918      	ldr	r0, [r3, #16]
 8015b32:	f000 fb0d 	bl	8016150 <__hi0bits>
 8015b36:	f1c0 0020 	rsb	r0, r0, #32
 8015b3a:	9b06      	ldr	r3, [sp, #24]
 8015b3c:	4418      	add	r0, r3
 8015b3e:	f010 001f 	ands.w	r0, r0, #31
 8015b42:	f000 8082 	beq.w	8015c4a <_dtoa_r+0x912>
 8015b46:	f1c0 0320 	rsb	r3, r0, #32
 8015b4a:	2b04      	cmp	r3, #4
 8015b4c:	dd73      	ble.n	8015c36 <_dtoa_r+0x8fe>
 8015b4e:	9b00      	ldr	r3, [sp, #0]
 8015b50:	f1c0 001c 	rsb	r0, r0, #28
 8015b54:	4403      	add	r3, r0
 8015b56:	9300      	str	r3, [sp, #0]
 8015b58:	9b06      	ldr	r3, [sp, #24]
 8015b5a:	4403      	add	r3, r0
 8015b5c:	4406      	add	r6, r0
 8015b5e:	9306      	str	r3, [sp, #24]
 8015b60:	9b00      	ldr	r3, [sp, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	dd05      	ble.n	8015b72 <_dtoa_r+0x83a>
 8015b66:	9902      	ldr	r1, [sp, #8]
 8015b68:	461a      	mov	r2, r3
 8015b6a:	4648      	mov	r0, r9
 8015b6c:	f000 fc4e 	bl	801640c <__lshift>
 8015b70:	9002      	str	r0, [sp, #8]
 8015b72:	9b06      	ldr	r3, [sp, #24]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	dd05      	ble.n	8015b84 <_dtoa_r+0x84c>
 8015b78:	4621      	mov	r1, r4
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	4648      	mov	r0, r9
 8015b7e:	f000 fc45 	bl	801640c <__lshift>
 8015b82:	4604      	mov	r4, r0
 8015b84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d061      	beq.n	8015c4e <_dtoa_r+0x916>
 8015b8a:	9802      	ldr	r0, [sp, #8]
 8015b8c:	4621      	mov	r1, r4
 8015b8e:	f000 fca9 	bl	80164e4 <__mcmp>
 8015b92:	2800      	cmp	r0, #0
 8015b94:	da5b      	bge.n	8015c4e <_dtoa_r+0x916>
 8015b96:	2300      	movs	r3, #0
 8015b98:	9902      	ldr	r1, [sp, #8]
 8015b9a:	220a      	movs	r2, #10
 8015b9c:	4648      	mov	r0, r9
 8015b9e:	f000 fa47 	bl	8016030 <__multadd>
 8015ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ba4:	9002      	str	r0, [sp, #8]
 8015ba6:	f107 38ff 	add.w	r8, r7, #4294967295
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f000 8177 	beq.w	8015e9e <_dtoa_r+0xb66>
 8015bb0:	4629      	mov	r1, r5
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	220a      	movs	r2, #10
 8015bb6:	4648      	mov	r0, r9
 8015bb8:	f000 fa3a 	bl	8016030 <__multadd>
 8015bbc:	f1bb 0f00 	cmp.w	fp, #0
 8015bc0:	4605      	mov	r5, r0
 8015bc2:	dc6f      	bgt.n	8015ca4 <_dtoa_r+0x96c>
 8015bc4:	9b07      	ldr	r3, [sp, #28]
 8015bc6:	2b02      	cmp	r3, #2
 8015bc8:	dc49      	bgt.n	8015c5e <_dtoa_r+0x926>
 8015bca:	e06b      	b.n	8015ca4 <_dtoa_r+0x96c>
 8015bcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015bce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015bd2:	e73c      	b.n	8015a4e <_dtoa_r+0x716>
 8015bd4:	3fe00000 	.word	0x3fe00000
 8015bd8:	40240000 	.word	0x40240000
 8015bdc:	9b03      	ldr	r3, [sp, #12]
 8015bde:	1e5c      	subs	r4, r3, #1
 8015be0:	9b08      	ldr	r3, [sp, #32]
 8015be2:	42a3      	cmp	r3, r4
 8015be4:	db09      	blt.n	8015bfa <_dtoa_r+0x8c2>
 8015be6:	1b1c      	subs	r4, r3, r4
 8015be8:	9b03      	ldr	r3, [sp, #12]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	f6bf af30 	bge.w	8015a50 <_dtoa_r+0x718>
 8015bf0:	9b00      	ldr	r3, [sp, #0]
 8015bf2:	9a03      	ldr	r2, [sp, #12]
 8015bf4:	1a9e      	subs	r6, r3, r2
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	e72b      	b.n	8015a52 <_dtoa_r+0x71a>
 8015bfa:	9b08      	ldr	r3, [sp, #32]
 8015bfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015bfe:	9408      	str	r4, [sp, #32]
 8015c00:	1ae3      	subs	r3, r4, r3
 8015c02:	441a      	add	r2, r3
 8015c04:	9e00      	ldr	r6, [sp, #0]
 8015c06:	9b03      	ldr	r3, [sp, #12]
 8015c08:	920d      	str	r2, [sp, #52]	@ 0x34
 8015c0a:	2400      	movs	r4, #0
 8015c0c:	e721      	b.n	8015a52 <_dtoa_r+0x71a>
 8015c0e:	9c08      	ldr	r4, [sp, #32]
 8015c10:	9e00      	ldr	r6, [sp, #0]
 8015c12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015c14:	e728      	b.n	8015a68 <_dtoa_r+0x730>
 8015c16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015c1a:	e751      	b.n	8015ac0 <_dtoa_r+0x788>
 8015c1c:	9a08      	ldr	r2, [sp, #32]
 8015c1e:	9902      	ldr	r1, [sp, #8]
 8015c20:	e750      	b.n	8015ac4 <_dtoa_r+0x78c>
 8015c22:	f8cd 8008 	str.w	r8, [sp, #8]
 8015c26:	e751      	b.n	8015acc <_dtoa_r+0x794>
 8015c28:	2300      	movs	r3, #0
 8015c2a:	e779      	b.n	8015b20 <_dtoa_r+0x7e8>
 8015c2c:	9b04      	ldr	r3, [sp, #16]
 8015c2e:	e777      	b.n	8015b20 <_dtoa_r+0x7e8>
 8015c30:	2300      	movs	r3, #0
 8015c32:	9308      	str	r3, [sp, #32]
 8015c34:	e779      	b.n	8015b2a <_dtoa_r+0x7f2>
 8015c36:	d093      	beq.n	8015b60 <_dtoa_r+0x828>
 8015c38:	9a00      	ldr	r2, [sp, #0]
 8015c3a:	331c      	adds	r3, #28
 8015c3c:	441a      	add	r2, r3
 8015c3e:	9200      	str	r2, [sp, #0]
 8015c40:	9a06      	ldr	r2, [sp, #24]
 8015c42:	441a      	add	r2, r3
 8015c44:	441e      	add	r6, r3
 8015c46:	9206      	str	r2, [sp, #24]
 8015c48:	e78a      	b.n	8015b60 <_dtoa_r+0x828>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	e7f4      	b.n	8015c38 <_dtoa_r+0x900>
 8015c4e:	9b03      	ldr	r3, [sp, #12]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	46b8      	mov	r8, r7
 8015c54:	dc20      	bgt.n	8015c98 <_dtoa_r+0x960>
 8015c56:	469b      	mov	fp, r3
 8015c58:	9b07      	ldr	r3, [sp, #28]
 8015c5a:	2b02      	cmp	r3, #2
 8015c5c:	dd1e      	ble.n	8015c9c <_dtoa_r+0x964>
 8015c5e:	f1bb 0f00 	cmp.w	fp, #0
 8015c62:	f47f adb1 	bne.w	80157c8 <_dtoa_r+0x490>
 8015c66:	4621      	mov	r1, r4
 8015c68:	465b      	mov	r3, fp
 8015c6a:	2205      	movs	r2, #5
 8015c6c:	4648      	mov	r0, r9
 8015c6e:	f000 f9df 	bl	8016030 <__multadd>
 8015c72:	4601      	mov	r1, r0
 8015c74:	4604      	mov	r4, r0
 8015c76:	9802      	ldr	r0, [sp, #8]
 8015c78:	f000 fc34 	bl	80164e4 <__mcmp>
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	f77f ada3 	ble.w	80157c8 <_dtoa_r+0x490>
 8015c82:	4656      	mov	r6, sl
 8015c84:	2331      	movs	r3, #49	@ 0x31
 8015c86:	f806 3b01 	strb.w	r3, [r6], #1
 8015c8a:	f108 0801 	add.w	r8, r8, #1
 8015c8e:	e59f      	b.n	80157d0 <_dtoa_r+0x498>
 8015c90:	9c03      	ldr	r4, [sp, #12]
 8015c92:	46b8      	mov	r8, r7
 8015c94:	4625      	mov	r5, r4
 8015c96:	e7f4      	b.n	8015c82 <_dtoa_r+0x94a>
 8015c98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8015c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	f000 8101 	beq.w	8015ea6 <_dtoa_r+0xb6e>
 8015ca4:	2e00      	cmp	r6, #0
 8015ca6:	dd05      	ble.n	8015cb4 <_dtoa_r+0x97c>
 8015ca8:	4629      	mov	r1, r5
 8015caa:	4632      	mov	r2, r6
 8015cac:	4648      	mov	r0, r9
 8015cae:	f000 fbad 	bl	801640c <__lshift>
 8015cb2:	4605      	mov	r5, r0
 8015cb4:	9b08      	ldr	r3, [sp, #32]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d05c      	beq.n	8015d74 <_dtoa_r+0xa3c>
 8015cba:	6869      	ldr	r1, [r5, #4]
 8015cbc:	4648      	mov	r0, r9
 8015cbe:	f000 f955 	bl	8015f6c <_Balloc>
 8015cc2:	4606      	mov	r6, r0
 8015cc4:	b928      	cbnz	r0, 8015cd2 <_dtoa_r+0x99a>
 8015cc6:	4b82      	ldr	r3, [pc, #520]	@ (8015ed0 <_dtoa_r+0xb98>)
 8015cc8:	4602      	mov	r2, r0
 8015cca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015cce:	f7ff bb4a 	b.w	8015366 <_dtoa_r+0x2e>
 8015cd2:	692a      	ldr	r2, [r5, #16]
 8015cd4:	3202      	adds	r2, #2
 8015cd6:	0092      	lsls	r2, r2, #2
 8015cd8:	f105 010c 	add.w	r1, r5, #12
 8015cdc:	300c      	adds	r0, #12
 8015cde:	f002 fabb 	bl	8018258 <memcpy>
 8015ce2:	2201      	movs	r2, #1
 8015ce4:	4631      	mov	r1, r6
 8015ce6:	4648      	mov	r0, r9
 8015ce8:	f000 fb90 	bl	801640c <__lshift>
 8015cec:	f10a 0301 	add.w	r3, sl, #1
 8015cf0:	9300      	str	r3, [sp, #0]
 8015cf2:	eb0a 030b 	add.w	r3, sl, fp
 8015cf6:	9308      	str	r3, [sp, #32]
 8015cf8:	9b04      	ldr	r3, [sp, #16]
 8015cfa:	f003 0301 	and.w	r3, r3, #1
 8015cfe:	462f      	mov	r7, r5
 8015d00:	9306      	str	r3, [sp, #24]
 8015d02:	4605      	mov	r5, r0
 8015d04:	9b00      	ldr	r3, [sp, #0]
 8015d06:	9802      	ldr	r0, [sp, #8]
 8015d08:	4621      	mov	r1, r4
 8015d0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8015d0e:	f7ff fa8b 	bl	8015228 <quorem>
 8015d12:	4603      	mov	r3, r0
 8015d14:	3330      	adds	r3, #48	@ 0x30
 8015d16:	9003      	str	r0, [sp, #12]
 8015d18:	4639      	mov	r1, r7
 8015d1a:	9802      	ldr	r0, [sp, #8]
 8015d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d1e:	f000 fbe1 	bl	80164e4 <__mcmp>
 8015d22:	462a      	mov	r2, r5
 8015d24:	9004      	str	r0, [sp, #16]
 8015d26:	4621      	mov	r1, r4
 8015d28:	4648      	mov	r0, r9
 8015d2a:	f000 fbf7 	bl	801651c <__mdiff>
 8015d2e:	68c2      	ldr	r2, [r0, #12]
 8015d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d32:	4606      	mov	r6, r0
 8015d34:	bb02      	cbnz	r2, 8015d78 <_dtoa_r+0xa40>
 8015d36:	4601      	mov	r1, r0
 8015d38:	9802      	ldr	r0, [sp, #8]
 8015d3a:	f000 fbd3 	bl	80164e4 <__mcmp>
 8015d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d40:	4602      	mov	r2, r0
 8015d42:	4631      	mov	r1, r6
 8015d44:	4648      	mov	r0, r9
 8015d46:	920c      	str	r2, [sp, #48]	@ 0x30
 8015d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d4a:	f000 f94f 	bl	8015fec <_Bfree>
 8015d4e:	9b07      	ldr	r3, [sp, #28]
 8015d50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015d52:	9e00      	ldr	r6, [sp, #0]
 8015d54:	ea42 0103 	orr.w	r1, r2, r3
 8015d58:	9b06      	ldr	r3, [sp, #24]
 8015d5a:	4319      	orrs	r1, r3
 8015d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d5e:	d10d      	bne.n	8015d7c <_dtoa_r+0xa44>
 8015d60:	2b39      	cmp	r3, #57	@ 0x39
 8015d62:	d027      	beq.n	8015db4 <_dtoa_r+0xa7c>
 8015d64:	9a04      	ldr	r2, [sp, #16]
 8015d66:	2a00      	cmp	r2, #0
 8015d68:	dd01      	ble.n	8015d6e <_dtoa_r+0xa36>
 8015d6a:	9b03      	ldr	r3, [sp, #12]
 8015d6c:	3331      	adds	r3, #49	@ 0x31
 8015d6e:	f88b 3000 	strb.w	r3, [fp]
 8015d72:	e52e      	b.n	80157d2 <_dtoa_r+0x49a>
 8015d74:	4628      	mov	r0, r5
 8015d76:	e7b9      	b.n	8015cec <_dtoa_r+0x9b4>
 8015d78:	2201      	movs	r2, #1
 8015d7a:	e7e2      	b.n	8015d42 <_dtoa_r+0xa0a>
 8015d7c:	9904      	ldr	r1, [sp, #16]
 8015d7e:	2900      	cmp	r1, #0
 8015d80:	db04      	blt.n	8015d8c <_dtoa_r+0xa54>
 8015d82:	9807      	ldr	r0, [sp, #28]
 8015d84:	4301      	orrs	r1, r0
 8015d86:	9806      	ldr	r0, [sp, #24]
 8015d88:	4301      	orrs	r1, r0
 8015d8a:	d120      	bne.n	8015dce <_dtoa_r+0xa96>
 8015d8c:	2a00      	cmp	r2, #0
 8015d8e:	ddee      	ble.n	8015d6e <_dtoa_r+0xa36>
 8015d90:	9902      	ldr	r1, [sp, #8]
 8015d92:	9300      	str	r3, [sp, #0]
 8015d94:	2201      	movs	r2, #1
 8015d96:	4648      	mov	r0, r9
 8015d98:	f000 fb38 	bl	801640c <__lshift>
 8015d9c:	4621      	mov	r1, r4
 8015d9e:	9002      	str	r0, [sp, #8]
 8015da0:	f000 fba0 	bl	80164e4 <__mcmp>
 8015da4:	2800      	cmp	r0, #0
 8015da6:	9b00      	ldr	r3, [sp, #0]
 8015da8:	dc02      	bgt.n	8015db0 <_dtoa_r+0xa78>
 8015daa:	d1e0      	bne.n	8015d6e <_dtoa_r+0xa36>
 8015dac:	07da      	lsls	r2, r3, #31
 8015dae:	d5de      	bpl.n	8015d6e <_dtoa_r+0xa36>
 8015db0:	2b39      	cmp	r3, #57	@ 0x39
 8015db2:	d1da      	bne.n	8015d6a <_dtoa_r+0xa32>
 8015db4:	2339      	movs	r3, #57	@ 0x39
 8015db6:	f88b 3000 	strb.w	r3, [fp]
 8015dba:	4633      	mov	r3, r6
 8015dbc:	461e      	mov	r6, r3
 8015dbe:	3b01      	subs	r3, #1
 8015dc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015dc4:	2a39      	cmp	r2, #57	@ 0x39
 8015dc6:	d04e      	beq.n	8015e66 <_dtoa_r+0xb2e>
 8015dc8:	3201      	adds	r2, #1
 8015dca:	701a      	strb	r2, [r3, #0]
 8015dcc:	e501      	b.n	80157d2 <_dtoa_r+0x49a>
 8015dce:	2a00      	cmp	r2, #0
 8015dd0:	dd03      	ble.n	8015dda <_dtoa_r+0xaa2>
 8015dd2:	2b39      	cmp	r3, #57	@ 0x39
 8015dd4:	d0ee      	beq.n	8015db4 <_dtoa_r+0xa7c>
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	e7c9      	b.n	8015d6e <_dtoa_r+0xa36>
 8015dda:	9a00      	ldr	r2, [sp, #0]
 8015ddc:	9908      	ldr	r1, [sp, #32]
 8015dde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015de2:	428a      	cmp	r2, r1
 8015de4:	d028      	beq.n	8015e38 <_dtoa_r+0xb00>
 8015de6:	9902      	ldr	r1, [sp, #8]
 8015de8:	2300      	movs	r3, #0
 8015dea:	220a      	movs	r2, #10
 8015dec:	4648      	mov	r0, r9
 8015dee:	f000 f91f 	bl	8016030 <__multadd>
 8015df2:	42af      	cmp	r7, r5
 8015df4:	9002      	str	r0, [sp, #8]
 8015df6:	f04f 0300 	mov.w	r3, #0
 8015dfa:	f04f 020a 	mov.w	r2, #10
 8015dfe:	4639      	mov	r1, r7
 8015e00:	4648      	mov	r0, r9
 8015e02:	d107      	bne.n	8015e14 <_dtoa_r+0xadc>
 8015e04:	f000 f914 	bl	8016030 <__multadd>
 8015e08:	4607      	mov	r7, r0
 8015e0a:	4605      	mov	r5, r0
 8015e0c:	9b00      	ldr	r3, [sp, #0]
 8015e0e:	3301      	adds	r3, #1
 8015e10:	9300      	str	r3, [sp, #0]
 8015e12:	e777      	b.n	8015d04 <_dtoa_r+0x9cc>
 8015e14:	f000 f90c 	bl	8016030 <__multadd>
 8015e18:	4629      	mov	r1, r5
 8015e1a:	4607      	mov	r7, r0
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	220a      	movs	r2, #10
 8015e20:	4648      	mov	r0, r9
 8015e22:	f000 f905 	bl	8016030 <__multadd>
 8015e26:	4605      	mov	r5, r0
 8015e28:	e7f0      	b.n	8015e0c <_dtoa_r+0xad4>
 8015e2a:	f1bb 0f00 	cmp.w	fp, #0
 8015e2e:	bfcc      	ite	gt
 8015e30:	465e      	movgt	r6, fp
 8015e32:	2601      	movle	r6, #1
 8015e34:	4456      	add	r6, sl
 8015e36:	2700      	movs	r7, #0
 8015e38:	9902      	ldr	r1, [sp, #8]
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	2201      	movs	r2, #1
 8015e3e:	4648      	mov	r0, r9
 8015e40:	f000 fae4 	bl	801640c <__lshift>
 8015e44:	4621      	mov	r1, r4
 8015e46:	9002      	str	r0, [sp, #8]
 8015e48:	f000 fb4c 	bl	80164e4 <__mcmp>
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	dcb4      	bgt.n	8015dba <_dtoa_r+0xa82>
 8015e50:	d102      	bne.n	8015e58 <_dtoa_r+0xb20>
 8015e52:	9b00      	ldr	r3, [sp, #0]
 8015e54:	07db      	lsls	r3, r3, #31
 8015e56:	d4b0      	bmi.n	8015dba <_dtoa_r+0xa82>
 8015e58:	4633      	mov	r3, r6
 8015e5a:	461e      	mov	r6, r3
 8015e5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015e60:	2a30      	cmp	r2, #48	@ 0x30
 8015e62:	d0fa      	beq.n	8015e5a <_dtoa_r+0xb22>
 8015e64:	e4b5      	b.n	80157d2 <_dtoa_r+0x49a>
 8015e66:	459a      	cmp	sl, r3
 8015e68:	d1a8      	bne.n	8015dbc <_dtoa_r+0xa84>
 8015e6a:	2331      	movs	r3, #49	@ 0x31
 8015e6c:	f108 0801 	add.w	r8, r8, #1
 8015e70:	f88a 3000 	strb.w	r3, [sl]
 8015e74:	e4ad      	b.n	80157d2 <_dtoa_r+0x49a>
 8015e76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015e78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015ed4 <_dtoa_r+0xb9c>
 8015e7c:	b11b      	cbz	r3, 8015e86 <_dtoa_r+0xb4e>
 8015e7e:	f10a 0308 	add.w	r3, sl, #8
 8015e82:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015e84:	6013      	str	r3, [r2, #0]
 8015e86:	4650      	mov	r0, sl
 8015e88:	b017      	add	sp, #92	@ 0x5c
 8015e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e8e:	9b07      	ldr	r3, [sp, #28]
 8015e90:	2b01      	cmp	r3, #1
 8015e92:	f77f ae2e 	ble.w	8015af2 <_dtoa_r+0x7ba>
 8015e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e98:	9308      	str	r3, [sp, #32]
 8015e9a:	2001      	movs	r0, #1
 8015e9c:	e64d      	b.n	8015b3a <_dtoa_r+0x802>
 8015e9e:	f1bb 0f00 	cmp.w	fp, #0
 8015ea2:	f77f aed9 	ble.w	8015c58 <_dtoa_r+0x920>
 8015ea6:	4656      	mov	r6, sl
 8015ea8:	9802      	ldr	r0, [sp, #8]
 8015eaa:	4621      	mov	r1, r4
 8015eac:	f7ff f9bc 	bl	8015228 <quorem>
 8015eb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015eb4:	f806 3b01 	strb.w	r3, [r6], #1
 8015eb8:	eba6 020a 	sub.w	r2, r6, sl
 8015ebc:	4593      	cmp	fp, r2
 8015ebe:	ddb4      	ble.n	8015e2a <_dtoa_r+0xaf2>
 8015ec0:	9902      	ldr	r1, [sp, #8]
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	220a      	movs	r2, #10
 8015ec6:	4648      	mov	r0, r9
 8015ec8:	f000 f8b2 	bl	8016030 <__multadd>
 8015ecc:	9002      	str	r0, [sp, #8]
 8015ece:	e7eb      	b.n	8015ea8 <_dtoa_r+0xb70>
 8015ed0:	080191df 	.word	0x080191df
 8015ed4:	08019163 	.word	0x08019163

08015ed8 <_free_r>:
 8015ed8:	b538      	push	{r3, r4, r5, lr}
 8015eda:	4605      	mov	r5, r0
 8015edc:	2900      	cmp	r1, #0
 8015ede:	d041      	beq.n	8015f64 <_free_r+0x8c>
 8015ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ee4:	1f0c      	subs	r4, r1, #4
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	bfb8      	it	lt
 8015eea:	18e4      	addlt	r4, r4, r3
 8015eec:	f7fe f84e 	bl	8013f8c <__malloc_lock>
 8015ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8015f68 <_free_r+0x90>)
 8015ef2:	6813      	ldr	r3, [r2, #0]
 8015ef4:	b933      	cbnz	r3, 8015f04 <_free_r+0x2c>
 8015ef6:	6063      	str	r3, [r4, #4]
 8015ef8:	6014      	str	r4, [r2, #0]
 8015efa:	4628      	mov	r0, r5
 8015efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f00:	f7fe b84a 	b.w	8013f98 <__malloc_unlock>
 8015f04:	42a3      	cmp	r3, r4
 8015f06:	d908      	bls.n	8015f1a <_free_r+0x42>
 8015f08:	6820      	ldr	r0, [r4, #0]
 8015f0a:	1821      	adds	r1, r4, r0
 8015f0c:	428b      	cmp	r3, r1
 8015f0e:	bf01      	itttt	eq
 8015f10:	6819      	ldreq	r1, [r3, #0]
 8015f12:	685b      	ldreq	r3, [r3, #4]
 8015f14:	1809      	addeq	r1, r1, r0
 8015f16:	6021      	streq	r1, [r4, #0]
 8015f18:	e7ed      	b.n	8015ef6 <_free_r+0x1e>
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	b10b      	cbz	r3, 8015f24 <_free_r+0x4c>
 8015f20:	42a3      	cmp	r3, r4
 8015f22:	d9fa      	bls.n	8015f1a <_free_r+0x42>
 8015f24:	6811      	ldr	r1, [r2, #0]
 8015f26:	1850      	adds	r0, r2, r1
 8015f28:	42a0      	cmp	r0, r4
 8015f2a:	d10b      	bne.n	8015f44 <_free_r+0x6c>
 8015f2c:	6820      	ldr	r0, [r4, #0]
 8015f2e:	4401      	add	r1, r0
 8015f30:	1850      	adds	r0, r2, r1
 8015f32:	4283      	cmp	r3, r0
 8015f34:	6011      	str	r1, [r2, #0]
 8015f36:	d1e0      	bne.n	8015efa <_free_r+0x22>
 8015f38:	6818      	ldr	r0, [r3, #0]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	6053      	str	r3, [r2, #4]
 8015f3e:	4408      	add	r0, r1
 8015f40:	6010      	str	r0, [r2, #0]
 8015f42:	e7da      	b.n	8015efa <_free_r+0x22>
 8015f44:	d902      	bls.n	8015f4c <_free_r+0x74>
 8015f46:	230c      	movs	r3, #12
 8015f48:	602b      	str	r3, [r5, #0]
 8015f4a:	e7d6      	b.n	8015efa <_free_r+0x22>
 8015f4c:	6820      	ldr	r0, [r4, #0]
 8015f4e:	1821      	adds	r1, r4, r0
 8015f50:	428b      	cmp	r3, r1
 8015f52:	bf04      	itt	eq
 8015f54:	6819      	ldreq	r1, [r3, #0]
 8015f56:	685b      	ldreq	r3, [r3, #4]
 8015f58:	6063      	str	r3, [r4, #4]
 8015f5a:	bf04      	itt	eq
 8015f5c:	1809      	addeq	r1, r1, r0
 8015f5e:	6021      	streq	r1, [r4, #0]
 8015f60:	6054      	str	r4, [r2, #4]
 8015f62:	e7ca      	b.n	8015efa <_free_r+0x22>
 8015f64:	bd38      	pop	{r3, r4, r5, pc}
 8015f66:	bf00      	nop
 8015f68:	200008f8 	.word	0x200008f8

08015f6c <_Balloc>:
 8015f6c:	b570      	push	{r4, r5, r6, lr}
 8015f6e:	69c6      	ldr	r6, [r0, #28]
 8015f70:	4604      	mov	r4, r0
 8015f72:	460d      	mov	r5, r1
 8015f74:	b976      	cbnz	r6, 8015f94 <_Balloc+0x28>
 8015f76:	2010      	movs	r0, #16
 8015f78:	f7fd ff56 	bl	8013e28 <malloc>
 8015f7c:	4602      	mov	r2, r0
 8015f7e:	61e0      	str	r0, [r4, #28]
 8015f80:	b920      	cbnz	r0, 8015f8c <_Balloc+0x20>
 8015f82:	4b18      	ldr	r3, [pc, #96]	@ (8015fe4 <_Balloc+0x78>)
 8015f84:	4818      	ldr	r0, [pc, #96]	@ (8015fe8 <_Balloc+0x7c>)
 8015f86:	216b      	movs	r1, #107	@ 0x6b
 8015f88:	f002 f97e 	bl	8018288 <__assert_func>
 8015f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f90:	6006      	str	r6, [r0, #0]
 8015f92:	60c6      	str	r6, [r0, #12]
 8015f94:	69e6      	ldr	r6, [r4, #28]
 8015f96:	68f3      	ldr	r3, [r6, #12]
 8015f98:	b183      	cbz	r3, 8015fbc <_Balloc+0x50>
 8015f9a:	69e3      	ldr	r3, [r4, #28]
 8015f9c:	68db      	ldr	r3, [r3, #12]
 8015f9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015fa2:	b9b8      	cbnz	r0, 8015fd4 <_Balloc+0x68>
 8015fa4:	2101      	movs	r1, #1
 8015fa6:	fa01 f605 	lsl.w	r6, r1, r5
 8015faa:	1d72      	adds	r2, r6, #5
 8015fac:	0092      	lsls	r2, r2, #2
 8015fae:	4620      	mov	r0, r4
 8015fb0:	f002 f988 	bl	80182c4 <_calloc_r>
 8015fb4:	b160      	cbz	r0, 8015fd0 <_Balloc+0x64>
 8015fb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015fba:	e00e      	b.n	8015fda <_Balloc+0x6e>
 8015fbc:	2221      	movs	r2, #33	@ 0x21
 8015fbe:	2104      	movs	r1, #4
 8015fc0:	4620      	mov	r0, r4
 8015fc2:	f002 f97f 	bl	80182c4 <_calloc_r>
 8015fc6:	69e3      	ldr	r3, [r4, #28]
 8015fc8:	60f0      	str	r0, [r6, #12]
 8015fca:	68db      	ldr	r3, [r3, #12]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d1e4      	bne.n	8015f9a <_Balloc+0x2e>
 8015fd0:	2000      	movs	r0, #0
 8015fd2:	bd70      	pop	{r4, r5, r6, pc}
 8015fd4:	6802      	ldr	r2, [r0, #0]
 8015fd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015fda:	2300      	movs	r3, #0
 8015fdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015fe0:	e7f7      	b.n	8015fd2 <_Balloc+0x66>
 8015fe2:	bf00      	nop
 8015fe4:	08019170 	.word	0x08019170
 8015fe8:	080191f0 	.word	0x080191f0

08015fec <_Bfree>:
 8015fec:	b570      	push	{r4, r5, r6, lr}
 8015fee:	69c6      	ldr	r6, [r0, #28]
 8015ff0:	4605      	mov	r5, r0
 8015ff2:	460c      	mov	r4, r1
 8015ff4:	b976      	cbnz	r6, 8016014 <_Bfree+0x28>
 8015ff6:	2010      	movs	r0, #16
 8015ff8:	f7fd ff16 	bl	8013e28 <malloc>
 8015ffc:	4602      	mov	r2, r0
 8015ffe:	61e8      	str	r0, [r5, #28]
 8016000:	b920      	cbnz	r0, 801600c <_Bfree+0x20>
 8016002:	4b09      	ldr	r3, [pc, #36]	@ (8016028 <_Bfree+0x3c>)
 8016004:	4809      	ldr	r0, [pc, #36]	@ (801602c <_Bfree+0x40>)
 8016006:	218f      	movs	r1, #143	@ 0x8f
 8016008:	f002 f93e 	bl	8018288 <__assert_func>
 801600c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016010:	6006      	str	r6, [r0, #0]
 8016012:	60c6      	str	r6, [r0, #12]
 8016014:	b13c      	cbz	r4, 8016026 <_Bfree+0x3a>
 8016016:	69eb      	ldr	r3, [r5, #28]
 8016018:	6862      	ldr	r2, [r4, #4]
 801601a:	68db      	ldr	r3, [r3, #12]
 801601c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016020:	6021      	str	r1, [r4, #0]
 8016022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016026:	bd70      	pop	{r4, r5, r6, pc}
 8016028:	08019170 	.word	0x08019170
 801602c:	080191f0 	.word	0x080191f0

08016030 <__multadd>:
 8016030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016034:	690d      	ldr	r5, [r1, #16]
 8016036:	4607      	mov	r7, r0
 8016038:	460c      	mov	r4, r1
 801603a:	461e      	mov	r6, r3
 801603c:	f101 0c14 	add.w	ip, r1, #20
 8016040:	2000      	movs	r0, #0
 8016042:	f8dc 3000 	ldr.w	r3, [ip]
 8016046:	b299      	uxth	r1, r3
 8016048:	fb02 6101 	mla	r1, r2, r1, r6
 801604c:	0c1e      	lsrs	r6, r3, #16
 801604e:	0c0b      	lsrs	r3, r1, #16
 8016050:	fb02 3306 	mla	r3, r2, r6, r3
 8016054:	b289      	uxth	r1, r1
 8016056:	3001      	adds	r0, #1
 8016058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801605c:	4285      	cmp	r5, r0
 801605e:	f84c 1b04 	str.w	r1, [ip], #4
 8016062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016066:	dcec      	bgt.n	8016042 <__multadd+0x12>
 8016068:	b30e      	cbz	r6, 80160ae <__multadd+0x7e>
 801606a:	68a3      	ldr	r3, [r4, #8]
 801606c:	42ab      	cmp	r3, r5
 801606e:	dc19      	bgt.n	80160a4 <__multadd+0x74>
 8016070:	6861      	ldr	r1, [r4, #4]
 8016072:	4638      	mov	r0, r7
 8016074:	3101      	adds	r1, #1
 8016076:	f7ff ff79 	bl	8015f6c <_Balloc>
 801607a:	4680      	mov	r8, r0
 801607c:	b928      	cbnz	r0, 801608a <__multadd+0x5a>
 801607e:	4602      	mov	r2, r0
 8016080:	4b0c      	ldr	r3, [pc, #48]	@ (80160b4 <__multadd+0x84>)
 8016082:	480d      	ldr	r0, [pc, #52]	@ (80160b8 <__multadd+0x88>)
 8016084:	21ba      	movs	r1, #186	@ 0xba
 8016086:	f002 f8ff 	bl	8018288 <__assert_func>
 801608a:	6922      	ldr	r2, [r4, #16]
 801608c:	3202      	adds	r2, #2
 801608e:	f104 010c 	add.w	r1, r4, #12
 8016092:	0092      	lsls	r2, r2, #2
 8016094:	300c      	adds	r0, #12
 8016096:	f002 f8df 	bl	8018258 <memcpy>
 801609a:	4621      	mov	r1, r4
 801609c:	4638      	mov	r0, r7
 801609e:	f7ff ffa5 	bl	8015fec <_Bfree>
 80160a2:	4644      	mov	r4, r8
 80160a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80160a8:	3501      	adds	r5, #1
 80160aa:	615e      	str	r6, [r3, #20]
 80160ac:	6125      	str	r5, [r4, #16]
 80160ae:	4620      	mov	r0, r4
 80160b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160b4:	080191df 	.word	0x080191df
 80160b8:	080191f0 	.word	0x080191f0

080160bc <__s2b>:
 80160bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160c0:	460c      	mov	r4, r1
 80160c2:	4615      	mov	r5, r2
 80160c4:	461f      	mov	r7, r3
 80160c6:	2209      	movs	r2, #9
 80160c8:	3308      	adds	r3, #8
 80160ca:	4606      	mov	r6, r0
 80160cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80160d0:	2100      	movs	r1, #0
 80160d2:	2201      	movs	r2, #1
 80160d4:	429a      	cmp	r2, r3
 80160d6:	db09      	blt.n	80160ec <__s2b+0x30>
 80160d8:	4630      	mov	r0, r6
 80160da:	f7ff ff47 	bl	8015f6c <_Balloc>
 80160de:	b940      	cbnz	r0, 80160f2 <__s2b+0x36>
 80160e0:	4602      	mov	r2, r0
 80160e2:	4b19      	ldr	r3, [pc, #100]	@ (8016148 <__s2b+0x8c>)
 80160e4:	4819      	ldr	r0, [pc, #100]	@ (801614c <__s2b+0x90>)
 80160e6:	21d3      	movs	r1, #211	@ 0xd3
 80160e8:	f002 f8ce 	bl	8018288 <__assert_func>
 80160ec:	0052      	lsls	r2, r2, #1
 80160ee:	3101      	adds	r1, #1
 80160f0:	e7f0      	b.n	80160d4 <__s2b+0x18>
 80160f2:	9b08      	ldr	r3, [sp, #32]
 80160f4:	6143      	str	r3, [r0, #20]
 80160f6:	2d09      	cmp	r5, #9
 80160f8:	f04f 0301 	mov.w	r3, #1
 80160fc:	6103      	str	r3, [r0, #16]
 80160fe:	dd16      	ble.n	801612e <__s2b+0x72>
 8016100:	f104 0909 	add.w	r9, r4, #9
 8016104:	46c8      	mov	r8, r9
 8016106:	442c      	add	r4, r5
 8016108:	f818 3b01 	ldrb.w	r3, [r8], #1
 801610c:	4601      	mov	r1, r0
 801610e:	3b30      	subs	r3, #48	@ 0x30
 8016110:	220a      	movs	r2, #10
 8016112:	4630      	mov	r0, r6
 8016114:	f7ff ff8c 	bl	8016030 <__multadd>
 8016118:	45a0      	cmp	r8, r4
 801611a:	d1f5      	bne.n	8016108 <__s2b+0x4c>
 801611c:	f1a5 0408 	sub.w	r4, r5, #8
 8016120:	444c      	add	r4, r9
 8016122:	1b2d      	subs	r5, r5, r4
 8016124:	1963      	adds	r3, r4, r5
 8016126:	42bb      	cmp	r3, r7
 8016128:	db04      	blt.n	8016134 <__s2b+0x78>
 801612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801612e:	340a      	adds	r4, #10
 8016130:	2509      	movs	r5, #9
 8016132:	e7f6      	b.n	8016122 <__s2b+0x66>
 8016134:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016138:	4601      	mov	r1, r0
 801613a:	3b30      	subs	r3, #48	@ 0x30
 801613c:	220a      	movs	r2, #10
 801613e:	4630      	mov	r0, r6
 8016140:	f7ff ff76 	bl	8016030 <__multadd>
 8016144:	e7ee      	b.n	8016124 <__s2b+0x68>
 8016146:	bf00      	nop
 8016148:	080191df 	.word	0x080191df
 801614c:	080191f0 	.word	0x080191f0

08016150 <__hi0bits>:
 8016150:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016154:	4603      	mov	r3, r0
 8016156:	bf36      	itet	cc
 8016158:	0403      	lslcc	r3, r0, #16
 801615a:	2000      	movcs	r0, #0
 801615c:	2010      	movcc	r0, #16
 801615e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016162:	bf3c      	itt	cc
 8016164:	021b      	lslcc	r3, r3, #8
 8016166:	3008      	addcc	r0, #8
 8016168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801616c:	bf3c      	itt	cc
 801616e:	011b      	lslcc	r3, r3, #4
 8016170:	3004      	addcc	r0, #4
 8016172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016176:	bf3c      	itt	cc
 8016178:	009b      	lslcc	r3, r3, #2
 801617a:	3002      	addcc	r0, #2
 801617c:	2b00      	cmp	r3, #0
 801617e:	db05      	blt.n	801618c <__hi0bits+0x3c>
 8016180:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016184:	f100 0001 	add.w	r0, r0, #1
 8016188:	bf08      	it	eq
 801618a:	2020      	moveq	r0, #32
 801618c:	4770      	bx	lr

0801618e <__lo0bits>:
 801618e:	6803      	ldr	r3, [r0, #0]
 8016190:	4602      	mov	r2, r0
 8016192:	f013 0007 	ands.w	r0, r3, #7
 8016196:	d00b      	beq.n	80161b0 <__lo0bits+0x22>
 8016198:	07d9      	lsls	r1, r3, #31
 801619a:	d421      	bmi.n	80161e0 <__lo0bits+0x52>
 801619c:	0798      	lsls	r0, r3, #30
 801619e:	bf49      	itett	mi
 80161a0:	085b      	lsrmi	r3, r3, #1
 80161a2:	089b      	lsrpl	r3, r3, #2
 80161a4:	2001      	movmi	r0, #1
 80161a6:	6013      	strmi	r3, [r2, #0]
 80161a8:	bf5c      	itt	pl
 80161aa:	6013      	strpl	r3, [r2, #0]
 80161ac:	2002      	movpl	r0, #2
 80161ae:	4770      	bx	lr
 80161b0:	b299      	uxth	r1, r3
 80161b2:	b909      	cbnz	r1, 80161b8 <__lo0bits+0x2a>
 80161b4:	0c1b      	lsrs	r3, r3, #16
 80161b6:	2010      	movs	r0, #16
 80161b8:	b2d9      	uxtb	r1, r3
 80161ba:	b909      	cbnz	r1, 80161c0 <__lo0bits+0x32>
 80161bc:	3008      	adds	r0, #8
 80161be:	0a1b      	lsrs	r3, r3, #8
 80161c0:	0719      	lsls	r1, r3, #28
 80161c2:	bf04      	itt	eq
 80161c4:	091b      	lsreq	r3, r3, #4
 80161c6:	3004      	addeq	r0, #4
 80161c8:	0799      	lsls	r1, r3, #30
 80161ca:	bf04      	itt	eq
 80161cc:	089b      	lsreq	r3, r3, #2
 80161ce:	3002      	addeq	r0, #2
 80161d0:	07d9      	lsls	r1, r3, #31
 80161d2:	d403      	bmi.n	80161dc <__lo0bits+0x4e>
 80161d4:	085b      	lsrs	r3, r3, #1
 80161d6:	f100 0001 	add.w	r0, r0, #1
 80161da:	d003      	beq.n	80161e4 <__lo0bits+0x56>
 80161dc:	6013      	str	r3, [r2, #0]
 80161de:	4770      	bx	lr
 80161e0:	2000      	movs	r0, #0
 80161e2:	4770      	bx	lr
 80161e4:	2020      	movs	r0, #32
 80161e6:	4770      	bx	lr

080161e8 <__i2b>:
 80161e8:	b510      	push	{r4, lr}
 80161ea:	460c      	mov	r4, r1
 80161ec:	2101      	movs	r1, #1
 80161ee:	f7ff febd 	bl	8015f6c <_Balloc>
 80161f2:	4602      	mov	r2, r0
 80161f4:	b928      	cbnz	r0, 8016202 <__i2b+0x1a>
 80161f6:	4b05      	ldr	r3, [pc, #20]	@ (801620c <__i2b+0x24>)
 80161f8:	4805      	ldr	r0, [pc, #20]	@ (8016210 <__i2b+0x28>)
 80161fa:	f240 1145 	movw	r1, #325	@ 0x145
 80161fe:	f002 f843 	bl	8018288 <__assert_func>
 8016202:	2301      	movs	r3, #1
 8016204:	6144      	str	r4, [r0, #20]
 8016206:	6103      	str	r3, [r0, #16]
 8016208:	bd10      	pop	{r4, pc}
 801620a:	bf00      	nop
 801620c:	080191df 	.word	0x080191df
 8016210:	080191f0 	.word	0x080191f0

08016214 <__multiply>:
 8016214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016218:	4617      	mov	r7, r2
 801621a:	690a      	ldr	r2, [r1, #16]
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	429a      	cmp	r2, r3
 8016220:	bfa8      	it	ge
 8016222:	463b      	movge	r3, r7
 8016224:	4689      	mov	r9, r1
 8016226:	bfa4      	itt	ge
 8016228:	460f      	movge	r7, r1
 801622a:	4699      	movge	r9, r3
 801622c:	693d      	ldr	r5, [r7, #16]
 801622e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	6879      	ldr	r1, [r7, #4]
 8016236:	eb05 060a 	add.w	r6, r5, sl
 801623a:	42b3      	cmp	r3, r6
 801623c:	b085      	sub	sp, #20
 801623e:	bfb8      	it	lt
 8016240:	3101      	addlt	r1, #1
 8016242:	f7ff fe93 	bl	8015f6c <_Balloc>
 8016246:	b930      	cbnz	r0, 8016256 <__multiply+0x42>
 8016248:	4602      	mov	r2, r0
 801624a:	4b41      	ldr	r3, [pc, #260]	@ (8016350 <__multiply+0x13c>)
 801624c:	4841      	ldr	r0, [pc, #260]	@ (8016354 <__multiply+0x140>)
 801624e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016252:	f002 f819 	bl	8018288 <__assert_func>
 8016256:	f100 0414 	add.w	r4, r0, #20
 801625a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801625e:	4623      	mov	r3, r4
 8016260:	2200      	movs	r2, #0
 8016262:	4573      	cmp	r3, lr
 8016264:	d320      	bcc.n	80162a8 <__multiply+0x94>
 8016266:	f107 0814 	add.w	r8, r7, #20
 801626a:	f109 0114 	add.w	r1, r9, #20
 801626e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016272:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016276:	9302      	str	r3, [sp, #8]
 8016278:	1beb      	subs	r3, r5, r7
 801627a:	3b15      	subs	r3, #21
 801627c:	f023 0303 	bic.w	r3, r3, #3
 8016280:	3304      	adds	r3, #4
 8016282:	3715      	adds	r7, #21
 8016284:	42bd      	cmp	r5, r7
 8016286:	bf38      	it	cc
 8016288:	2304      	movcc	r3, #4
 801628a:	9301      	str	r3, [sp, #4]
 801628c:	9b02      	ldr	r3, [sp, #8]
 801628e:	9103      	str	r1, [sp, #12]
 8016290:	428b      	cmp	r3, r1
 8016292:	d80c      	bhi.n	80162ae <__multiply+0x9a>
 8016294:	2e00      	cmp	r6, #0
 8016296:	dd03      	ble.n	80162a0 <__multiply+0x8c>
 8016298:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801629c:	2b00      	cmp	r3, #0
 801629e:	d055      	beq.n	801634c <__multiply+0x138>
 80162a0:	6106      	str	r6, [r0, #16]
 80162a2:	b005      	add	sp, #20
 80162a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a8:	f843 2b04 	str.w	r2, [r3], #4
 80162ac:	e7d9      	b.n	8016262 <__multiply+0x4e>
 80162ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80162b2:	f1ba 0f00 	cmp.w	sl, #0
 80162b6:	d01f      	beq.n	80162f8 <__multiply+0xe4>
 80162b8:	46c4      	mov	ip, r8
 80162ba:	46a1      	mov	r9, r4
 80162bc:	2700      	movs	r7, #0
 80162be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80162c2:	f8d9 3000 	ldr.w	r3, [r9]
 80162c6:	fa1f fb82 	uxth.w	fp, r2
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80162d0:	443b      	add	r3, r7
 80162d2:	f8d9 7000 	ldr.w	r7, [r9]
 80162d6:	0c12      	lsrs	r2, r2, #16
 80162d8:	0c3f      	lsrs	r7, r7, #16
 80162da:	fb0a 7202 	mla	r2, sl, r2, r7
 80162de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80162e8:	4565      	cmp	r5, ip
 80162ea:	f849 3b04 	str.w	r3, [r9], #4
 80162ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80162f2:	d8e4      	bhi.n	80162be <__multiply+0xaa>
 80162f4:	9b01      	ldr	r3, [sp, #4]
 80162f6:	50e7      	str	r7, [r4, r3]
 80162f8:	9b03      	ldr	r3, [sp, #12]
 80162fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80162fe:	3104      	adds	r1, #4
 8016300:	f1b9 0f00 	cmp.w	r9, #0
 8016304:	d020      	beq.n	8016348 <__multiply+0x134>
 8016306:	6823      	ldr	r3, [r4, #0]
 8016308:	4647      	mov	r7, r8
 801630a:	46a4      	mov	ip, r4
 801630c:	f04f 0a00 	mov.w	sl, #0
 8016310:	f8b7 b000 	ldrh.w	fp, [r7]
 8016314:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016318:	fb09 220b 	mla	r2, r9, fp, r2
 801631c:	4452      	add	r2, sl
 801631e:	b29b      	uxth	r3, r3
 8016320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016324:	f84c 3b04 	str.w	r3, [ip], #4
 8016328:	f857 3b04 	ldr.w	r3, [r7], #4
 801632c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016330:	f8bc 3000 	ldrh.w	r3, [ip]
 8016334:	fb09 330a 	mla	r3, r9, sl, r3
 8016338:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801633c:	42bd      	cmp	r5, r7
 801633e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016342:	d8e5      	bhi.n	8016310 <__multiply+0xfc>
 8016344:	9a01      	ldr	r2, [sp, #4]
 8016346:	50a3      	str	r3, [r4, r2]
 8016348:	3404      	adds	r4, #4
 801634a:	e79f      	b.n	801628c <__multiply+0x78>
 801634c:	3e01      	subs	r6, #1
 801634e:	e7a1      	b.n	8016294 <__multiply+0x80>
 8016350:	080191df 	.word	0x080191df
 8016354:	080191f0 	.word	0x080191f0

08016358 <__pow5mult>:
 8016358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801635c:	4615      	mov	r5, r2
 801635e:	f012 0203 	ands.w	r2, r2, #3
 8016362:	4607      	mov	r7, r0
 8016364:	460e      	mov	r6, r1
 8016366:	d007      	beq.n	8016378 <__pow5mult+0x20>
 8016368:	4c25      	ldr	r4, [pc, #148]	@ (8016400 <__pow5mult+0xa8>)
 801636a:	3a01      	subs	r2, #1
 801636c:	2300      	movs	r3, #0
 801636e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016372:	f7ff fe5d 	bl	8016030 <__multadd>
 8016376:	4606      	mov	r6, r0
 8016378:	10ad      	asrs	r5, r5, #2
 801637a:	d03d      	beq.n	80163f8 <__pow5mult+0xa0>
 801637c:	69fc      	ldr	r4, [r7, #28]
 801637e:	b97c      	cbnz	r4, 80163a0 <__pow5mult+0x48>
 8016380:	2010      	movs	r0, #16
 8016382:	f7fd fd51 	bl	8013e28 <malloc>
 8016386:	4602      	mov	r2, r0
 8016388:	61f8      	str	r0, [r7, #28]
 801638a:	b928      	cbnz	r0, 8016398 <__pow5mult+0x40>
 801638c:	4b1d      	ldr	r3, [pc, #116]	@ (8016404 <__pow5mult+0xac>)
 801638e:	481e      	ldr	r0, [pc, #120]	@ (8016408 <__pow5mult+0xb0>)
 8016390:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016394:	f001 ff78 	bl	8018288 <__assert_func>
 8016398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801639c:	6004      	str	r4, [r0, #0]
 801639e:	60c4      	str	r4, [r0, #12]
 80163a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80163a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80163a8:	b94c      	cbnz	r4, 80163be <__pow5mult+0x66>
 80163aa:	f240 2171 	movw	r1, #625	@ 0x271
 80163ae:	4638      	mov	r0, r7
 80163b0:	f7ff ff1a 	bl	80161e8 <__i2b>
 80163b4:	2300      	movs	r3, #0
 80163b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80163ba:	4604      	mov	r4, r0
 80163bc:	6003      	str	r3, [r0, #0]
 80163be:	f04f 0900 	mov.w	r9, #0
 80163c2:	07eb      	lsls	r3, r5, #31
 80163c4:	d50a      	bpl.n	80163dc <__pow5mult+0x84>
 80163c6:	4631      	mov	r1, r6
 80163c8:	4622      	mov	r2, r4
 80163ca:	4638      	mov	r0, r7
 80163cc:	f7ff ff22 	bl	8016214 <__multiply>
 80163d0:	4631      	mov	r1, r6
 80163d2:	4680      	mov	r8, r0
 80163d4:	4638      	mov	r0, r7
 80163d6:	f7ff fe09 	bl	8015fec <_Bfree>
 80163da:	4646      	mov	r6, r8
 80163dc:	106d      	asrs	r5, r5, #1
 80163de:	d00b      	beq.n	80163f8 <__pow5mult+0xa0>
 80163e0:	6820      	ldr	r0, [r4, #0]
 80163e2:	b938      	cbnz	r0, 80163f4 <__pow5mult+0x9c>
 80163e4:	4622      	mov	r2, r4
 80163e6:	4621      	mov	r1, r4
 80163e8:	4638      	mov	r0, r7
 80163ea:	f7ff ff13 	bl	8016214 <__multiply>
 80163ee:	6020      	str	r0, [r4, #0]
 80163f0:	f8c0 9000 	str.w	r9, [r0]
 80163f4:	4604      	mov	r4, r0
 80163f6:	e7e4      	b.n	80163c2 <__pow5mult+0x6a>
 80163f8:	4630      	mov	r0, r6
 80163fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163fe:	bf00      	nop
 8016400:	0801931c 	.word	0x0801931c
 8016404:	08019170 	.word	0x08019170
 8016408:	080191f0 	.word	0x080191f0

0801640c <__lshift>:
 801640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016410:	460c      	mov	r4, r1
 8016412:	6849      	ldr	r1, [r1, #4]
 8016414:	6923      	ldr	r3, [r4, #16]
 8016416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801641a:	68a3      	ldr	r3, [r4, #8]
 801641c:	4607      	mov	r7, r0
 801641e:	4691      	mov	r9, r2
 8016420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016424:	f108 0601 	add.w	r6, r8, #1
 8016428:	42b3      	cmp	r3, r6
 801642a:	db0b      	blt.n	8016444 <__lshift+0x38>
 801642c:	4638      	mov	r0, r7
 801642e:	f7ff fd9d 	bl	8015f6c <_Balloc>
 8016432:	4605      	mov	r5, r0
 8016434:	b948      	cbnz	r0, 801644a <__lshift+0x3e>
 8016436:	4602      	mov	r2, r0
 8016438:	4b28      	ldr	r3, [pc, #160]	@ (80164dc <__lshift+0xd0>)
 801643a:	4829      	ldr	r0, [pc, #164]	@ (80164e0 <__lshift+0xd4>)
 801643c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016440:	f001 ff22 	bl	8018288 <__assert_func>
 8016444:	3101      	adds	r1, #1
 8016446:	005b      	lsls	r3, r3, #1
 8016448:	e7ee      	b.n	8016428 <__lshift+0x1c>
 801644a:	2300      	movs	r3, #0
 801644c:	f100 0114 	add.w	r1, r0, #20
 8016450:	f100 0210 	add.w	r2, r0, #16
 8016454:	4618      	mov	r0, r3
 8016456:	4553      	cmp	r3, sl
 8016458:	db33      	blt.n	80164c2 <__lshift+0xb6>
 801645a:	6920      	ldr	r0, [r4, #16]
 801645c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016460:	f104 0314 	add.w	r3, r4, #20
 8016464:	f019 091f 	ands.w	r9, r9, #31
 8016468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801646c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016470:	d02b      	beq.n	80164ca <__lshift+0xbe>
 8016472:	f1c9 0e20 	rsb	lr, r9, #32
 8016476:	468a      	mov	sl, r1
 8016478:	2200      	movs	r2, #0
 801647a:	6818      	ldr	r0, [r3, #0]
 801647c:	fa00 f009 	lsl.w	r0, r0, r9
 8016480:	4310      	orrs	r0, r2
 8016482:	f84a 0b04 	str.w	r0, [sl], #4
 8016486:	f853 2b04 	ldr.w	r2, [r3], #4
 801648a:	459c      	cmp	ip, r3
 801648c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016490:	d8f3      	bhi.n	801647a <__lshift+0x6e>
 8016492:	ebac 0304 	sub.w	r3, ip, r4
 8016496:	3b15      	subs	r3, #21
 8016498:	f023 0303 	bic.w	r3, r3, #3
 801649c:	3304      	adds	r3, #4
 801649e:	f104 0015 	add.w	r0, r4, #21
 80164a2:	4560      	cmp	r0, ip
 80164a4:	bf88      	it	hi
 80164a6:	2304      	movhi	r3, #4
 80164a8:	50ca      	str	r2, [r1, r3]
 80164aa:	b10a      	cbz	r2, 80164b0 <__lshift+0xa4>
 80164ac:	f108 0602 	add.w	r6, r8, #2
 80164b0:	3e01      	subs	r6, #1
 80164b2:	4638      	mov	r0, r7
 80164b4:	612e      	str	r6, [r5, #16]
 80164b6:	4621      	mov	r1, r4
 80164b8:	f7ff fd98 	bl	8015fec <_Bfree>
 80164bc:	4628      	mov	r0, r5
 80164be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80164c6:	3301      	adds	r3, #1
 80164c8:	e7c5      	b.n	8016456 <__lshift+0x4a>
 80164ca:	3904      	subs	r1, #4
 80164cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80164d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80164d4:	459c      	cmp	ip, r3
 80164d6:	d8f9      	bhi.n	80164cc <__lshift+0xc0>
 80164d8:	e7ea      	b.n	80164b0 <__lshift+0xa4>
 80164da:	bf00      	nop
 80164dc:	080191df 	.word	0x080191df
 80164e0:	080191f0 	.word	0x080191f0

080164e4 <__mcmp>:
 80164e4:	690a      	ldr	r2, [r1, #16]
 80164e6:	4603      	mov	r3, r0
 80164e8:	6900      	ldr	r0, [r0, #16]
 80164ea:	1a80      	subs	r0, r0, r2
 80164ec:	b530      	push	{r4, r5, lr}
 80164ee:	d10e      	bne.n	801650e <__mcmp+0x2a>
 80164f0:	3314      	adds	r3, #20
 80164f2:	3114      	adds	r1, #20
 80164f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80164f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80164fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016504:	4295      	cmp	r5, r2
 8016506:	d003      	beq.n	8016510 <__mcmp+0x2c>
 8016508:	d205      	bcs.n	8016516 <__mcmp+0x32>
 801650a:	f04f 30ff 	mov.w	r0, #4294967295
 801650e:	bd30      	pop	{r4, r5, pc}
 8016510:	42a3      	cmp	r3, r4
 8016512:	d3f3      	bcc.n	80164fc <__mcmp+0x18>
 8016514:	e7fb      	b.n	801650e <__mcmp+0x2a>
 8016516:	2001      	movs	r0, #1
 8016518:	e7f9      	b.n	801650e <__mcmp+0x2a>
	...

0801651c <__mdiff>:
 801651c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016520:	4689      	mov	r9, r1
 8016522:	4606      	mov	r6, r0
 8016524:	4611      	mov	r1, r2
 8016526:	4648      	mov	r0, r9
 8016528:	4614      	mov	r4, r2
 801652a:	f7ff ffdb 	bl	80164e4 <__mcmp>
 801652e:	1e05      	subs	r5, r0, #0
 8016530:	d112      	bne.n	8016558 <__mdiff+0x3c>
 8016532:	4629      	mov	r1, r5
 8016534:	4630      	mov	r0, r6
 8016536:	f7ff fd19 	bl	8015f6c <_Balloc>
 801653a:	4602      	mov	r2, r0
 801653c:	b928      	cbnz	r0, 801654a <__mdiff+0x2e>
 801653e:	4b3f      	ldr	r3, [pc, #252]	@ (801663c <__mdiff+0x120>)
 8016540:	f240 2137 	movw	r1, #567	@ 0x237
 8016544:	483e      	ldr	r0, [pc, #248]	@ (8016640 <__mdiff+0x124>)
 8016546:	f001 fe9f 	bl	8018288 <__assert_func>
 801654a:	2301      	movs	r3, #1
 801654c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016550:	4610      	mov	r0, r2
 8016552:	b003      	add	sp, #12
 8016554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016558:	bfbc      	itt	lt
 801655a:	464b      	movlt	r3, r9
 801655c:	46a1      	movlt	r9, r4
 801655e:	4630      	mov	r0, r6
 8016560:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016564:	bfba      	itte	lt
 8016566:	461c      	movlt	r4, r3
 8016568:	2501      	movlt	r5, #1
 801656a:	2500      	movge	r5, #0
 801656c:	f7ff fcfe 	bl	8015f6c <_Balloc>
 8016570:	4602      	mov	r2, r0
 8016572:	b918      	cbnz	r0, 801657c <__mdiff+0x60>
 8016574:	4b31      	ldr	r3, [pc, #196]	@ (801663c <__mdiff+0x120>)
 8016576:	f240 2145 	movw	r1, #581	@ 0x245
 801657a:	e7e3      	b.n	8016544 <__mdiff+0x28>
 801657c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016580:	6926      	ldr	r6, [r4, #16]
 8016582:	60c5      	str	r5, [r0, #12]
 8016584:	f109 0310 	add.w	r3, r9, #16
 8016588:	f109 0514 	add.w	r5, r9, #20
 801658c:	f104 0e14 	add.w	lr, r4, #20
 8016590:	f100 0b14 	add.w	fp, r0, #20
 8016594:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016598:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801659c:	9301      	str	r3, [sp, #4]
 801659e:	46d9      	mov	r9, fp
 80165a0:	f04f 0c00 	mov.w	ip, #0
 80165a4:	9b01      	ldr	r3, [sp, #4]
 80165a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80165aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80165ae:	9301      	str	r3, [sp, #4]
 80165b0:	fa1f f38a 	uxth.w	r3, sl
 80165b4:	4619      	mov	r1, r3
 80165b6:	b283      	uxth	r3, r0
 80165b8:	1acb      	subs	r3, r1, r3
 80165ba:	0c00      	lsrs	r0, r0, #16
 80165bc:	4463      	add	r3, ip
 80165be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80165c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80165c6:	b29b      	uxth	r3, r3
 80165c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80165cc:	4576      	cmp	r6, lr
 80165ce:	f849 3b04 	str.w	r3, [r9], #4
 80165d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80165d6:	d8e5      	bhi.n	80165a4 <__mdiff+0x88>
 80165d8:	1b33      	subs	r3, r6, r4
 80165da:	3b15      	subs	r3, #21
 80165dc:	f023 0303 	bic.w	r3, r3, #3
 80165e0:	3415      	adds	r4, #21
 80165e2:	3304      	adds	r3, #4
 80165e4:	42a6      	cmp	r6, r4
 80165e6:	bf38      	it	cc
 80165e8:	2304      	movcc	r3, #4
 80165ea:	441d      	add	r5, r3
 80165ec:	445b      	add	r3, fp
 80165ee:	461e      	mov	r6, r3
 80165f0:	462c      	mov	r4, r5
 80165f2:	4544      	cmp	r4, r8
 80165f4:	d30e      	bcc.n	8016614 <__mdiff+0xf8>
 80165f6:	f108 0103 	add.w	r1, r8, #3
 80165fa:	1b49      	subs	r1, r1, r5
 80165fc:	f021 0103 	bic.w	r1, r1, #3
 8016600:	3d03      	subs	r5, #3
 8016602:	45a8      	cmp	r8, r5
 8016604:	bf38      	it	cc
 8016606:	2100      	movcc	r1, #0
 8016608:	440b      	add	r3, r1
 801660a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801660e:	b191      	cbz	r1, 8016636 <__mdiff+0x11a>
 8016610:	6117      	str	r7, [r2, #16]
 8016612:	e79d      	b.n	8016550 <__mdiff+0x34>
 8016614:	f854 1b04 	ldr.w	r1, [r4], #4
 8016618:	46e6      	mov	lr, ip
 801661a:	0c08      	lsrs	r0, r1, #16
 801661c:	fa1c fc81 	uxtah	ip, ip, r1
 8016620:	4471      	add	r1, lr
 8016622:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016626:	b289      	uxth	r1, r1
 8016628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801662c:	f846 1b04 	str.w	r1, [r6], #4
 8016630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016634:	e7dd      	b.n	80165f2 <__mdiff+0xd6>
 8016636:	3f01      	subs	r7, #1
 8016638:	e7e7      	b.n	801660a <__mdiff+0xee>
 801663a:	bf00      	nop
 801663c:	080191df 	.word	0x080191df
 8016640:	080191f0 	.word	0x080191f0

08016644 <__ulp>:
 8016644:	b082      	sub	sp, #8
 8016646:	ed8d 0b00 	vstr	d0, [sp]
 801664a:	9a01      	ldr	r2, [sp, #4]
 801664c:	4b0f      	ldr	r3, [pc, #60]	@ (801668c <__ulp+0x48>)
 801664e:	4013      	ands	r3, r2
 8016650:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016654:	2b00      	cmp	r3, #0
 8016656:	dc08      	bgt.n	801666a <__ulp+0x26>
 8016658:	425b      	negs	r3, r3
 801665a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801665e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016662:	da04      	bge.n	801666e <__ulp+0x2a>
 8016664:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016668:	4113      	asrs	r3, r2
 801666a:	2200      	movs	r2, #0
 801666c:	e008      	b.n	8016680 <__ulp+0x3c>
 801666e:	f1a2 0314 	sub.w	r3, r2, #20
 8016672:	2b1e      	cmp	r3, #30
 8016674:	bfda      	itte	le
 8016676:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801667a:	40da      	lsrle	r2, r3
 801667c:	2201      	movgt	r2, #1
 801667e:	2300      	movs	r3, #0
 8016680:	4619      	mov	r1, r3
 8016682:	4610      	mov	r0, r2
 8016684:	ec41 0b10 	vmov	d0, r0, r1
 8016688:	b002      	add	sp, #8
 801668a:	4770      	bx	lr
 801668c:	7ff00000 	.word	0x7ff00000

08016690 <__b2d>:
 8016690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016694:	6906      	ldr	r6, [r0, #16]
 8016696:	f100 0814 	add.w	r8, r0, #20
 801669a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801669e:	1f37      	subs	r7, r6, #4
 80166a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80166a4:	4610      	mov	r0, r2
 80166a6:	f7ff fd53 	bl	8016150 <__hi0bits>
 80166aa:	f1c0 0320 	rsb	r3, r0, #32
 80166ae:	280a      	cmp	r0, #10
 80166b0:	600b      	str	r3, [r1, #0]
 80166b2:	491b      	ldr	r1, [pc, #108]	@ (8016720 <__b2d+0x90>)
 80166b4:	dc15      	bgt.n	80166e2 <__b2d+0x52>
 80166b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80166ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80166be:	45b8      	cmp	r8, r7
 80166c0:	ea43 0501 	orr.w	r5, r3, r1
 80166c4:	bf34      	ite	cc
 80166c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80166ca:	2300      	movcs	r3, #0
 80166cc:	3015      	adds	r0, #21
 80166ce:	fa02 f000 	lsl.w	r0, r2, r0
 80166d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80166d6:	4303      	orrs	r3, r0
 80166d8:	461c      	mov	r4, r3
 80166da:	ec45 4b10 	vmov	d0, r4, r5
 80166de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166e2:	45b8      	cmp	r8, r7
 80166e4:	bf3a      	itte	cc
 80166e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80166ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80166ee:	2300      	movcs	r3, #0
 80166f0:	380b      	subs	r0, #11
 80166f2:	d012      	beq.n	801671a <__b2d+0x8a>
 80166f4:	f1c0 0120 	rsb	r1, r0, #32
 80166f8:	fa23 f401 	lsr.w	r4, r3, r1
 80166fc:	4082      	lsls	r2, r0
 80166fe:	4322      	orrs	r2, r4
 8016700:	4547      	cmp	r7, r8
 8016702:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016706:	bf8c      	ite	hi
 8016708:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801670c:	2200      	movls	r2, #0
 801670e:	4083      	lsls	r3, r0
 8016710:	40ca      	lsrs	r2, r1
 8016712:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016716:	4313      	orrs	r3, r2
 8016718:	e7de      	b.n	80166d8 <__b2d+0x48>
 801671a:	ea42 0501 	orr.w	r5, r2, r1
 801671e:	e7db      	b.n	80166d8 <__b2d+0x48>
 8016720:	3ff00000 	.word	0x3ff00000

08016724 <__d2b>:
 8016724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016728:	460f      	mov	r7, r1
 801672a:	2101      	movs	r1, #1
 801672c:	ec59 8b10 	vmov	r8, r9, d0
 8016730:	4616      	mov	r6, r2
 8016732:	f7ff fc1b 	bl	8015f6c <_Balloc>
 8016736:	4604      	mov	r4, r0
 8016738:	b930      	cbnz	r0, 8016748 <__d2b+0x24>
 801673a:	4602      	mov	r2, r0
 801673c:	4b23      	ldr	r3, [pc, #140]	@ (80167cc <__d2b+0xa8>)
 801673e:	4824      	ldr	r0, [pc, #144]	@ (80167d0 <__d2b+0xac>)
 8016740:	f240 310f 	movw	r1, #783	@ 0x30f
 8016744:	f001 fda0 	bl	8018288 <__assert_func>
 8016748:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801674c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016750:	b10d      	cbz	r5, 8016756 <__d2b+0x32>
 8016752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016756:	9301      	str	r3, [sp, #4]
 8016758:	f1b8 0300 	subs.w	r3, r8, #0
 801675c:	d023      	beq.n	80167a6 <__d2b+0x82>
 801675e:	4668      	mov	r0, sp
 8016760:	9300      	str	r3, [sp, #0]
 8016762:	f7ff fd14 	bl	801618e <__lo0bits>
 8016766:	e9dd 1200 	ldrd	r1, r2, [sp]
 801676a:	b1d0      	cbz	r0, 80167a2 <__d2b+0x7e>
 801676c:	f1c0 0320 	rsb	r3, r0, #32
 8016770:	fa02 f303 	lsl.w	r3, r2, r3
 8016774:	430b      	orrs	r3, r1
 8016776:	40c2      	lsrs	r2, r0
 8016778:	6163      	str	r3, [r4, #20]
 801677a:	9201      	str	r2, [sp, #4]
 801677c:	9b01      	ldr	r3, [sp, #4]
 801677e:	61a3      	str	r3, [r4, #24]
 8016780:	2b00      	cmp	r3, #0
 8016782:	bf0c      	ite	eq
 8016784:	2201      	moveq	r2, #1
 8016786:	2202      	movne	r2, #2
 8016788:	6122      	str	r2, [r4, #16]
 801678a:	b1a5      	cbz	r5, 80167b6 <__d2b+0x92>
 801678c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016790:	4405      	add	r5, r0
 8016792:	603d      	str	r5, [r7, #0]
 8016794:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016798:	6030      	str	r0, [r6, #0]
 801679a:	4620      	mov	r0, r4
 801679c:	b003      	add	sp, #12
 801679e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167a2:	6161      	str	r1, [r4, #20]
 80167a4:	e7ea      	b.n	801677c <__d2b+0x58>
 80167a6:	a801      	add	r0, sp, #4
 80167a8:	f7ff fcf1 	bl	801618e <__lo0bits>
 80167ac:	9b01      	ldr	r3, [sp, #4]
 80167ae:	6163      	str	r3, [r4, #20]
 80167b0:	3020      	adds	r0, #32
 80167b2:	2201      	movs	r2, #1
 80167b4:	e7e8      	b.n	8016788 <__d2b+0x64>
 80167b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80167ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80167be:	6038      	str	r0, [r7, #0]
 80167c0:	6918      	ldr	r0, [r3, #16]
 80167c2:	f7ff fcc5 	bl	8016150 <__hi0bits>
 80167c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80167ca:	e7e5      	b.n	8016798 <__d2b+0x74>
 80167cc:	080191df 	.word	0x080191df
 80167d0:	080191f0 	.word	0x080191f0

080167d4 <__ratio>:
 80167d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d8:	b085      	sub	sp, #20
 80167da:	e9cd 1000 	strd	r1, r0, [sp]
 80167de:	a902      	add	r1, sp, #8
 80167e0:	f7ff ff56 	bl	8016690 <__b2d>
 80167e4:	9800      	ldr	r0, [sp, #0]
 80167e6:	a903      	add	r1, sp, #12
 80167e8:	ec55 4b10 	vmov	r4, r5, d0
 80167ec:	f7ff ff50 	bl	8016690 <__b2d>
 80167f0:	9b01      	ldr	r3, [sp, #4]
 80167f2:	6919      	ldr	r1, [r3, #16]
 80167f4:	9b00      	ldr	r3, [sp, #0]
 80167f6:	691b      	ldr	r3, [r3, #16]
 80167f8:	1ac9      	subs	r1, r1, r3
 80167fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80167fe:	1a9b      	subs	r3, r3, r2
 8016800:	ec5b ab10 	vmov	sl, fp, d0
 8016804:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016808:	2b00      	cmp	r3, #0
 801680a:	bfce      	itee	gt
 801680c:	462a      	movgt	r2, r5
 801680e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016812:	465a      	movle	r2, fp
 8016814:	462f      	mov	r7, r5
 8016816:	46d9      	mov	r9, fp
 8016818:	bfcc      	ite	gt
 801681a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801681e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016822:	464b      	mov	r3, r9
 8016824:	4652      	mov	r2, sl
 8016826:	4620      	mov	r0, r4
 8016828:	4639      	mov	r1, r7
 801682a:	f7f2 f83f 	bl	80088ac <__aeabi_ddiv>
 801682e:	ec41 0b10 	vmov	d0, r0, r1
 8016832:	b005      	add	sp, #20
 8016834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016838 <__copybits>:
 8016838:	3901      	subs	r1, #1
 801683a:	b570      	push	{r4, r5, r6, lr}
 801683c:	1149      	asrs	r1, r1, #5
 801683e:	6914      	ldr	r4, [r2, #16]
 8016840:	3101      	adds	r1, #1
 8016842:	f102 0314 	add.w	r3, r2, #20
 8016846:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801684a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801684e:	1f05      	subs	r5, r0, #4
 8016850:	42a3      	cmp	r3, r4
 8016852:	d30c      	bcc.n	801686e <__copybits+0x36>
 8016854:	1aa3      	subs	r3, r4, r2
 8016856:	3b11      	subs	r3, #17
 8016858:	f023 0303 	bic.w	r3, r3, #3
 801685c:	3211      	adds	r2, #17
 801685e:	42a2      	cmp	r2, r4
 8016860:	bf88      	it	hi
 8016862:	2300      	movhi	r3, #0
 8016864:	4418      	add	r0, r3
 8016866:	2300      	movs	r3, #0
 8016868:	4288      	cmp	r0, r1
 801686a:	d305      	bcc.n	8016878 <__copybits+0x40>
 801686c:	bd70      	pop	{r4, r5, r6, pc}
 801686e:	f853 6b04 	ldr.w	r6, [r3], #4
 8016872:	f845 6f04 	str.w	r6, [r5, #4]!
 8016876:	e7eb      	b.n	8016850 <__copybits+0x18>
 8016878:	f840 3b04 	str.w	r3, [r0], #4
 801687c:	e7f4      	b.n	8016868 <__copybits+0x30>

0801687e <__any_on>:
 801687e:	f100 0214 	add.w	r2, r0, #20
 8016882:	6900      	ldr	r0, [r0, #16]
 8016884:	114b      	asrs	r3, r1, #5
 8016886:	4298      	cmp	r0, r3
 8016888:	b510      	push	{r4, lr}
 801688a:	db11      	blt.n	80168b0 <__any_on+0x32>
 801688c:	dd0a      	ble.n	80168a4 <__any_on+0x26>
 801688e:	f011 011f 	ands.w	r1, r1, #31
 8016892:	d007      	beq.n	80168a4 <__any_on+0x26>
 8016894:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016898:	fa24 f001 	lsr.w	r0, r4, r1
 801689c:	fa00 f101 	lsl.w	r1, r0, r1
 80168a0:	428c      	cmp	r4, r1
 80168a2:	d10b      	bne.n	80168bc <__any_on+0x3e>
 80168a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80168a8:	4293      	cmp	r3, r2
 80168aa:	d803      	bhi.n	80168b4 <__any_on+0x36>
 80168ac:	2000      	movs	r0, #0
 80168ae:	bd10      	pop	{r4, pc}
 80168b0:	4603      	mov	r3, r0
 80168b2:	e7f7      	b.n	80168a4 <__any_on+0x26>
 80168b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80168b8:	2900      	cmp	r1, #0
 80168ba:	d0f5      	beq.n	80168a8 <__any_on+0x2a>
 80168bc:	2001      	movs	r0, #1
 80168be:	e7f6      	b.n	80168ae <__any_on+0x30>

080168c0 <sulp>:
 80168c0:	b570      	push	{r4, r5, r6, lr}
 80168c2:	4604      	mov	r4, r0
 80168c4:	460d      	mov	r5, r1
 80168c6:	ec45 4b10 	vmov	d0, r4, r5
 80168ca:	4616      	mov	r6, r2
 80168cc:	f7ff feba 	bl	8016644 <__ulp>
 80168d0:	ec51 0b10 	vmov	r0, r1, d0
 80168d4:	b17e      	cbz	r6, 80168f6 <sulp+0x36>
 80168d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80168da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80168de:	2b00      	cmp	r3, #0
 80168e0:	dd09      	ble.n	80168f6 <sulp+0x36>
 80168e2:	051b      	lsls	r3, r3, #20
 80168e4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80168e8:	2400      	movs	r4, #0
 80168ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80168ee:	4622      	mov	r2, r4
 80168f0:	462b      	mov	r3, r5
 80168f2:	f7f1 feb1 	bl	8008658 <__aeabi_dmul>
 80168f6:	ec41 0b10 	vmov	d0, r0, r1
 80168fa:	bd70      	pop	{r4, r5, r6, pc}
 80168fc:	0000      	movs	r0, r0
	...

08016900 <_strtod_l>:
 8016900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016904:	b09f      	sub	sp, #124	@ 0x7c
 8016906:	460c      	mov	r4, r1
 8016908:	9217      	str	r2, [sp, #92]	@ 0x5c
 801690a:	2200      	movs	r2, #0
 801690c:	921a      	str	r2, [sp, #104]	@ 0x68
 801690e:	9005      	str	r0, [sp, #20]
 8016910:	f04f 0a00 	mov.w	sl, #0
 8016914:	f04f 0b00 	mov.w	fp, #0
 8016918:	460a      	mov	r2, r1
 801691a:	9219      	str	r2, [sp, #100]	@ 0x64
 801691c:	7811      	ldrb	r1, [r2, #0]
 801691e:	292b      	cmp	r1, #43	@ 0x2b
 8016920:	d04a      	beq.n	80169b8 <_strtod_l+0xb8>
 8016922:	d838      	bhi.n	8016996 <_strtod_l+0x96>
 8016924:	290d      	cmp	r1, #13
 8016926:	d832      	bhi.n	801698e <_strtod_l+0x8e>
 8016928:	2908      	cmp	r1, #8
 801692a:	d832      	bhi.n	8016992 <_strtod_l+0x92>
 801692c:	2900      	cmp	r1, #0
 801692e:	d03b      	beq.n	80169a8 <_strtod_l+0xa8>
 8016930:	2200      	movs	r2, #0
 8016932:	920e      	str	r2, [sp, #56]	@ 0x38
 8016934:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016936:	782a      	ldrb	r2, [r5, #0]
 8016938:	2a30      	cmp	r2, #48	@ 0x30
 801693a:	f040 80b2 	bne.w	8016aa2 <_strtod_l+0x1a2>
 801693e:	786a      	ldrb	r2, [r5, #1]
 8016940:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016944:	2a58      	cmp	r2, #88	@ 0x58
 8016946:	d16e      	bne.n	8016a26 <_strtod_l+0x126>
 8016948:	9302      	str	r3, [sp, #8]
 801694a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801694c:	9301      	str	r3, [sp, #4]
 801694e:	ab1a      	add	r3, sp, #104	@ 0x68
 8016950:	9300      	str	r3, [sp, #0]
 8016952:	4a8f      	ldr	r2, [pc, #572]	@ (8016b90 <_strtod_l+0x290>)
 8016954:	9805      	ldr	r0, [sp, #20]
 8016956:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016958:	a919      	add	r1, sp, #100	@ 0x64
 801695a:	f001 fd2f 	bl	80183bc <__gethex>
 801695e:	f010 060f 	ands.w	r6, r0, #15
 8016962:	4604      	mov	r4, r0
 8016964:	d005      	beq.n	8016972 <_strtod_l+0x72>
 8016966:	2e06      	cmp	r6, #6
 8016968:	d128      	bne.n	80169bc <_strtod_l+0xbc>
 801696a:	3501      	adds	r5, #1
 801696c:	2300      	movs	r3, #0
 801696e:	9519      	str	r5, [sp, #100]	@ 0x64
 8016970:	930e      	str	r3, [sp, #56]	@ 0x38
 8016972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016974:	2b00      	cmp	r3, #0
 8016976:	f040 858e 	bne.w	8017496 <_strtod_l+0xb96>
 801697a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801697c:	b1cb      	cbz	r3, 80169b2 <_strtod_l+0xb2>
 801697e:	4652      	mov	r2, sl
 8016980:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016984:	ec43 2b10 	vmov	d0, r2, r3
 8016988:	b01f      	add	sp, #124	@ 0x7c
 801698a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801698e:	2920      	cmp	r1, #32
 8016990:	d1ce      	bne.n	8016930 <_strtod_l+0x30>
 8016992:	3201      	adds	r2, #1
 8016994:	e7c1      	b.n	801691a <_strtod_l+0x1a>
 8016996:	292d      	cmp	r1, #45	@ 0x2d
 8016998:	d1ca      	bne.n	8016930 <_strtod_l+0x30>
 801699a:	2101      	movs	r1, #1
 801699c:	910e      	str	r1, [sp, #56]	@ 0x38
 801699e:	1c51      	adds	r1, r2, #1
 80169a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80169a2:	7852      	ldrb	r2, [r2, #1]
 80169a4:	2a00      	cmp	r2, #0
 80169a6:	d1c5      	bne.n	8016934 <_strtod_l+0x34>
 80169a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80169aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	f040 8570 	bne.w	8017492 <_strtod_l+0xb92>
 80169b2:	4652      	mov	r2, sl
 80169b4:	465b      	mov	r3, fp
 80169b6:	e7e5      	b.n	8016984 <_strtod_l+0x84>
 80169b8:	2100      	movs	r1, #0
 80169ba:	e7ef      	b.n	801699c <_strtod_l+0x9c>
 80169bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80169be:	b13a      	cbz	r2, 80169d0 <_strtod_l+0xd0>
 80169c0:	2135      	movs	r1, #53	@ 0x35
 80169c2:	a81c      	add	r0, sp, #112	@ 0x70
 80169c4:	f7ff ff38 	bl	8016838 <__copybits>
 80169c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80169ca:	9805      	ldr	r0, [sp, #20]
 80169cc:	f7ff fb0e 	bl	8015fec <_Bfree>
 80169d0:	3e01      	subs	r6, #1
 80169d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80169d4:	2e04      	cmp	r6, #4
 80169d6:	d806      	bhi.n	80169e6 <_strtod_l+0xe6>
 80169d8:	e8df f006 	tbb	[pc, r6]
 80169dc:	201d0314 	.word	0x201d0314
 80169e0:	14          	.byte	0x14
 80169e1:	00          	.byte	0x00
 80169e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80169e6:	05e1      	lsls	r1, r4, #23
 80169e8:	bf48      	it	mi
 80169ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80169ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80169f2:	0d1b      	lsrs	r3, r3, #20
 80169f4:	051b      	lsls	r3, r3, #20
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d1bb      	bne.n	8016972 <_strtod_l+0x72>
 80169fa:	f7fe fbd9 	bl	80151b0 <__errno>
 80169fe:	2322      	movs	r3, #34	@ 0x22
 8016a00:	6003      	str	r3, [r0, #0]
 8016a02:	e7b6      	b.n	8016972 <_strtod_l+0x72>
 8016a04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016a08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016a0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016a10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016a14:	e7e7      	b.n	80169e6 <_strtod_l+0xe6>
 8016a16:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016b98 <_strtod_l+0x298>
 8016a1a:	e7e4      	b.n	80169e6 <_strtod_l+0xe6>
 8016a1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016a20:	f04f 3aff 	mov.w	sl, #4294967295
 8016a24:	e7df      	b.n	80169e6 <_strtod_l+0xe6>
 8016a26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016a28:	1c5a      	adds	r2, r3, #1
 8016a2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8016a2c:	785b      	ldrb	r3, [r3, #1]
 8016a2e:	2b30      	cmp	r3, #48	@ 0x30
 8016a30:	d0f9      	beq.n	8016a26 <_strtod_l+0x126>
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d09d      	beq.n	8016972 <_strtod_l+0x72>
 8016a36:	2301      	movs	r3, #1
 8016a38:	2700      	movs	r7, #0
 8016a3a:	9308      	str	r3, [sp, #32]
 8016a3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016a3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016a40:	970b      	str	r7, [sp, #44]	@ 0x2c
 8016a42:	46b9      	mov	r9, r7
 8016a44:	220a      	movs	r2, #10
 8016a46:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016a48:	7805      	ldrb	r5, [r0, #0]
 8016a4a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016a4e:	b2d9      	uxtb	r1, r3
 8016a50:	2909      	cmp	r1, #9
 8016a52:	d928      	bls.n	8016aa6 <_strtod_l+0x1a6>
 8016a54:	494f      	ldr	r1, [pc, #316]	@ (8016b94 <_strtod_l+0x294>)
 8016a56:	2201      	movs	r2, #1
 8016a58:	f001 fbc9 	bl	80181ee <strncmp>
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	d032      	beq.n	8016ac6 <_strtod_l+0x1c6>
 8016a60:	2000      	movs	r0, #0
 8016a62:	462a      	mov	r2, r5
 8016a64:	900a      	str	r0, [sp, #40]	@ 0x28
 8016a66:	464d      	mov	r5, r9
 8016a68:	4603      	mov	r3, r0
 8016a6a:	2a65      	cmp	r2, #101	@ 0x65
 8016a6c:	d001      	beq.n	8016a72 <_strtod_l+0x172>
 8016a6e:	2a45      	cmp	r2, #69	@ 0x45
 8016a70:	d114      	bne.n	8016a9c <_strtod_l+0x19c>
 8016a72:	b91d      	cbnz	r5, 8016a7c <_strtod_l+0x17c>
 8016a74:	9a08      	ldr	r2, [sp, #32]
 8016a76:	4302      	orrs	r2, r0
 8016a78:	d096      	beq.n	80169a8 <_strtod_l+0xa8>
 8016a7a:	2500      	movs	r5, #0
 8016a7c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016a7e:	1c62      	adds	r2, r4, #1
 8016a80:	9219      	str	r2, [sp, #100]	@ 0x64
 8016a82:	7862      	ldrb	r2, [r4, #1]
 8016a84:	2a2b      	cmp	r2, #43	@ 0x2b
 8016a86:	d07a      	beq.n	8016b7e <_strtod_l+0x27e>
 8016a88:	2a2d      	cmp	r2, #45	@ 0x2d
 8016a8a:	d07e      	beq.n	8016b8a <_strtod_l+0x28a>
 8016a8c:	f04f 0c00 	mov.w	ip, #0
 8016a90:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016a94:	2909      	cmp	r1, #9
 8016a96:	f240 8085 	bls.w	8016ba4 <_strtod_l+0x2a4>
 8016a9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8016a9c:	f04f 0800 	mov.w	r8, #0
 8016aa0:	e0a5      	b.n	8016bee <_strtod_l+0x2ee>
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	e7c8      	b.n	8016a38 <_strtod_l+0x138>
 8016aa6:	f1b9 0f08 	cmp.w	r9, #8
 8016aaa:	bfd8      	it	le
 8016aac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8016aae:	f100 0001 	add.w	r0, r0, #1
 8016ab2:	bfda      	itte	le
 8016ab4:	fb02 3301 	mlale	r3, r2, r1, r3
 8016ab8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8016aba:	fb02 3707 	mlagt	r7, r2, r7, r3
 8016abe:	f109 0901 	add.w	r9, r9, #1
 8016ac2:	9019      	str	r0, [sp, #100]	@ 0x64
 8016ac4:	e7bf      	b.n	8016a46 <_strtod_l+0x146>
 8016ac6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ac8:	1c5a      	adds	r2, r3, #1
 8016aca:	9219      	str	r2, [sp, #100]	@ 0x64
 8016acc:	785a      	ldrb	r2, [r3, #1]
 8016ace:	f1b9 0f00 	cmp.w	r9, #0
 8016ad2:	d03b      	beq.n	8016b4c <_strtod_l+0x24c>
 8016ad4:	900a      	str	r0, [sp, #40]	@ 0x28
 8016ad6:	464d      	mov	r5, r9
 8016ad8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016adc:	2b09      	cmp	r3, #9
 8016ade:	d912      	bls.n	8016b06 <_strtod_l+0x206>
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	e7c2      	b.n	8016a6a <_strtod_l+0x16a>
 8016ae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ae6:	1c5a      	adds	r2, r3, #1
 8016ae8:	9219      	str	r2, [sp, #100]	@ 0x64
 8016aea:	785a      	ldrb	r2, [r3, #1]
 8016aec:	3001      	adds	r0, #1
 8016aee:	2a30      	cmp	r2, #48	@ 0x30
 8016af0:	d0f8      	beq.n	8016ae4 <_strtod_l+0x1e4>
 8016af2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016af6:	2b08      	cmp	r3, #8
 8016af8:	f200 84d2 	bhi.w	80174a0 <_strtod_l+0xba0>
 8016afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016afe:	900a      	str	r0, [sp, #40]	@ 0x28
 8016b00:	2000      	movs	r0, #0
 8016b02:	930c      	str	r3, [sp, #48]	@ 0x30
 8016b04:	4605      	mov	r5, r0
 8016b06:	3a30      	subs	r2, #48	@ 0x30
 8016b08:	f100 0301 	add.w	r3, r0, #1
 8016b0c:	d018      	beq.n	8016b40 <_strtod_l+0x240>
 8016b0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016b10:	4419      	add	r1, r3
 8016b12:	910a      	str	r1, [sp, #40]	@ 0x28
 8016b14:	462e      	mov	r6, r5
 8016b16:	f04f 0e0a 	mov.w	lr, #10
 8016b1a:	1c71      	adds	r1, r6, #1
 8016b1c:	eba1 0c05 	sub.w	ip, r1, r5
 8016b20:	4563      	cmp	r3, ip
 8016b22:	dc15      	bgt.n	8016b50 <_strtod_l+0x250>
 8016b24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016b28:	182b      	adds	r3, r5, r0
 8016b2a:	2b08      	cmp	r3, #8
 8016b2c:	f105 0501 	add.w	r5, r5, #1
 8016b30:	4405      	add	r5, r0
 8016b32:	dc1a      	bgt.n	8016b6a <_strtod_l+0x26a>
 8016b34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016b36:	230a      	movs	r3, #10
 8016b38:	fb03 2301 	mla	r3, r3, r1, r2
 8016b3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016b3e:	2300      	movs	r3, #0
 8016b40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016b42:	1c51      	adds	r1, r2, #1
 8016b44:	9119      	str	r1, [sp, #100]	@ 0x64
 8016b46:	7852      	ldrb	r2, [r2, #1]
 8016b48:	4618      	mov	r0, r3
 8016b4a:	e7c5      	b.n	8016ad8 <_strtod_l+0x1d8>
 8016b4c:	4648      	mov	r0, r9
 8016b4e:	e7ce      	b.n	8016aee <_strtod_l+0x1ee>
 8016b50:	2e08      	cmp	r6, #8
 8016b52:	dc05      	bgt.n	8016b60 <_strtod_l+0x260>
 8016b54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016b56:	fb0e f606 	mul.w	r6, lr, r6
 8016b5a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8016b5c:	460e      	mov	r6, r1
 8016b5e:	e7dc      	b.n	8016b1a <_strtod_l+0x21a>
 8016b60:	2910      	cmp	r1, #16
 8016b62:	bfd8      	it	le
 8016b64:	fb0e f707 	mulle.w	r7, lr, r7
 8016b68:	e7f8      	b.n	8016b5c <_strtod_l+0x25c>
 8016b6a:	2b0f      	cmp	r3, #15
 8016b6c:	bfdc      	itt	le
 8016b6e:	230a      	movle	r3, #10
 8016b70:	fb03 2707 	mlale	r7, r3, r7, r2
 8016b74:	e7e3      	b.n	8016b3e <_strtod_l+0x23e>
 8016b76:	2300      	movs	r3, #0
 8016b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	e77a      	b.n	8016a74 <_strtod_l+0x174>
 8016b7e:	f04f 0c00 	mov.w	ip, #0
 8016b82:	1ca2      	adds	r2, r4, #2
 8016b84:	9219      	str	r2, [sp, #100]	@ 0x64
 8016b86:	78a2      	ldrb	r2, [r4, #2]
 8016b88:	e782      	b.n	8016a90 <_strtod_l+0x190>
 8016b8a:	f04f 0c01 	mov.w	ip, #1
 8016b8e:	e7f8      	b.n	8016b82 <_strtod_l+0x282>
 8016b90:	0801942c 	.word	0x0801942c
 8016b94:	08019249 	.word	0x08019249
 8016b98:	7ff00000 	.word	0x7ff00000
 8016b9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016b9e:	1c51      	adds	r1, r2, #1
 8016ba0:	9119      	str	r1, [sp, #100]	@ 0x64
 8016ba2:	7852      	ldrb	r2, [r2, #1]
 8016ba4:	2a30      	cmp	r2, #48	@ 0x30
 8016ba6:	d0f9      	beq.n	8016b9c <_strtod_l+0x29c>
 8016ba8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016bac:	2908      	cmp	r1, #8
 8016bae:	f63f af75 	bhi.w	8016a9c <_strtod_l+0x19c>
 8016bb2:	3a30      	subs	r2, #48	@ 0x30
 8016bb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8016bb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016bb8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016bba:	f04f 080a 	mov.w	r8, #10
 8016bbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016bc0:	1c56      	adds	r6, r2, #1
 8016bc2:	9619      	str	r6, [sp, #100]	@ 0x64
 8016bc4:	7852      	ldrb	r2, [r2, #1]
 8016bc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016bca:	f1be 0f09 	cmp.w	lr, #9
 8016bce:	d939      	bls.n	8016c44 <_strtod_l+0x344>
 8016bd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016bd2:	1a76      	subs	r6, r6, r1
 8016bd4:	2e08      	cmp	r6, #8
 8016bd6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016bda:	dc03      	bgt.n	8016be4 <_strtod_l+0x2e4>
 8016bdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016bde:	4588      	cmp	r8, r1
 8016be0:	bfa8      	it	ge
 8016be2:	4688      	movge	r8, r1
 8016be4:	f1bc 0f00 	cmp.w	ip, #0
 8016be8:	d001      	beq.n	8016bee <_strtod_l+0x2ee>
 8016bea:	f1c8 0800 	rsb	r8, r8, #0
 8016bee:	2d00      	cmp	r5, #0
 8016bf0:	d14e      	bne.n	8016c90 <_strtod_l+0x390>
 8016bf2:	9908      	ldr	r1, [sp, #32]
 8016bf4:	4308      	orrs	r0, r1
 8016bf6:	f47f aebc 	bne.w	8016972 <_strtod_l+0x72>
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	f47f aed4 	bne.w	80169a8 <_strtod_l+0xa8>
 8016c00:	2a69      	cmp	r2, #105	@ 0x69
 8016c02:	d028      	beq.n	8016c56 <_strtod_l+0x356>
 8016c04:	dc25      	bgt.n	8016c52 <_strtod_l+0x352>
 8016c06:	2a49      	cmp	r2, #73	@ 0x49
 8016c08:	d025      	beq.n	8016c56 <_strtod_l+0x356>
 8016c0a:	2a4e      	cmp	r2, #78	@ 0x4e
 8016c0c:	f47f aecc 	bne.w	80169a8 <_strtod_l+0xa8>
 8016c10:	499a      	ldr	r1, [pc, #616]	@ (8016e7c <_strtod_l+0x57c>)
 8016c12:	a819      	add	r0, sp, #100	@ 0x64
 8016c14:	f001 fdf4 	bl	8018800 <__match>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	f43f aec5 	beq.w	80169a8 <_strtod_l+0xa8>
 8016c1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c20:	781b      	ldrb	r3, [r3, #0]
 8016c22:	2b28      	cmp	r3, #40	@ 0x28
 8016c24:	d12e      	bne.n	8016c84 <_strtod_l+0x384>
 8016c26:	4996      	ldr	r1, [pc, #600]	@ (8016e80 <_strtod_l+0x580>)
 8016c28:	aa1c      	add	r2, sp, #112	@ 0x70
 8016c2a:	a819      	add	r0, sp, #100	@ 0x64
 8016c2c:	f001 fdfc 	bl	8018828 <__hexnan>
 8016c30:	2805      	cmp	r0, #5
 8016c32:	d127      	bne.n	8016c84 <_strtod_l+0x384>
 8016c34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016c36:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016c3a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016c3e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016c42:	e696      	b.n	8016972 <_strtod_l+0x72>
 8016c44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016c46:	fb08 2101 	mla	r1, r8, r1, r2
 8016c4a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016c4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c50:	e7b5      	b.n	8016bbe <_strtod_l+0x2be>
 8016c52:	2a6e      	cmp	r2, #110	@ 0x6e
 8016c54:	e7da      	b.n	8016c0c <_strtod_l+0x30c>
 8016c56:	498b      	ldr	r1, [pc, #556]	@ (8016e84 <_strtod_l+0x584>)
 8016c58:	a819      	add	r0, sp, #100	@ 0x64
 8016c5a:	f001 fdd1 	bl	8018800 <__match>
 8016c5e:	2800      	cmp	r0, #0
 8016c60:	f43f aea2 	beq.w	80169a8 <_strtod_l+0xa8>
 8016c64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c66:	4988      	ldr	r1, [pc, #544]	@ (8016e88 <_strtod_l+0x588>)
 8016c68:	3b01      	subs	r3, #1
 8016c6a:	a819      	add	r0, sp, #100	@ 0x64
 8016c6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8016c6e:	f001 fdc7 	bl	8018800 <__match>
 8016c72:	b910      	cbnz	r0, 8016c7a <_strtod_l+0x37a>
 8016c74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c76:	3301      	adds	r3, #1
 8016c78:	9319      	str	r3, [sp, #100]	@ 0x64
 8016c7a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016e98 <_strtod_l+0x598>
 8016c7e:	f04f 0a00 	mov.w	sl, #0
 8016c82:	e676      	b.n	8016972 <_strtod_l+0x72>
 8016c84:	4881      	ldr	r0, [pc, #516]	@ (8016e8c <_strtod_l+0x58c>)
 8016c86:	f001 faf7 	bl	8018278 <nan>
 8016c8a:	ec5b ab10 	vmov	sl, fp, d0
 8016c8e:	e670      	b.n	8016972 <_strtod_l+0x72>
 8016c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c92:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016c94:	eba8 0303 	sub.w	r3, r8, r3
 8016c98:	f1b9 0f00 	cmp.w	r9, #0
 8016c9c:	bf08      	it	eq
 8016c9e:	46a9      	moveq	r9, r5
 8016ca0:	2d10      	cmp	r5, #16
 8016ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ca4:	462c      	mov	r4, r5
 8016ca6:	bfa8      	it	ge
 8016ca8:	2410      	movge	r4, #16
 8016caa:	f7f1 fc5b 	bl	8008564 <__aeabi_ui2d>
 8016cae:	2d09      	cmp	r5, #9
 8016cb0:	4682      	mov	sl, r0
 8016cb2:	468b      	mov	fp, r1
 8016cb4:	dc13      	bgt.n	8016cde <_strtod_l+0x3de>
 8016cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	f43f ae5a 	beq.w	8016972 <_strtod_l+0x72>
 8016cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cc0:	dd78      	ble.n	8016db4 <_strtod_l+0x4b4>
 8016cc2:	2b16      	cmp	r3, #22
 8016cc4:	dc5f      	bgt.n	8016d86 <_strtod_l+0x486>
 8016cc6:	4972      	ldr	r1, [pc, #456]	@ (8016e90 <_strtod_l+0x590>)
 8016cc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016cd0:	4652      	mov	r2, sl
 8016cd2:	465b      	mov	r3, fp
 8016cd4:	f7f1 fcc0 	bl	8008658 <__aeabi_dmul>
 8016cd8:	4682      	mov	sl, r0
 8016cda:	468b      	mov	fp, r1
 8016cdc:	e649      	b.n	8016972 <_strtod_l+0x72>
 8016cde:	4b6c      	ldr	r3, [pc, #432]	@ (8016e90 <_strtod_l+0x590>)
 8016ce0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016ce4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016ce8:	f7f1 fcb6 	bl	8008658 <__aeabi_dmul>
 8016cec:	4682      	mov	sl, r0
 8016cee:	4638      	mov	r0, r7
 8016cf0:	468b      	mov	fp, r1
 8016cf2:	f7f1 fc37 	bl	8008564 <__aeabi_ui2d>
 8016cf6:	4602      	mov	r2, r0
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	4650      	mov	r0, sl
 8016cfc:	4659      	mov	r1, fp
 8016cfe:	f7f1 faf5 	bl	80082ec <__adddf3>
 8016d02:	2d0f      	cmp	r5, #15
 8016d04:	4682      	mov	sl, r0
 8016d06:	468b      	mov	fp, r1
 8016d08:	ddd5      	ble.n	8016cb6 <_strtod_l+0x3b6>
 8016d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d0c:	1b2c      	subs	r4, r5, r4
 8016d0e:	441c      	add	r4, r3
 8016d10:	2c00      	cmp	r4, #0
 8016d12:	f340 8093 	ble.w	8016e3c <_strtod_l+0x53c>
 8016d16:	f014 030f 	ands.w	r3, r4, #15
 8016d1a:	d00a      	beq.n	8016d32 <_strtod_l+0x432>
 8016d1c:	495c      	ldr	r1, [pc, #368]	@ (8016e90 <_strtod_l+0x590>)
 8016d1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016d22:	4652      	mov	r2, sl
 8016d24:	465b      	mov	r3, fp
 8016d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d2a:	f7f1 fc95 	bl	8008658 <__aeabi_dmul>
 8016d2e:	4682      	mov	sl, r0
 8016d30:	468b      	mov	fp, r1
 8016d32:	f034 040f 	bics.w	r4, r4, #15
 8016d36:	d073      	beq.n	8016e20 <_strtod_l+0x520>
 8016d38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016d3c:	dd49      	ble.n	8016dd2 <_strtod_l+0x4d2>
 8016d3e:	2400      	movs	r4, #0
 8016d40:	46a0      	mov	r8, r4
 8016d42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016d44:	46a1      	mov	r9, r4
 8016d46:	9a05      	ldr	r2, [sp, #20]
 8016d48:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016e98 <_strtod_l+0x598>
 8016d4c:	2322      	movs	r3, #34	@ 0x22
 8016d4e:	6013      	str	r3, [r2, #0]
 8016d50:	f04f 0a00 	mov.w	sl, #0
 8016d54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	f43f ae0b 	beq.w	8016972 <_strtod_l+0x72>
 8016d5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d5e:	9805      	ldr	r0, [sp, #20]
 8016d60:	f7ff f944 	bl	8015fec <_Bfree>
 8016d64:	9805      	ldr	r0, [sp, #20]
 8016d66:	4649      	mov	r1, r9
 8016d68:	f7ff f940 	bl	8015fec <_Bfree>
 8016d6c:	9805      	ldr	r0, [sp, #20]
 8016d6e:	4641      	mov	r1, r8
 8016d70:	f7ff f93c 	bl	8015fec <_Bfree>
 8016d74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016d76:	9805      	ldr	r0, [sp, #20]
 8016d78:	f7ff f938 	bl	8015fec <_Bfree>
 8016d7c:	9805      	ldr	r0, [sp, #20]
 8016d7e:	4621      	mov	r1, r4
 8016d80:	f7ff f934 	bl	8015fec <_Bfree>
 8016d84:	e5f5      	b.n	8016972 <_strtod_l+0x72>
 8016d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016d8c:	4293      	cmp	r3, r2
 8016d8e:	dbbc      	blt.n	8016d0a <_strtod_l+0x40a>
 8016d90:	4c3f      	ldr	r4, [pc, #252]	@ (8016e90 <_strtod_l+0x590>)
 8016d92:	f1c5 050f 	rsb	r5, r5, #15
 8016d96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016d9a:	4652      	mov	r2, sl
 8016d9c:	465b      	mov	r3, fp
 8016d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016da2:	f7f1 fc59 	bl	8008658 <__aeabi_dmul>
 8016da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016da8:	1b5d      	subs	r5, r3, r5
 8016daa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016dae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016db2:	e78f      	b.n	8016cd4 <_strtod_l+0x3d4>
 8016db4:	3316      	adds	r3, #22
 8016db6:	dba8      	blt.n	8016d0a <_strtod_l+0x40a>
 8016db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016dba:	eba3 0808 	sub.w	r8, r3, r8
 8016dbe:	4b34      	ldr	r3, [pc, #208]	@ (8016e90 <_strtod_l+0x590>)
 8016dc0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016dc4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016dc8:	4650      	mov	r0, sl
 8016dca:	4659      	mov	r1, fp
 8016dcc:	f7f1 fd6e 	bl	80088ac <__aeabi_ddiv>
 8016dd0:	e782      	b.n	8016cd8 <_strtod_l+0x3d8>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	4f2f      	ldr	r7, [pc, #188]	@ (8016e94 <_strtod_l+0x594>)
 8016dd6:	1124      	asrs	r4, r4, #4
 8016dd8:	4650      	mov	r0, sl
 8016dda:	4659      	mov	r1, fp
 8016ddc:	461e      	mov	r6, r3
 8016dde:	2c01      	cmp	r4, #1
 8016de0:	dc21      	bgt.n	8016e26 <_strtod_l+0x526>
 8016de2:	b10b      	cbz	r3, 8016de8 <_strtod_l+0x4e8>
 8016de4:	4682      	mov	sl, r0
 8016de6:	468b      	mov	fp, r1
 8016de8:	492a      	ldr	r1, [pc, #168]	@ (8016e94 <_strtod_l+0x594>)
 8016dea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016dee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016df2:	4652      	mov	r2, sl
 8016df4:	465b      	mov	r3, fp
 8016df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016dfa:	f7f1 fc2d 	bl	8008658 <__aeabi_dmul>
 8016dfe:	4b26      	ldr	r3, [pc, #152]	@ (8016e98 <_strtod_l+0x598>)
 8016e00:	460a      	mov	r2, r1
 8016e02:	400b      	ands	r3, r1
 8016e04:	4925      	ldr	r1, [pc, #148]	@ (8016e9c <_strtod_l+0x59c>)
 8016e06:	428b      	cmp	r3, r1
 8016e08:	4682      	mov	sl, r0
 8016e0a:	d898      	bhi.n	8016d3e <_strtod_l+0x43e>
 8016e0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016e10:	428b      	cmp	r3, r1
 8016e12:	bf86      	itte	hi
 8016e14:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016ea0 <_strtod_l+0x5a0>
 8016e18:	f04f 3aff 	movhi.w	sl, #4294967295
 8016e1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016e20:	2300      	movs	r3, #0
 8016e22:	9308      	str	r3, [sp, #32]
 8016e24:	e076      	b.n	8016f14 <_strtod_l+0x614>
 8016e26:	07e2      	lsls	r2, r4, #31
 8016e28:	d504      	bpl.n	8016e34 <_strtod_l+0x534>
 8016e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e2e:	f7f1 fc13 	bl	8008658 <__aeabi_dmul>
 8016e32:	2301      	movs	r3, #1
 8016e34:	3601      	adds	r6, #1
 8016e36:	1064      	asrs	r4, r4, #1
 8016e38:	3708      	adds	r7, #8
 8016e3a:	e7d0      	b.n	8016dde <_strtod_l+0x4de>
 8016e3c:	d0f0      	beq.n	8016e20 <_strtod_l+0x520>
 8016e3e:	4264      	negs	r4, r4
 8016e40:	f014 020f 	ands.w	r2, r4, #15
 8016e44:	d00a      	beq.n	8016e5c <_strtod_l+0x55c>
 8016e46:	4b12      	ldr	r3, [pc, #72]	@ (8016e90 <_strtod_l+0x590>)
 8016e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016e4c:	4650      	mov	r0, sl
 8016e4e:	4659      	mov	r1, fp
 8016e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e54:	f7f1 fd2a 	bl	80088ac <__aeabi_ddiv>
 8016e58:	4682      	mov	sl, r0
 8016e5a:	468b      	mov	fp, r1
 8016e5c:	1124      	asrs	r4, r4, #4
 8016e5e:	d0df      	beq.n	8016e20 <_strtod_l+0x520>
 8016e60:	2c1f      	cmp	r4, #31
 8016e62:	dd1f      	ble.n	8016ea4 <_strtod_l+0x5a4>
 8016e64:	2400      	movs	r4, #0
 8016e66:	46a0      	mov	r8, r4
 8016e68:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016e6a:	46a1      	mov	r9, r4
 8016e6c:	9a05      	ldr	r2, [sp, #20]
 8016e6e:	2322      	movs	r3, #34	@ 0x22
 8016e70:	f04f 0a00 	mov.w	sl, #0
 8016e74:	f04f 0b00 	mov.w	fp, #0
 8016e78:	6013      	str	r3, [r2, #0]
 8016e7a:	e76b      	b.n	8016d54 <_strtod_l+0x454>
 8016e7c:	08019139 	.word	0x08019139
 8016e80:	08019418 	.word	0x08019418
 8016e84:	08019131 	.word	0x08019131
 8016e88:	08019166 	.word	0x08019166
 8016e8c:	080192ba 	.word	0x080192ba
 8016e90:	08019350 	.word	0x08019350
 8016e94:	08019328 	.word	0x08019328
 8016e98:	7ff00000 	.word	0x7ff00000
 8016e9c:	7ca00000 	.word	0x7ca00000
 8016ea0:	7fefffff 	.word	0x7fefffff
 8016ea4:	f014 0310 	ands.w	r3, r4, #16
 8016ea8:	bf18      	it	ne
 8016eaa:	236a      	movne	r3, #106	@ 0x6a
 8016eac:	4ea9      	ldr	r6, [pc, #676]	@ (8017154 <_strtod_l+0x854>)
 8016eae:	9308      	str	r3, [sp, #32]
 8016eb0:	4650      	mov	r0, sl
 8016eb2:	4659      	mov	r1, fp
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	07e7      	lsls	r7, r4, #31
 8016eb8:	d504      	bpl.n	8016ec4 <_strtod_l+0x5c4>
 8016eba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016ebe:	f7f1 fbcb 	bl	8008658 <__aeabi_dmul>
 8016ec2:	2301      	movs	r3, #1
 8016ec4:	1064      	asrs	r4, r4, #1
 8016ec6:	f106 0608 	add.w	r6, r6, #8
 8016eca:	d1f4      	bne.n	8016eb6 <_strtod_l+0x5b6>
 8016ecc:	b10b      	cbz	r3, 8016ed2 <_strtod_l+0x5d2>
 8016ece:	4682      	mov	sl, r0
 8016ed0:	468b      	mov	fp, r1
 8016ed2:	9b08      	ldr	r3, [sp, #32]
 8016ed4:	b1b3      	cbz	r3, 8016f04 <_strtod_l+0x604>
 8016ed6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016eda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	4659      	mov	r1, fp
 8016ee2:	dd0f      	ble.n	8016f04 <_strtod_l+0x604>
 8016ee4:	2b1f      	cmp	r3, #31
 8016ee6:	dd56      	ble.n	8016f96 <_strtod_l+0x696>
 8016ee8:	2b34      	cmp	r3, #52	@ 0x34
 8016eea:	bfde      	ittt	le
 8016eec:	f04f 33ff 	movle.w	r3, #4294967295
 8016ef0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016ef4:	4093      	lslle	r3, r2
 8016ef6:	f04f 0a00 	mov.w	sl, #0
 8016efa:	bfcc      	ite	gt
 8016efc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016f00:	ea03 0b01 	andle.w	fp, r3, r1
 8016f04:	2200      	movs	r2, #0
 8016f06:	2300      	movs	r3, #0
 8016f08:	4650      	mov	r0, sl
 8016f0a:	4659      	mov	r1, fp
 8016f0c:	f7f1 fe0c 	bl	8008b28 <__aeabi_dcmpeq>
 8016f10:	2800      	cmp	r0, #0
 8016f12:	d1a7      	bne.n	8016e64 <_strtod_l+0x564>
 8016f14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016f16:	9300      	str	r3, [sp, #0]
 8016f18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016f1a:	9805      	ldr	r0, [sp, #20]
 8016f1c:	462b      	mov	r3, r5
 8016f1e:	464a      	mov	r2, r9
 8016f20:	f7ff f8cc 	bl	80160bc <__s2b>
 8016f24:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016f26:	2800      	cmp	r0, #0
 8016f28:	f43f af09 	beq.w	8016d3e <_strtod_l+0x43e>
 8016f2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f30:	2a00      	cmp	r2, #0
 8016f32:	eba3 0308 	sub.w	r3, r3, r8
 8016f36:	bfa8      	it	ge
 8016f38:	2300      	movge	r3, #0
 8016f3a:	9312      	str	r3, [sp, #72]	@ 0x48
 8016f3c:	2400      	movs	r4, #0
 8016f3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016f42:	9316      	str	r3, [sp, #88]	@ 0x58
 8016f44:	46a0      	mov	r8, r4
 8016f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016f48:	9805      	ldr	r0, [sp, #20]
 8016f4a:	6859      	ldr	r1, [r3, #4]
 8016f4c:	f7ff f80e 	bl	8015f6c <_Balloc>
 8016f50:	4681      	mov	r9, r0
 8016f52:	2800      	cmp	r0, #0
 8016f54:	f43f aef7 	beq.w	8016d46 <_strtod_l+0x446>
 8016f58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016f5a:	691a      	ldr	r2, [r3, #16]
 8016f5c:	3202      	adds	r2, #2
 8016f5e:	f103 010c 	add.w	r1, r3, #12
 8016f62:	0092      	lsls	r2, r2, #2
 8016f64:	300c      	adds	r0, #12
 8016f66:	f001 f977 	bl	8018258 <memcpy>
 8016f6a:	ec4b ab10 	vmov	d0, sl, fp
 8016f6e:	9805      	ldr	r0, [sp, #20]
 8016f70:	aa1c      	add	r2, sp, #112	@ 0x70
 8016f72:	a91b      	add	r1, sp, #108	@ 0x6c
 8016f74:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016f78:	f7ff fbd4 	bl	8016724 <__d2b>
 8016f7c:	901a      	str	r0, [sp, #104]	@ 0x68
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	f43f aee1 	beq.w	8016d46 <_strtod_l+0x446>
 8016f84:	9805      	ldr	r0, [sp, #20]
 8016f86:	2101      	movs	r1, #1
 8016f88:	f7ff f92e 	bl	80161e8 <__i2b>
 8016f8c:	4680      	mov	r8, r0
 8016f8e:	b948      	cbnz	r0, 8016fa4 <_strtod_l+0x6a4>
 8016f90:	f04f 0800 	mov.w	r8, #0
 8016f94:	e6d7      	b.n	8016d46 <_strtod_l+0x446>
 8016f96:	f04f 32ff 	mov.w	r2, #4294967295
 8016f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8016f9e:	ea03 0a0a 	and.w	sl, r3, sl
 8016fa2:	e7af      	b.n	8016f04 <_strtod_l+0x604>
 8016fa4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016fa6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016fa8:	2d00      	cmp	r5, #0
 8016faa:	bfab      	itete	ge
 8016fac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016fae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016fb0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016fb2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016fb4:	bfac      	ite	ge
 8016fb6:	18ef      	addge	r7, r5, r3
 8016fb8:	1b5e      	sublt	r6, r3, r5
 8016fba:	9b08      	ldr	r3, [sp, #32]
 8016fbc:	1aed      	subs	r5, r5, r3
 8016fbe:	4415      	add	r5, r2
 8016fc0:	4b65      	ldr	r3, [pc, #404]	@ (8017158 <_strtod_l+0x858>)
 8016fc2:	3d01      	subs	r5, #1
 8016fc4:	429d      	cmp	r5, r3
 8016fc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016fca:	da50      	bge.n	801706e <_strtod_l+0x76e>
 8016fcc:	1b5b      	subs	r3, r3, r5
 8016fce:	2b1f      	cmp	r3, #31
 8016fd0:	eba2 0203 	sub.w	r2, r2, r3
 8016fd4:	f04f 0101 	mov.w	r1, #1
 8016fd8:	dc3d      	bgt.n	8017056 <_strtod_l+0x756>
 8016fda:	fa01 f303 	lsl.w	r3, r1, r3
 8016fde:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	9310      	str	r3, [sp, #64]	@ 0x40
 8016fe4:	18bd      	adds	r5, r7, r2
 8016fe6:	9b08      	ldr	r3, [sp, #32]
 8016fe8:	42af      	cmp	r7, r5
 8016fea:	4416      	add	r6, r2
 8016fec:	441e      	add	r6, r3
 8016fee:	463b      	mov	r3, r7
 8016ff0:	bfa8      	it	ge
 8016ff2:	462b      	movge	r3, r5
 8016ff4:	42b3      	cmp	r3, r6
 8016ff6:	bfa8      	it	ge
 8016ff8:	4633      	movge	r3, r6
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	bfc2      	ittt	gt
 8016ffe:	1aed      	subgt	r5, r5, r3
 8017000:	1af6      	subgt	r6, r6, r3
 8017002:	1aff      	subgt	r7, r7, r3
 8017004:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017006:	2b00      	cmp	r3, #0
 8017008:	dd16      	ble.n	8017038 <_strtod_l+0x738>
 801700a:	4641      	mov	r1, r8
 801700c:	9805      	ldr	r0, [sp, #20]
 801700e:	461a      	mov	r2, r3
 8017010:	f7ff f9a2 	bl	8016358 <__pow5mult>
 8017014:	4680      	mov	r8, r0
 8017016:	2800      	cmp	r0, #0
 8017018:	d0ba      	beq.n	8016f90 <_strtod_l+0x690>
 801701a:	4601      	mov	r1, r0
 801701c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801701e:	9805      	ldr	r0, [sp, #20]
 8017020:	f7ff f8f8 	bl	8016214 <__multiply>
 8017024:	900a      	str	r0, [sp, #40]	@ 0x28
 8017026:	2800      	cmp	r0, #0
 8017028:	f43f ae8d 	beq.w	8016d46 <_strtod_l+0x446>
 801702c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801702e:	9805      	ldr	r0, [sp, #20]
 8017030:	f7fe ffdc 	bl	8015fec <_Bfree>
 8017034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017036:	931a      	str	r3, [sp, #104]	@ 0x68
 8017038:	2d00      	cmp	r5, #0
 801703a:	dc1d      	bgt.n	8017078 <_strtod_l+0x778>
 801703c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801703e:	2b00      	cmp	r3, #0
 8017040:	dd23      	ble.n	801708a <_strtod_l+0x78a>
 8017042:	4649      	mov	r1, r9
 8017044:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8017046:	9805      	ldr	r0, [sp, #20]
 8017048:	f7ff f986 	bl	8016358 <__pow5mult>
 801704c:	4681      	mov	r9, r0
 801704e:	b9e0      	cbnz	r0, 801708a <_strtod_l+0x78a>
 8017050:	f04f 0900 	mov.w	r9, #0
 8017054:	e677      	b.n	8016d46 <_strtod_l+0x446>
 8017056:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801705a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801705e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8017062:	35e2      	adds	r5, #226	@ 0xe2
 8017064:	fa01 f305 	lsl.w	r3, r1, r5
 8017068:	9310      	str	r3, [sp, #64]	@ 0x40
 801706a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801706c:	e7ba      	b.n	8016fe4 <_strtod_l+0x6e4>
 801706e:	2300      	movs	r3, #0
 8017070:	9310      	str	r3, [sp, #64]	@ 0x40
 8017072:	2301      	movs	r3, #1
 8017074:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017076:	e7b5      	b.n	8016fe4 <_strtod_l+0x6e4>
 8017078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801707a:	9805      	ldr	r0, [sp, #20]
 801707c:	462a      	mov	r2, r5
 801707e:	f7ff f9c5 	bl	801640c <__lshift>
 8017082:	901a      	str	r0, [sp, #104]	@ 0x68
 8017084:	2800      	cmp	r0, #0
 8017086:	d1d9      	bne.n	801703c <_strtod_l+0x73c>
 8017088:	e65d      	b.n	8016d46 <_strtod_l+0x446>
 801708a:	2e00      	cmp	r6, #0
 801708c:	dd07      	ble.n	801709e <_strtod_l+0x79e>
 801708e:	4649      	mov	r1, r9
 8017090:	9805      	ldr	r0, [sp, #20]
 8017092:	4632      	mov	r2, r6
 8017094:	f7ff f9ba 	bl	801640c <__lshift>
 8017098:	4681      	mov	r9, r0
 801709a:	2800      	cmp	r0, #0
 801709c:	d0d8      	beq.n	8017050 <_strtod_l+0x750>
 801709e:	2f00      	cmp	r7, #0
 80170a0:	dd08      	ble.n	80170b4 <_strtod_l+0x7b4>
 80170a2:	4641      	mov	r1, r8
 80170a4:	9805      	ldr	r0, [sp, #20]
 80170a6:	463a      	mov	r2, r7
 80170a8:	f7ff f9b0 	bl	801640c <__lshift>
 80170ac:	4680      	mov	r8, r0
 80170ae:	2800      	cmp	r0, #0
 80170b0:	f43f ae49 	beq.w	8016d46 <_strtod_l+0x446>
 80170b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80170b6:	9805      	ldr	r0, [sp, #20]
 80170b8:	464a      	mov	r2, r9
 80170ba:	f7ff fa2f 	bl	801651c <__mdiff>
 80170be:	4604      	mov	r4, r0
 80170c0:	2800      	cmp	r0, #0
 80170c2:	f43f ae40 	beq.w	8016d46 <_strtod_l+0x446>
 80170c6:	68c3      	ldr	r3, [r0, #12]
 80170c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80170ca:	2300      	movs	r3, #0
 80170cc:	60c3      	str	r3, [r0, #12]
 80170ce:	4641      	mov	r1, r8
 80170d0:	f7ff fa08 	bl	80164e4 <__mcmp>
 80170d4:	2800      	cmp	r0, #0
 80170d6:	da45      	bge.n	8017164 <_strtod_l+0x864>
 80170d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170da:	ea53 030a 	orrs.w	r3, r3, sl
 80170de:	d16b      	bne.n	80171b8 <_strtod_l+0x8b8>
 80170e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d167      	bne.n	80171b8 <_strtod_l+0x8b8>
 80170e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80170ec:	0d1b      	lsrs	r3, r3, #20
 80170ee:	051b      	lsls	r3, r3, #20
 80170f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80170f4:	d960      	bls.n	80171b8 <_strtod_l+0x8b8>
 80170f6:	6963      	ldr	r3, [r4, #20]
 80170f8:	b913      	cbnz	r3, 8017100 <_strtod_l+0x800>
 80170fa:	6923      	ldr	r3, [r4, #16]
 80170fc:	2b01      	cmp	r3, #1
 80170fe:	dd5b      	ble.n	80171b8 <_strtod_l+0x8b8>
 8017100:	4621      	mov	r1, r4
 8017102:	2201      	movs	r2, #1
 8017104:	9805      	ldr	r0, [sp, #20]
 8017106:	f7ff f981 	bl	801640c <__lshift>
 801710a:	4641      	mov	r1, r8
 801710c:	4604      	mov	r4, r0
 801710e:	f7ff f9e9 	bl	80164e4 <__mcmp>
 8017112:	2800      	cmp	r0, #0
 8017114:	dd50      	ble.n	80171b8 <_strtod_l+0x8b8>
 8017116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801711a:	9a08      	ldr	r2, [sp, #32]
 801711c:	0d1b      	lsrs	r3, r3, #20
 801711e:	051b      	lsls	r3, r3, #20
 8017120:	2a00      	cmp	r2, #0
 8017122:	d06a      	beq.n	80171fa <_strtod_l+0x8fa>
 8017124:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017128:	d867      	bhi.n	80171fa <_strtod_l+0x8fa>
 801712a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801712e:	f67f ae9d 	bls.w	8016e6c <_strtod_l+0x56c>
 8017132:	4b0a      	ldr	r3, [pc, #40]	@ (801715c <_strtod_l+0x85c>)
 8017134:	4650      	mov	r0, sl
 8017136:	4659      	mov	r1, fp
 8017138:	2200      	movs	r2, #0
 801713a:	f7f1 fa8d 	bl	8008658 <__aeabi_dmul>
 801713e:	4b08      	ldr	r3, [pc, #32]	@ (8017160 <_strtod_l+0x860>)
 8017140:	400b      	ands	r3, r1
 8017142:	4682      	mov	sl, r0
 8017144:	468b      	mov	fp, r1
 8017146:	2b00      	cmp	r3, #0
 8017148:	f47f ae08 	bne.w	8016d5c <_strtod_l+0x45c>
 801714c:	9a05      	ldr	r2, [sp, #20]
 801714e:	2322      	movs	r3, #34	@ 0x22
 8017150:	6013      	str	r3, [r2, #0]
 8017152:	e603      	b.n	8016d5c <_strtod_l+0x45c>
 8017154:	08019440 	.word	0x08019440
 8017158:	fffffc02 	.word	0xfffffc02
 801715c:	39500000 	.word	0x39500000
 8017160:	7ff00000 	.word	0x7ff00000
 8017164:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017168:	d165      	bne.n	8017236 <_strtod_l+0x936>
 801716a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801716c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017170:	b35a      	cbz	r2, 80171ca <_strtod_l+0x8ca>
 8017172:	4a9f      	ldr	r2, [pc, #636]	@ (80173f0 <_strtod_l+0xaf0>)
 8017174:	4293      	cmp	r3, r2
 8017176:	d12b      	bne.n	80171d0 <_strtod_l+0x8d0>
 8017178:	9b08      	ldr	r3, [sp, #32]
 801717a:	4651      	mov	r1, sl
 801717c:	b303      	cbz	r3, 80171c0 <_strtod_l+0x8c0>
 801717e:	4b9d      	ldr	r3, [pc, #628]	@ (80173f4 <_strtod_l+0xaf4>)
 8017180:	465a      	mov	r2, fp
 8017182:	4013      	ands	r3, r2
 8017184:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017188:	f04f 32ff 	mov.w	r2, #4294967295
 801718c:	d81b      	bhi.n	80171c6 <_strtod_l+0x8c6>
 801718e:	0d1b      	lsrs	r3, r3, #20
 8017190:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017194:	fa02 f303 	lsl.w	r3, r2, r3
 8017198:	4299      	cmp	r1, r3
 801719a:	d119      	bne.n	80171d0 <_strtod_l+0x8d0>
 801719c:	4b96      	ldr	r3, [pc, #600]	@ (80173f8 <_strtod_l+0xaf8>)
 801719e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d102      	bne.n	80171aa <_strtod_l+0x8aa>
 80171a4:	3101      	adds	r1, #1
 80171a6:	f43f adce 	beq.w	8016d46 <_strtod_l+0x446>
 80171aa:	4b92      	ldr	r3, [pc, #584]	@ (80173f4 <_strtod_l+0xaf4>)
 80171ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80171ae:	401a      	ands	r2, r3
 80171b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80171b4:	f04f 0a00 	mov.w	sl, #0
 80171b8:	9b08      	ldr	r3, [sp, #32]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d1b9      	bne.n	8017132 <_strtod_l+0x832>
 80171be:	e5cd      	b.n	8016d5c <_strtod_l+0x45c>
 80171c0:	f04f 33ff 	mov.w	r3, #4294967295
 80171c4:	e7e8      	b.n	8017198 <_strtod_l+0x898>
 80171c6:	4613      	mov	r3, r2
 80171c8:	e7e6      	b.n	8017198 <_strtod_l+0x898>
 80171ca:	ea53 030a 	orrs.w	r3, r3, sl
 80171ce:	d0a2      	beq.n	8017116 <_strtod_l+0x816>
 80171d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80171d2:	b1db      	cbz	r3, 801720c <_strtod_l+0x90c>
 80171d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80171d6:	4213      	tst	r3, r2
 80171d8:	d0ee      	beq.n	80171b8 <_strtod_l+0x8b8>
 80171da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171dc:	9a08      	ldr	r2, [sp, #32]
 80171de:	4650      	mov	r0, sl
 80171e0:	4659      	mov	r1, fp
 80171e2:	b1bb      	cbz	r3, 8017214 <_strtod_l+0x914>
 80171e4:	f7ff fb6c 	bl	80168c0 <sulp>
 80171e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80171ec:	ec53 2b10 	vmov	r2, r3, d0
 80171f0:	f7f1 f87c 	bl	80082ec <__adddf3>
 80171f4:	4682      	mov	sl, r0
 80171f6:	468b      	mov	fp, r1
 80171f8:	e7de      	b.n	80171b8 <_strtod_l+0x8b8>
 80171fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80171fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017202:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017206:	f04f 3aff 	mov.w	sl, #4294967295
 801720a:	e7d5      	b.n	80171b8 <_strtod_l+0x8b8>
 801720c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801720e:	ea13 0f0a 	tst.w	r3, sl
 8017212:	e7e1      	b.n	80171d8 <_strtod_l+0x8d8>
 8017214:	f7ff fb54 	bl	80168c0 <sulp>
 8017218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801721c:	ec53 2b10 	vmov	r2, r3, d0
 8017220:	f7f1 f862 	bl	80082e8 <__aeabi_dsub>
 8017224:	2200      	movs	r2, #0
 8017226:	2300      	movs	r3, #0
 8017228:	4682      	mov	sl, r0
 801722a:	468b      	mov	fp, r1
 801722c:	f7f1 fc7c 	bl	8008b28 <__aeabi_dcmpeq>
 8017230:	2800      	cmp	r0, #0
 8017232:	d0c1      	beq.n	80171b8 <_strtod_l+0x8b8>
 8017234:	e61a      	b.n	8016e6c <_strtod_l+0x56c>
 8017236:	4641      	mov	r1, r8
 8017238:	4620      	mov	r0, r4
 801723a:	f7ff facb 	bl	80167d4 <__ratio>
 801723e:	ec57 6b10 	vmov	r6, r7, d0
 8017242:	2200      	movs	r2, #0
 8017244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017248:	4630      	mov	r0, r6
 801724a:	4639      	mov	r1, r7
 801724c:	f7f1 fc80 	bl	8008b50 <__aeabi_dcmple>
 8017250:	2800      	cmp	r0, #0
 8017252:	d06f      	beq.n	8017334 <_strtod_l+0xa34>
 8017254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017256:	2b00      	cmp	r3, #0
 8017258:	d17a      	bne.n	8017350 <_strtod_l+0xa50>
 801725a:	f1ba 0f00 	cmp.w	sl, #0
 801725e:	d158      	bne.n	8017312 <_strtod_l+0xa12>
 8017260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017266:	2b00      	cmp	r3, #0
 8017268:	d15a      	bne.n	8017320 <_strtod_l+0xa20>
 801726a:	4b64      	ldr	r3, [pc, #400]	@ (80173fc <_strtod_l+0xafc>)
 801726c:	2200      	movs	r2, #0
 801726e:	4630      	mov	r0, r6
 8017270:	4639      	mov	r1, r7
 8017272:	f7f1 fc63 	bl	8008b3c <__aeabi_dcmplt>
 8017276:	2800      	cmp	r0, #0
 8017278:	d159      	bne.n	801732e <_strtod_l+0xa2e>
 801727a:	4630      	mov	r0, r6
 801727c:	4639      	mov	r1, r7
 801727e:	4b60      	ldr	r3, [pc, #384]	@ (8017400 <_strtod_l+0xb00>)
 8017280:	2200      	movs	r2, #0
 8017282:	f7f1 f9e9 	bl	8008658 <__aeabi_dmul>
 8017286:	4606      	mov	r6, r0
 8017288:	460f      	mov	r7, r1
 801728a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801728e:	9606      	str	r6, [sp, #24]
 8017290:	9307      	str	r3, [sp, #28]
 8017292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017296:	4d57      	ldr	r5, [pc, #348]	@ (80173f4 <_strtod_l+0xaf4>)
 8017298:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801729c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801729e:	401d      	ands	r5, r3
 80172a0:	4b58      	ldr	r3, [pc, #352]	@ (8017404 <_strtod_l+0xb04>)
 80172a2:	429d      	cmp	r5, r3
 80172a4:	f040 80b2 	bne.w	801740c <_strtod_l+0xb0c>
 80172a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80172ae:	ec4b ab10 	vmov	d0, sl, fp
 80172b2:	f7ff f9c7 	bl	8016644 <__ulp>
 80172b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80172ba:	ec51 0b10 	vmov	r0, r1, d0
 80172be:	f7f1 f9cb 	bl	8008658 <__aeabi_dmul>
 80172c2:	4652      	mov	r2, sl
 80172c4:	465b      	mov	r3, fp
 80172c6:	f7f1 f811 	bl	80082ec <__adddf3>
 80172ca:	460b      	mov	r3, r1
 80172cc:	4949      	ldr	r1, [pc, #292]	@ (80173f4 <_strtod_l+0xaf4>)
 80172ce:	4a4e      	ldr	r2, [pc, #312]	@ (8017408 <_strtod_l+0xb08>)
 80172d0:	4019      	ands	r1, r3
 80172d2:	4291      	cmp	r1, r2
 80172d4:	4682      	mov	sl, r0
 80172d6:	d942      	bls.n	801735e <_strtod_l+0xa5e>
 80172d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80172da:	4b47      	ldr	r3, [pc, #284]	@ (80173f8 <_strtod_l+0xaf8>)
 80172dc:	429a      	cmp	r2, r3
 80172de:	d103      	bne.n	80172e8 <_strtod_l+0x9e8>
 80172e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80172e2:	3301      	adds	r3, #1
 80172e4:	f43f ad2f 	beq.w	8016d46 <_strtod_l+0x446>
 80172e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80173f8 <_strtod_l+0xaf8>
 80172ec:	f04f 3aff 	mov.w	sl, #4294967295
 80172f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80172f2:	9805      	ldr	r0, [sp, #20]
 80172f4:	f7fe fe7a 	bl	8015fec <_Bfree>
 80172f8:	9805      	ldr	r0, [sp, #20]
 80172fa:	4649      	mov	r1, r9
 80172fc:	f7fe fe76 	bl	8015fec <_Bfree>
 8017300:	9805      	ldr	r0, [sp, #20]
 8017302:	4641      	mov	r1, r8
 8017304:	f7fe fe72 	bl	8015fec <_Bfree>
 8017308:	9805      	ldr	r0, [sp, #20]
 801730a:	4621      	mov	r1, r4
 801730c:	f7fe fe6e 	bl	8015fec <_Bfree>
 8017310:	e619      	b.n	8016f46 <_strtod_l+0x646>
 8017312:	f1ba 0f01 	cmp.w	sl, #1
 8017316:	d103      	bne.n	8017320 <_strtod_l+0xa20>
 8017318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801731a:	2b00      	cmp	r3, #0
 801731c:	f43f ada6 	beq.w	8016e6c <_strtod_l+0x56c>
 8017320:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80173d0 <_strtod_l+0xad0>
 8017324:	4f35      	ldr	r7, [pc, #212]	@ (80173fc <_strtod_l+0xafc>)
 8017326:	ed8d 7b06 	vstr	d7, [sp, #24]
 801732a:	2600      	movs	r6, #0
 801732c:	e7b1      	b.n	8017292 <_strtod_l+0x992>
 801732e:	4f34      	ldr	r7, [pc, #208]	@ (8017400 <_strtod_l+0xb00>)
 8017330:	2600      	movs	r6, #0
 8017332:	e7aa      	b.n	801728a <_strtod_l+0x98a>
 8017334:	4b32      	ldr	r3, [pc, #200]	@ (8017400 <_strtod_l+0xb00>)
 8017336:	4630      	mov	r0, r6
 8017338:	4639      	mov	r1, r7
 801733a:	2200      	movs	r2, #0
 801733c:	f7f1 f98c 	bl	8008658 <__aeabi_dmul>
 8017340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017342:	4606      	mov	r6, r0
 8017344:	460f      	mov	r7, r1
 8017346:	2b00      	cmp	r3, #0
 8017348:	d09f      	beq.n	801728a <_strtod_l+0x98a>
 801734a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801734e:	e7a0      	b.n	8017292 <_strtod_l+0x992>
 8017350:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80173d8 <_strtod_l+0xad8>
 8017354:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017358:	ec57 6b17 	vmov	r6, r7, d7
 801735c:	e799      	b.n	8017292 <_strtod_l+0x992>
 801735e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017362:	9b08      	ldr	r3, [sp, #32]
 8017364:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017368:	2b00      	cmp	r3, #0
 801736a:	d1c1      	bne.n	80172f0 <_strtod_l+0x9f0>
 801736c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017370:	0d1b      	lsrs	r3, r3, #20
 8017372:	051b      	lsls	r3, r3, #20
 8017374:	429d      	cmp	r5, r3
 8017376:	d1bb      	bne.n	80172f0 <_strtod_l+0x9f0>
 8017378:	4630      	mov	r0, r6
 801737a:	4639      	mov	r1, r7
 801737c:	f7f1 fccc 	bl	8008d18 <__aeabi_d2lz>
 8017380:	f7f1 f93c 	bl	80085fc <__aeabi_l2d>
 8017384:	4602      	mov	r2, r0
 8017386:	460b      	mov	r3, r1
 8017388:	4630      	mov	r0, r6
 801738a:	4639      	mov	r1, r7
 801738c:	f7f0 ffac 	bl	80082e8 <__aeabi_dsub>
 8017390:	460b      	mov	r3, r1
 8017392:	4602      	mov	r2, r0
 8017394:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017398:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801739c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801739e:	ea46 060a 	orr.w	r6, r6, sl
 80173a2:	431e      	orrs	r6, r3
 80173a4:	d06f      	beq.n	8017486 <_strtod_l+0xb86>
 80173a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80173e0 <_strtod_l+0xae0>)
 80173a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ac:	f7f1 fbc6 	bl	8008b3c <__aeabi_dcmplt>
 80173b0:	2800      	cmp	r0, #0
 80173b2:	f47f acd3 	bne.w	8016d5c <_strtod_l+0x45c>
 80173b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80173e8 <_strtod_l+0xae8>)
 80173b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80173c0:	f7f1 fbda 	bl	8008b78 <__aeabi_dcmpgt>
 80173c4:	2800      	cmp	r0, #0
 80173c6:	d093      	beq.n	80172f0 <_strtod_l+0x9f0>
 80173c8:	e4c8      	b.n	8016d5c <_strtod_l+0x45c>
 80173ca:	bf00      	nop
 80173cc:	f3af 8000 	nop.w
 80173d0:	00000000 	.word	0x00000000
 80173d4:	bff00000 	.word	0xbff00000
 80173d8:	00000000 	.word	0x00000000
 80173dc:	3ff00000 	.word	0x3ff00000
 80173e0:	94a03595 	.word	0x94a03595
 80173e4:	3fdfffff 	.word	0x3fdfffff
 80173e8:	35afe535 	.word	0x35afe535
 80173ec:	3fe00000 	.word	0x3fe00000
 80173f0:	000fffff 	.word	0x000fffff
 80173f4:	7ff00000 	.word	0x7ff00000
 80173f8:	7fefffff 	.word	0x7fefffff
 80173fc:	3ff00000 	.word	0x3ff00000
 8017400:	3fe00000 	.word	0x3fe00000
 8017404:	7fe00000 	.word	0x7fe00000
 8017408:	7c9fffff 	.word	0x7c9fffff
 801740c:	9b08      	ldr	r3, [sp, #32]
 801740e:	b323      	cbz	r3, 801745a <_strtod_l+0xb5a>
 8017410:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017414:	d821      	bhi.n	801745a <_strtod_l+0xb5a>
 8017416:	a328      	add	r3, pc, #160	@ (adr r3, 80174b8 <_strtod_l+0xbb8>)
 8017418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801741c:	4630      	mov	r0, r6
 801741e:	4639      	mov	r1, r7
 8017420:	f7f1 fb96 	bl	8008b50 <__aeabi_dcmple>
 8017424:	b1a0      	cbz	r0, 8017450 <_strtod_l+0xb50>
 8017426:	4639      	mov	r1, r7
 8017428:	4630      	mov	r0, r6
 801742a:	f7f1 fbed 	bl	8008c08 <__aeabi_d2uiz>
 801742e:	2801      	cmp	r0, #1
 8017430:	bf38      	it	cc
 8017432:	2001      	movcc	r0, #1
 8017434:	f7f1 f896 	bl	8008564 <__aeabi_ui2d>
 8017438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801743a:	4606      	mov	r6, r0
 801743c:	460f      	mov	r7, r1
 801743e:	b9fb      	cbnz	r3, 8017480 <_strtod_l+0xb80>
 8017440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017444:	9014      	str	r0, [sp, #80]	@ 0x50
 8017446:	9315      	str	r3, [sp, #84]	@ 0x54
 8017448:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801744c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017452:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8017456:	1b5b      	subs	r3, r3, r5
 8017458:	9311      	str	r3, [sp, #68]	@ 0x44
 801745a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801745e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8017462:	f7ff f8ef 	bl	8016644 <__ulp>
 8017466:	4650      	mov	r0, sl
 8017468:	ec53 2b10 	vmov	r2, r3, d0
 801746c:	4659      	mov	r1, fp
 801746e:	f7f1 f8f3 	bl	8008658 <__aeabi_dmul>
 8017472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8017476:	f7f0 ff39 	bl	80082ec <__adddf3>
 801747a:	4682      	mov	sl, r0
 801747c:	468b      	mov	fp, r1
 801747e:	e770      	b.n	8017362 <_strtod_l+0xa62>
 8017480:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8017484:	e7e0      	b.n	8017448 <_strtod_l+0xb48>
 8017486:	a30e      	add	r3, pc, #56	@ (adr r3, 80174c0 <_strtod_l+0xbc0>)
 8017488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801748c:	f7f1 fb56 	bl	8008b3c <__aeabi_dcmplt>
 8017490:	e798      	b.n	80173c4 <_strtod_l+0xac4>
 8017492:	2300      	movs	r3, #0
 8017494:	930e      	str	r3, [sp, #56]	@ 0x38
 8017496:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801749a:	6013      	str	r3, [r2, #0]
 801749c:	f7ff ba6d 	b.w	801697a <_strtod_l+0x7a>
 80174a0:	2a65      	cmp	r2, #101	@ 0x65
 80174a2:	f43f ab68 	beq.w	8016b76 <_strtod_l+0x276>
 80174a6:	2a45      	cmp	r2, #69	@ 0x45
 80174a8:	f43f ab65 	beq.w	8016b76 <_strtod_l+0x276>
 80174ac:	2301      	movs	r3, #1
 80174ae:	f7ff bba0 	b.w	8016bf2 <_strtod_l+0x2f2>
 80174b2:	bf00      	nop
 80174b4:	f3af 8000 	nop.w
 80174b8:	ffc00000 	.word	0xffc00000
 80174bc:	41dfffff 	.word	0x41dfffff
 80174c0:	94a03595 	.word	0x94a03595
 80174c4:	3fcfffff 	.word	0x3fcfffff

080174c8 <_strtod_r>:
 80174c8:	4b01      	ldr	r3, [pc, #4]	@ (80174d0 <_strtod_r+0x8>)
 80174ca:	f7ff ba19 	b.w	8016900 <_strtod_l>
 80174ce:	bf00      	nop
 80174d0:	20000354 	.word	0x20000354

080174d4 <_strtol_l.isra.0>:
 80174d4:	2b24      	cmp	r3, #36	@ 0x24
 80174d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174da:	4686      	mov	lr, r0
 80174dc:	4690      	mov	r8, r2
 80174de:	d801      	bhi.n	80174e4 <_strtol_l.isra.0+0x10>
 80174e0:	2b01      	cmp	r3, #1
 80174e2:	d106      	bne.n	80174f2 <_strtol_l.isra.0+0x1e>
 80174e4:	f7fd fe64 	bl	80151b0 <__errno>
 80174e8:	2316      	movs	r3, #22
 80174ea:	6003      	str	r3, [r0, #0]
 80174ec:	2000      	movs	r0, #0
 80174ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174f2:	4834      	ldr	r0, [pc, #208]	@ (80175c4 <_strtol_l.isra.0+0xf0>)
 80174f4:	460d      	mov	r5, r1
 80174f6:	462a      	mov	r2, r5
 80174f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80174fc:	5d06      	ldrb	r6, [r0, r4]
 80174fe:	f016 0608 	ands.w	r6, r6, #8
 8017502:	d1f8      	bne.n	80174f6 <_strtol_l.isra.0+0x22>
 8017504:	2c2d      	cmp	r4, #45	@ 0x2d
 8017506:	d110      	bne.n	801752a <_strtol_l.isra.0+0x56>
 8017508:	782c      	ldrb	r4, [r5, #0]
 801750a:	2601      	movs	r6, #1
 801750c:	1c95      	adds	r5, r2, #2
 801750e:	f033 0210 	bics.w	r2, r3, #16
 8017512:	d115      	bne.n	8017540 <_strtol_l.isra.0+0x6c>
 8017514:	2c30      	cmp	r4, #48	@ 0x30
 8017516:	d10d      	bne.n	8017534 <_strtol_l.isra.0+0x60>
 8017518:	782a      	ldrb	r2, [r5, #0]
 801751a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801751e:	2a58      	cmp	r2, #88	@ 0x58
 8017520:	d108      	bne.n	8017534 <_strtol_l.isra.0+0x60>
 8017522:	786c      	ldrb	r4, [r5, #1]
 8017524:	3502      	adds	r5, #2
 8017526:	2310      	movs	r3, #16
 8017528:	e00a      	b.n	8017540 <_strtol_l.isra.0+0x6c>
 801752a:	2c2b      	cmp	r4, #43	@ 0x2b
 801752c:	bf04      	itt	eq
 801752e:	782c      	ldrbeq	r4, [r5, #0]
 8017530:	1c95      	addeq	r5, r2, #2
 8017532:	e7ec      	b.n	801750e <_strtol_l.isra.0+0x3a>
 8017534:	2b00      	cmp	r3, #0
 8017536:	d1f6      	bne.n	8017526 <_strtol_l.isra.0+0x52>
 8017538:	2c30      	cmp	r4, #48	@ 0x30
 801753a:	bf14      	ite	ne
 801753c:	230a      	movne	r3, #10
 801753e:	2308      	moveq	r3, #8
 8017540:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017544:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017548:	2200      	movs	r2, #0
 801754a:	fbbc f9f3 	udiv	r9, ip, r3
 801754e:	4610      	mov	r0, r2
 8017550:	fb03 ca19 	mls	sl, r3, r9, ip
 8017554:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017558:	2f09      	cmp	r7, #9
 801755a:	d80f      	bhi.n	801757c <_strtol_l.isra.0+0xa8>
 801755c:	463c      	mov	r4, r7
 801755e:	42a3      	cmp	r3, r4
 8017560:	dd1b      	ble.n	801759a <_strtol_l.isra.0+0xc6>
 8017562:	1c57      	adds	r7, r2, #1
 8017564:	d007      	beq.n	8017576 <_strtol_l.isra.0+0xa2>
 8017566:	4581      	cmp	r9, r0
 8017568:	d314      	bcc.n	8017594 <_strtol_l.isra.0+0xc0>
 801756a:	d101      	bne.n	8017570 <_strtol_l.isra.0+0x9c>
 801756c:	45a2      	cmp	sl, r4
 801756e:	db11      	blt.n	8017594 <_strtol_l.isra.0+0xc0>
 8017570:	fb00 4003 	mla	r0, r0, r3, r4
 8017574:	2201      	movs	r2, #1
 8017576:	f815 4b01 	ldrb.w	r4, [r5], #1
 801757a:	e7eb      	b.n	8017554 <_strtol_l.isra.0+0x80>
 801757c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017580:	2f19      	cmp	r7, #25
 8017582:	d801      	bhi.n	8017588 <_strtol_l.isra.0+0xb4>
 8017584:	3c37      	subs	r4, #55	@ 0x37
 8017586:	e7ea      	b.n	801755e <_strtol_l.isra.0+0x8a>
 8017588:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801758c:	2f19      	cmp	r7, #25
 801758e:	d804      	bhi.n	801759a <_strtol_l.isra.0+0xc6>
 8017590:	3c57      	subs	r4, #87	@ 0x57
 8017592:	e7e4      	b.n	801755e <_strtol_l.isra.0+0x8a>
 8017594:	f04f 32ff 	mov.w	r2, #4294967295
 8017598:	e7ed      	b.n	8017576 <_strtol_l.isra.0+0xa2>
 801759a:	1c53      	adds	r3, r2, #1
 801759c:	d108      	bne.n	80175b0 <_strtol_l.isra.0+0xdc>
 801759e:	2322      	movs	r3, #34	@ 0x22
 80175a0:	f8ce 3000 	str.w	r3, [lr]
 80175a4:	4660      	mov	r0, ip
 80175a6:	f1b8 0f00 	cmp.w	r8, #0
 80175aa:	d0a0      	beq.n	80174ee <_strtol_l.isra.0+0x1a>
 80175ac:	1e69      	subs	r1, r5, #1
 80175ae:	e006      	b.n	80175be <_strtol_l.isra.0+0xea>
 80175b0:	b106      	cbz	r6, 80175b4 <_strtol_l.isra.0+0xe0>
 80175b2:	4240      	negs	r0, r0
 80175b4:	f1b8 0f00 	cmp.w	r8, #0
 80175b8:	d099      	beq.n	80174ee <_strtol_l.isra.0+0x1a>
 80175ba:	2a00      	cmp	r2, #0
 80175bc:	d1f6      	bne.n	80175ac <_strtol_l.isra.0+0xd8>
 80175be:	f8c8 1000 	str.w	r1, [r8]
 80175c2:	e794      	b.n	80174ee <_strtol_l.isra.0+0x1a>
 80175c4:	08019469 	.word	0x08019469

080175c8 <_strtol_r>:
 80175c8:	f7ff bf84 	b.w	80174d4 <_strtol_l.isra.0>

080175cc <__ssputs_r>:
 80175cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175d0:	688e      	ldr	r6, [r1, #8]
 80175d2:	461f      	mov	r7, r3
 80175d4:	42be      	cmp	r6, r7
 80175d6:	680b      	ldr	r3, [r1, #0]
 80175d8:	4682      	mov	sl, r0
 80175da:	460c      	mov	r4, r1
 80175dc:	4690      	mov	r8, r2
 80175de:	d82d      	bhi.n	801763c <__ssputs_r+0x70>
 80175e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80175e8:	d026      	beq.n	8017638 <__ssputs_r+0x6c>
 80175ea:	6965      	ldr	r5, [r4, #20]
 80175ec:	6909      	ldr	r1, [r1, #16]
 80175ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175f2:	eba3 0901 	sub.w	r9, r3, r1
 80175f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80175fa:	1c7b      	adds	r3, r7, #1
 80175fc:	444b      	add	r3, r9
 80175fe:	106d      	asrs	r5, r5, #1
 8017600:	429d      	cmp	r5, r3
 8017602:	bf38      	it	cc
 8017604:	461d      	movcc	r5, r3
 8017606:	0553      	lsls	r3, r2, #21
 8017608:	d527      	bpl.n	801765a <__ssputs_r+0x8e>
 801760a:	4629      	mov	r1, r5
 801760c:	f7fc fc3e 	bl	8013e8c <_malloc_r>
 8017610:	4606      	mov	r6, r0
 8017612:	b360      	cbz	r0, 801766e <__ssputs_r+0xa2>
 8017614:	6921      	ldr	r1, [r4, #16]
 8017616:	464a      	mov	r2, r9
 8017618:	f000 fe1e 	bl	8018258 <memcpy>
 801761c:	89a3      	ldrh	r3, [r4, #12]
 801761e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017626:	81a3      	strh	r3, [r4, #12]
 8017628:	6126      	str	r6, [r4, #16]
 801762a:	6165      	str	r5, [r4, #20]
 801762c:	444e      	add	r6, r9
 801762e:	eba5 0509 	sub.w	r5, r5, r9
 8017632:	6026      	str	r6, [r4, #0]
 8017634:	60a5      	str	r5, [r4, #8]
 8017636:	463e      	mov	r6, r7
 8017638:	42be      	cmp	r6, r7
 801763a:	d900      	bls.n	801763e <__ssputs_r+0x72>
 801763c:	463e      	mov	r6, r7
 801763e:	6820      	ldr	r0, [r4, #0]
 8017640:	4632      	mov	r2, r6
 8017642:	4641      	mov	r1, r8
 8017644:	f000 fdb9 	bl	80181ba <memmove>
 8017648:	68a3      	ldr	r3, [r4, #8]
 801764a:	1b9b      	subs	r3, r3, r6
 801764c:	60a3      	str	r3, [r4, #8]
 801764e:	6823      	ldr	r3, [r4, #0]
 8017650:	4433      	add	r3, r6
 8017652:	6023      	str	r3, [r4, #0]
 8017654:	2000      	movs	r0, #0
 8017656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801765a:	462a      	mov	r2, r5
 801765c:	f001 f991 	bl	8018982 <_realloc_r>
 8017660:	4606      	mov	r6, r0
 8017662:	2800      	cmp	r0, #0
 8017664:	d1e0      	bne.n	8017628 <__ssputs_r+0x5c>
 8017666:	6921      	ldr	r1, [r4, #16]
 8017668:	4650      	mov	r0, sl
 801766a:	f7fe fc35 	bl	8015ed8 <_free_r>
 801766e:	230c      	movs	r3, #12
 8017670:	f8ca 3000 	str.w	r3, [sl]
 8017674:	89a3      	ldrh	r3, [r4, #12]
 8017676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801767a:	81a3      	strh	r3, [r4, #12]
 801767c:	f04f 30ff 	mov.w	r0, #4294967295
 8017680:	e7e9      	b.n	8017656 <__ssputs_r+0x8a>
	...

08017684 <_svfiprintf_r>:
 8017684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017688:	4698      	mov	r8, r3
 801768a:	898b      	ldrh	r3, [r1, #12]
 801768c:	061b      	lsls	r3, r3, #24
 801768e:	b09d      	sub	sp, #116	@ 0x74
 8017690:	4607      	mov	r7, r0
 8017692:	460d      	mov	r5, r1
 8017694:	4614      	mov	r4, r2
 8017696:	d510      	bpl.n	80176ba <_svfiprintf_r+0x36>
 8017698:	690b      	ldr	r3, [r1, #16]
 801769a:	b973      	cbnz	r3, 80176ba <_svfiprintf_r+0x36>
 801769c:	2140      	movs	r1, #64	@ 0x40
 801769e:	f7fc fbf5 	bl	8013e8c <_malloc_r>
 80176a2:	6028      	str	r0, [r5, #0]
 80176a4:	6128      	str	r0, [r5, #16]
 80176a6:	b930      	cbnz	r0, 80176b6 <_svfiprintf_r+0x32>
 80176a8:	230c      	movs	r3, #12
 80176aa:	603b      	str	r3, [r7, #0]
 80176ac:	f04f 30ff 	mov.w	r0, #4294967295
 80176b0:	b01d      	add	sp, #116	@ 0x74
 80176b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b6:	2340      	movs	r3, #64	@ 0x40
 80176b8:	616b      	str	r3, [r5, #20]
 80176ba:	2300      	movs	r3, #0
 80176bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80176be:	2320      	movs	r3, #32
 80176c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80176c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80176c8:	2330      	movs	r3, #48	@ 0x30
 80176ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017868 <_svfiprintf_r+0x1e4>
 80176ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80176d2:	f04f 0901 	mov.w	r9, #1
 80176d6:	4623      	mov	r3, r4
 80176d8:	469a      	mov	sl, r3
 80176da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176de:	b10a      	cbz	r2, 80176e4 <_svfiprintf_r+0x60>
 80176e0:	2a25      	cmp	r2, #37	@ 0x25
 80176e2:	d1f9      	bne.n	80176d8 <_svfiprintf_r+0x54>
 80176e4:	ebba 0b04 	subs.w	fp, sl, r4
 80176e8:	d00b      	beq.n	8017702 <_svfiprintf_r+0x7e>
 80176ea:	465b      	mov	r3, fp
 80176ec:	4622      	mov	r2, r4
 80176ee:	4629      	mov	r1, r5
 80176f0:	4638      	mov	r0, r7
 80176f2:	f7ff ff6b 	bl	80175cc <__ssputs_r>
 80176f6:	3001      	adds	r0, #1
 80176f8:	f000 80a7 	beq.w	801784a <_svfiprintf_r+0x1c6>
 80176fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176fe:	445a      	add	r2, fp
 8017700:	9209      	str	r2, [sp, #36]	@ 0x24
 8017702:	f89a 3000 	ldrb.w	r3, [sl]
 8017706:	2b00      	cmp	r3, #0
 8017708:	f000 809f 	beq.w	801784a <_svfiprintf_r+0x1c6>
 801770c:	2300      	movs	r3, #0
 801770e:	f04f 32ff 	mov.w	r2, #4294967295
 8017712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017716:	f10a 0a01 	add.w	sl, sl, #1
 801771a:	9304      	str	r3, [sp, #16]
 801771c:	9307      	str	r3, [sp, #28]
 801771e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017722:	931a      	str	r3, [sp, #104]	@ 0x68
 8017724:	4654      	mov	r4, sl
 8017726:	2205      	movs	r2, #5
 8017728:	f814 1b01 	ldrb.w	r1, [r4], #1
 801772c:	484e      	ldr	r0, [pc, #312]	@ (8017868 <_svfiprintf_r+0x1e4>)
 801772e:	f7f0 fd7f 	bl	8008230 <memchr>
 8017732:	9a04      	ldr	r2, [sp, #16]
 8017734:	b9d8      	cbnz	r0, 801776e <_svfiprintf_r+0xea>
 8017736:	06d0      	lsls	r0, r2, #27
 8017738:	bf44      	itt	mi
 801773a:	2320      	movmi	r3, #32
 801773c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017740:	0711      	lsls	r1, r2, #28
 8017742:	bf44      	itt	mi
 8017744:	232b      	movmi	r3, #43	@ 0x2b
 8017746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801774a:	f89a 3000 	ldrb.w	r3, [sl]
 801774e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017750:	d015      	beq.n	801777e <_svfiprintf_r+0xfa>
 8017752:	9a07      	ldr	r2, [sp, #28]
 8017754:	4654      	mov	r4, sl
 8017756:	2000      	movs	r0, #0
 8017758:	f04f 0c0a 	mov.w	ip, #10
 801775c:	4621      	mov	r1, r4
 801775e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017762:	3b30      	subs	r3, #48	@ 0x30
 8017764:	2b09      	cmp	r3, #9
 8017766:	d94b      	bls.n	8017800 <_svfiprintf_r+0x17c>
 8017768:	b1b0      	cbz	r0, 8017798 <_svfiprintf_r+0x114>
 801776a:	9207      	str	r2, [sp, #28]
 801776c:	e014      	b.n	8017798 <_svfiprintf_r+0x114>
 801776e:	eba0 0308 	sub.w	r3, r0, r8
 8017772:	fa09 f303 	lsl.w	r3, r9, r3
 8017776:	4313      	orrs	r3, r2
 8017778:	9304      	str	r3, [sp, #16]
 801777a:	46a2      	mov	sl, r4
 801777c:	e7d2      	b.n	8017724 <_svfiprintf_r+0xa0>
 801777e:	9b03      	ldr	r3, [sp, #12]
 8017780:	1d19      	adds	r1, r3, #4
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	9103      	str	r1, [sp, #12]
 8017786:	2b00      	cmp	r3, #0
 8017788:	bfbb      	ittet	lt
 801778a:	425b      	neglt	r3, r3
 801778c:	f042 0202 	orrlt.w	r2, r2, #2
 8017790:	9307      	strge	r3, [sp, #28]
 8017792:	9307      	strlt	r3, [sp, #28]
 8017794:	bfb8      	it	lt
 8017796:	9204      	strlt	r2, [sp, #16]
 8017798:	7823      	ldrb	r3, [r4, #0]
 801779a:	2b2e      	cmp	r3, #46	@ 0x2e
 801779c:	d10a      	bne.n	80177b4 <_svfiprintf_r+0x130>
 801779e:	7863      	ldrb	r3, [r4, #1]
 80177a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80177a2:	d132      	bne.n	801780a <_svfiprintf_r+0x186>
 80177a4:	9b03      	ldr	r3, [sp, #12]
 80177a6:	1d1a      	adds	r2, r3, #4
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	9203      	str	r2, [sp, #12]
 80177ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80177b0:	3402      	adds	r4, #2
 80177b2:	9305      	str	r3, [sp, #20]
 80177b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017878 <_svfiprintf_r+0x1f4>
 80177b8:	7821      	ldrb	r1, [r4, #0]
 80177ba:	2203      	movs	r2, #3
 80177bc:	4650      	mov	r0, sl
 80177be:	f7f0 fd37 	bl	8008230 <memchr>
 80177c2:	b138      	cbz	r0, 80177d4 <_svfiprintf_r+0x150>
 80177c4:	9b04      	ldr	r3, [sp, #16]
 80177c6:	eba0 000a 	sub.w	r0, r0, sl
 80177ca:	2240      	movs	r2, #64	@ 0x40
 80177cc:	4082      	lsls	r2, r0
 80177ce:	4313      	orrs	r3, r2
 80177d0:	3401      	adds	r4, #1
 80177d2:	9304      	str	r3, [sp, #16]
 80177d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177d8:	4824      	ldr	r0, [pc, #144]	@ (801786c <_svfiprintf_r+0x1e8>)
 80177da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80177de:	2206      	movs	r2, #6
 80177e0:	f7f0 fd26 	bl	8008230 <memchr>
 80177e4:	2800      	cmp	r0, #0
 80177e6:	d036      	beq.n	8017856 <_svfiprintf_r+0x1d2>
 80177e8:	4b21      	ldr	r3, [pc, #132]	@ (8017870 <_svfiprintf_r+0x1ec>)
 80177ea:	bb1b      	cbnz	r3, 8017834 <_svfiprintf_r+0x1b0>
 80177ec:	9b03      	ldr	r3, [sp, #12]
 80177ee:	3307      	adds	r3, #7
 80177f0:	f023 0307 	bic.w	r3, r3, #7
 80177f4:	3308      	adds	r3, #8
 80177f6:	9303      	str	r3, [sp, #12]
 80177f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177fa:	4433      	add	r3, r6
 80177fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80177fe:	e76a      	b.n	80176d6 <_svfiprintf_r+0x52>
 8017800:	fb0c 3202 	mla	r2, ip, r2, r3
 8017804:	460c      	mov	r4, r1
 8017806:	2001      	movs	r0, #1
 8017808:	e7a8      	b.n	801775c <_svfiprintf_r+0xd8>
 801780a:	2300      	movs	r3, #0
 801780c:	3401      	adds	r4, #1
 801780e:	9305      	str	r3, [sp, #20]
 8017810:	4619      	mov	r1, r3
 8017812:	f04f 0c0a 	mov.w	ip, #10
 8017816:	4620      	mov	r0, r4
 8017818:	f810 2b01 	ldrb.w	r2, [r0], #1
 801781c:	3a30      	subs	r2, #48	@ 0x30
 801781e:	2a09      	cmp	r2, #9
 8017820:	d903      	bls.n	801782a <_svfiprintf_r+0x1a6>
 8017822:	2b00      	cmp	r3, #0
 8017824:	d0c6      	beq.n	80177b4 <_svfiprintf_r+0x130>
 8017826:	9105      	str	r1, [sp, #20]
 8017828:	e7c4      	b.n	80177b4 <_svfiprintf_r+0x130>
 801782a:	fb0c 2101 	mla	r1, ip, r1, r2
 801782e:	4604      	mov	r4, r0
 8017830:	2301      	movs	r3, #1
 8017832:	e7f0      	b.n	8017816 <_svfiprintf_r+0x192>
 8017834:	ab03      	add	r3, sp, #12
 8017836:	9300      	str	r3, [sp, #0]
 8017838:	462a      	mov	r2, r5
 801783a:	4b0e      	ldr	r3, [pc, #56]	@ (8017874 <_svfiprintf_r+0x1f0>)
 801783c:	a904      	add	r1, sp, #16
 801783e:	4638      	mov	r0, r7
 8017840:	f7fc fc50 	bl	80140e4 <_printf_float>
 8017844:	1c42      	adds	r2, r0, #1
 8017846:	4606      	mov	r6, r0
 8017848:	d1d6      	bne.n	80177f8 <_svfiprintf_r+0x174>
 801784a:	89ab      	ldrh	r3, [r5, #12]
 801784c:	065b      	lsls	r3, r3, #25
 801784e:	f53f af2d 	bmi.w	80176ac <_svfiprintf_r+0x28>
 8017852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017854:	e72c      	b.n	80176b0 <_svfiprintf_r+0x2c>
 8017856:	ab03      	add	r3, sp, #12
 8017858:	9300      	str	r3, [sp, #0]
 801785a:	462a      	mov	r2, r5
 801785c:	4b05      	ldr	r3, [pc, #20]	@ (8017874 <_svfiprintf_r+0x1f0>)
 801785e:	a904      	add	r1, sp, #16
 8017860:	4638      	mov	r0, r7
 8017862:	f7fc fed7 	bl	8014614 <_printf_i>
 8017866:	e7ed      	b.n	8017844 <_svfiprintf_r+0x1c0>
 8017868:	0801924b 	.word	0x0801924b
 801786c:	08019255 	.word	0x08019255
 8017870:	080140e5 	.word	0x080140e5
 8017874:	080175cd 	.word	0x080175cd
 8017878:	08019251 	.word	0x08019251

0801787c <_sungetc_r>:
 801787c:	b538      	push	{r3, r4, r5, lr}
 801787e:	1c4b      	adds	r3, r1, #1
 8017880:	4614      	mov	r4, r2
 8017882:	d103      	bne.n	801788c <_sungetc_r+0x10>
 8017884:	f04f 35ff 	mov.w	r5, #4294967295
 8017888:	4628      	mov	r0, r5
 801788a:	bd38      	pop	{r3, r4, r5, pc}
 801788c:	8993      	ldrh	r3, [r2, #12]
 801788e:	f023 0320 	bic.w	r3, r3, #32
 8017892:	8193      	strh	r3, [r2, #12]
 8017894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017896:	6852      	ldr	r2, [r2, #4]
 8017898:	b2cd      	uxtb	r5, r1
 801789a:	b18b      	cbz	r3, 80178c0 <_sungetc_r+0x44>
 801789c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801789e:	4293      	cmp	r3, r2
 80178a0:	dd08      	ble.n	80178b4 <_sungetc_r+0x38>
 80178a2:	6823      	ldr	r3, [r4, #0]
 80178a4:	1e5a      	subs	r2, r3, #1
 80178a6:	6022      	str	r2, [r4, #0]
 80178a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80178ac:	6863      	ldr	r3, [r4, #4]
 80178ae:	3301      	adds	r3, #1
 80178b0:	6063      	str	r3, [r4, #4]
 80178b2:	e7e9      	b.n	8017888 <_sungetc_r+0xc>
 80178b4:	4621      	mov	r1, r4
 80178b6:	f000 fc46 	bl	8018146 <__submore>
 80178ba:	2800      	cmp	r0, #0
 80178bc:	d0f1      	beq.n	80178a2 <_sungetc_r+0x26>
 80178be:	e7e1      	b.n	8017884 <_sungetc_r+0x8>
 80178c0:	6921      	ldr	r1, [r4, #16]
 80178c2:	6823      	ldr	r3, [r4, #0]
 80178c4:	b151      	cbz	r1, 80178dc <_sungetc_r+0x60>
 80178c6:	4299      	cmp	r1, r3
 80178c8:	d208      	bcs.n	80178dc <_sungetc_r+0x60>
 80178ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80178ce:	42a9      	cmp	r1, r5
 80178d0:	d104      	bne.n	80178dc <_sungetc_r+0x60>
 80178d2:	3b01      	subs	r3, #1
 80178d4:	3201      	adds	r2, #1
 80178d6:	6023      	str	r3, [r4, #0]
 80178d8:	6062      	str	r2, [r4, #4]
 80178da:	e7d5      	b.n	8017888 <_sungetc_r+0xc>
 80178dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80178e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80178e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80178e6:	2303      	movs	r3, #3
 80178e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80178ea:	4623      	mov	r3, r4
 80178ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80178f0:	6023      	str	r3, [r4, #0]
 80178f2:	2301      	movs	r3, #1
 80178f4:	e7dc      	b.n	80178b0 <_sungetc_r+0x34>

080178f6 <__ssrefill_r>:
 80178f6:	b510      	push	{r4, lr}
 80178f8:	460c      	mov	r4, r1
 80178fa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80178fc:	b169      	cbz	r1, 801791a <__ssrefill_r+0x24>
 80178fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017902:	4299      	cmp	r1, r3
 8017904:	d001      	beq.n	801790a <__ssrefill_r+0x14>
 8017906:	f7fe fae7 	bl	8015ed8 <_free_r>
 801790a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801790c:	6063      	str	r3, [r4, #4]
 801790e:	2000      	movs	r0, #0
 8017910:	6360      	str	r0, [r4, #52]	@ 0x34
 8017912:	b113      	cbz	r3, 801791a <__ssrefill_r+0x24>
 8017914:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017916:	6023      	str	r3, [r4, #0]
 8017918:	bd10      	pop	{r4, pc}
 801791a:	6923      	ldr	r3, [r4, #16]
 801791c:	6023      	str	r3, [r4, #0]
 801791e:	2300      	movs	r3, #0
 8017920:	6063      	str	r3, [r4, #4]
 8017922:	89a3      	ldrh	r3, [r4, #12]
 8017924:	f043 0320 	orr.w	r3, r3, #32
 8017928:	81a3      	strh	r3, [r4, #12]
 801792a:	f04f 30ff 	mov.w	r0, #4294967295
 801792e:	e7f3      	b.n	8017918 <__ssrefill_r+0x22>

08017930 <__ssvfiscanf_r>:
 8017930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017934:	460c      	mov	r4, r1
 8017936:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801793a:	2100      	movs	r1, #0
 801793c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017940:	49a6      	ldr	r1, [pc, #664]	@ (8017bdc <__ssvfiscanf_r+0x2ac>)
 8017942:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017944:	f10d 0804 	add.w	r8, sp, #4
 8017948:	49a5      	ldr	r1, [pc, #660]	@ (8017be0 <__ssvfiscanf_r+0x2b0>)
 801794a:	4fa6      	ldr	r7, [pc, #664]	@ (8017be4 <__ssvfiscanf_r+0x2b4>)
 801794c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017950:	4606      	mov	r6, r0
 8017952:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017954:	9300      	str	r3, [sp, #0]
 8017956:	f892 9000 	ldrb.w	r9, [r2]
 801795a:	f1b9 0f00 	cmp.w	r9, #0
 801795e:	f000 8158 	beq.w	8017c12 <__ssvfiscanf_r+0x2e2>
 8017962:	f817 3009 	ldrb.w	r3, [r7, r9]
 8017966:	f013 0308 	ands.w	r3, r3, #8
 801796a:	f102 0501 	add.w	r5, r2, #1
 801796e:	d019      	beq.n	80179a4 <__ssvfiscanf_r+0x74>
 8017970:	6863      	ldr	r3, [r4, #4]
 8017972:	2b00      	cmp	r3, #0
 8017974:	dd0f      	ble.n	8017996 <__ssvfiscanf_r+0x66>
 8017976:	6823      	ldr	r3, [r4, #0]
 8017978:	781a      	ldrb	r2, [r3, #0]
 801797a:	5cba      	ldrb	r2, [r7, r2]
 801797c:	0712      	lsls	r2, r2, #28
 801797e:	d401      	bmi.n	8017984 <__ssvfiscanf_r+0x54>
 8017980:	462a      	mov	r2, r5
 8017982:	e7e8      	b.n	8017956 <__ssvfiscanf_r+0x26>
 8017984:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017986:	3201      	adds	r2, #1
 8017988:	9245      	str	r2, [sp, #276]	@ 0x114
 801798a:	6862      	ldr	r2, [r4, #4]
 801798c:	3301      	adds	r3, #1
 801798e:	3a01      	subs	r2, #1
 8017990:	6062      	str	r2, [r4, #4]
 8017992:	6023      	str	r3, [r4, #0]
 8017994:	e7ec      	b.n	8017970 <__ssvfiscanf_r+0x40>
 8017996:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017998:	4621      	mov	r1, r4
 801799a:	4630      	mov	r0, r6
 801799c:	4798      	blx	r3
 801799e:	2800      	cmp	r0, #0
 80179a0:	d0e9      	beq.n	8017976 <__ssvfiscanf_r+0x46>
 80179a2:	e7ed      	b.n	8017980 <__ssvfiscanf_r+0x50>
 80179a4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80179a8:	f040 8085 	bne.w	8017ab6 <__ssvfiscanf_r+0x186>
 80179ac:	9341      	str	r3, [sp, #260]	@ 0x104
 80179ae:	9343      	str	r3, [sp, #268]	@ 0x10c
 80179b0:	7853      	ldrb	r3, [r2, #1]
 80179b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80179b4:	bf02      	ittt	eq
 80179b6:	2310      	moveq	r3, #16
 80179b8:	1c95      	addeq	r5, r2, #2
 80179ba:	9341      	streq	r3, [sp, #260]	@ 0x104
 80179bc:	220a      	movs	r2, #10
 80179be:	46aa      	mov	sl, r5
 80179c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80179c4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80179c8:	2b09      	cmp	r3, #9
 80179ca:	d91e      	bls.n	8017a0a <__ssvfiscanf_r+0xda>
 80179cc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8017be8 <__ssvfiscanf_r+0x2b8>
 80179d0:	2203      	movs	r2, #3
 80179d2:	4658      	mov	r0, fp
 80179d4:	f7f0 fc2c 	bl	8008230 <memchr>
 80179d8:	b138      	cbz	r0, 80179ea <__ssvfiscanf_r+0xba>
 80179da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80179dc:	eba0 000b 	sub.w	r0, r0, fp
 80179e0:	2301      	movs	r3, #1
 80179e2:	4083      	lsls	r3, r0
 80179e4:	4313      	orrs	r3, r2
 80179e6:	9341      	str	r3, [sp, #260]	@ 0x104
 80179e8:	4655      	mov	r5, sl
 80179ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80179ee:	2b78      	cmp	r3, #120	@ 0x78
 80179f0:	d806      	bhi.n	8017a00 <__ssvfiscanf_r+0xd0>
 80179f2:	2b57      	cmp	r3, #87	@ 0x57
 80179f4:	d810      	bhi.n	8017a18 <__ssvfiscanf_r+0xe8>
 80179f6:	2b25      	cmp	r3, #37	@ 0x25
 80179f8:	d05d      	beq.n	8017ab6 <__ssvfiscanf_r+0x186>
 80179fa:	d857      	bhi.n	8017aac <__ssvfiscanf_r+0x17c>
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d075      	beq.n	8017aec <__ssvfiscanf_r+0x1bc>
 8017a00:	2303      	movs	r3, #3
 8017a02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017a04:	230a      	movs	r3, #10
 8017a06:	9342      	str	r3, [sp, #264]	@ 0x108
 8017a08:	e088      	b.n	8017b1c <__ssvfiscanf_r+0x1ec>
 8017a0a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017a0c:	fb02 1103 	mla	r1, r2, r3, r1
 8017a10:	3930      	subs	r1, #48	@ 0x30
 8017a12:	9143      	str	r1, [sp, #268]	@ 0x10c
 8017a14:	4655      	mov	r5, sl
 8017a16:	e7d2      	b.n	80179be <__ssvfiscanf_r+0x8e>
 8017a18:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8017a1c:	2a20      	cmp	r2, #32
 8017a1e:	d8ef      	bhi.n	8017a00 <__ssvfiscanf_r+0xd0>
 8017a20:	a101      	add	r1, pc, #4	@ (adr r1, 8017a28 <__ssvfiscanf_r+0xf8>)
 8017a22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017a26:	bf00      	nop
 8017a28:	08017afb 	.word	0x08017afb
 8017a2c:	08017a01 	.word	0x08017a01
 8017a30:	08017a01 	.word	0x08017a01
 8017a34:	08017b55 	.word	0x08017b55
 8017a38:	08017a01 	.word	0x08017a01
 8017a3c:	08017a01 	.word	0x08017a01
 8017a40:	08017a01 	.word	0x08017a01
 8017a44:	08017a01 	.word	0x08017a01
 8017a48:	08017a01 	.word	0x08017a01
 8017a4c:	08017a01 	.word	0x08017a01
 8017a50:	08017a01 	.word	0x08017a01
 8017a54:	08017b6b 	.word	0x08017b6b
 8017a58:	08017b51 	.word	0x08017b51
 8017a5c:	08017ab3 	.word	0x08017ab3
 8017a60:	08017ab3 	.word	0x08017ab3
 8017a64:	08017ab3 	.word	0x08017ab3
 8017a68:	08017a01 	.word	0x08017a01
 8017a6c:	08017b0d 	.word	0x08017b0d
 8017a70:	08017a01 	.word	0x08017a01
 8017a74:	08017a01 	.word	0x08017a01
 8017a78:	08017a01 	.word	0x08017a01
 8017a7c:	08017a01 	.word	0x08017a01
 8017a80:	08017b7b 	.word	0x08017b7b
 8017a84:	08017b15 	.word	0x08017b15
 8017a88:	08017af3 	.word	0x08017af3
 8017a8c:	08017a01 	.word	0x08017a01
 8017a90:	08017a01 	.word	0x08017a01
 8017a94:	08017b77 	.word	0x08017b77
 8017a98:	08017a01 	.word	0x08017a01
 8017a9c:	08017b51 	.word	0x08017b51
 8017aa0:	08017a01 	.word	0x08017a01
 8017aa4:	08017a01 	.word	0x08017a01
 8017aa8:	08017afb 	.word	0x08017afb
 8017aac:	3b45      	subs	r3, #69	@ 0x45
 8017aae:	2b02      	cmp	r3, #2
 8017ab0:	d8a6      	bhi.n	8017a00 <__ssvfiscanf_r+0xd0>
 8017ab2:	2305      	movs	r3, #5
 8017ab4:	e031      	b.n	8017b1a <__ssvfiscanf_r+0x1ea>
 8017ab6:	6863      	ldr	r3, [r4, #4]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	dd0d      	ble.n	8017ad8 <__ssvfiscanf_r+0x1a8>
 8017abc:	6823      	ldr	r3, [r4, #0]
 8017abe:	781a      	ldrb	r2, [r3, #0]
 8017ac0:	454a      	cmp	r2, r9
 8017ac2:	f040 80a6 	bne.w	8017c12 <__ssvfiscanf_r+0x2e2>
 8017ac6:	3301      	adds	r3, #1
 8017ac8:	6862      	ldr	r2, [r4, #4]
 8017aca:	6023      	str	r3, [r4, #0]
 8017acc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8017ace:	3a01      	subs	r2, #1
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	6062      	str	r2, [r4, #4]
 8017ad4:	9345      	str	r3, [sp, #276]	@ 0x114
 8017ad6:	e753      	b.n	8017980 <__ssvfiscanf_r+0x50>
 8017ad8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017ada:	4621      	mov	r1, r4
 8017adc:	4630      	mov	r0, r6
 8017ade:	4798      	blx	r3
 8017ae0:	2800      	cmp	r0, #0
 8017ae2:	d0eb      	beq.n	8017abc <__ssvfiscanf_r+0x18c>
 8017ae4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017ae6:	2800      	cmp	r0, #0
 8017ae8:	f040 808b 	bne.w	8017c02 <__ssvfiscanf_r+0x2d2>
 8017aec:	f04f 30ff 	mov.w	r0, #4294967295
 8017af0:	e08b      	b.n	8017c0a <__ssvfiscanf_r+0x2da>
 8017af2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017af4:	f042 0220 	orr.w	r2, r2, #32
 8017af8:	9241      	str	r2, [sp, #260]	@ 0x104
 8017afa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017b00:	9241      	str	r2, [sp, #260]	@ 0x104
 8017b02:	2210      	movs	r2, #16
 8017b04:	2b6e      	cmp	r3, #110	@ 0x6e
 8017b06:	9242      	str	r2, [sp, #264]	@ 0x108
 8017b08:	d902      	bls.n	8017b10 <__ssvfiscanf_r+0x1e0>
 8017b0a:	e005      	b.n	8017b18 <__ssvfiscanf_r+0x1e8>
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8017b10:	2303      	movs	r3, #3
 8017b12:	e002      	b.n	8017b1a <__ssvfiscanf_r+0x1ea>
 8017b14:	2308      	movs	r3, #8
 8017b16:	9342      	str	r3, [sp, #264]	@ 0x108
 8017b18:	2304      	movs	r3, #4
 8017b1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017b1c:	6863      	ldr	r3, [r4, #4]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	dd39      	ble.n	8017b96 <__ssvfiscanf_r+0x266>
 8017b22:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017b24:	0659      	lsls	r1, r3, #25
 8017b26:	d404      	bmi.n	8017b32 <__ssvfiscanf_r+0x202>
 8017b28:	6823      	ldr	r3, [r4, #0]
 8017b2a:	781a      	ldrb	r2, [r3, #0]
 8017b2c:	5cba      	ldrb	r2, [r7, r2]
 8017b2e:	0712      	lsls	r2, r2, #28
 8017b30:	d438      	bmi.n	8017ba4 <__ssvfiscanf_r+0x274>
 8017b32:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8017b34:	2b02      	cmp	r3, #2
 8017b36:	dc47      	bgt.n	8017bc8 <__ssvfiscanf_r+0x298>
 8017b38:	466b      	mov	r3, sp
 8017b3a:	4622      	mov	r2, r4
 8017b3c:	a941      	add	r1, sp, #260	@ 0x104
 8017b3e:	4630      	mov	r0, r6
 8017b40:	f000 f86c 	bl	8017c1c <_scanf_chars>
 8017b44:	2801      	cmp	r0, #1
 8017b46:	d064      	beq.n	8017c12 <__ssvfiscanf_r+0x2e2>
 8017b48:	2802      	cmp	r0, #2
 8017b4a:	f47f af19 	bne.w	8017980 <__ssvfiscanf_r+0x50>
 8017b4e:	e7c9      	b.n	8017ae4 <__ssvfiscanf_r+0x1b4>
 8017b50:	220a      	movs	r2, #10
 8017b52:	e7d7      	b.n	8017b04 <__ssvfiscanf_r+0x1d4>
 8017b54:	4629      	mov	r1, r5
 8017b56:	4640      	mov	r0, r8
 8017b58:	f000 fabc 	bl	80180d4 <__sccl>
 8017b5c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b62:	9341      	str	r3, [sp, #260]	@ 0x104
 8017b64:	4605      	mov	r5, r0
 8017b66:	2301      	movs	r3, #1
 8017b68:	e7d7      	b.n	8017b1a <__ssvfiscanf_r+0x1ea>
 8017b6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b70:	9341      	str	r3, [sp, #260]	@ 0x104
 8017b72:	2300      	movs	r3, #0
 8017b74:	e7d1      	b.n	8017b1a <__ssvfiscanf_r+0x1ea>
 8017b76:	2302      	movs	r3, #2
 8017b78:	e7cf      	b.n	8017b1a <__ssvfiscanf_r+0x1ea>
 8017b7a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8017b7c:	06c3      	lsls	r3, r0, #27
 8017b7e:	f53f aeff 	bmi.w	8017980 <__ssvfiscanf_r+0x50>
 8017b82:	9b00      	ldr	r3, [sp, #0]
 8017b84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017b86:	1d19      	adds	r1, r3, #4
 8017b88:	9100      	str	r1, [sp, #0]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	07c0      	lsls	r0, r0, #31
 8017b8e:	bf4c      	ite	mi
 8017b90:	801a      	strhmi	r2, [r3, #0]
 8017b92:	601a      	strpl	r2, [r3, #0]
 8017b94:	e6f4      	b.n	8017980 <__ssvfiscanf_r+0x50>
 8017b96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017b98:	4621      	mov	r1, r4
 8017b9a:	4630      	mov	r0, r6
 8017b9c:	4798      	blx	r3
 8017b9e:	2800      	cmp	r0, #0
 8017ba0:	d0bf      	beq.n	8017b22 <__ssvfiscanf_r+0x1f2>
 8017ba2:	e79f      	b.n	8017ae4 <__ssvfiscanf_r+0x1b4>
 8017ba4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017ba6:	3201      	adds	r2, #1
 8017ba8:	9245      	str	r2, [sp, #276]	@ 0x114
 8017baa:	6862      	ldr	r2, [r4, #4]
 8017bac:	3a01      	subs	r2, #1
 8017bae:	2a00      	cmp	r2, #0
 8017bb0:	6062      	str	r2, [r4, #4]
 8017bb2:	dd02      	ble.n	8017bba <__ssvfiscanf_r+0x28a>
 8017bb4:	3301      	adds	r3, #1
 8017bb6:	6023      	str	r3, [r4, #0]
 8017bb8:	e7b6      	b.n	8017b28 <__ssvfiscanf_r+0x1f8>
 8017bba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017bbc:	4621      	mov	r1, r4
 8017bbe:	4630      	mov	r0, r6
 8017bc0:	4798      	blx	r3
 8017bc2:	2800      	cmp	r0, #0
 8017bc4:	d0b0      	beq.n	8017b28 <__ssvfiscanf_r+0x1f8>
 8017bc6:	e78d      	b.n	8017ae4 <__ssvfiscanf_r+0x1b4>
 8017bc8:	2b04      	cmp	r3, #4
 8017bca:	dc0f      	bgt.n	8017bec <__ssvfiscanf_r+0x2bc>
 8017bcc:	466b      	mov	r3, sp
 8017bce:	4622      	mov	r2, r4
 8017bd0:	a941      	add	r1, sp, #260	@ 0x104
 8017bd2:	4630      	mov	r0, r6
 8017bd4:	f000 f87c 	bl	8017cd0 <_scanf_i>
 8017bd8:	e7b4      	b.n	8017b44 <__ssvfiscanf_r+0x214>
 8017bda:	bf00      	nop
 8017bdc:	0801787d 	.word	0x0801787d
 8017be0:	080178f7 	.word	0x080178f7
 8017be4:	08019469 	.word	0x08019469
 8017be8:	08019251 	.word	0x08019251
 8017bec:	4b0a      	ldr	r3, [pc, #40]	@ (8017c18 <__ssvfiscanf_r+0x2e8>)
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	f43f aec6 	beq.w	8017980 <__ssvfiscanf_r+0x50>
 8017bf4:	466b      	mov	r3, sp
 8017bf6:	4622      	mov	r2, r4
 8017bf8:	a941      	add	r1, sp, #260	@ 0x104
 8017bfa:	4630      	mov	r0, r6
 8017bfc:	f7fc fe28 	bl	8014850 <_scanf_float>
 8017c00:	e7a0      	b.n	8017b44 <__ssvfiscanf_r+0x214>
 8017c02:	89a3      	ldrh	r3, [r4, #12]
 8017c04:	065b      	lsls	r3, r3, #25
 8017c06:	f53f af71 	bmi.w	8017aec <__ssvfiscanf_r+0x1bc>
 8017c0a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8017c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c12:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017c14:	e7f9      	b.n	8017c0a <__ssvfiscanf_r+0x2da>
 8017c16:	bf00      	nop
 8017c18:	08014851 	.word	0x08014851

08017c1c <_scanf_chars>:
 8017c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c20:	4615      	mov	r5, r2
 8017c22:	688a      	ldr	r2, [r1, #8]
 8017c24:	4680      	mov	r8, r0
 8017c26:	460c      	mov	r4, r1
 8017c28:	b932      	cbnz	r2, 8017c38 <_scanf_chars+0x1c>
 8017c2a:	698a      	ldr	r2, [r1, #24]
 8017c2c:	2a00      	cmp	r2, #0
 8017c2e:	bf14      	ite	ne
 8017c30:	f04f 32ff 	movne.w	r2, #4294967295
 8017c34:	2201      	moveq	r2, #1
 8017c36:	608a      	str	r2, [r1, #8]
 8017c38:	6822      	ldr	r2, [r4, #0]
 8017c3a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8017ccc <_scanf_chars+0xb0>
 8017c3e:	06d1      	lsls	r1, r2, #27
 8017c40:	bf5f      	itttt	pl
 8017c42:	681a      	ldrpl	r2, [r3, #0]
 8017c44:	1d11      	addpl	r1, r2, #4
 8017c46:	6019      	strpl	r1, [r3, #0]
 8017c48:	6816      	ldrpl	r6, [r2, #0]
 8017c4a:	2700      	movs	r7, #0
 8017c4c:	69a0      	ldr	r0, [r4, #24]
 8017c4e:	b188      	cbz	r0, 8017c74 <_scanf_chars+0x58>
 8017c50:	2801      	cmp	r0, #1
 8017c52:	d107      	bne.n	8017c64 <_scanf_chars+0x48>
 8017c54:	682b      	ldr	r3, [r5, #0]
 8017c56:	781a      	ldrb	r2, [r3, #0]
 8017c58:	6963      	ldr	r3, [r4, #20]
 8017c5a:	5c9b      	ldrb	r3, [r3, r2]
 8017c5c:	b953      	cbnz	r3, 8017c74 <_scanf_chars+0x58>
 8017c5e:	2f00      	cmp	r7, #0
 8017c60:	d031      	beq.n	8017cc6 <_scanf_chars+0xaa>
 8017c62:	e022      	b.n	8017caa <_scanf_chars+0x8e>
 8017c64:	2802      	cmp	r0, #2
 8017c66:	d120      	bne.n	8017caa <_scanf_chars+0x8e>
 8017c68:	682b      	ldr	r3, [r5, #0]
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017c70:	071b      	lsls	r3, r3, #28
 8017c72:	d41a      	bmi.n	8017caa <_scanf_chars+0x8e>
 8017c74:	6823      	ldr	r3, [r4, #0]
 8017c76:	06da      	lsls	r2, r3, #27
 8017c78:	bf5e      	ittt	pl
 8017c7a:	682b      	ldrpl	r3, [r5, #0]
 8017c7c:	781b      	ldrbpl	r3, [r3, #0]
 8017c7e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017c82:	682a      	ldr	r2, [r5, #0]
 8017c84:	686b      	ldr	r3, [r5, #4]
 8017c86:	3201      	adds	r2, #1
 8017c88:	602a      	str	r2, [r5, #0]
 8017c8a:	68a2      	ldr	r2, [r4, #8]
 8017c8c:	3b01      	subs	r3, #1
 8017c8e:	3a01      	subs	r2, #1
 8017c90:	606b      	str	r3, [r5, #4]
 8017c92:	3701      	adds	r7, #1
 8017c94:	60a2      	str	r2, [r4, #8]
 8017c96:	b142      	cbz	r2, 8017caa <_scanf_chars+0x8e>
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	dcd7      	bgt.n	8017c4c <_scanf_chars+0x30>
 8017c9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017ca0:	4629      	mov	r1, r5
 8017ca2:	4640      	mov	r0, r8
 8017ca4:	4798      	blx	r3
 8017ca6:	2800      	cmp	r0, #0
 8017ca8:	d0d0      	beq.n	8017c4c <_scanf_chars+0x30>
 8017caa:	6823      	ldr	r3, [r4, #0]
 8017cac:	f013 0310 	ands.w	r3, r3, #16
 8017cb0:	d105      	bne.n	8017cbe <_scanf_chars+0xa2>
 8017cb2:	68e2      	ldr	r2, [r4, #12]
 8017cb4:	3201      	adds	r2, #1
 8017cb6:	60e2      	str	r2, [r4, #12]
 8017cb8:	69a2      	ldr	r2, [r4, #24]
 8017cba:	b102      	cbz	r2, 8017cbe <_scanf_chars+0xa2>
 8017cbc:	7033      	strb	r3, [r6, #0]
 8017cbe:	6923      	ldr	r3, [r4, #16]
 8017cc0:	443b      	add	r3, r7
 8017cc2:	6123      	str	r3, [r4, #16]
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cca:	bf00      	nop
 8017ccc:	08019469 	.word	0x08019469

08017cd0 <_scanf_i>:
 8017cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd4:	4698      	mov	r8, r3
 8017cd6:	4b74      	ldr	r3, [pc, #464]	@ (8017ea8 <_scanf_i+0x1d8>)
 8017cd8:	460c      	mov	r4, r1
 8017cda:	4682      	mov	sl, r0
 8017cdc:	4616      	mov	r6, r2
 8017cde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017ce2:	b087      	sub	sp, #28
 8017ce4:	ab03      	add	r3, sp, #12
 8017ce6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017cea:	4b70      	ldr	r3, [pc, #448]	@ (8017eac <_scanf_i+0x1dc>)
 8017cec:	69a1      	ldr	r1, [r4, #24]
 8017cee:	4a70      	ldr	r2, [pc, #448]	@ (8017eb0 <_scanf_i+0x1e0>)
 8017cf0:	2903      	cmp	r1, #3
 8017cf2:	bf08      	it	eq
 8017cf4:	461a      	moveq	r2, r3
 8017cf6:	68a3      	ldr	r3, [r4, #8]
 8017cf8:	9201      	str	r2, [sp, #4]
 8017cfa:	1e5a      	subs	r2, r3, #1
 8017cfc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017d00:	bf88      	it	hi
 8017d02:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017d06:	4627      	mov	r7, r4
 8017d08:	bf82      	ittt	hi
 8017d0a:	eb03 0905 	addhi.w	r9, r3, r5
 8017d0e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017d12:	60a3      	strhi	r3, [r4, #8]
 8017d14:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017d18:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8017d1c:	bf98      	it	ls
 8017d1e:	f04f 0900 	movls.w	r9, #0
 8017d22:	6023      	str	r3, [r4, #0]
 8017d24:	463d      	mov	r5, r7
 8017d26:	f04f 0b00 	mov.w	fp, #0
 8017d2a:	6831      	ldr	r1, [r6, #0]
 8017d2c:	ab03      	add	r3, sp, #12
 8017d2e:	7809      	ldrb	r1, [r1, #0]
 8017d30:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017d34:	2202      	movs	r2, #2
 8017d36:	f7f0 fa7b 	bl	8008230 <memchr>
 8017d3a:	b328      	cbz	r0, 8017d88 <_scanf_i+0xb8>
 8017d3c:	f1bb 0f01 	cmp.w	fp, #1
 8017d40:	d159      	bne.n	8017df6 <_scanf_i+0x126>
 8017d42:	6862      	ldr	r2, [r4, #4]
 8017d44:	b92a      	cbnz	r2, 8017d52 <_scanf_i+0x82>
 8017d46:	6822      	ldr	r2, [r4, #0]
 8017d48:	2108      	movs	r1, #8
 8017d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017d4e:	6061      	str	r1, [r4, #4]
 8017d50:	6022      	str	r2, [r4, #0]
 8017d52:	6822      	ldr	r2, [r4, #0]
 8017d54:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017d58:	6022      	str	r2, [r4, #0]
 8017d5a:	68a2      	ldr	r2, [r4, #8]
 8017d5c:	1e51      	subs	r1, r2, #1
 8017d5e:	60a1      	str	r1, [r4, #8]
 8017d60:	b192      	cbz	r2, 8017d88 <_scanf_i+0xb8>
 8017d62:	6832      	ldr	r2, [r6, #0]
 8017d64:	1c51      	adds	r1, r2, #1
 8017d66:	6031      	str	r1, [r6, #0]
 8017d68:	7812      	ldrb	r2, [r2, #0]
 8017d6a:	f805 2b01 	strb.w	r2, [r5], #1
 8017d6e:	6872      	ldr	r2, [r6, #4]
 8017d70:	3a01      	subs	r2, #1
 8017d72:	2a00      	cmp	r2, #0
 8017d74:	6072      	str	r2, [r6, #4]
 8017d76:	dc07      	bgt.n	8017d88 <_scanf_i+0xb8>
 8017d78:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8017d7c:	4631      	mov	r1, r6
 8017d7e:	4650      	mov	r0, sl
 8017d80:	4790      	blx	r2
 8017d82:	2800      	cmp	r0, #0
 8017d84:	f040 8085 	bne.w	8017e92 <_scanf_i+0x1c2>
 8017d88:	f10b 0b01 	add.w	fp, fp, #1
 8017d8c:	f1bb 0f03 	cmp.w	fp, #3
 8017d90:	d1cb      	bne.n	8017d2a <_scanf_i+0x5a>
 8017d92:	6863      	ldr	r3, [r4, #4]
 8017d94:	b90b      	cbnz	r3, 8017d9a <_scanf_i+0xca>
 8017d96:	230a      	movs	r3, #10
 8017d98:	6063      	str	r3, [r4, #4]
 8017d9a:	6863      	ldr	r3, [r4, #4]
 8017d9c:	4945      	ldr	r1, [pc, #276]	@ (8017eb4 <_scanf_i+0x1e4>)
 8017d9e:	6960      	ldr	r0, [r4, #20]
 8017da0:	1ac9      	subs	r1, r1, r3
 8017da2:	f000 f997 	bl	80180d4 <__sccl>
 8017da6:	f04f 0b00 	mov.w	fp, #0
 8017daa:	68a3      	ldr	r3, [r4, #8]
 8017dac:	6822      	ldr	r2, [r4, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d03d      	beq.n	8017e2e <_scanf_i+0x15e>
 8017db2:	6831      	ldr	r1, [r6, #0]
 8017db4:	6960      	ldr	r0, [r4, #20]
 8017db6:	f891 c000 	ldrb.w	ip, [r1]
 8017dba:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017dbe:	2800      	cmp	r0, #0
 8017dc0:	d035      	beq.n	8017e2e <_scanf_i+0x15e>
 8017dc2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017dc6:	d124      	bne.n	8017e12 <_scanf_i+0x142>
 8017dc8:	0510      	lsls	r0, r2, #20
 8017dca:	d522      	bpl.n	8017e12 <_scanf_i+0x142>
 8017dcc:	f10b 0b01 	add.w	fp, fp, #1
 8017dd0:	f1b9 0f00 	cmp.w	r9, #0
 8017dd4:	d003      	beq.n	8017dde <_scanf_i+0x10e>
 8017dd6:	3301      	adds	r3, #1
 8017dd8:	f109 39ff 	add.w	r9, r9, #4294967295
 8017ddc:	60a3      	str	r3, [r4, #8]
 8017dde:	6873      	ldr	r3, [r6, #4]
 8017de0:	3b01      	subs	r3, #1
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	6073      	str	r3, [r6, #4]
 8017de6:	dd1b      	ble.n	8017e20 <_scanf_i+0x150>
 8017de8:	6833      	ldr	r3, [r6, #0]
 8017dea:	3301      	adds	r3, #1
 8017dec:	6033      	str	r3, [r6, #0]
 8017dee:	68a3      	ldr	r3, [r4, #8]
 8017df0:	3b01      	subs	r3, #1
 8017df2:	60a3      	str	r3, [r4, #8]
 8017df4:	e7d9      	b.n	8017daa <_scanf_i+0xda>
 8017df6:	f1bb 0f02 	cmp.w	fp, #2
 8017dfa:	d1ae      	bne.n	8017d5a <_scanf_i+0x8a>
 8017dfc:	6822      	ldr	r2, [r4, #0]
 8017dfe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017e02:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017e06:	d1c4      	bne.n	8017d92 <_scanf_i+0xc2>
 8017e08:	2110      	movs	r1, #16
 8017e0a:	6061      	str	r1, [r4, #4]
 8017e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017e10:	e7a2      	b.n	8017d58 <_scanf_i+0x88>
 8017e12:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017e16:	6022      	str	r2, [r4, #0]
 8017e18:	780b      	ldrb	r3, [r1, #0]
 8017e1a:	f805 3b01 	strb.w	r3, [r5], #1
 8017e1e:	e7de      	b.n	8017dde <_scanf_i+0x10e>
 8017e20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017e24:	4631      	mov	r1, r6
 8017e26:	4650      	mov	r0, sl
 8017e28:	4798      	blx	r3
 8017e2a:	2800      	cmp	r0, #0
 8017e2c:	d0df      	beq.n	8017dee <_scanf_i+0x11e>
 8017e2e:	6823      	ldr	r3, [r4, #0]
 8017e30:	05d9      	lsls	r1, r3, #23
 8017e32:	d50d      	bpl.n	8017e50 <_scanf_i+0x180>
 8017e34:	42bd      	cmp	r5, r7
 8017e36:	d909      	bls.n	8017e4c <_scanf_i+0x17c>
 8017e38:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017e3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017e40:	4632      	mov	r2, r6
 8017e42:	4650      	mov	r0, sl
 8017e44:	4798      	blx	r3
 8017e46:	f105 39ff 	add.w	r9, r5, #4294967295
 8017e4a:	464d      	mov	r5, r9
 8017e4c:	42bd      	cmp	r5, r7
 8017e4e:	d028      	beq.n	8017ea2 <_scanf_i+0x1d2>
 8017e50:	6822      	ldr	r2, [r4, #0]
 8017e52:	f012 0210 	ands.w	r2, r2, #16
 8017e56:	d113      	bne.n	8017e80 <_scanf_i+0x1b0>
 8017e58:	702a      	strb	r2, [r5, #0]
 8017e5a:	6863      	ldr	r3, [r4, #4]
 8017e5c:	9e01      	ldr	r6, [sp, #4]
 8017e5e:	4639      	mov	r1, r7
 8017e60:	4650      	mov	r0, sl
 8017e62:	47b0      	blx	r6
 8017e64:	f8d8 3000 	ldr.w	r3, [r8]
 8017e68:	6821      	ldr	r1, [r4, #0]
 8017e6a:	1d1a      	adds	r2, r3, #4
 8017e6c:	f8c8 2000 	str.w	r2, [r8]
 8017e70:	f011 0f20 	tst.w	r1, #32
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	d00f      	beq.n	8017e98 <_scanf_i+0x1c8>
 8017e78:	6018      	str	r0, [r3, #0]
 8017e7a:	68e3      	ldr	r3, [r4, #12]
 8017e7c:	3301      	adds	r3, #1
 8017e7e:	60e3      	str	r3, [r4, #12]
 8017e80:	6923      	ldr	r3, [r4, #16]
 8017e82:	1bed      	subs	r5, r5, r7
 8017e84:	445d      	add	r5, fp
 8017e86:	442b      	add	r3, r5
 8017e88:	6123      	str	r3, [r4, #16]
 8017e8a:	2000      	movs	r0, #0
 8017e8c:	b007      	add	sp, #28
 8017e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e92:	f04f 0b00 	mov.w	fp, #0
 8017e96:	e7ca      	b.n	8017e2e <_scanf_i+0x15e>
 8017e98:	07ca      	lsls	r2, r1, #31
 8017e9a:	bf4c      	ite	mi
 8017e9c:	8018      	strhmi	r0, [r3, #0]
 8017e9e:	6018      	strpl	r0, [r3, #0]
 8017ea0:	e7eb      	b.n	8017e7a <_scanf_i+0x1aa>
 8017ea2:	2001      	movs	r0, #1
 8017ea4:	e7f2      	b.n	8017e8c <_scanf_i+0x1bc>
 8017ea6:	bf00      	nop
 8017ea8:	08019108 	.word	0x08019108
 8017eac:	080175c9 	.word	0x080175c9
 8017eb0:	08018abd 	.word	0x08018abd
 8017eb4:	0801926c 	.word	0x0801926c

08017eb8 <__sflush_r>:
 8017eb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ec0:	0716      	lsls	r6, r2, #28
 8017ec2:	4605      	mov	r5, r0
 8017ec4:	460c      	mov	r4, r1
 8017ec6:	d454      	bmi.n	8017f72 <__sflush_r+0xba>
 8017ec8:	684b      	ldr	r3, [r1, #4]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	dc02      	bgt.n	8017ed4 <__sflush_r+0x1c>
 8017ece:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	dd48      	ble.n	8017f66 <__sflush_r+0xae>
 8017ed4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017ed6:	2e00      	cmp	r6, #0
 8017ed8:	d045      	beq.n	8017f66 <__sflush_r+0xae>
 8017eda:	2300      	movs	r3, #0
 8017edc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017ee0:	682f      	ldr	r7, [r5, #0]
 8017ee2:	6a21      	ldr	r1, [r4, #32]
 8017ee4:	602b      	str	r3, [r5, #0]
 8017ee6:	d030      	beq.n	8017f4a <__sflush_r+0x92>
 8017ee8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017eea:	89a3      	ldrh	r3, [r4, #12]
 8017eec:	0759      	lsls	r1, r3, #29
 8017eee:	d505      	bpl.n	8017efc <__sflush_r+0x44>
 8017ef0:	6863      	ldr	r3, [r4, #4]
 8017ef2:	1ad2      	subs	r2, r2, r3
 8017ef4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017ef6:	b10b      	cbz	r3, 8017efc <__sflush_r+0x44>
 8017ef8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017efa:	1ad2      	subs	r2, r2, r3
 8017efc:	2300      	movs	r3, #0
 8017efe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017f00:	6a21      	ldr	r1, [r4, #32]
 8017f02:	4628      	mov	r0, r5
 8017f04:	47b0      	blx	r6
 8017f06:	1c43      	adds	r3, r0, #1
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	d106      	bne.n	8017f1a <__sflush_r+0x62>
 8017f0c:	6829      	ldr	r1, [r5, #0]
 8017f0e:	291d      	cmp	r1, #29
 8017f10:	d82b      	bhi.n	8017f6a <__sflush_r+0xb2>
 8017f12:	4a2a      	ldr	r2, [pc, #168]	@ (8017fbc <__sflush_r+0x104>)
 8017f14:	40ca      	lsrs	r2, r1
 8017f16:	07d6      	lsls	r6, r2, #31
 8017f18:	d527      	bpl.n	8017f6a <__sflush_r+0xb2>
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	6062      	str	r2, [r4, #4]
 8017f1e:	04d9      	lsls	r1, r3, #19
 8017f20:	6922      	ldr	r2, [r4, #16]
 8017f22:	6022      	str	r2, [r4, #0]
 8017f24:	d504      	bpl.n	8017f30 <__sflush_r+0x78>
 8017f26:	1c42      	adds	r2, r0, #1
 8017f28:	d101      	bne.n	8017f2e <__sflush_r+0x76>
 8017f2a:	682b      	ldr	r3, [r5, #0]
 8017f2c:	b903      	cbnz	r3, 8017f30 <__sflush_r+0x78>
 8017f2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017f32:	602f      	str	r7, [r5, #0]
 8017f34:	b1b9      	cbz	r1, 8017f66 <__sflush_r+0xae>
 8017f36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017f3a:	4299      	cmp	r1, r3
 8017f3c:	d002      	beq.n	8017f44 <__sflush_r+0x8c>
 8017f3e:	4628      	mov	r0, r5
 8017f40:	f7fd ffca 	bl	8015ed8 <_free_r>
 8017f44:	2300      	movs	r3, #0
 8017f46:	6363      	str	r3, [r4, #52]	@ 0x34
 8017f48:	e00d      	b.n	8017f66 <__sflush_r+0xae>
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	4628      	mov	r0, r5
 8017f4e:	47b0      	blx	r6
 8017f50:	4602      	mov	r2, r0
 8017f52:	1c50      	adds	r0, r2, #1
 8017f54:	d1c9      	bne.n	8017eea <__sflush_r+0x32>
 8017f56:	682b      	ldr	r3, [r5, #0]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d0c6      	beq.n	8017eea <__sflush_r+0x32>
 8017f5c:	2b1d      	cmp	r3, #29
 8017f5e:	d001      	beq.n	8017f64 <__sflush_r+0xac>
 8017f60:	2b16      	cmp	r3, #22
 8017f62:	d11e      	bne.n	8017fa2 <__sflush_r+0xea>
 8017f64:	602f      	str	r7, [r5, #0]
 8017f66:	2000      	movs	r0, #0
 8017f68:	e022      	b.n	8017fb0 <__sflush_r+0xf8>
 8017f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f6e:	b21b      	sxth	r3, r3
 8017f70:	e01b      	b.n	8017faa <__sflush_r+0xf2>
 8017f72:	690f      	ldr	r7, [r1, #16]
 8017f74:	2f00      	cmp	r7, #0
 8017f76:	d0f6      	beq.n	8017f66 <__sflush_r+0xae>
 8017f78:	0793      	lsls	r3, r2, #30
 8017f7a:	680e      	ldr	r6, [r1, #0]
 8017f7c:	bf08      	it	eq
 8017f7e:	694b      	ldreq	r3, [r1, #20]
 8017f80:	600f      	str	r7, [r1, #0]
 8017f82:	bf18      	it	ne
 8017f84:	2300      	movne	r3, #0
 8017f86:	eba6 0807 	sub.w	r8, r6, r7
 8017f8a:	608b      	str	r3, [r1, #8]
 8017f8c:	f1b8 0f00 	cmp.w	r8, #0
 8017f90:	dde9      	ble.n	8017f66 <__sflush_r+0xae>
 8017f92:	6a21      	ldr	r1, [r4, #32]
 8017f94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017f96:	4643      	mov	r3, r8
 8017f98:	463a      	mov	r2, r7
 8017f9a:	4628      	mov	r0, r5
 8017f9c:	47b0      	blx	r6
 8017f9e:	2800      	cmp	r0, #0
 8017fa0:	dc08      	bgt.n	8017fb4 <__sflush_r+0xfc>
 8017fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017faa:	81a3      	strh	r3, [r4, #12]
 8017fac:	f04f 30ff 	mov.w	r0, #4294967295
 8017fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb4:	4407      	add	r7, r0
 8017fb6:	eba8 0800 	sub.w	r8, r8, r0
 8017fba:	e7e7      	b.n	8017f8c <__sflush_r+0xd4>
 8017fbc:	20400001 	.word	0x20400001

08017fc0 <_fflush_r>:
 8017fc0:	b538      	push	{r3, r4, r5, lr}
 8017fc2:	690b      	ldr	r3, [r1, #16]
 8017fc4:	4605      	mov	r5, r0
 8017fc6:	460c      	mov	r4, r1
 8017fc8:	b913      	cbnz	r3, 8017fd0 <_fflush_r+0x10>
 8017fca:	2500      	movs	r5, #0
 8017fcc:	4628      	mov	r0, r5
 8017fce:	bd38      	pop	{r3, r4, r5, pc}
 8017fd0:	b118      	cbz	r0, 8017fda <_fflush_r+0x1a>
 8017fd2:	6a03      	ldr	r3, [r0, #32]
 8017fd4:	b90b      	cbnz	r3, 8017fda <_fflush_r+0x1a>
 8017fd6:	f7fc fed5 	bl	8014d84 <__sinit>
 8017fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d0f3      	beq.n	8017fca <_fflush_r+0xa>
 8017fe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017fe4:	07d0      	lsls	r0, r2, #31
 8017fe6:	d404      	bmi.n	8017ff2 <_fflush_r+0x32>
 8017fe8:	0599      	lsls	r1, r3, #22
 8017fea:	d402      	bmi.n	8017ff2 <_fflush_r+0x32>
 8017fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017fee:	f7fd f90a 	bl	8015206 <__retarget_lock_acquire_recursive>
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	4621      	mov	r1, r4
 8017ff6:	f7ff ff5f 	bl	8017eb8 <__sflush_r>
 8017ffa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ffc:	07da      	lsls	r2, r3, #31
 8017ffe:	4605      	mov	r5, r0
 8018000:	d4e4      	bmi.n	8017fcc <_fflush_r+0xc>
 8018002:	89a3      	ldrh	r3, [r4, #12]
 8018004:	059b      	lsls	r3, r3, #22
 8018006:	d4e1      	bmi.n	8017fcc <_fflush_r+0xc>
 8018008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801800a:	f7fd f8fd 	bl	8015208 <__retarget_lock_release_recursive>
 801800e:	e7dd      	b.n	8017fcc <_fflush_r+0xc>

08018010 <__swhatbuf_r>:
 8018010:	b570      	push	{r4, r5, r6, lr}
 8018012:	460c      	mov	r4, r1
 8018014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018018:	2900      	cmp	r1, #0
 801801a:	b096      	sub	sp, #88	@ 0x58
 801801c:	4615      	mov	r5, r2
 801801e:	461e      	mov	r6, r3
 8018020:	da0d      	bge.n	801803e <__swhatbuf_r+0x2e>
 8018022:	89a3      	ldrh	r3, [r4, #12]
 8018024:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018028:	f04f 0100 	mov.w	r1, #0
 801802c:	bf14      	ite	ne
 801802e:	2340      	movne	r3, #64	@ 0x40
 8018030:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018034:	2000      	movs	r0, #0
 8018036:	6031      	str	r1, [r6, #0]
 8018038:	602b      	str	r3, [r5, #0]
 801803a:	b016      	add	sp, #88	@ 0x58
 801803c:	bd70      	pop	{r4, r5, r6, pc}
 801803e:	466a      	mov	r2, sp
 8018040:	f000 f8e8 	bl	8018214 <_fstat_r>
 8018044:	2800      	cmp	r0, #0
 8018046:	dbec      	blt.n	8018022 <__swhatbuf_r+0x12>
 8018048:	9901      	ldr	r1, [sp, #4]
 801804a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801804e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018052:	4259      	negs	r1, r3
 8018054:	4159      	adcs	r1, r3
 8018056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801805a:	e7eb      	b.n	8018034 <__swhatbuf_r+0x24>

0801805c <__smakebuf_r>:
 801805c:	898b      	ldrh	r3, [r1, #12]
 801805e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018060:	079d      	lsls	r5, r3, #30
 8018062:	4606      	mov	r6, r0
 8018064:	460c      	mov	r4, r1
 8018066:	d507      	bpl.n	8018078 <__smakebuf_r+0x1c>
 8018068:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801806c:	6023      	str	r3, [r4, #0]
 801806e:	6123      	str	r3, [r4, #16]
 8018070:	2301      	movs	r3, #1
 8018072:	6163      	str	r3, [r4, #20]
 8018074:	b003      	add	sp, #12
 8018076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018078:	ab01      	add	r3, sp, #4
 801807a:	466a      	mov	r2, sp
 801807c:	f7ff ffc8 	bl	8018010 <__swhatbuf_r>
 8018080:	9f00      	ldr	r7, [sp, #0]
 8018082:	4605      	mov	r5, r0
 8018084:	4639      	mov	r1, r7
 8018086:	4630      	mov	r0, r6
 8018088:	f7fb ff00 	bl	8013e8c <_malloc_r>
 801808c:	b948      	cbnz	r0, 80180a2 <__smakebuf_r+0x46>
 801808e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018092:	059a      	lsls	r2, r3, #22
 8018094:	d4ee      	bmi.n	8018074 <__smakebuf_r+0x18>
 8018096:	f023 0303 	bic.w	r3, r3, #3
 801809a:	f043 0302 	orr.w	r3, r3, #2
 801809e:	81a3      	strh	r3, [r4, #12]
 80180a0:	e7e2      	b.n	8018068 <__smakebuf_r+0xc>
 80180a2:	89a3      	ldrh	r3, [r4, #12]
 80180a4:	6020      	str	r0, [r4, #0]
 80180a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80180aa:	81a3      	strh	r3, [r4, #12]
 80180ac:	9b01      	ldr	r3, [sp, #4]
 80180ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80180b2:	b15b      	cbz	r3, 80180cc <__smakebuf_r+0x70>
 80180b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180b8:	4630      	mov	r0, r6
 80180ba:	f000 f8bd 	bl	8018238 <_isatty_r>
 80180be:	b128      	cbz	r0, 80180cc <__smakebuf_r+0x70>
 80180c0:	89a3      	ldrh	r3, [r4, #12]
 80180c2:	f023 0303 	bic.w	r3, r3, #3
 80180c6:	f043 0301 	orr.w	r3, r3, #1
 80180ca:	81a3      	strh	r3, [r4, #12]
 80180cc:	89a3      	ldrh	r3, [r4, #12]
 80180ce:	431d      	orrs	r5, r3
 80180d0:	81a5      	strh	r5, [r4, #12]
 80180d2:	e7cf      	b.n	8018074 <__smakebuf_r+0x18>

080180d4 <__sccl>:
 80180d4:	b570      	push	{r4, r5, r6, lr}
 80180d6:	780b      	ldrb	r3, [r1, #0]
 80180d8:	4604      	mov	r4, r0
 80180da:	2b5e      	cmp	r3, #94	@ 0x5e
 80180dc:	bf0b      	itete	eq
 80180de:	784b      	ldrbeq	r3, [r1, #1]
 80180e0:	1c4a      	addne	r2, r1, #1
 80180e2:	1c8a      	addeq	r2, r1, #2
 80180e4:	2100      	movne	r1, #0
 80180e6:	bf08      	it	eq
 80180e8:	2101      	moveq	r1, #1
 80180ea:	3801      	subs	r0, #1
 80180ec:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80180f0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80180f4:	42a8      	cmp	r0, r5
 80180f6:	d1fb      	bne.n	80180f0 <__sccl+0x1c>
 80180f8:	b90b      	cbnz	r3, 80180fe <__sccl+0x2a>
 80180fa:	1e50      	subs	r0, r2, #1
 80180fc:	bd70      	pop	{r4, r5, r6, pc}
 80180fe:	f081 0101 	eor.w	r1, r1, #1
 8018102:	54e1      	strb	r1, [r4, r3]
 8018104:	4610      	mov	r0, r2
 8018106:	4602      	mov	r2, r0
 8018108:	f812 5b01 	ldrb.w	r5, [r2], #1
 801810c:	2d2d      	cmp	r5, #45	@ 0x2d
 801810e:	d005      	beq.n	801811c <__sccl+0x48>
 8018110:	2d5d      	cmp	r5, #93	@ 0x5d
 8018112:	d016      	beq.n	8018142 <__sccl+0x6e>
 8018114:	2d00      	cmp	r5, #0
 8018116:	d0f1      	beq.n	80180fc <__sccl+0x28>
 8018118:	462b      	mov	r3, r5
 801811a:	e7f2      	b.n	8018102 <__sccl+0x2e>
 801811c:	7846      	ldrb	r6, [r0, #1]
 801811e:	2e5d      	cmp	r6, #93	@ 0x5d
 8018120:	d0fa      	beq.n	8018118 <__sccl+0x44>
 8018122:	42b3      	cmp	r3, r6
 8018124:	dcf8      	bgt.n	8018118 <__sccl+0x44>
 8018126:	3002      	adds	r0, #2
 8018128:	461a      	mov	r2, r3
 801812a:	3201      	adds	r2, #1
 801812c:	4296      	cmp	r6, r2
 801812e:	54a1      	strb	r1, [r4, r2]
 8018130:	dcfb      	bgt.n	801812a <__sccl+0x56>
 8018132:	1af2      	subs	r2, r6, r3
 8018134:	3a01      	subs	r2, #1
 8018136:	1c5d      	adds	r5, r3, #1
 8018138:	42b3      	cmp	r3, r6
 801813a:	bfa8      	it	ge
 801813c:	2200      	movge	r2, #0
 801813e:	18ab      	adds	r3, r5, r2
 8018140:	e7e1      	b.n	8018106 <__sccl+0x32>
 8018142:	4610      	mov	r0, r2
 8018144:	e7da      	b.n	80180fc <__sccl+0x28>

08018146 <__submore>:
 8018146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801814a:	460c      	mov	r4, r1
 801814c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801814e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018152:	4299      	cmp	r1, r3
 8018154:	d11d      	bne.n	8018192 <__submore+0x4c>
 8018156:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801815a:	f7fb fe97 	bl	8013e8c <_malloc_r>
 801815e:	b918      	cbnz	r0, 8018168 <__submore+0x22>
 8018160:	f04f 30ff 	mov.w	r0, #4294967295
 8018164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801816c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801816e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8018172:	6360      	str	r0, [r4, #52]	@ 0x34
 8018174:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8018178:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801817c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8018180:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018184:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018188:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801818c:	6020      	str	r0, [r4, #0]
 801818e:	2000      	movs	r0, #0
 8018190:	e7e8      	b.n	8018164 <__submore+0x1e>
 8018192:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8018194:	0077      	lsls	r7, r6, #1
 8018196:	463a      	mov	r2, r7
 8018198:	f000 fbf3 	bl	8018982 <_realloc_r>
 801819c:	4605      	mov	r5, r0
 801819e:	2800      	cmp	r0, #0
 80181a0:	d0de      	beq.n	8018160 <__submore+0x1a>
 80181a2:	eb00 0806 	add.w	r8, r0, r6
 80181a6:	4601      	mov	r1, r0
 80181a8:	4632      	mov	r2, r6
 80181aa:	4640      	mov	r0, r8
 80181ac:	f000 f854 	bl	8018258 <memcpy>
 80181b0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80181b4:	f8c4 8000 	str.w	r8, [r4]
 80181b8:	e7e9      	b.n	801818e <__submore+0x48>

080181ba <memmove>:
 80181ba:	4288      	cmp	r0, r1
 80181bc:	b510      	push	{r4, lr}
 80181be:	eb01 0402 	add.w	r4, r1, r2
 80181c2:	d902      	bls.n	80181ca <memmove+0x10>
 80181c4:	4284      	cmp	r4, r0
 80181c6:	4623      	mov	r3, r4
 80181c8:	d807      	bhi.n	80181da <memmove+0x20>
 80181ca:	1e43      	subs	r3, r0, #1
 80181cc:	42a1      	cmp	r1, r4
 80181ce:	d008      	beq.n	80181e2 <memmove+0x28>
 80181d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80181d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80181d8:	e7f8      	b.n	80181cc <memmove+0x12>
 80181da:	4402      	add	r2, r0
 80181dc:	4601      	mov	r1, r0
 80181de:	428a      	cmp	r2, r1
 80181e0:	d100      	bne.n	80181e4 <memmove+0x2a>
 80181e2:	bd10      	pop	{r4, pc}
 80181e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80181e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80181ec:	e7f7      	b.n	80181de <memmove+0x24>

080181ee <strncmp>:
 80181ee:	b510      	push	{r4, lr}
 80181f0:	b16a      	cbz	r2, 801820e <strncmp+0x20>
 80181f2:	3901      	subs	r1, #1
 80181f4:	1884      	adds	r4, r0, r2
 80181f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80181fe:	429a      	cmp	r2, r3
 8018200:	d103      	bne.n	801820a <strncmp+0x1c>
 8018202:	42a0      	cmp	r0, r4
 8018204:	d001      	beq.n	801820a <strncmp+0x1c>
 8018206:	2a00      	cmp	r2, #0
 8018208:	d1f5      	bne.n	80181f6 <strncmp+0x8>
 801820a:	1ad0      	subs	r0, r2, r3
 801820c:	bd10      	pop	{r4, pc}
 801820e:	4610      	mov	r0, r2
 8018210:	e7fc      	b.n	801820c <strncmp+0x1e>
	...

08018214 <_fstat_r>:
 8018214:	b538      	push	{r3, r4, r5, lr}
 8018216:	4d07      	ldr	r5, [pc, #28]	@ (8018234 <_fstat_r+0x20>)
 8018218:	2300      	movs	r3, #0
 801821a:	4604      	mov	r4, r0
 801821c:	4608      	mov	r0, r1
 801821e:	4611      	mov	r1, r2
 8018220:	602b      	str	r3, [r5, #0]
 8018222:	f7f5 fd75 	bl	800dd10 <_fstat>
 8018226:	1c43      	adds	r3, r0, #1
 8018228:	d102      	bne.n	8018230 <_fstat_r+0x1c>
 801822a:	682b      	ldr	r3, [r5, #0]
 801822c:	b103      	cbz	r3, 8018230 <_fstat_r+0x1c>
 801822e:	6023      	str	r3, [r4, #0]
 8018230:	bd38      	pop	{r3, r4, r5, pc}
 8018232:	bf00      	nop
 8018234:	20000a38 	.word	0x20000a38

08018238 <_isatty_r>:
 8018238:	b538      	push	{r3, r4, r5, lr}
 801823a:	4d06      	ldr	r5, [pc, #24]	@ (8018254 <_isatty_r+0x1c>)
 801823c:	2300      	movs	r3, #0
 801823e:	4604      	mov	r4, r0
 8018240:	4608      	mov	r0, r1
 8018242:	602b      	str	r3, [r5, #0]
 8018244:	f7f5 fd74 	bl	800dd30 <_isatty>
 8018248:	1c43      	adds	r3, r0, #1
 801824a:	d102      	bne.n	8018252 <_isatty_r+0x1a>
 801824c:	682b      	ldr	r3, [r5, #0]
 801824e:	b103      	cbz	r3, 8018252 <_isatty_r+0x1a>
 8018250:	6023      	str	r3, [r4, #0]
 8018252:	bd38      	pop	{r3, r4, r5, pc}
 8018254:	20000a38 	.word	0x20000a38

08018258 <memcpy>:
 8018258:	440a      	add	r2, r1
 801825a:	4291      	cmp	r1, r2
 801825c:	f100 33ff 	add.w	r3, r0, #4294967295
 8018260:	d100      	bne.n	8018264 <memcpy+0xc>
 8018262:	4770      	bx	lr
 8018264:	b510      	push	{r4, lr}
 8018266:	f811 4b01 	ldrb.w	r4, [r1], #1
 801826a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801826e:	4291      	cmp	r1, r2
 8018270:	d1f9      	bne.n	8018266 <memcpy+0xe>
 8018272:	bd10      	pop	{r4, pc}
 8018274:	0000      	movs	r0, r0
	...

08018278 <nan>:
 8018278:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018280 <nan+0x8>
 801827c:	4770      	bx	lr
 801827e:	bf00      	nop
 8018280:	00000000 	.word	0x00000000
 8018284:	7ff80000 	.word	0x7ff80000

08018288 <__assert_func>:
 8018288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801828a:	4614      	mov	r4, r2
 801828c:	461a      	mov	r2, r3
 801828e:	4b09      	ldr	r3, [pc, #36]	@ (80182b4 <__assert_func+0x2c>)
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	4605      	mov	r5, r0
 8018294:	68d8      	ldr	r0, [r3, #12]
 8018296:	b14c      	cbz	r4, 80182ac <__assert_func+0x24>
 8018298:	4b07      	ldr	r3, [pc, #28]	@ (80182b8 <__assert_func+0x30>)
 801829a:	9100      	str	r1, [sp, #0]
 801829c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80182a0:	4906      	ldr	r1, [pc, #24]	@ (80182bc <__assert_func+0x34>)
 80182a2:	462b      	mov	r3, r5
 80182a4:	f000 fc1a 	bl	8018adc <fiprintf>
 80182a8:	f000 fc2a 	bl	8018b00 <abort>
 80182ac:	4b04      	ldr	r3, [pc, #16]	@ (80182c0 <__assert_func+0x38>)
 80182ae:	461c      	mov	r4, r3
 80182b0:	e7f3      	b.n	801829a <__assert_func+0x12>
 80182b2:	bf00      	nop
 80182b4:	20000304 	.word	0x20000304
 80182b8:	0801927f 	.word	0x0801927f
 80182bc:	0801928c 	.word	0x0801928c
 80182c0:	080192ba 	.word	0x080192ba

080182c4 <_calloc_r>:
 80182c4:	b570      	push	{r4, r5, r6, lr}
 80182c6:	fba1 5402 	umull	r5, r4, r1, r2
 80182ca:	b934      	cbnz	r4, 80182da <_calloc_r+0x16>
 80182cc:	4629      	mov	r1, r5
 80182ce:	f7fb fddd 	bl	8013e8c <_malloc_r>
 80182d2:	4606      	mov	r6, r0
 80182d4:	b928      	cbnz	r0, 80182e2 <_calloc_r+0x1e>
 80182d6:	4630      	mov	r0, r6
 80182d8:	bd70      	pop	{r4, r5, r6, pc}
 80182da:	220c      	movs	r2, #12
 80182dc:	6002      	str	r2, [r0, #0]
 80182de:	2600      	movs	r6, #0
 80182e0:	e7f9      	b.n	80182d6 <_calloc_r+0x12>
 80182e2:	462a      	mov	r2, r5
 80182e4:	4621      	mov	r1, r4
 80182e6:	f7fc fee1 	bl	80150ac <memset>
 80182ea:	e7f4      	b.n	80182d6 <_calloc_r+0x12>

080182ec <rshift>:
 80182ec:	6903      	ldr	r3, [r0, #16]
 80182ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80182f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80182fa:	f100 0414 	add.w	r4, r0, #20
 80182fe:	dd45      	ble.n	801838c <rshift+0xa0>
 8018300:	f011 011f 	ands.w	r1, r1, #31
 8018304:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018308:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801830c:	d10c      	bne.n	8018328 <rshift+0x3c>
 801830e:	f100 0710 	add.w	r7, r0, #16
 8018312:	4629      	mov	r1, r5
 8018314:	42b1      	cmp	r1, r6
 8018316:	d334      	bcc.n	8018382 <rshift+0x96>
 8018318:	1a9b      	subs	r3, r3, r2
 801831a:	009b      	lsls	r3, r3, #2
 801831c:	1eea      	subs	r2, r5, #3
 801831e:	4296      	cmp	r6, r2
 8018320:	bf38      	it	cc
 8018322:	2300      	movcc	r3, #0
 8018324:	4423      	add	r3, r4
 8018326:	e015      	b.n	8018354 <rshift+0x68>
 8018328:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801832c:	f1c1 0820 	rsb	r8, r1, #32
 8018330:	40cf      	lsrs	r7, r1
 8018332:	f105 0e04 	add.w	lr, r5, #4
 8018336:	46a1      	mov	r9, r4
 8018338:	4576      	cmp	r6, lr
 801833a:	46f4      	mov	ip, lr
 801833c:	d815      	bhi.n	801836a <rshift+0x7e>
 801833e:	1a9a      	subs	r2, r3, r2
 8018340:	0092      	lsls	r2, r2, #2
 8018342:	3a04      	subs	r2, #4
 8018344:	3501      	adds	r5, #1
 8018346:	42ae      	cmp	r6, r5
 8018348:	bf38      	it	cc
 801834a:	2200      	movcc	r2, #0
 801834c:	18a3      	adds	r3, r4, r2
 801834e:	50a7      	str	r7, [r4, r2]
 8018350:	b107      	cbz	r7, 8018354 <rshift+0x68>
 8018352:	3304      	adds	r3, #4
 8018354:	1b1a      	subs	r2, r3, r4
 8018356:	42a3      	cmp	r3, r4
 8018358:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801835c:	bf08      	it	eq
 801835e:	2300      	moveq	r3, #0
 8018360:	6102      	str	r2, [r0, #16]
 8018362:	bf08      	it	eq
 8018364:	6143      	streq	r3, [r0, #20]
 8018366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801836a:	f8dc c000 	ldr.w	ip, [ip]
 801836e:	fa0c fc08 	lsl.w	ip, ip, r8
 8018372:	ea4c 0707 	orr.w	r7, ip, r7
 8018376:	f849 7b04 	str.w	r7, [r9], #4
 801837a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801837e:	40cf      	lsrs	r7, r1
 8018380:	e7da      	b.n	8018338 <rshift+0x4c>
 8018382:	f851 cb04 	ldr.w	ip, [r1], #4
 8018386:	f847 cf04 	str.w	ip, [r7, #4]!
 801838a:	e7c3      	b.n	8018314 <rshift+0x28>
 801838c:	4623      	mov	r3, r4
 801838e:	e7e1      	b.n	8018354 <rshift+0x68>

08018390 <__hexdig_fun>:
 8018390:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018394:	2b09      	cmp	r3, #9
 8018396:	d802      	bhi.n	801839e <__hexdig_fun+0xe>
 8018398:	3820      	subs	r0, #32
 801839a:	b2c0      	uxtb	r0, r0
 801839c:	4770      	bx	lr
 801839e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80183a2:	2b05      	cmp	r3, #5
 80183a4:	d801      	bhi.n	80183aa <__hexdig_fun+0x1a>
 80183a6:	3847      	subs	r0, #71	@ 0x47
 80183a8:	e7f7      	b.n	801839a <__hexdig_fun+0xa>
 80183aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80183ae:	2b05      	cmp	r3, #5
 80183b0:	d801      	bhi.n	80183b6 <__hexdig_fun+0x26>
 80183b2:	3827      	subs	r0, #39	@ 0x27
 80183b4:	e7f1      	b.n	801839a <__hexdig_fun+0xa>
 80183b6:	2000      	movs	r0, #0
 80183b8:	4770      	bx	lr
	...

080183bc <__gethex>:
 80183bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183c0:	b085      	sub	sp, #20
 80183c2:	468a      	mov	sl, r1
 80183c4:	9302      	str	r3, [sp, #8]
 80183c6:	680b      	ldr	r3, [r1, #0]
 80183c8:	9001      	str	r0, [sp, #4]
 80183ca:	4690      	mov	r8, r2
 80183cc:	1c9c      	adds	r4, r3, #2
 80183ce:	46a1      	mov	r9, r4
 80183d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80183d4:	2830      	cmp	r0, #48	@ 0x30
 80183d6:	d0fa      	beq.n	80183ce <__gethex+0x12>
 80183d8:	eba9 0303 	sub.w	r3, r9, r3
 80183dc:	f1a3 0b02 	sub.w	fp, r3, #2
 80183e0:	f7ff ffd6 	bl	8018390 <__hexdig_fun>
 80183e4:	4605      	mov	r5, r0
 80183e6:	2800      	cmp	r0, #0
 80183e8:	d168      	bne.n	80184bc <__gethex+0x100>
 80183ea:	49a0      	ldr	r1, [pc, #640]	@ (801866c <__gethex+0x2b0>)
 80183ec:	2201      	movs	r2, #1
 80183ee:	4648      	mov	r0, r9
 80183f0:	f7ff fefd 	bl	80181ee <strncmp>
 80183f4:	4607      	mov	r7, r0
 80183f6:	2800      	cmp	r0, #0
 80183f8:	d167      	bne.n	80184ca <__gethex+0x10e>
 80183fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80183fe:	4626      	mov	r6, r4
 8018400:	f7ff ffc6 	bl	8018390 <__hexdig_fun>
 8018404:	2800      	cmp	r0, #0
 8018406:	d062      	beq.n	80184ce <__gethex+0x112>
 8018408:	4623      	mov	r3, r4
 801840a:	7818      	ldrb	r0, [r3, #0]
 801840c:	2830      	cmp	r0, #48	@ 0x30
 801840e:	4699      	mov	r9, r3
 8018410:	f103 0301 	add.w	r3, r3, #1
 8018414:	d0f9      	beq.n	801840a <__gethex+0x4e>
 8018416:	f7ff ffbb 	bl	8018390 <__hexdig_fun>
 801841a:	fab0 f580 	clz	r5, r0
 801841e:	096d      	lsrs	r5, r5, #5
 8018420:	f04f 0b01 	mov.w	fp, #1
 8018424:	464a      	mov	r2, r9
 8018426:	4616      	mov	r6, r2
 8018428:	3201      	adds	r2, #1
 801842a:	7830      	ldrb	r0, [r6, #0]
 801842c:	f7ff ffb0 	bl	8018390 <__hexdig_fun>
 8018430:	2800      	cmp	r0, #0
 8018432:	d1f8      	bne.n	8018426 <__gethex+0x6a>
 8018434:	498d      	ldr	r1, [pc, #564]	@ (801866c <__gethex+0x2b0>)
 8018436:	2201      	movs	r2, #1
 8018438:	4630      	mov	r0, r6
 801843a:	f7ff fed8 	bl	80181ee <strncmp>
 801843e:	2800      	cmp	r0, #0
 8018440:	d13f      	bne.n	80184c2 <__gethex+0x106>
 8018442:	b944      	cbnz	r4, 8018456 <__gethex+0x9a>
 8018444:	1c74      	adds	r4, r6, #1
 8018446:	4622      	mov	r2, r4
 8018448:	4616      	mov	r6, r2
 801844a:	3201      	adds	r2, #1
 801844c:	7830      	ldrb	r0, [r6, #0]
 801844e:	f7ff ff9f 	bl	8018390 <__hexdig_fun>
 8018452:	2800      	cmp	r0, #0
 8018454:	d1f8      	bne.n	8018448 <__gethex+0x8c>
 8018456:	1ba4      	subs	r4, r4, r6
 8018458:	00a7      	lsls	r7, r4, #2
 801845a:	7833      	ldrb	r3, [r6, #0]
 801845c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8018460:	2b50      	cmp	r3, #80	@ 0x50
 8018462:	d13e      	bne.n	80184e2 <__gethex+0x126>
 8018464:	7873      	ldrb	r3, [r6, #1]
 8018466:	2b2b      	cmp	r3, #43	@ 0x2b
 8018468:	d033      	beq.n	80184d2 <__gethex+0x116>
 801846a:	2b2d      	cmp	r3, #45	@ 0x2d
 801846c:	d034      	beq.n	80184d8 <__gethex+0x11c>
 801846e:	1c71      	adds	r1, r6, #1
 8018470:	2400      	movs	r4, #0
 8018472:	7808      	ldrb	r0, [r1, #0]
 8018474:	f7ff ff8c 	bl	8018390 <__hexdig_fun>
 8018478:	1e43      	subs	r3, r0, #1
 801847a:	b2db      	uxtb	r3, r3
 801847c:	2b18      	cmp	r3, #24
 801847e:	d830      	bhi.n	80184e2 <__gethex+0x126>
 8018480:	f1a0 0210 	sub.w	r2, r0, #16
 8018484:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018488:	f7ff ff82 	bl	8018390 <__hexdig_fun>
 801848c:	f100 3cff 	add.w	ip, r0, #4294967295
 8018490:	fa5f fc8c 	uxtb.w	ip, ip
 8018494:	f1bc 0f18 	cmp.w	ip, #24
 8018498:	f04f 030a 	mov.w	r3, #10
 801849c:	d91e      	bls.n	80184dc <__gethex+0x120>
 801849e:	b104      	cbz	r4, 80184a2 <__gethex+0xe6>
 80184a0:	4252      	negs	r2, r2
 80184a2:	4417      	add	r7, r2
 80184a4:	f8ca 1000 	str.w	r1, [sl]
 80184a8:	b1ed      	cbz	r5, 80184e6 <__gethex+0x12a>
 80184aa:	f1bb 0f00 	cmp.w	fp, #0
 80184ae:	bf0c      	ite	eq
 80184b0:	2506      	moveq	r5, #6
 80184b2:	2500      	movne	r5, #0
 80184b4:	4628      	mov	r0, r5
 80184b6:	b005      	add	sp, #20
 80184b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184bc:	2500      	movs	r5, #0
 80184be:	462c      	mov	r4, r5
 80184c0:	e7b0      	b.n	8018424 <__gethex+0x68>
 80184c2:	2c00      	cmp	r4, #0
 80184c4:	d1c7      	bne.n	8018456 <__gethex+0x9a>
 80184c6:	4627      	mov	r7, r4
 80184c8:	e7c7      	b.n	801845a <__gethex+0x9e>
 80184ca:	464e      	mov	r6, r9
 80184cc:	462f      	mov	r7, r5
 80184ce:	2501      	movs	r5, #1
 80184d0:	e7c3      	b.n	801845a <__gethex+0x9e>
 80184d2:	2400      	movs	r4, #0
 80184d4:	1cb1      	adds	r1, r6, #2
 80184d6:	e7cc      	b.n	8018472 <__gethex+0xb6>
 80184d8:	2401      	movs	r4, #1
 80184da:	e7fb      	b.n	80184d4 <__gethex+0x118>
 80184dc:	fb03 0002 	mla	r0, r3, r2, r0
 80184e0:	e7ce      	b.n	8018480 <__gethex+0xc4>
 80184e2:	4631      	mov	r1, r6
 80184e4:	e7de      	b.n	80184a4 <__gethex+0xe8>
 80184e6:	eba6 0309 	sub.w	r3, r6, r9
 80184ea:	3b01      	subs	r3, #1
 80184ec:	4629      	mov	r1, r5
 80184ee:	2b07      	cmp	r3, #7
 80184f0:	dc0a      	bgt.n	8018508 <__gethex+0x14c>
 80184f2:	9801      	ldr	r0, [sp, #4]
 80184f4:	f7fd fd3a 	bl	8015f6c <_Balloc>
 80184f8:	4604      	mov	r4, r0
 80184fa:	b940      	cbnz	r0, 801850e <__gethex+0x152>
 80184fc:	4b5c      	ldr	r3, [pc, #368]	@ (8018670 <__gethex+0x2b4>)
 80184fe:	4602      	mov	r2, r0
 8018500:	21e4      	movs	r1, #228	@ 0xe4
 8018502:	485c      	ldr	r0, [pc, #368]	@ (8018674 <__gethex+0x2b8>)
 8018504:	f7ff fec0 	bl	8018288 <__assert_func>
 8018508:	3101      	adds	r1, #1
 801850a:	105b      	asrs	r3, r3, #1
 801850c:	e7ef      	b.n	80184ee <__gethex+0x132>
 801850e:	f100 0a14 	add.w	sl, r0, #20
 8018512:	2300      	movs	r3, #0
 8018514:	4655      	mov	r5, sl
 8018516:	469b      	mov	fp, r3
 8018518:	45b1      	cmp	r9, r6
 801851a:	d337      	bcc.n	801858c <__gethex+0x1d0>
 801851c:	f845 bb04 	str.w	fp, [r5], #4
 8018520:	eba5 050a 	sub.w	r5, r5, sl
 8018524:	10ad      	asrs	r5, r5, #2
 8018526:	6125      	str	r5, [r4, #16]
 8018528:	4658      	mov	r0, fp
 801852a:	f7fd fe11 	bl	8016150 <__hi0bits>
 801852e:	016d      	lsls	r5, r5, #5
 8018530:	f8d8 6000 	ldr.w	r6, [r8]
 8018534:	1a2d      	subs	r5, r5, r0
 8018536:	42b5      	cmp	r5, r6
 8018538:	dd54      	ble.n	80185e4 <__gethex+0x228>
 801853a:	1bad      	subs	r5, r5, r6
 801853c:	4629      	mov	r1, r5
 801853e:	4620      	mov	r0, r4
 8018540:	f7fe f99d 	bl	801687e <__any_on>
 8018544:	4681      	mov	r9, r0
 8018546:	b178      	cbz	r0, 8018568 <__gethex+0x1ac>
 8018548:	1e6b      	subs	r3, r5, #1
 801854a:	1159      	asrs	r1, r3, #5
 801854c:	f003 021f 	and.w	r2, r3, #31
 8018550:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018554:	f04f 0901 	mov.w	r9, #1
 8018558:	fa09 f202 	lsl.w	r2, r9, r2
 801855c:	420a      	tst	r2, r1
 801855e:	d003      	beq.n	8018568 <__gethex+0x1ac>
 8018560:	454b      	cmp	r3, r9
 8018562:	dc36      	bgt.n	80185d2 <__gethex+0x216>
 8018564:	f04f 0902 	mov.w	r9, #2
 8018568:	4629      	mov	r1, r5
 801856a:	4620      	mov	r0, r4
 801856c:	f7ff febe 	bl	80182ec <rshift>
 8018570:	442f      	add	r7, r5
 8018572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018576:	42bb      	cmp	r3, r7
 8018578:	da42      	bge.n	8018600 <__gethex+0x244>
 801857a:	9801      	ldr	r0, [sp, #4]
 801857c:	4621      	mov	r1, r4
 801857e:	f7fd fd35 	bl	8015fec <_Bfree>
 8018582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018584:	2300      	movs	r3, #0
 8018586:	6013      	str	r3, [r2, #0]
 8018588:	25a3      	movs	r5, #163	@ 0xa3
 801858a:	e793      	b.n	80184b4 <__gethex+0xf8>
 801858c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018590:	2a2e      	cmp	r2, #46	@ 0x2e
 8018592:	d012      	beq.n	80185ba <__gethex+0x1fe>
 8018594:	2b20      	cmp	r3, #32
 8018596:	d104      	bne.n	80185a2 <__gethex+0x1e6>
 8018598:	f845 bb04 	str.w	fp, [r5], #4
 801859c:	f04f 0b00 	mov.w	fp, #0
 80185a0:	465b      	mov	r3, fp
 80185a2:	7830      	ldrb	r0, [r6, #0]
 80185a4:	9303      	str	r3, [sp, #12]
 80185a6:	f7ff fef3 	bl	8018390 <__hexdig_fun>
 80185aa:	9b03      	ldr	r3, [sp, #12]
 80185ac:	f000 000f 	and.w	r0, r0, #15
 80185b0:	4098      	lsls	r0, r3
 80185b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80185b6:	3304      	adds	r3, #4
 80185b8:	e7ae      	b.n	8018518 <__gethex+0x15c>
 80185ba:	45b1      	cmp	r9, r6
 80185bc:	d8ea      	bhi.n	8018594 <__gethex+0x1d8>
 80185be:	492b      	ldr	r1, [pc, #172]	@ (801866c <__gethex+0x2b0>)
 80185c0:	9303      	str	r3, [sp, #12]
 80185c2:	2201      	movs	r2, #1
 80185c4:	4630      	mov	r0, r6
 80185c6:	f7ff fe12 	bl	80181ee <strncmp>
 80185ca:	9b03      	ldr	r3, [sp, #12]
 80185cc:	2800      	cmp	r0, #0
 80185ce:	d1e1      	bne.n	8018594 <__gethex+0x1d8>
 80185d0:	e7a2      	b.n	8018518 <__gethex+0x15c>
 80185d2:	1ea9      	subs	r1, r5, #2
 80185d4:	4620      	mov	r0, r4
 80185d6:	f7fe f952 	bl	801687e <__any_on>
 80185da:	2800      	cmp	r0, #0
 80185dc:	d0c2      	beq.n	8018564 <__gethex+0x1a8>
 80185de:	f04f 0903 	mov.w	r9, #3
 80185e2:	e7c1      	b.n	8018568 <__gethex+0x1ac>
 80185e4:	da09      	bge.n	80185fa <__gethex+0x23e>
 80185e6:	1b75      	subs	r5, r6, r5
 80185e8:	4621      	mov	r1, r4
 80185ea:	9801      	ldr	r0, [sp, #4]
 80185ec:	462a      	mov	r2, r5
 80185ee:	f7fd ff0d 	bl	801640c <__lshift>
 80185f2:	1b7f      	subs	r7, r7, r5
 80185f4:	4604      	mov	r4, r0
 80185f6:	f100 0a14 	add.w	sl, r0, #20
 80185fa:	f04f 0900 	mov.w	r9, #0
 80185fe:	e7b8      	b.n	8018572 <__gethex+0x1b6>
 8018600:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018604:	42bd      	cmp	r5, r7
 8018606:	dd6f      	ble.n	80186e8 <__gethex+0x32c>
 8018608:	1bed      	subs	r5, r5, r7
 801860a:	42ae      	cmp	r6, r5
 801860c:	dc34      	bgt.n	8018678 <__gethex+0x2bc>
 801860e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018612:	2b02      	cmp	r3, #2
 8018614:	d022      	beq.n	801865c <__gethex+0x2a0>
 8018616:	2b03      	cmp	r3, #3
 8018618:	d024      	beq.n	8018664 <__gethex+0x2a8>
 801861a:	2b01      	cmp	r3, #1
 801861c:	d115      	bne.n	801864a <__gethex+0x28e>
 801861e:	42ae      	cmp	r6, r5
 8018620:	d113      	bne.n	801864a <__gethex+0x28e>
 8018622:	2e01      	cmp	r6, #1
 8018624:	d10b      	bne.n	801863e <__gethex+0x282>
 8018626:	9a02      	ldr	r2, [sp, #8]
 8018628:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801862c:	6013      	str	r3, [r2, #0]
 801862e:	2301      	movs	r3, #1
 8018630:	6123      	str	r3, [r4, #16]
 8018632:	f8ca 3000 	str.w	r3, [sl]
 8018636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018638:	2562      	movs	r5, #98	@ 0x62
 801863a:	601c      	str	r4, [r3, #0]
 801863c:	e73a      	b.n	80184b4 <__gethex+0xf8>
 801863e:	1e71      	subs	r1, r6, #1
 8018640:	4620      	mov	r0, r4
 8018642:	f7fe f91c 	bl	801687e <__any_on>
 8018646:	2800      	cmp	r0, #0
 8018648:	d1ed      	bne.n	8018626 <__gethex+0x26a>
 801864a:	9801      	ldr	r0, [sp, #4]
 801864c:	4621      	mov	r1, r4
 801864e:	f7fd fccd 	bl	8015fec <_Bfree>
 8018652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018654:	2300      	movs	r3, #0
 8018656:	6013      	str	r3, [r2, #0]
 8018658:	2550      	movs	r5, #80	@ 0x50
 801865a:	e72b      	b.n	80184b4 <__gethex+0xf8>
 801865c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801865e:	2b00      	cmp	r3, #0
 8018660:	d1f3      	bne.n	801864a <__gethex+0x28e>
 8018662:	e7e0      	b.n	8018626 <__gethex+0x26a>
 8018664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018666:	2b00      	cmp	r3, #0
 8018668:	d1dd      	bne.n	8018626 <__gethex+0x26a>
 801866a:	e7ee      	b.n	801864a <__gethex+0x28e>
 801866c:	08019249 	.word	0x08019249
 8018670:	080191df 	.word	0x080191df
 8018674:	080192bb 	.word	0x080192bb
 8018678:	1e6f      	subs	r7, r5, #1
 801867a:	f1b9 0f00 	cmp.w	r9, #0
 801867e:	d130      	bne.n	80186e2 <__gethex+0x326>
 8018680:	b127      	cbz	r7, 801868c <__gethex+0x2d0>
 8018682:	4639      	mov	r1, r7
 8018684:	4620      	mov	r0, r4
 8018686:	f7fe f8fa 	bl	801687e <__any_on>
 801868a:	4681      	mov	r9, r0
 801868c:	117a      	asrs	r2, r7, #5
 801868e:	2301      	movs	r3, #1
 8018690:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018694:	f007 071f 	and.w	r7, r7, #31
 8018698:	40bb      	lsls	r3, r7
 801869a:	4213      	tst	r3, r2
 801869c:	4629      	mov	r1, r5
 801869e:	4620      	mov	r0, r4
 80186a0:	bf18      	it	ne
 80186a2:	f049 0902 	orrne.w	r9, r9, #2
 80186a6:	f7ff fe21 	bl	80182ec <rshift>
 80186aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80186ae:	1b76      	subs	r6, r6, r5
 80186b0:	2502      	movs	r5, #2
 80186b2:	f1b9 0f00 	cmp.w	r9, #0
 80186b6:	d047      	beq.n	8018748 <__gethex+0x38c>
 80186b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80186bc:	2b02      	cmp	r3, #2
 80186be:	d015      	beq.n	80186ec <__gethex+0x330>
 80186c0:	2b03      	cmp	r3, #3
 80186c2:	d017      	beq.n	80186f4 <__gethex+0x338>
 80186c4:	2b01      	cmp	r3, #1
 80186c6:	d109      	bne.n	80186dc <__gethex+0x320>
 80186c8:	f019 0f02 	tst.w	r9, #2
 80186cc:	d006      	beq.n	80186dc <__gethex+0x320>
 80186ce:	f8da 3000 	ldr.w	r3, [sl]
 80186d2:	ea49 0903 	orr.w	r9, r9, r3
 80186d6:	f019 0f01 	tst.w	r9, #1
 80186da:	d10e      	bne.n	80186fa <__gethex+0x33e>
 80186dc:	f045 0510 	orr.w	r5, r5, #16
 80186e0:	e032      	b.n	8018748 <__gethex+0x38c>
 80186e2:	f04f 0901 	mov.w	r9, #1
 80186e6:	e7d1      	b.n	801868c <__gethex+0x2d0>
 80186e8:	2501      	movs	r5, #1
 80186ea:	e7e2      	b.n	80186b2 <__gethex+0x2f6>
 80186ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80186ee:	f1c3 0301 	rsb	r3, r3, #1
 80186f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80186f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d0f0      	beq.n	80186dc <__gethex+0x320>
 80186fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80186fe:	f104 0314 	add.w	r3, r4, #20
 8018702:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018706:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801870a:	f04f 0c00 	mov.w	ip, #0
 801870e:	4618      	mov	r0, r3
 8018710:	f853 2b04 	ldr.w	r2, [r3], #4
 8018714:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018718:	d01b      	beq.n	8018752 <__gethex+0x396>
 801871a:	3201      	adds	r2, #1
 801871c:	6002      	str	r2, [r0, #0]
 801871e:	2d02      	cmp	r5, #2
 8018720:	f104 0314 	add.w	r3, r4, #20
 8018724:	d13c      	bne.n	80187a0 <__gethex+0x3e4>
 8018726:	f8d8 2000 	ldr.w	r2, [r8]
 801872a:	3a01      	subs	r2, #1
 801872c:	42b2      	cmp	r2, r6
 801872e:	d109      	bne.n	8018744 <__gethex+0x388>
 8018730:	1171      	asrs	r1, r6, #5
 8018732:	2201      	movs	r2, #1
 8018734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018738:	f006 061f 	and.w	r6, r6, #31
 801873c:	fa02 f606 	lsl.w	r6, r2, r6
 8018740:	421e      	tst	r6, r3
 8018742:	d13a      	bne.n	80187ba <__gethex+0x3fe>
 8018744:	f045 0520 	orr.w	r5, r5, #32
 8018748:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801874a:	601c      	str	r4, [r3, #0]
 801874c:	9b02      	ldr	r3, [sp, #8]
 801874e:	601f      	str	r7, [r3, #0]
 8018750:	e6b0      	b.n	80184b4 <__gethex+0xf8>
 8018752:	4299      	cmp	r1, r3
 8018754:	f843 cc04 	str.w	ip, [r3, #-4]
 8018758:	d8d9      	bhi.n	801870e <__gethex+0x352>
 801875a:	68a3      	ldr	r3, [r4, #8]
 801875c:	459b      	cmp	fp, r3
 801875e:	db17      	blt.n	8018790 <__gethex+0x3d4>
 8018760:	6861      	ldr	r1, [r4, #4]
 8018762:	9801      	ldr	r0, [sp, #4]
 8018764:	3101      	adds	r1, #1
 8018766:	f7fd fc01 	bl	8015f6c <_Balloc>
 801876a:	4681      	mov	r9, r0
 801876c:	b918      	cbnz	r0, 8018776 <__gethex+0x3ba>
 801876e:	4b1a      	ldr	r3, [pc, #104]	@ (80187d8 <__gethex+0x41c>)
 8018770:	4602      	mov	r2, r0
 8018772:	2184      	movs	r1, #132	@ 0x84
 8018774:	e6c5      	b.n	8018502 <__gethex+0x146>
 8018776:	6922      	ldr	r2, [r4, #16]
 8018778:	3202      	adds	r2, #2
 801877a:	f104 010c 	add.w	r1, r4, #12
 801877e:	0092      	lsls	r2, r2, #2
 8018780:	300c      	adds	r0, #12
 8018782:	f7ff fd69 	bl	8018258 <memcpy>
 8018786:	4621      	mov	r1, r4
 8018788:	9801      	ldr	r0, [sp, #4]
 801878a:	f7fd fc2f 	bl	8015fec <_Bfree>
 801878e:	464c      	mov	r4, r9
 8018790:	6923      	ldr	r3, [r4, #16]
 8018792:	1c5a      	adds	r2, r3, #1
 8018794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018798:	6122      	str	r2, [r4, #16]
 801879a:	2201      	movs	r2, #1
 801879c:	615a      	str	r2, [r3, #20]
 801879e:	e7be      	b.n	801871e <__gethex+0x362>
 80187a0:	6922      	ldr	r2, [r4, #16]
 80187a2:	455a      	cmp	r2, fp
 80187a4:	dd0b      	ble.n	80187be <__gethex+0x402>
 80187a6:	2101      	movs	r1, #1
 80187a8:	4620      	mov	r0, r4
 80187aa:	f7ff fd9f 	bl	80182ec <rshift>
 80187ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80187b2:	3701      	adds	r7, #1
 80187b4:	42bb      	cmp	r3, r7
 80187b6:	f6ff aee0 	blt.w	801857a <__gethex+0x1be>
 80187ba:	2501      	movs	r5, #1
 80187bc:	e7c2      	b.n	8018744 <__gethex+0x388>
 80187be:	f016 061f 	ands.w	r6, r6, #31
 80187c2:	d0fa      	beq.n	80187ba <__gethex+0x3fe>
 80187c4:	4453      	add	r3, sl
 80187c6:	f1c6 0620 	rsb	r6, r6, #32
 80187ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80187ce:	f7fd fcbf 	bl	8016150 <__hi0bits>
 80187d2:	42b0      	cmp	r0, r6
 80187d4:	dbe7      	blt.n	80187a6 <__gethex+0x3ea>
 80187d6:	e7f0      	b.n	80187ba <__gethex+0x3fe>
 80187d8:	080191df 	.word	0x080191df

080187dc <L_shift>:
 80187dc:	f1c2 0208 	rsb	r2, r2, #8
 80187e0:	0092      	lsls	r2, r2, #2
 80187e2:	b570      	push	{r4, r5, r6, lr}
 80187e4:	f1c2 0620 	rsb	r6, r2, #32
 80187e8:	6843      	ldr	r3, [r0, #4]
 80187ea:	6804      	ldr	r4, [r0, #0]
 80187ec:	fa03 f506 	lsl.w	r5, r3, r6
 80187f0:	432c      	orrs	r4, r5
 80187f2:	40d3      	lsrs	r3, r2
 80187f4:	6004      	str	r4, [r0, #0]
 80187f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80187fa:	4288      	cmp	r0, r1
 80187fc:	d3f4      	bcc.n	80187e8 <L_shift+0xc>
 80187fe:	bd70      	pop	{r4, r5, r6, pc}

08018800 <__match>:
 8018800:	b530      	push	{r4, r5, lr}
 8018802:	6803      	ldr	r3, [r0, #0]
 8018804:	3301      	adds	r3, #1
 8018806:	f811 4b01 	ldrb.w	r4, [r1], #1
 801880a:	b914      	cbnz	r4, 8018812 <__match+0x12>
 801880c:	6003      	str	r3, [r0, #0]
 801880e:	2001      	movs	r0, #1
 8018810:	bd30      	pop	{r4, r5, pc}
 8018812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018816:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801881a:	2d19      	cmp	r5, #25
 801881c:	bf98      	it	ls
 801881e:	3220      	addls	r2, #32
 8018820:	42a2      	cmp	r2, r4
 8018822:	d0f0      	beq.n	8018806 <__match+0x6>
 8018824:	2000      	movs	r0, #0
 8018826:	e7f3      	b.n	8018810 <__match+0x10>

08018828 <__hexnan>:
 8018828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801882c:	680b      	ldr	r3, [r1, #0]
 801882e:	6801      	ldr	r1, [r0, #0]
 8018830:	115e      	asrs	r6, r3, #5
 8018832:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018836:	f013 031f 	ands.w	r3, r3, #31
 801883a:	b087      	sub	sp, #28
 801883c:	bf18      	it	ne
 801883e:	3604      	addne	r6, #4
 8018840:	2500      	movs	r5, #0
 8018842:	1f37      	subs	r7, r6, #4
 8018844:	4682      	mov	sl, r0
 8018846:	4690      	mov	r8, r2
 8018848:	9301      	str	r3, [sp, #4]
 801884a:	f846 5c04 	str.w	r5, [r6, #-4]
 801884e:	46b9      	mov	r9, r7
 8018850:	463c      	mov	r4, r7
 8018852:	9502      	str	r5, [sp, #8]
 8018854:	46ab      	mov	fp, r5
 8018856:	784a      	ldrb	r2, [r1, #1]
 8018858:	1c4b      	adds	r3, r1, #1
 801885a:	9303      	str	r3, [sp, #12]
 801885c:	b342      	cbz	r2, 80188b0 <__hexnan+0x88>
 801885e:	4610      	mov	r0, r2
 8018860:	9105      	str	r1, [sp, #20]
 8018862:	9204      	str	r2, [sp, #16]
 8018864:	f7ff fd94 	bl	8018390 <__hexdig_fun>
 8018868:	2800      	cmp	r0, #0
 801886a:	d151      	bne.n	8018910 <__hexnan+0xe8>
 801886c:	9a04      	ldr	r2, [sp, #16]
 801886e:	9905      	ldr	r1, [sp, #20]
 8018870:	2a20      	cmp	r2, #32
 8018872:	d818      	bhi.n	80188a6 <__hexnan+0x7e>
 8018874:	9b02      	ldr	r3, [sp, #8]
 8018876:	459b      	cmp	fp, r3
 8018878:	dd13      	ble.n	80188a2 <__hexnan+0x7a>
 801887a:	454c      	cmp	r4, r9
 801887c:	d206      	bcs.n	801888c <__hexnan+0x64>
 801887e:	2d07      	cmp	r5, #7
 8018880:	dc04      	bgt.n	801888c <__hexnan+0x64>
 8018882:	462a      	mov	r2, r5
 8018884:	4649      	mov	r1, r9
 8018886:	4620      	mov	r0, r4
 8018888:	f7ff ffa8 	bl	80187dc <L_shift>
 801888c:	4544      	cmp	r4, r8
 801888e:	d952      	bls.n	8018936 <__hexnan+0x10e>
 8018890:	2300      	movs	r3, #0
 8018892:	f1a4 0904 	sub.w	r9, r4, #4
 8018896:	f844 3c04 	str.w	r3, [r4, #-4]
 801889a:	f8cd b008 	str.w	fp, [sp, #8]
 801889e:	464c      	mov	r4, r9
 80188a0:	461d      	mov	r5, r3
 80188a2:	9903      	ldr	r1, [sp, #12]
 80188a4:	e7d7      	b.n	8018856 <__hexnan+0x2e>
 80188a6:	2a29      	cmp	r2, #41	@ 0x29
 80188a8:	d157      	bne.n	801895a <__hexnan+0x132>
 80188aa:	3102      	adds	r1, #2
 80188ac:	f8ca 1000 	str.w	r1, [sl]
 80188b0:	f1bb 0f00 	cmp.w	fp, #0
 80188b4:	d051      	beq.n	801895a <__hexnan+0x132>
 80188b6:	454c      	cmp	r4, r9
 80188b8:	d206      	bcs.n	80188c8 <__hexnan+0xa0>
 80188ba:	2d07      	cmp	r5, #7
 80188bc:	dc04      	bgt.n	80188c8 <__hexnan+0xa0>
 80188be:	462a      	mov	r2, r5
 80188c0:	4649      	mov	r1, r9
 80188c2:	4620      	mov	r0, r4
 80188c4:	f7ff ff8a 	bl	80187dc <L_shift>
 80188c8:	4544      	cmp	r4, r8
 80188ca:	d936      	bls.n	801893a <__hexnan+0x112>
 80188cc:	f1a8 0204 	sub.w	r2, r8, #4
 80188d0:	4623      	mov	r3, r4
 80188d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80188d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80188da:	429f      	cmp	r7, r3
 80188dc:	d2f9      	bcs.n	80188d2 <__hexnan+0xaa>
 80188de:	1b3b      	subs	r3, r7, r4
 80188e0:	f023 0303 	bic.w	r3, r3, #3
 80188e4:	3304      	adds	r3, #4
 80188e6:	3401      	adds	r4, #1
 80188e8:	3e03      	subs	r6, #3
 80188ea:	42b4      	cmp	r4, r6
 80188ec:	bf88      	it	hi
 80188ee:	2304      	movhi	r3, #4
 80188f0:	4443      	add	r3, r8
 80188f2:	2200      	movs	r2, #0
 80188f4:	f843 2b04 	str.w	r2, [r3], #4
 80188f8:	429f      	cmp	r7, r3
 80188fa:	d2fb      	bcs.n	80188f4 <__hexnan+0xcc>
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	b91b      	cbnz	r3, 8018908 <__hexnan+0xe0>
 8018900:	4547      	cmp	r7, r8
 8018902:	d128      	bne.n	8018956 <__hexnan+0x12e>
 8018904:	2301      	movs	r3, #1
 8018906:	603b      	str	r3, [r7, #0]
 8018908:	2005      	movs	r0, #5
 801890a:	b007      	add	sp, #28
 801890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018910:	3501      	adds	r5, #1
 8018912:	2d08      	cmp	r5, #8
 8018914:	f10b 0b01 	add.w	fp, fp, #1
 8018918:	dd06      	ble.n	8018928 <__hexnan+0x100>
 801891a:	4544      	cmp	r4, r8
 801891c:	d9c1      	bls.n	80188a2 <__hexnan+0x7a>
 801891e:	2300      	movs	r3, #0
 8018920:	f844 3c04 	str.w	r3, [r4, #-4]
 8018924:	2501      	movs	r5, #1
 8018926:	3c04      	subs	r4, #4
 8018928:	6822      	ldr	r2, [r4, #0]
 801892a:	f000 000f 	and.w	r0, r0, #15
 801892e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018932:	6020      	str	r0, [r4, #0]
 8018934:	e7b5      	b.n	80188a2 <__hexnan+0x7a>
 8018936:	2508      	movs	r5, #8
 8018938:	e7b3      	b.n	80188a2 <__hexnan+0x7a>
 801893a:	9b01      	ldr	r3, [sp, #4]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d0dd      	beq.n	80188fc <__hexnan+0xd4>
 8018940:	f1c3 0320 	rsb	r3, r3, #32
 8018944:	f04f 32ff 	mov.w	r2, #4294967295
 8018948:	40da      	lsrs	r2, r3
 801894a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801894e:	4013      	ands	r3, r2
 8018950:	f846 3c04 	str.w	r3, [r6, #-4]
 8018954:	e7d2      	b.n	80188fc <__hexnan+0xd4>
 8018956:	3f04      	subs	r7, #4
 8018958:	e7d0      	b.n	80188fc <__hexnan+0xd4>
 801895a:	2004      	movs	r0, #4
 801895c:	e7d5      	b.n	801890a <__hexnan+0xe2>

0801895e <__ascii_mbtowc>:
 801895e:	b082      	sub	sp, #8
 8018960:	b901      	cbnz	r1, 8018964 <__ascii_mbtowc+0x6>
 8018962:	a901      	add	r1, sp, #4
 8018964:	b142      	cbz	r2, 8018978 <__ascii_mbtowc+0x1a>
 8018966:	b14b      	cbz	r3, 801897c <__ascii_mbtowc+0x1e>
 8018968:	7813      	ldrb	r3, [r2, #0]
 801896a:	600b      	str	r3, [r1, #0]
 801896c:	7812      	ldrb	r2, [r2, #0]
 801896e:	1e10      	subs	r0, r2, #0
 8018970:	bf18      	it	ne
 8018972:	2001      	movne	r0, #1
 8018974:	b002      	add	sp, #8
 8018976:	4770      	bx	lr
 8018978:	4610      	mov	r0, r2
 801897a:	e7fb      	b.n	8018974 <__ascii_mbtowc+0x16>
 801897c:	f06f 0001 	mvn.w	r0, #1
 8018980:	e7f8      	b.n	8018974 <__ascii_mbtowc+0x16>

08018982 <_realloc_r>:
 8018982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018986:	4607      	mov	r7, r0
 8018988:	4614      	mov	r4, r2
 801898a:	460d      	mov	r5, r1
 801898c:	b921      	cbnz	r1, 8018998 <_realloc_r+0x16>
 801898e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018992:	4611      	mov	r1, r2
 8018994:	f7fb ba7a 	b.w	8013e8c <_malloc_r>
 8018998:	b92a      	cbnz	r2, 80189a6 <_realloc_r+0x24>
 801899a:	f7fd fa9d 	bl	8015ed8 <_free_r>
 801899e:	4625      	mov	r5, r4
 80189a0:	4628      	mov	r0, r5
 80189a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189a6:	f000 f8b2 	bl	8018b0e <_malloc_usable_size_r>
 80189aa:	4284      	cmp	r4, r0
 80189ac:	4606      	mov	r6, r0
 80189ae:	d802      	bhi.n	80189b6 <_realloc_r+0x34>
 80189b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80189b4:	d8f4      	bhi.n	80189a0 <_realloc_r+0x1e>
 80189b6:	4621      	mov	r1, r4
 80189b8:	4638      	mov	r0, r7
 80189ba:	f7fb fa67 	bl	8013e8c <_malloc_r>
 80189be:	4680      	mov	r8, r0
 80189c0:	b908      	cbnz	r0, 80189c6 <_realloc_r+0x44>
 80189c2:	4645      	mov	r5, r8
 80189c4:	e7ec      	b.n	80189a0 <_realloc_r+0x1e>
 80189c6:	42b4      	cmp	r4, r6
 80189c8:	4622      	mov	r2, r4
 80189ca:	4629      	mov	r1, r5
 80189cc:	bf28      	it	cs
 80189ce:	4632      	movcs	r2, r6
 80189d0:	f7ff fc42 	bl	8018258 <memcpy>
 80189d4:	4629      	mov	r1, r5
 80189d6:	4638      	mov	r0, r7
 80189d8:	f7fd fa7e 	bl	8015ed8 <_free_r>
 80189dc:	e7f1      	b.n	80189c2 <_realloc_r+0x40>
	...

080189e0 <_strtoul_l.isra.0>:
 80189e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189e4:	4e34      	ldr	r6, [pc, #208]	@ (8018ab8 <_strtoul_l.isra.0+0xd8>)
 80189e6:	4686      	mov	lr, r0
 80189e8:	460d      	mov	r5, r1
 80189ea:	4628      	mov	r0, r5
 80189ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80189f0:	5d37      	ldrb	r7, [r6, r4]
 80189f2:	f017 0708 	ands.w	r7, r7, #8
 80189f6:	d1f8      	bne.n	80189ea <_strtoul_l.isra.0+0xa>
 80189f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80189fa:	d110      	bne.n	8018a1e <_strtoul_l.isra.0+0x3e>
 80189fc:	782c      	ldrb	r4, [r5, #0]
 80189fe:	2701      	movs	r7, #1
 8018a00:	1c85      	adds	r5, r0, #2
 8018a02:	f033 0010 	bics.w	r0, r3, #16
 8018a06:	d115      	bne.n	8018a34 <_strtoul_l.isra.0+0x54>
 8018a08:	2c30      	cmp	r4, #48	@ 0x30
 8018a0a:	d10d      	bne.n	8018a28 <_strtoul_l.isra.0+0x48>
 8018a0c:	7828      	ldrb	r0, [r5, #0]
 8018a0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018a12:	2858      	cmp	r0, #88	@ 0x58
 8018a14:	d108      	bne.n	8018a28 <_strtoul_l.isra.0+0x48>
 8018a16:	786c      	ldrb	r4, [r5, #1]
 8018a18:	3502      	adds	r5, #2
 8018a1a:	2310      	movs	r3, #16
 8018a1c:	e00a      	b.n	8018a34 <_strtoul_l.isra.0+0x54>
 8018a1e:	2c2b      	cmp	r4, #43	@ 0x2b
 8018a20:	bf04      	itt	eq
 8018a22:	782c      	ldrbeq	r4, [r5, #0]
 8018a24:	1c85      	addeq	r5, r0, #2
 8018a26:	e7ec      	b.n	8018a02 <_strtoul_l.isra.0+0x22>
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d1f6      	bne.n	8018a1a <_strtoul_l.isra.0+0x3a>
 8018a2c:	2c30      	cmp	r4, #48	@ 0x30
 8018a2e:	bf14      	ite	ne
 8018a30:	230a      	movne	r3, #10
 8018a32:	2308      	moveq	r3, #8
 8018a34:	f04f 38ff 	mov.w	r8, #4294967295
 8018a38:	2600      	movs	r6, #0
 8018a3a:	fbb8 f8f3 	udiv	r8, r8, r3
 8018a3e:	fb03 f908 	mul.w	r9, r3, r8
 8018a42:	ea6f 0909 	mvn.w	r9, r9
 8018a46:	4630      	mov	r0, r6
 8018a48:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018a4c:	f1bc 0f09 	cmp.w	ip, #9
 8018a50:	d810      	bhi.n	8018a74 <_strtoul_l.isra.0+0x94>
 8018a52:	4664      	mov	r4, ip
 8018a54:	42a3      	cmp	r3, r4
 8018a56:	dd1e      	ble.n	8018a96 <_strtoul_l.isra.0+0xb6>
 8018a58:	f1b6 3fff 	cmp.w	r6, #4294967295
 8018a5c:	d007      	beq.n	8018a6e <_strtoul_l.isra.0+0x8e>
 8018a5e:	4580      	cmp	r8, r0
 8018a60:	d316      	bcc.n	8018a90 <_strtoul_l.isra.0+0xb0>
 8018a62:	d101      	bne.n	8018a68 <_strtoul_l.isra.0+0x88>
 8018a64:	45a1      	cmp	r9, r4
 8018a66:	db13      	blt.n	8018a90 <_strtoul_l.isra.0+0xb0>
 8018a68:	fb00 4003 	mla	r0, r0, r3, r4
 8018a6c:	2601      	movs	r6, #1
 8018a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a72:	e7e9      	b.n	8018a48 <_strtoul_l.isra.0+0x68>
 8018a74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018a78:	f1bc 0f19 	cmp.w	ip, #25
 8018a7c:	d801      	bhi.n	8018a82 <_strtoul_l.isra.0+0xa2>
 8018a7e:	3c37      	subs	r4, #55	@ 0x37
 8018a80:	e7e8      	b.n	8018a54 <_strtoul_l.isra.0+0x74>
 8018a82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018a86:	f1bc 0f19 	cmp.w	ip, #25
 8018a8a:	d804      	bhi.n	8018a96 <_strtoul_l.isra.0+0xb6>
 8018a8c:	3c57      	subs	r4, #87	@ 0x57
 8018a8e:	e7e1      	b.n	8018a54 <_strtoul_l.isra.0+0x74>
 8018a90:	f04f 36ff 	mov.w	r6, #4294967295
 8018a94:	e7eb      	b.n	8018a6e <_strtoul_l.isra.0+0x8e>
 8018a96:	1c73      	adds	r3, r6, #1
 8018a98:	d106      	bne.n	8018aa8 <_strtoul_l.isra.0+0xc8>
 8018a9a:	2322      	movs	r3, #34	@ 0x22
 8018a9c:	f8ce 3000 	str.w	r3, [lr]
 8018aa0:	4630      	mov	r0, r6
 8018aa2:	b932      	cbnz	r2, 8018ab2 <_strtoul_l.isra.0+0xd2>
 8018aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018aa8:	b107      	cbz	r7, 8018aac <_strtoul_l.isra.0+0xcc>
 8018aaa:	4240      	negs	r0, r0
 8018aac:	2a00      	cmp	r2, #0
 8018aae:	d0f9      	beq.n	8018aa4 <_strtoul_l.isra.0+0xc4>
 8018ab0:	b106      	cbz	r6, 8018ab4 <_strtoul_l.isra.0+0xd4>
 8018ab2:	1e69      	subs	r1, r5, #1
 8018ab4:	6011      	str	r1, [r2, #0]
 8018ab6:	e7f5      	b.n	8018aa4 <_strtoul_l.isra.0+0xc4>
 8018ab8:	08019469 	.word	0x08019469

08018abc <_strtoul_r>:
 8018abc:	f7ff bf90 	b.w	80189e0 <_strtoul_l.isra.0>

08018ac0 <__ascii_wctomb>:
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	4608      	mov	r0, r1
 8018ac4:	b141      	cbz	r1, 8018ad8 <__ascii_wctomb+0x18>
 8018ac6:	2aff      	cmp	r2, #255	@ 0xff
 8018ac8:	d904      	bls.n	8018ad4 <__ascii_wctomb+0x14>
 8018aca:	228a      	movs	r2, #138	@ 0x8a
 8018acc:	601a      	str	r2, [r3, #0]
 8018ace:	f04f 30ff 	mov.w	r0, #4294967295
 8018ad2:	4770      	bx	lr
 8018ad4:	700a      	strb	r2, [r1, #0]
 8018ad6:	2001      	movs	r0, #1
 8018ad8:	4770      	bx	lr
	...

08018adc <fiprintf>:
 8018adc:	b40e      	push	{r1, r2, r3}
 8018ade:	b503      	push	{r0, r1, lr}
 8018ae0:	4601      	mov	r1, r0
 8018ae2:	ab03      	add	r3, sp, #12
 8018ae4:	4805      	ldr	r0, [pc, #20]	@ (8018afc <fiprintf+0x20>)
 8018ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018aea:	6800      	ldr	r0, [r0, #0]
 8018aec:	9301      	str	r3, [sp, #4]
 8018aee:	f000 f83f 	bl	8018b70 <_vfiprintf_r>
 8018af2:	b002      	add	sp, #8
 8018af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018af8:	b003      	add	sp, #12
 8018afa:	4770      	bx	lr
 8018afc:	20000304 	.word	0x20000304

08018b00 <abort>:
 8018b00:	b508      	push	{r3, lr}
 8018b02:	2006      	movs	r0, #6
 8018b04:	f000 f974 	bl	8018df0 <raise>
 8018b08:	2001      	movs	r0, #1
 8018b0a:	f7f5 f8b1 	bl	800dc70 <_exit>

08018b0e <_malloc_usable_size_r>:
 8018b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b12:	1f18      	subs	r0, r3, #4
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	bfbc      	itt	lt
 8018b18:	580b      	ldrlt	r3, [r1, r0]
 8018b1a:	18c0      	addlt	r0, r0, r3
 8018b1c:	4770      	bx	lr

08018b1e <__sfputc_r>:
 8018b1e:	6893      	ldr	r3, [r2, #8]
 8018b20:	3b01      	subs	r3, #1
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	b410      	push	{r4}
 8018b26:	6093      	str	r3, [r2, #8]
 8018b28:	da08      	bge.n	8018b3c <__sfputc_r+0x1e>
 8018b2a:	6994      	ldr	r4, [r2, #24]
 8018b2c:	42a3      	cmp	r3, r4
 8018b2e:	db01      	blt.n	8018b34 <__sfputc_r+0x16>
 8018b30:	290a      	cmp	r1, #10
 8018b32:	d103      	bne.n	8018b3c <__sfputc_r+0x1e>
 8018b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b38:	f7fc ba23 	b.w	8014f82 <__swbuf_r>
 8018b3c:	6813      	ldr	r3, [r2, #0]
 8018b3e:	1c58      	adds	r0, r3, #1
 8018b40:	6010      	str	r0, [r2, #0]
 8018b42:	7019      	strb	r1, [r3, #0]
 8018b44:	4608      	mov	r0, r1
 8018b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b4a:	4770      	bx	lr

08018b4c <__sfputs_r>:
 8018b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b4e:	4606      	mov	r6, r0
 8018b50:	460f      	mov	r7, r1
 8018b52:	4614      	mov	r4, r2
 8018b54:	18d5      	adds	r5, r2, r3
 8018b56:	42ac      	cmp	r4, r5
 8018b58:	d101      	bne.n	8018b5e <__sfputs_r+0x12>
 8018b5a:	2000      	movs	r0, #0
 8018b5c:	e007      	b.n	8018b6e <__sfputs_r+0x22>
 8018b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b62:	463a      	mov	r2, r7
 8018b64:	4630      	mov	r0, r6
 8018b66:	f7ff ffda 	bl	8018b1e <__sfputc_r>
 8018b6a:	1c43      	adds	r3, r0, #1
 8018b6c:	d1f3      	bne.n	8018b56 <__sfputs_r+0xa>
 8018b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018b70 <_vfiprintf_r>:
 8018b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b74:	460d      	mov	r5, r1
 8018b76:	b09d      	sub	sp, #116	@ 0x74
 8018b78:	4614      	mov	r4, r2
 8018b7a:	4698      	mov	r8, r3
 8018b7c:	4606      	mov	r6, r0
 8018b7e:	b118      	cbz	r0, 8018b88 <_vfiprintf_r+0x18>
 8018b80:	6a03      	ldr	r3, [r0, #32]
 8018b82:	b90b      	cbnz	r3, 8018b88 <_vfiprintf_r+0x18>
 8018b84:	f7fc f8fe 	bl	8014d84 <__sinit>
 8018b88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b8a:	07d9      	lsls	r1, r3, #31
 8018b8c:	d405      	bmi.n	8018b9a <_vfiprintf_r+0x2a>
 8018b8e:	89ab      	ldrh	r3, [r5, #12]
 8018b90:	059a      	lsls	r2, r3, #22
 8018b92:	d402      	bmi.n	8018b9a <_vfiprintf_r+0x2a>
 8018b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b96:	f7fc fb36 	bl	8015206 <__retarget_lock_acquire_recursive>
 8018b9a:	89ab      	ldrh	r3, [r5, #12]
 8018b9c:	071b      	lsls	r3, r3, #28
 8018b9e:	d501      	bpl.n	8018ba4 <_vfiprintf_r+0x34>
 8018ba0:	692b      	ldr	r3, [r5, #16]
 8018ba2:	b99b      	cbnz	r3, 8018bcc <_vfiprintf_r+0x5c>
 8018ba4:	4629      	mov	r1, r5
 8018ba6:	4630      	mov	r0, r6
 8018ba8:	f7fc fa2a 	bl	8015000 <__swsetup_r>
 8018bac:	b170      	cbz	r0, 8018bcc <_vfiprintf_r+0x5c>
 8018bae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018bb0:	07dc      	lsls	r4, r3, #31
 8018bb2:	d504      	bpl.n	8018bbe <_vfiprintf_r+0x4e>
 8018bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8018bb8:	b01d      	add	sp, #116	@ 0x74
 8018bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bbe:	89ab      	ldrh	r3, [r5, #12]
 8018bc0:	0598      	lsls	r0, r3, #22
 8018bc2:	d4f7      	bmi.n	8018bb4 <_vfiprintf_r+0x44>
 8018bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018bc6:	f7fc fb1f 	bl	8015208 <__retarget_lock_release_recursive>
 8018bca:	e7f3      	b.n	8018bb4 <_vfiprintf_r+0x44>
 8018bcc:	2300      	movs	r3, #0
 8018bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8018bd0:	2320      	movs	r3, #32
 8018bd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bda:	2330      	movs	r3, #48	@ 0x30
 8018bdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018d8c <_vfiprintf_r+0x21c>
 8018be0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018be4:	f04f 0901 	mov.w	r9, #1
 8018be8:	4623      	mov	r3, r4
 8018bea:	469a      	mov	sl, r3
 8018bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018bf0:	b10a      	cbz	r2, 8018bf6 <_vfiprintf_r+0x86>
 8018bf2:	2a25      	cmp	r2, #37	@ 0x25
 8018bf4:	d1f9      	bne.n	8018bea <_vfiprintf_r+0x7a>
 8018bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8018bfa:	d00b      	beq.n	8018c14 <_vfiprintf_r+0xa4>
 8018bfc:	465b      	mov	r3, fp
 8018bfe:	4622      	mov	r2, r4
 8018c00:	4629      	mov	r1, r5
 8018c02:	4630      	mov	r0, r6
 8018c04:	f7ff ffa2 	bl	8018b4c <__sfputs_r>
 8018c08:	3001      	adds	r0, #1
 8018c0a:	f000 80a7 	beq.w	8018d5c <_vfiprintf_r+0x1ec>
 8018c0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c10:	445a      	add	r2, fp
 8018c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c14:	f89a 3000 	ldrb.w	r3, [sl]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	f000 809f 	beq.w	8018d5c <_vfiprintf_r+0x1ec>
 8018c1e:	2300      	movs	r3, #0
 8018c20:	f04f 32ff 	mov.w	r2, #4294967295
 8018c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c28:	f10a 0a01 	add.w	sl, sl, #1
 8018c2c:	9304      	str	r3, [sp, #16]
 8018c2e:	9307      	str	r3, [sp, #28]
 8018c30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018c34:	931a      	str	r3, [sp, #104]	@ 0x68
 8018c36:	4654      	mov	r4, sl
 8018c38:	2205      	movs	r2, #5
 8018c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c3e:	4853      	ldr	r0, [pc, #332]	@ (8018d8c <_vfiprintf_r+0x21c>)
 8018c40:	f7ef faf6 	bl	8008230 <memchr>
 8018c44:	9a04      	ldr	r2, [sp, #16]
 8018c46:	b9d8      	cbnz	r0, 8018c80 <_vfiprintf_r+0x110>
 8018c48:	06d1      	lsls	r1, r2, #27
 8018c4a:	bf44      	itt	mi
 8018c4c:	2320      	movmi	r3, #32
 8018c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c52:	0713      	lsls	r3, r2, #28
 8018c54:	bf44      	itt	mi
 8018c56:	232b      	movmi	r3, #43	@ 0x2b
 8018c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8018c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c62:	d015      	beq.n	8018c90 <_vfiprintf_r+0x120>
 8018c64:	9a07      	ldr	r2, [sp, #28]
 8018c66:	4654      	mov	r4, sl
 8018c68:	2000      	movs	r0, #0
 8018c6a:	f04f 0c0a 	mov.w	ip, #10
 8018c6e:	4621      	mov	r1, r4
 8018c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c74:	3b30      	subs	r3, #48	@ 0x30
 8018c76:	2b09      	cmp	r3, #9
 8018c78:	d94b      	bls.n	8018d12 <_vfiprintf_r+0x1a2>
 8018c7a:	b1b0      	cbz	r0, 8018caa <_vfiprintf_r+0x13a>
 8018c7c:	9207      	str	r2, [sp, #28]
 8018c7e:	e014      	b.n	8018caa <_vfiprintf_r+0x13a>
 8018c80:	eba0 0308 	sub.w	r3, r0, r8
 8018c84:	fa09 f303 	lsl.w	r3, r9, r3
 8018c88:	4313      	orrs	r3, r2
 8018c8a:	9304      	str	r3, [sp, #16]
 8018c8c:	46a2      	mov	sl, r4
 8018c8e:	e7d2      	b.n	8018c36 <_vfiprintf_r+0xc6>
 8018c90:	9b03      	ldr	r3, [sp, #12]
 8018c92:	1d19      	adds	r1, r3, #4
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	9103      	str	r1, [sp, #12]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	bfbb      	ittet	lt
 8018c9c:	425b      	neglt	r3, r3
 8018c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8018ca2:	9307      	strge	r3, [sp, #28]
 8018ca4:	9307      	strlt	r3, [sp, #28]
 8018ca6:	bfb8      	it	lt
 8018ca8:	9204      	strlt	r2, [sp, #16]
 8018caa:	7823      	ldrb	r3, [r4, #0]
 8018cac:	2b2e      	cmp	r3, #46	@ 0x2e
 8018cae:	d10a      	bne.n	8018cc6 <_vfiprintf_r+0x156>
 8018cb0:	7863      	ldrb	r3, [r4, #1]
 8018cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8018cb4:	d132      	bne.n	8018d1c <_vfiprintf_r+0x1ac>
 8018cb6:	9b03      	ldr	r3, [sp, #12]
 8018cb8:	1d1a      	adds	r2, r3, #4
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	9203      	str	r2, [sp, #12]
 8018cbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018cc2:	3402      	adds	r4, #2
 8018cc4:	9305      	str	r3, [sp, #20]
 8018cc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018d9c <_vfiprintf_r+0x22c>
 8018cca:	7821      	ldrb	r1, [r4, #0]
 8018ccc:	2203      	movs	r2, #3
 8018cce:	4650      	mov	r0, sl
 8018cd0:	f7ef faae 	bl	8008230 <memchr>
 8018cd4:	b138      	cbz	r0, 8018ce6 <_vfiprintf_r+0x176>
 8018cd6:	9b04      	ldr	r3, [sp, #16]
 8018cd8:	eba0 000a 	sub.w	r0, r0, sl
 8018cdc:	2240      	movs	r2, #64	@ 0x40
 8018cde:	4082      	lsls	r2, r0
 8018ce0:	4313      	orrs	r3, r2
 8018ce2:	3401      	adds	r4, #1
 8018ce4:	9304      	str	r3, [sp, #16]
 8018ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cea:	4829      	ldr	r0, [pc, #164]	@ (8018d90 <_vfiprintf_r+0x220>)
 8018cec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018cf0:	2206      	movs	r2, #6
 8018cf2:	f7ef fa9d 	bl	8008230 <memchr>
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	d03f      	beq.n	8018d7a <_vfiprintf_r+0x20a>
 8018cfa:	4b26      	ldr	r3, [pc, #152]	@ (8018d94 <_vfiprintf_r+0x224>)
 8018cfc:	bb1b      	cbnz	r3, 8018d46 <_vfiprintf_r+0x1d6>
 8018cfe:	9b03      	ldr	r3, [sp, #12]
 8018d00:	3307      	adds	r3, #7
 8018d02:	f023 0307 	bic.w	r3, r3, #7
 8018d06:	3308      	adds	r3, #8
 8018d08:	9303      	str	r3, [sp, #12]
 8018d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d0c:	443b      	add	r3, r7
 8018d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d10:	e76a      	b.n	8018be8 <_vfiprintf_r+0x78>
 8018d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d16:	460c      	mov	r4, r1
 8018d18:	2001      	movs	r0, #1
 8018d1a:	e7a8      	b.n	8018c6e <_vfiprintf_r+0xfe>
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	3401      	adds	r4, #1
 8018d20:	9305      	str	r3, [sp, #20]
 8018d22:	4619      	mov	r1, r3
 8018d24:	f04f 0c0a 	mov.w	ip, #10
 8018d28:	4620      	mov	r0, r4
 8018d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d2e:	3a30      	subs	r2, #48	@ 0x30
 8018d30:	2a09      	cmp	r2, #9
 8018d32:	d903      	bls.n	8018d3c <_vfiprintf_r+0x1cc>
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d0c6      	beq.n	8018cc6 <_vfiprintf_r+0x156>
 8018d38:	9105      	str	r1, [sp, #20]
 8018d3a:	e7c4      	b.n	8018cc6 <_vfiprintf_r+0x156>
 8018d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d40:	4604      	mov	r4, r0
 8018d42:	2301      	movs	r3, #1
 8018d44:	e7f0      	b.n	8018d28 <_vfiprintf_r+0x1b8>
 8018d46:	ab03      	add	r3, sp, #12
 8018d48:	9300      	str	r3, [sp, #0]
 8018d4a:	462a      	mov	r2, r5
 8018d4c:	4b12      	ldr	r3, [pc, #72]	@ (8018d98 <_vfiprintf_r+0x228>)
 8018d4e:	a904      	add	r1, sp, #16
 8018d50:	4630      	mov	r0, r6
 8018d52:	f7fb f9c7 	bl	80140e4 <_printf_float>
 8018d56:	4607      	mov	r7, r0
 8018d58:	1c78      	adds	r0, r7, #1
 8018d5a:	d1d6      	bne.n	8018d0a <_vfiprintf_r+0x19a>
 8018d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d5e:	07d9      	lsls	r1, r3, #31
 8018d60:	d405      	bmi.n	8018d6e <_vfiprintf_r+0x1fe>
 8018d62:	89ab      	ldrh	r3, [r5, #12]
 8018d64:	059a      	lsls	r2, r3, #22
 8018d66:	d402      	bmi.n	8018d6e <_vfiprintf_r+0x1fe>
 8018d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d6a:	f7fc fa4d 	bl	8015208 <__retarget_lock_release_recursive>
 8018d6e:	89ab      	ldrh	r3, [r5, #12]
 8018d70:	065b      	lsls	r3, r3, #25
 8018d72:	f53f af1f 	bmi.w	8018bb4 <_vfiprintf_r+0x44>
 8018d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d78:	e71e      	b.n	8018bb8 <_vfiprintf_r+0x48>
 8018d7a:	ab03      	add	r3, sp, #12
 8018d7c:	9300      	str	r3, [sp, #0]
 8018d7e:	462a      	mov	r2, r5
 8018d80:	4b05      	ldr	r3, [pc, #20]	@ (8018d98 <_vfiprintf_r+0x228>)
 8018d82:	a904      	add	r1, sp, #16
 8018d84:	4630      	mov	r0, r6
 8018d86:	f7fb fc45 	bl	8014614 <_printf_i>
 8018d8a:	e7e4      	b.n	8018d56 <_vfiprintf_r+0x1e6>
 8018d8c:	0801924b 	.word	0x0801924b
 8018d90:	08019255 	.word	0x08019255
 8018d94:	080140e5 	.word	0x080140e5
 8018d98:	08018b4d 	.word	0x08018b4d
 8018d9c:	08019251 	.word	0x08019251

08018da0 <_raise_r>:
 8018da0:	291f      	cmp	r1, #31
 8018da2:	b538      	push	{r3, r4, r5, lr}
 8018da4:	4605      	mov	r5, r0
 8018da6:	460c      	mov	r4, r1
 8018da8:	d904      	bls.n	8018db4 <_raise_r+0x14>
 8018daa:	2316      	movs	r3, #22
 8018dac:	6003      	str	r3, [r0, #0]
 8018dae:	f04f 30ff 	mov.w	r0, #4294967295
 8018db2:	bd38      	pop	{r3, r4, r5, pc}
 8018db4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018db6:	b112      	cbz	r2, 8018dbe <_raise_r+0x1e>
 8018db8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018dbc:	b94b      	cbnz	r3, 8018dd2 <_raise_r+0x32>
 8018dbe:	4628      	mov	r0, r5
 8018dc0:	f000 f830 	bl	8018e24 <_getpid_r>
 8018dc4:	4622      	mov	r2, r4
 8018dc6:	4601      	mov	r1, r0
 8018dc8:	4628      	mov	r0, r5
 8018dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018dce:	f000 b817 	b.w	8018e00 <_kill_r>
 8018dd2:	2b01      	cmp	r3, #1
 8018dd4:	d00a      	beq.n	8018dec <_raise_r+0x4c>
 8018dd6:	1c59      	adds	r1, r3, #1
 8018dd8:	d103      	bne.n	8018de2 <_raise_r+0x42>
 8018dda:	2316      	movs	r3, #22
 8018ddc:	6003      	str	r3, [r0, #0]
 8018dde:	2001      	movs	r0, #1
 8018de0:	e7e7      	b.n	8018db2 <_raise_r+0x12>
 8018de2:	2100      	movs	r1, #0
 8018de4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018de8:	4620      	mov	r0, r4
 8018dea:	4798      	blx	r3
 8018dec:	2000      	movs	r0, #0
 8018dee:	e7e0      	b.n	8018db2 <_raise_r+0x12>

08018df0 <raise>:
 8018df0:	4b02      	ldr	r3, [pc, #8]	@ (8018dfc <raise+0xc>)
 8018df2:	4601      	mov	r1, r0
 8018df4:	6818      	ldr	r0, [r3, #0]
 8018df6:	f7ff bfd3 	b.w	8018da0 <_raise_r>
 8018dfa:	bf00      	nop
 8018dfc:	20000304 	.word	0x20000304

08018e00 <_kill_r>:
 8018e00:	b538      	push	{r3, r4, r5, lr}
 8018e02:	4d07      	ldr	r5, [pc, #28]	@ (8018e20 <_kill_r+0x20>)
 8018e04:	2300      	movs	r3, #0
 8018e06:	4604      	mov	r4, r0
 8018e08:	4608      	mov	r0, r1
 8018e0a:	4611      	mov	r1, r2
 8018e0c:	602b      	str	r3, [r5, #0]
 8018e0e:	f7f4 ff1f 	bl	800dc50 <_kill>
 8018e12:	1c43      	adds	r3, r0, #1
 8018e14:	d102      	bne.n	8018e1c <_kill_r+0x1c>
 8018e16:	682b      	ldr	r3, [r5, #0]
 8018e18:	b103      	cbz	r3, 8018e1c <_kill_r+0x1c>
 8018e1a:	6023      	str	r3, [r4, #0]
 8018e1c:	bd38      	pop	{r3, r4, r5, pc}
 8018e1e:	bf00      	nop
 8018e20:	20000a38 	.word	0x20000a38

08018e24 <_getpid_r>:
 8018e24:	f7f4 bf0c 	b.w	800dc40 <_getpid>

08018e28 <roundf>:
 8018e28:	ee10 0a10 	vmov	r0, s0
 8018e2c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8018e30:	3a7f      	subs	r2, #127	@ 0x7f
 8018e32:	2a16      	cmp	r2, #22
 8018e34:	dc15      	bgt.n	8018e62 <roundf+0x3a>
 8018e36:	2a00      	cmp	r2, #0
 8018e38:	da08      	bge.n	8018e4c <roundf+0x24>
 8018e3a:	3201      	adds	r2, #1
 8018e3c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8018e40:	d101      	bne.n	8018e46 <roundf+0x1e>
 8018e42:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8018e46:	ee00 3a10 	vmov	s0, r3
 8018e4a:	4770      	bx	lr
 8018e4c:	4907      	ldr	r1, [pc, #28]	@ (8018e6c <roundf+0x44>)
 8018e4e:	4111      	asrs	r1, r2
 8018e50:	4201      	tst	r1, r0
 8018e52:	d0fa      	beq.n	8018e4a <roundf+0x22>
 8018e54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8018e58:	4113      	asrs	r3, r2
 8018e5a:	4403      	add	r3, r0
 8018e5c:	ea23 0301 	bic.w	r3, r3, r1
 8018e60:	e7f1      	b.n	8018e46 <roundf+0x1e>
 8018e62:	2a80      	cmp	r2, #128	@ 0x80
 8018e64:	d1f1      	bne.n	8018e4a <roundf+0x22>
 8018e66:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018e6a:	4770      	bx	lr
 8018e6c:	007fffff 	.word	0x007fffff

08018e70 <_init>:
 8018e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e72:	bf00      	nop
 8018e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e76:	bc08      	pop	{r3}
 8018e78:	469e      	mov	lr, r3
 8018e7a:	4770      	bx	lr

08018e7c <_fini>:
 8018e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e7e:	bf00      	nop
 8018e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e82:	bc08      	pop	{r3}
 8018e84:	469e      	mov	lr, r3
 8018e86:	4770      	bx	lr
